!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ACTIVE	include/trx0types.h	/^    ACTIVE,$/;"	e	enum:Rsegs::undo_space_states
ADAPTER_SEND_BUFFER_SIZE	include/row0pread-adapter.h	/^  static constexpr size_t ADAPTER_SEND_BUFFER_SIZE = 2 * 1024 * 1024;$/;"	m	class:Parallel_reader_adapter
ADDED_TABLE_SYNCED	include/fts0fts.h	/^  ADDED_TABLE_SYNCED = 8, \/*!< TRUE if the ADDED table record is$/;"	e	enum:fts_status
ADD_THREAD_STARTED	include/fts0fts.h	/^  ADD_THREAD_STARTED = 4, \/*!< TRUE if the FTS add thread$/;"	e	enum:fts_status
AES	include/os0enc.h	/^    AES = 1,$/;"	e	enum:Encryption::Type
AIO	os/os0file.cc	/^AIO::AIO(latch_id_t id, ulint n, ulint segments)$/;"	f	class:AIO
AIO	os/os0file.cc	/^class AIO {$/;"	c	file:
AIOHandler	os/os0file.cc	/^class AIOHandler {$/;"	c	file:
AIO_mode	include/os0file.h	/^enum class AIO_mode : size_t {$/;"	c
ALLOWED_TO_START	include/os0thread.h	/^  enum class State { INVALID, NOT_STARTED, ALLOWED_TO_START, STARTED, STOPPED };$/;"	m	class:IB_thread::State
ALTER_ENCRYPT_TABLESPACE_LOG	include/log0ddl.h	/^  ALTER_ENCRYPT_TABLESPACE_LOG,$/;"	m	class:Log_Type
ALTER_UNENCRYPT_TABLESPACE_LOG	include/log0ddl.h	/^  ALTER_UNENCRYPT_TABLESPACE_LOG,$/;"	m	class:Log_Type
ALT_PART_SEPARATOR	include/dict0types.h	/^constexpr char ALT_PART_SEPARATOR[] = "#P#";$/;"	m	namespace:dict_name
ALT_SUB_PART_SEPARATOR	include/dict0types.h	/^constexpr char ALT_SUB_PART_SEPARATOR[] = "#SP#";$/;"	m	namespace:dict_name
ARCH_ARCH_INCLUDE	include/arch0arch.h	33;"	d
ARCH_BLK_PAGE_ID_SIZE	include/arch0page.h	/^constexpr uint ARCH_BLK_PAGE_ID_SIZE = 8;$/;"	v
ARCH_BLK_PAGE_NO_OFFSET	include/arch0page.h	/^constexpr uint ARCH_BLK_PAGE_NO_OFFSET = 4;$/;"	v
ARCH_BLK_SPCE_ID_OFFSET	include/arch0page.h	/^constexpr uint ARCH_BLK_SPCE_ID_OFFSET = 0;$/;"	v
ARCH_BLOCK_ACTIVE	include/arch0arch.h	/^  ARCH_BLOCK_ACTIVE,$/;"	e	enum:Arch_Blk_State
ARCH_BLOCK_FLUSHED	include/arch0arch.h	/^  ARCH_BLOCK_FLUSHED$/;"	e	enum:Arch_Blk_State
ARCH_BLOCK_INIT	include/arch0arch.h	/^  ARCH_BLOCK_INIT = 0,$/;"	e	enum:Arch_Blk_State
ARCH_BLOCK_READY_TO_FLUSH	include/arch0arch.h	/^  ARCH_BLOCK_READY_TO_FLUSH,$/;"	e	enum:Arch_Blk_State
ARCH_CLIENT_STATE_INIT	include/arch0arch.h	/^  ARCH_CLIENT_STATE_INIT = 0,$/;"	e	enum:Arch_Client_State
ARCH_CLIENT_STATE_STARTED	include/arch0arch.h	/^  ARCH_CLIENT_STATE_STARTED,$/;"	e	enum:Arch_Client_State
ARCH_CLIENT_STATE_STOPPED	include/arch0arch.h	/^  ARCH_CLIENT_STATE_STOPPED$/;"	e	enum:Arch_Client_State
ARCH_DATA_BLOCK	include/arch0arch.h	/^  ARCH_DATA_BLOCK$/;"	e	enum:Arch_Blk_Type
ARCH_DBLWR_DIR	include/arch0page.h	/^constexpr char ARCH_DBLWR_DIR[] = "ib_dblwr";$/;"	v
ARCH_DBLWR_FILE	include/arch0page.h	/^constexpr char ARCH_DBLWR_FILE[] = "dblwr_";$/;"	v
ARCH_DBLWR_FILE_CAPACITY	include/arch0page.h	/^constexpr uint ARCH_DBLWR_FILE_CAPACITY = 3;$/;"	v
ARCH_DBLWR_NUM_FILES	include/arch0page.h	/^constexpr uint ARCH_DBLWR_NUM_FILES = 1;$/;"	v
ARCH_DIR	include/arch0arch.h	/^const char ARCH_DIR[] = OS_FILE_PREFIX "ib_archive";$/;"	v
ARCH_FLUSH_NORMAL	include/arch0arch.h	/^  ARCH_FLUSH_NORMAL = 0,$/;"	e	enum:Arch_Blk_Flush_Type
ARCH_FLUSH_PARTIAL	include/arch0arch.h	/^  ARCH_FLUSH_PARTIAL$/;"	e	enum:Arch_Blk_Flush_Type
ARCH_LOG_CHUNK_SIZE	arch/arch0log.cc	/^const uint ARCH_LOG_CHUNK_SIZE = 1024 * 1024;$/;"	v
ARCH_LOG_DIR	include/arch0arch.h	/^const char ARCH_LOG_DIR[] = "log_group_";$/;"	v
ARCH_LOG_FILE	include/arch0arch.h	/^const char ARCH_LOG_FILE[] = "ib_log_";$/;"	v
ARCH_LOG_INCLUDE	include/arch0log.h	33;"	d
ARCH_PAGE_BLK_HEADER_CHECKSUM_OFFSET	include/arch0page.h	/^constexpr uint ARCH_PAGE_BLK_HEADER_CHECKSUM_OFFSET = 2;$/;"	v
ARCH_PAGE_BLK_HEADER_DATA_LEN_OFFSET	include/arch0page.h	/^constexpr uint ARCH_PAGE_BLK_HEADER_DATA_LEN_OFFSET = 6;$/;"	v
ARCH_PAGE_BLK_HEADER_LENGTH	include/arch0page.h	/^constexpr uint ARCH_PAGE_BLK_HEADER_LENGTH = 32;$/;"	v
ARCH_PAGE_BLK_HEADER_NUMBER_OFFSET	include/arch0page.h	/^constexpr uint ARCH_PAGE_BLK_HEADER_NUMBER_OFFSET = 24;$/;"	v
ARCH_PAGE_BLK_HEADER_RESET_LSN_OFFSET	include/arch0page.h	/^constexpr uint ARCH_PAGE_BLK_HEADER_RESET_LSN_OFFSET = 16;$/;"	v
ARCH_PAGE_BLK_HEADER_STOP_LSN_OFFSET	include/arch0page.h	/^constexpr uint ARCH_PAGE_BLK_HEADER_STOP_LSN_OFFSET = 8;$/;"	v
ARCH_PAGE_BLK_HEADER_TYPE_OFFSET	include/arch0page.h	/^constexpr uint ARCH_PAGE_BLK_HEADER_TYPE_OFFSET = 1;$/;"	v
ARCH_PAGE_BLK_HEADER_VERSION_OFFSET	include/arch0page.h	/^constexpr uint ARCH_PAGE_BLK_HEADER_VERSION_OFFSET = 0;$/;"	v
ARCH_PAGE_BLK_SIZE	include/arch0arch.h	/^constexpr uint ARCH_PAGE_BLK_SIZE = UNIV_PAGE_SIZE_DEF;$/;"	v
ARCH_PAGE_DBLWR_FULL_FLUSH_PAGE	include/arch0arch.h	/^  ARCH_PAGE_DBLWR_FULL_FLUSH_PAGE,$/;"	e	enum:Arch_Page_Dblwr_Offset
ARCH_PAGE_DBLWR_PARTIAL_FLUSH_PAGE	include/arch0arch.h	/^  ARCH_PAGE_DBLWR_PARTIAL_FLUSH_PAGE$/;"	e	enum:Arch_Page_Dblwr_Offset
ARCH_PAGE_DBLWR_RESET_PAGE	include/arch0arch.h	/^  ARCH_PAGE_DBLWR_RESET_PAGE = 0,$/;"	e	enum:Arch_Page_Dblwr_Offset
ARCH_PAGE_DIR	include/arch0arch.h	/^const char ARCH_PAGE_DIR[] = "page_group_";$/;"	v
ARCH_PAGE_FILE	include/arch0arch.h	/^const char ARCH_PAGE_FILE[] = "ib_page_";$/;"	v
ARCH_PAGE_FILE_CAPACITY	arch/arch0page.cc	/^uint ARCH_PAGE_FILE_CAPACITY =$/;"	v
ARCH_PAGE_FILE_CAPACITY	include/arch0page.h	/^constexpr uint ARCH_PAGE_FILE_CAPACITY =$/;"	v
ARCH_PAGE_FILE_DATA_CAPACITY	arch/arch0page.cc	/^uint ARCH_PAGE_FILE_DATA_CAPACITY =$/;"	v
ARCH_PAGE_FILE_DATA_CAPACITY	include/arch0page.h	/^constexpr uint ARCH_PAGE_FILE_DATA_CAPACITY =$/;"	v
ARCH_PAGE_FILE_HDR_SIZE	include/arch0page.h	/^constexpr uint ARCH_PAGE_FILE_HDR_SIZE =$/;"	v
ARCH_PAGE_FILE_HEADER_RESET_BLOCK_NUM_SIZE	include/arch0page.h	/^constexpr uint ARCH_PAGE_FILE_HEADER_RESET_BLOCK_NUM_SIZE = 2;$/;"	v
ARCH_PAGE_FILE_HEADER_RESET_BLOCK_OFFSET_SIZE	include/arch0page.h	/^constexpr uint ARCH_PAGE_FILE_HEADER_RESET_BLOCK_OFFSET_SIZE = 2;$/;"	v
ARCH_PAGE_FILE_HEADER_RESET_LSN_SIZE	include/arch0page.h	/^constexpr uint ARCH_PAGE_FILE_HEADER_RESET_LSN_SIZE = 8;$/;"	v
ARCH_PAGE_FILE_HEADER_RESET_POS_SIZE	include/arch0page.h	/^constexpr uint ARCH_PAGE_FILE_HEADER_RESET_POS_SIZE =$/;"	v
ARCH_PAGE_FILE_NUM_RESET_PAGE	include/arch0page.h	/^constexpr uint ARCH_PAGE_FILE_NUM_RESET_PAGE = 1;$/;"	v
ARCH_PAGE_FILE_VERSION	include/arch0page.h	/^constexpr uint ARCH_PAGE_FILE_VERSION = 1;$/;"	v
ARCH_PAGE_GROUP_ACTIVE_FILE_NAME	include/arch0page.h	/^constexpr char ARCH_PAGE_GROUP_ACTIVE_FILE_NAME[] = "active";$/;"	v
ARCH_PAGE_GROUP_DURABLE_FILE_NAME	include/arch0arch.h	/^constexpr char ARCH_PAGE_GROUP_DURABLE_FILE_NAME[] = "durable";$/;"	v
ARCH_PAGE_INCLUDE	include/arch0page.h	33;"	d
ARCH_PAGE_NUM_BLKS	include/arch0page.h	/^constexpr uint ARCH_PAGE_NUM_BLKS = 32;$/;"	v
ARCH_PAGE_RESET_THRESHOLD	include/arch0page.h	/^constexpr uint ARCH_PAGE_RESET_THRESHOLD =$/;"	v
ARCH_RECV_INCLUDE	include/arch0recv.h	34;"	d
ARCH_RESET_BLOCK	include/arch0arch.h	/^  ARCH_RESET_BLOCK = 0,$/;"	e	enum:Arch_Blk_Type
ARCH_STATE_ABORT	include/arch0arch.h	/^  ARCH_STATE_ABORT$/;"	e	enum:Arch_State
ARCH_STATE_ACTIVE	include/arch0arch.h	/^  ARCH_STATE_ACTIVE,$/;"	e	enum:Arch_State
ARCH_STATE_IDLE	include/arch0arch.h	/^  ARCH_STATE_IDLE,$/;"	e	enum:Arch_State
ARCH_STATE_INIT	include/arch0arch.h	/^  ARCH_STATE_INIT = 0,$/;"	e	enum:Arch_State
ARCH_STATE_PREPARE_IDLE	include/arch0arch.h	/^  ARCH_STATE_PREPARE_IDLE,$/;"	e	enum:Arch_State
ARCH_STATE_READ_ONLY	include/arch0arch.h	/^  ARCH_STATE_READ_ONLY,$/;"	e	enum:Arch_State
ASSERT_ZERO	page/page0zip.cc	99;"	d	file:
ASSERT_ZERO_BLOB	page/page0zip.cc	104;"	d	file:
ATTRIB_USED_ONLY_IN_DEBUG	trx/trx0rec.cc	2450;"	d	file:
ATTRIB_USED_ONLY_IN_DEBUG	trx/trx0rec.cc	2452;"	d	file:
AT_LEAST_STATEMENT	include/lock0lock.h	/^  AT_LEAST_STATEMENT = 1,$/;"	m	class:lock_duration_t
AUTOINC_NEW_STYLE_LOCKING	handler/ha_innodb.cc	/^static const long AUTOINC_NEW_STYLE_LOCKING = 1;$/;"	v	file:
AUTOINC_NO_LOCKING	handler/ha_innodb.cc	/^static const long AUTOINC_NO_LOCKING = 2;$/;"	v	file:
AUTOINC_OLD_STYLE_LOCKING	handler/ha_innodb.cc	/^static const long AUTOINC_OLD_STYLE_LOCKING = 0;$/;"	v	file:
AVOID	include/ut0lock_free_hash.h	/^  static const uint64_t AVOID = UNUSED - 1;$/;"	m	class:ut_lock_free_hash_t
AbstractCallback	row/row0import.cc	/^class AbstractCallback : public PageCallback {$/;"	c	file:
Adaptive_flush	buf/buf0flu.cc	/^namespace Adaptive_flush {$/;"	n	file:
Add_dirty_blocks_to_flush_list	mtr/mtr0mtr.cc	/^Add_dirty_blocks_to_flush_list::Add_dirty_blocks_to_flush_list($/;"	f	class:Add_dirty_blocks_to_flush_list
Add_dirty_blocks_to_flush_list	mtr/mtr0mtr.cc	/^struct Add_dirty_blocks_to_flush_list {$/;"	s	file:
Aligned_alloc	include/detail/ut0new.h	/^struct Aligned_alloc {$/;"	s	namespace:ut::detail
Aligned_alloc_arr	include/detail/ut0new.h	/^struct Aligned_alloc_arr {$/;"	s	namespace:ut::detail
Aligned_alloc_impl	include/detail/ut0new.h	/^struct Aligned_alloc_impl {$/;"	s	namespace:ut::detail
Altered_partitions	handler/handler0alter.cc	/^  Altered_partitions(uint parts)$/;"	f	class:Altered_partitions
Altered_partitions	handler/handler0alter.cc	/^class Altered_partitions {$/;"	c	file:
ArchPageData	include/arch0arch.h	/^  ArchPageData() {}$/;"	f	struct:ArchPageData
ArchPageData	include/arch0arch.h	/^struct ArchPageData {$/;"	s
Arch_Blk_Flush_Type	include/arch0arch.h	/^enum Arch_Blk_Flush_Type {$/;"	g
Arch_Blk_State	include/arch0arch.h	/^enum Arch_Blk_State {$/;"	g
Arch_Blk_Type	include/arch0arch.h	/^enum Arch_Blk_Type {$/;"	g
Arch_Block	include/arch0arch.h	/^  Arch_Block(byte *blk_buf, uint size, Arch_Blk_Type type)$/;"	f	class:Arch_Block
Arch_Block	include/arch0arch.h	/^class Arch_Block {$/;"	c
Arch_Client_State	include/arch0arch.h	/^enum Arch_Client_State {$/;"	g
Arch_Dblwr_Block	include/arch0recv.h	/^struct Arch_Dblwr_Block {$/;"	s
Arch_Dblwr_Ctx	include/arch0recv.h	/^  Arch_Dblwr_Ctx() {}$/;"	f	class:Arch_Dblwr_Ctx
Arch_Dblwr_Ctx	include/arch0recv.h	/^class Arch_Dblwr_Ctx {$/;"	c
Arch_File_Ctx	include/arch0arch.h	/^  Arch_File_Ctx() { m_file.m_file = OS_FILE_CLOSED; }$/;"	f	class:Arch_File_Ctx
Arch_File_Ctx	include/arch0arch.h	/^class Arch_File_Ctx {$/;"	c
Arch_Group	include/arch0arch.h	/^  Arch_Group(lsn_t start_lsn, uint header_len, ib_mutex_t *mutex)$/;"	f	class:Arch_Group
Arch_Group	include/arch0arch.h	/^class Arch_Group {$/;"	c
Arch_Log_Sys	include/arch0arch.h	/^  Arch_Log_Sys()$/;"	f	class:Arch_Log_Sys
Arch_Log_Sys	include/arch0arch.h	/^class Arch_Log_Sys {$/;"	c
Arch_Page_Dblwr_Offset	include/arch0arch.h	/^enum Arch_Page_Dblwr_Offset {$/;"	g
Arch_Page_Pos	include/arch0arch.h	/^struct Arch_Page_Pos {$/;"	s
Arch_Page_Sys	arch/arch0page.cc	/^Arch_Page_Sys::Arch_Page_Sys() {$/;"	f	class:Arch_Page_Sys
Arch_Page_Sys	include/arch0arch.h	/^class Arch_Page_Sys {$/;"	c
Arch_Point	include/arch0arch.h	/^struct Arch_Point {$/;"	s
Arch_Recv_Group_Info	include/arch0recv.h	/^struct Arch_Recv_Group_Info {$/;"	s
Arch_Reset_File	include/arch0arch.h	/^struct Arch_Reset_File {$/;"	s
Arch_State	include/arch0arch.h	/^enum Arch_State {$/;"	g
Atomic_xor_of_things	include/os0thread.h	/^  Atomic_xor_of_things() {$/;"	f	class:Atomic_xor_of_things
Atomic_xor_of_things	include/os0thread.h	/^class Atomic_xor_of_things {$/;"	c
AutoIncPersister	include/dict0mem.h	/^class AutoIncPersister : public Persister {$/;"	c
BEGIN	fts/fts0blex.cc	182;"	d	file:
BEGIN	fts/fts0tlex.cc	181;"	d	file:
BEGIN	pars/lexyy.cc	128;"	d	file:
BG_STAT_IN_PROGRESS	include/dict0mem.h	1878;"	d
BG_STAT_NONE	include/dict0mem.h	1873;"	d
BG_STAT_SHOULD_QUIT	include/dict0mem.h	1883;"	d
BG_THREAD_READY	include/fts0fts.h	/^  BG_THREAD_READY = 2, \/*!< TRUE if the FTS background thread$/;"	e	enum:fts_status
BG_THREAD_STOP	include/fts0fts.h	/^  BG_THREAD_STOP = 1, \/*!< TRUE if the FTS background thread$/;"	e	enum:fts_status
BIGGEST_LOG	include/log0ddl.h	/^  BIGGEST_LOG = ALTER_UNENCRYPT_TABLESPACE_LOG$/;"	m	class:Log_Type
BIG_ROW_SIZE	include/dict0dict.h	667;"	d
BLOB_FREED	row/row0log.cc	/^  static const ulonglong BLOB_FREED = ~0ULL;$/;"	m	class:row_log_table_blob_t	file:
BOOST_ATOMIC_NO_LIB	include/ut0lock_free_hash.h	36;"	d
BPageLock	include/buf0types.h	/^typedef rw_lock_t BPageLock;$/;"	t
BPageMutex	include/buf0types.h	/^typedef ib_bpmutex_t BPageMutex;$/;"	t
BTR_ALREADY_S_LATCHED	include/btr0btr.h	/^constexpr size_t BTR_ALREADY_S_LATCHED = 16384;$/;"	v
BTR_CONT_MODIFY_TREE	include/btr0btr.h	/^  BTR_CONT_MODIFY_TREE = 34,$/;"	e	enum:size_t
BTR_CONT_SEARCH_TREE	include/btr0btr.h	/^  BTR_CONT_SEARCH_TREE = 38$/;"	e	enum:size_t
BTR_CREATE_FLAG	include/btr0cur.h	/^  BTR_CREATE_FLAG = 16,$/;"	e	enum:__anon6
BTR_CUR_BINARY	include/btr0cur.h	/^  BTR_CUR_BINARY,         \/*!< success using the binary search *\/$/;"	e	enum:btr_cur_method
BTR_CUR_DELETE_IBUF	include/btr0cur.h	/^  BTR_CUR_DELETE_IBUF,    \/*!< performed the intended delete in$/;"	e	enum:btr_cur_method
BTR_CUR_DELETE_REF	include/btr0cur.h	/^  BTR_CUR_DELETE_REF      \/*!< row_purge_poss_sec() failed *\/$/;"	e	enum:btr_cur_method
BTR_CUR_DEL_MARK_IBUF	include/btr0cur.h	/^  BTR_CUR_DEL_MARK_IBUF,  \/*!< performed the intended delete$/;"	e	enum:btr_cur_method
BTR_CUR_FINE_HISTORY_LENGTH	btr/btr0cur.cc	123;"	d	file:
BTR_CUR_HASH	include/btr0cur.h	/^  BTR_CUR_HASH = 1,       \/*!< successful shortcut using$/;"	e	enum:btr_cur_method
BTR_CUR_HASH_FAIL	include/btr0cur.h	/^  BTR_CUR_HASH_FAIL,      \/*!< failure using hash, success using$/;"	e	enum:btr_cur_method
BTR_CUR_INSERT_TO_IBUF	include/btr0cur.h	/^  BTR_CUR_INSERT_TO_IBUF, \/*!< performed the intended insert to$/;"	e	enum:btr_cur_method
BTR_CUR_PAGE_COMPRESS_LIMIT	include/btr0cur.h	643;"	d
BTR_CUR_PAGE_REORGANIZE_LIMIT	btr/btr0cur.cc	146;"	d	file:
BTR_CUR_RETRY_DELETE_N_TIMES	include/btr0cur.h	782;"	d
BTR_CUR_RETRY_SLEEP_TIME_MS	include/btr0cur.h	786;"	d
BTR_CUR_UNSET	include/btr0cur.h	/^  BTR_CUR_UNSET = 0,      \/*!< Flag for initialization only,$/;"	e	enum:btr_cur_method
BTR_DELETE	include/btr0btr.h	/^constexpr size_t BTR_DELETE = 8192;$/;"	v
BTR_DELETE_MARK	include/btr0btr.h	/^constexpr size_t BTR_DELETE_MARK = 4096;$/;"	v
BTR_DELETE_OP	btr/btr0cur.cc	/^  BTR_DELETE_OP,               \/*!< Purge a delete-marked record *\/$/;"	e	enum:btr_op_t	file:
BTR_DELMARK_OP	btr/btr0cur.cc	/^  BTR_DELMARK_OP               \/*!< Mark a record for deletion *\/$/;"	e	enum:btr_op_t	file:
BTR_ESTIMATE	include/btr0btr.h	/^constexpr size_t BTR_ESTIMATE = 1024;$/;"	v
BTR_EXTERN_BEING_MODIFIED_FLAG	include/lob0lob.h	/^const ulint BTR_EXTERN_BEING_MODIFIED_FLAG = 32UL;$/;"	m	namespace:lob
BTR_EXTERN_FIELD_REF_SIZE	include/btr0types.h	60;"	d
BTR_EXTERN_INHERITED_FLAG	include/lob0lob.h	/^const ulint BTR_EXTERN_INHERITED_FLAG = 64UL;$/;"	m	namespace:lob
BTR_EXTERN_LEN	include/lob0lob.h	/^const ulint BTR_EXTERN_LEN = 12;$/;"	m	namespace:lob
BTR_EXTERN_LOCAL_STORED_MAX_SIZE	include/btr0types.h	63;"	d
BTR_EXTERN_OFFSET	include/lob0lob.h	/^const ulint BTR_EXTERN_OFFSET = 8;$/;"	m	namespace:lob
BTR_EXTERN_OWNER_FLAG	include/lob0lob.h	/^const ulint BTR_EXTERN_OWNER_FLAG = 128UL;$/;"	m	namespace:lob
BTR_EXTERN_PAGE_NO	include/lob0lob.h	/^const ulint BTR_EXTERN_PAGE_NO = 4;$/;"	m	namespace:lob
BTR_EXTERN_SPACE_ID	include/lob0lob.h	/^const ulint BTR_EXTERN_SPACE_ID = 0;$/;"	m	namespace:lob
BTR_EXTERN_VERSION	include/lob0lob.h	/^const ulint BTR_EXTERN_VERSION = BTR_EXTERN_OFFSET;$/;"	m	namespace:lob
BTR_FREED_INDEX_ID	btr/btr0btr.cc	/^static const space_index_t BTR_FREED_INDEX_ID = 0;$/;"	v	file:
BTR_IGNORE_SEC_UNIQUE	include/btr0btr.h	/^constexpr size_t BTR_IGNORE_SEC_UNIQUE = 2048;$/;"	v
BTR_INSERT	include/btr0btr.h	/^constexpr size_t BTR_INSERT = 512;$/;"	v
BTR_INSERT_IGNORE_UNIQUE_OP	btr/btr0cur.cc	/^  BTR_INSERT_IGNORE_UNIQUE_OP, \/*!< Insert, ignoring UNIQUE *\/$/;"	e	enum:btr_op_t	file:
BTR_INSERT_OP	btr/btr0cur.cc	/^  BTR_INSERT_OP,               \/*!< Insert, do not ignore UNIQUE *\/$/;"	e	enum:btr_op_t	file:
BTR_INTENTION_BOTH	btr/btr0cur.cc	/^  BTR_INTENTION_BOTH,$/;"	e	enum:btr_intention_t	file:
BTR_INTENTION_DELETE	btr/btr0cur.cc	/^  BTR_INTENTION_DELETE,$/;"	e	enum:btr_intention_t	file:
BTR_INTENTION_INSERT	btr/btr0cur.cc	/^  BTR_INTENTION_INSERT$/;"	e	enum:btr_intention_t	file:
BTR_KEEP_IBUF_BITMAP	include/btr0cur.h	/^  BTR_KEEP_IBUF_BITMAP = 32$/;"	e	enum:__anon6
BTR_KEEP_POS_FLAG	include/btr0cur.h	/^  BTR_KEEP_POS_FLAG = 8,$/;"	e	enum:__anon6
BTR_KEEP_SYS_FLAG	include/btr0cur.h	/^  BTR_KEEP_SYS_FLAG = 4,$/;"	e	enum:__anon6
BTR_LATCH_FOR_DELETE	include/btr0btr.h	/^constexpr size_t BTR_LATCH_FOR_DELETE = 65536;$/;"	v
BTR_LATCH_FOR_INSERT	include/btr0btr.h	/^constexpr size_t BTR_LATCH_FOR_INSERT = 32768;$/;"	v
BTR_LATCH_MODE_WITHOUT_FLAGS	include/btr0btr.h	130;"	d
BTR_LATCH_MODE_WITHOUT_INTENTION	include/btr0btr.h	137;"	d
BTR_MAX_LEVELS	include/btr0btr.h	58;"	d
BTR_MODIFY_EXTERNAL	include/btr0btr.h	/^constexpr size_t BTR_MODIFY_EXTERNAL = 262144;$/;"	v
BTR_MODIFY_LEAF	include/btr0btr.h	/^  BTR_MODIFY_LEAF = RW_X_LATCH,$/;"	e	enum:size_t
BTR_MODIFY_PREV	include/btr0btr.h	/^  BTR_MODIFY_PREV = 36,$/;"	e	enum:size_t
BTR_MODIFY_TREE	include/btr0btr.h	/^  BTR_MODIFY_TREE = 33,$/;"	e	enum:size_t
BTR_NO_LATCHES	include/btr0btr.h	/^  BTR_NO_LATCHES = RW_NO_LATCH,$/;"	e	enum:size_t
BTR_NO_LOCKING_FLAG	include/btr0cur.h	/^  BTR_NO_LOCKING_FLAG = 2,$/;"	e	enum:__anon6
BTR_NO_OP	btr/btr0cur.cc	/^  BTR_NO_OP = 0,               \/*!< Not buffered *\/$/;"	e	enum:btr_op_t	file:
BTR_NO_UNDO_LOG_FLAG	include/btr0cur.h	/^  BTR_NO_UNDO_LOG_FLAG = 1,$/;"	e	enum:__anon6
BTR_N_LEAF_PAGES	include/btr0btr.h	574;"	d
BTR_PAGE_MAX_REC_SIZE	include/btr0btr.h	47;"	d
BTR_PATH_ARRAY_N_SLOTS	include/btr0cur.h	673;"	d
BTR_PCUR_AFTER	include/btr0pcur.h	/^  BTR_PCUR_AFTER = 3,$/;"	e	enum:btr_pcur_pos_t
BTR_PCUR_AFTER_LAST_IN_TREE	include/btr0pcur.h	/^  BTR_PCUR_AFTER_LAST_IN_TREE = 5    \/* in an empty tree *\/$/;"	e	enum:btr_pcur_pos_t
BTR_PCUR_BEFORE	include/btr0pcur.h	/^  BTR_PCUR_BEFORE = 2,$/;"	e	enum:btr_pcur_pos_t
BTR_PCUR_BEFORE_FIRST_IN_TREE	include/btr0pcur.h	/^  BTR_PCUR_BEFORE_FIRST_IN_TREE = 4, \/* in an empty tree *\/$/;"	e	enum:btr_pcur_pos_t
BTR_PCUR_IS_POSITIONED	include/btr0pcur.h	/^  BTR_PCUR_IS_POSITIONED$/;"	e	enum:pcur_pos_t
BTR_PCUR_IS_POSITIONED_OPTIMISTIC	include/btr0pcur.h	/^  BTR_PCUR_IS_POSITIONED_OPTIMISTIC,$/;"	e	enum:pcur_pos_t
BTR_PCUR_NOT_POSITIONED	include/btr0pcur.h	/^  BTR_PCUR_NOT_POSITIONED = 0,$/;"	e	enum:pcur_pos_t
BTR_PCUR_ON	include/btr0pcur.h	/^  BTR_PCUR_ON = 1,$/;"	e	enum:btr_pcur_pos_t
BTR_PCUR_UNSET	include/btr0pcur.h	/^  BTR_PCUR_UNSET = 0,$/;"	e	enum:btr_pcur_pos_t
BTR_PCUR_WAS_POSITIONED	include/btr0pcur.h	/^  BTR_PCUR_WAS_POSITIONED,$/;"	e	enum:pcur_pos_t
BTR_RTREE_DELETE_MARK	include/btr0btr.h	/^constexpr size_t BTR_RTREE_DELETE_MARK = 524288;$/;"	v
BTR_RTREE_UNDO_INS	include/btr0btr.h	/^constexpr size_t BTR_RTREE_UNDO_INS = 131072;$/;"	v
BTR_SEARCH_BUILD_LIMIT	btr/btr0sea.cc	96;"	d	file:
BTR_SEARCH_HASH_ANALYSIS	include/btr0sea.h	310;"	d
BTR_SEARCH_LEAF	include/btr0btr.h	/^  BTR_SEARCH_LEAF = RW_S_LATCH,$/;"	e	enum:size_t
BTR_SEARCH_MAGIC_N	include/btr0sea.h	283;"	d
BTR_SEARCH_ON_HASH_LIMIT	include/btr0sea.h	318;"	d
BTR_SEARCH_ON_PATTERN_LIMIT	include/btr0sea.h	314;"	d
BTR_SEARCH_PAGE_BUILD_LIMIT	btr/btr0sea.cc	92;"	d	file:
BTR_SEARCH_PREV	include/btr0btr.h	/^  BTR_SEARCH_PREV = 35,$/;"	e	enum:size_t
BTR_SEARCH_TREE	include/btr0btr.h	/^  BTR_SEARCH_TREE = 37,$/;"	e	enum:size_t
BTR_TABLE_STATS_FROM_SAMPLE	btr/btr0cur.cc	155;"	d	file:
BTR_TOTAL_SIZE	include/btr0btr.h	575;"	d
BUFFER_BLOCK_SIZE	os/os0file.cc	125;"	d	file:
BUF_BUDDY_HIGH	include/buf0types.h	156;"	d
BUF_BUDDY_LOW	include/buf0types.h	145;"	d
BUF_BUDDY_LOW_SHIFT	include/buf0types.h	142;"	d
BUF_BUDDY_SIZES	include/buf0types.h	148;"	d
BUF_BUDDY_SIZES_MAX	include/buf0types.h	151;"	d
BUF_BUDDY_STAMP_FREE	buf/buf0buddy.cc	78;"	d	file:
BUF_BUDDY_STAMP_NONFREE	buf/buf0buddy.cc	82;"	d	file:
BUF_BUDDY_STAMP_OFFSET	buf/buf0buddy.cc	74;"	d	file:
BUF_BUDDY_STATE_FREE	buf/buf0buddy.cc	/^  BUF_BUDDY_STATE_FREE,          \/*!< If the buddy to completely free *\/$/;"	e	enum:buf_buddy_state_t	file:
BUF_BUDDY_STATE_PARTIALLY_USED	buf/buf0buddy.cc	/^  BUF_BUDDY_STATE_PARTIALLY_USED \/*!< Some sub-blocks in the buddy$/;"	e	enum:buf_buddy_state_t	file:
BUF_BUDDY_STATE_USED	buf/buf0buddy.cc	/^  BUF_BUDDY_STATE_USED,          \/*!< Buddy currently in used *\/$/;"	e	enum:buf_buddy_state_t	file:
BUF_DUMP_CREATE	buf/buf0dump.cc	74;"	d	file:
BUF_DUMP_PAGE	buf/buf0dump.cc	76;"	d	file:
BUF_DUMP_SPACE	buf/buf0dump.cc	75;"	d	file:
BUF_FLUSH_LIST	include/buf0types.h	/^  BUF_FLUSH_LIST,$/;"	e	enum:uint8_t
BUF_FLUSH_LRU	include/buf0types.h	/^  BUF_FLUSH_LRU = 0,$/;"	e	enum:uint8_t
BUF_FLUSH_N_TYPES	include/buf0types.h	/^  BUF_FLUSH_N_TYPES$/;"	e	enum:uint8_t
BUF_FLUSH_SINGLE_PAGE	include/buf0types.h	/^  BUF_FLUSH_SINGLE_PAGE,$/;"	e	enum:uint8_t
BUF_FLUSH_VALIDATE_SKIP	buf/buf0flu.cc	256;"	d	file:
BUF_IO_NONE	include/buf0types.h	/^  BUF_IO_NONE = 0,$/;"	e	enum:uint8_t
BUF_IO_PIN	include/buf0types.h	/^  BUF_IO_PIN$/;"	e	enum:uint8_t
BUF_IO_READ	include/buf0types.h	/^  BUF_IO_READ,$/;"	e	enum:uint8_t
BUF_IO_WRITE	include/buf0types.h	/^  BUF_IO_WRITE,$/;"	e	enum:uint8_t
BUF_LRU_DROP_SEARCH_SIZE	buf/buf0lru.cc	/^static const ulint BUF_LRU_DROP_SEARCH_SIZE = 1024;$/;"	v	file:
BUF_LRU_IO_TO_UNZIP_FACTOR	buf/buf0lru.cc	/^static const ulint BUF_LRU_IO_TO_UNZIP_FACTOR = 50;$/;"	v	file:
BUF_LRU_MIN_LEN	buf/buf0flu.cc	207;"	d	file:
BUF_LRU_NON_OLD_MIN_LEN	buf/buf0lru.cc	70;"	d	file:
BUF_LRU_OLD_MIN_LEN	include/buf0lru.h	57;"	d
BUF_LRU_OLD_RATIO_DIV	include/buf0lru.h	216;"	d
BUF_LRU_OLD_RATIO_MAX	include/buf0lru.h	220;"	d
BUF_LRU_OLD_RATIO_MIN	include/buf0lru.h	226;"	d
BUF_LRU_OLD_TOLERANCE	buf/buf0lru.cc	65;"	d	file:
BUF_LRU_SEARCH_SCAN_THRESHOLD	buf/buf0lru.cc	/^static const ulint BUF_LRU_SEARCH_SCAN_THRESHOLD = 100;$/;"	v	file:
BUF_LRU_STAT_N_INTERVAL	buf/buf0lru.cc	/^static const ulint BUF_LRU_STAT_N_INTERVAL = 50;$/;"	v	file:
BUF_NO_CHECKSUM_MAGIC	include/buf0types.h	42;"	d
BUF_PAGE_PRINT_NO_CRASH	include/buf0buf.h	/^  BUF_PAGE_PRINT_NO_CRASH = 1,$/;"	e	enum:Cache_hint::buf_page_print_flags
BUF_PAGE_PRINT_NO_FULL	include/buf0buf.h	/^  BUF_PAGE_PRINT_NO_FULL = 2$/;"	e	enum:Cache_hint::buf_page_print_flags
BUF_PAGE_READ_MAX_RETRIES	buf/buf0buf.cc	/^static const ulint BUF_PAGE_READ_MAX_RETRIES = 100;$/;"	v	file:
BUF_PAGE_STATE_BITS	include/buf0buf.h	1176;"	d
BUF_POOL_SIZE_THRESHOLD	include/srv0start.h	67;"	d
BUF_POOL_WATCH_SIZE	include/buf0buf.h	110;"	d
BUF_POOL_ZIP_FOLD	include/buf0buf.h	1930;"	d
BUF_POOL_ZIP_FOLD_BPAGE	include/buf0buf.h	1931;"	d
BUF_POOL_ZIP_FOLD_PTR	include/buf0buf.h	1929;"	d
BUF_READ_AHEAD_AREA	include/buf0rea.h	155;"	d
BUF_READ_AHEAD_PAGES	buf/buf0buf.cc	/^static const ulint BUF_READ_AHEAD_PAGES = 64;$/;"	v	file:
BUF_READ_AHEAD_PEND_LIMIT	buf/buf0rea.cc	/^static constexpr size_t BUF_READ_AHEAD_PEND_LIMIT = 2;$/;"	v	file:
BUF_READ_AHEAD_PORTION	buf/buf0buf.cc	/^static const ulint BUF_READ_AHEAD_PORTION = 32;$/;"	v	file:
BUF_READ_AHEAD_RANDOM_THRESHOLD	buf/buf0rea.cc	55;"	d	file:
BUF_READ_ANY_PAGE	include/buf0rea.h	162;"	d
BUF_READ_IBUF_PAGES_ONLY	include/buf0rea.h	160;"	d
BUF_REMOVE_ALL_NO_WRITE	include/buf0types.h	/^  BUF_REMOVE_ALL_NO_WRITE,$/;"	e	enum:buf_remove_t
BUF_REMOVE_FLUSH_NO_WRITE	include/buf0types.h	/^  BUF_REMOVE_FLUSH_NO_WRITE,$/;"	e	enum:buf_remove_t
BUF_REMOVE_FLUSH_WRITE	include/buf0types.h	/^  BUF_REMOVE_FLUSH_WRITE$/;"	e	enum:buf_remove_t
BUF_REMOVE_NONE	include/buf0types.h	/^  BUF_REMOVE_NONE,$/;"	e	enum:buf_remove_t
BUG_REPORT_MSG	handler/ha_innodb.cc	/^const char *BUG_REPORT_MSG =$/;"	v
BaseInserter	include/lob0ins.h	/^  BaseInserter(InsertContext *ctx)$/;"	f	struct:lob::BaseInserter
BaseInserter	include/lob0ins.h	/^struct BaseInserter {$/;"	s	namespace:lob
Batch_segment	buf/buf0dblwr.cc	/^  Batch_segment(uint16_t id, dblwr::File &file, page_no_t start,$/;"	f	class:Batch_segment
Batch_segment	buf/buf0dblwr.cc	/^class Batch_segment : public Segment {$/;"	c	file:
Being_modified	lob/lob0lob.cc	/^  Being_modified(BtrContext &ctx, const big_rec_t *big_rec_vec,$/;"	f	struct:lob::Being_modified
Being_modified	lob/lob0lob.cc	/^struct Being_modified {$/;"	s	namespace:lob	file:
Bitmap_Operator_Impl	include/clone0desc.h	/^    Bitmap_Operator_Impl(uint32_t *&bitmap, uint32_t index)$/;"	f	class:Chnunk_Bitmap::Bitmap_Operator_Impl
Bitmap_Operator_Impl	include/clone0desc.h	/^  class Bitmap_Operator_Impl {$/;"	c	class:Chnunk_Bitmap
Bitset	include/ut0bitset.h	/^  Bitset() : m_bitset(nullptr), m_size(0) {}$/;"	f	class:Bitset
Bitset	include/ut0bitset.h	/^class Bitset {$/;"	c
Block	include/os0file.h	/^struct Block {$/;"	s	namespace:file
Block	log/log0meb.cc	/^  Block() { reset(); }$/;"	f	class:meb::Block
Block	log/log0meb.cc	/^class Block {$/;"	c	namespace:meb	file:
BlockCache	include/lob0index.h	/^typedef std::map<page_no_t, buf_block_t *> BlockCache;$/;"	t	namespace:lob
BlockCache	include/lob0lob.h	/^typedef std::map<page_no_t, buf_block_t *> BlockCache;$/;"	t
BlockMutexPolicy	include/sync0policy.h	/^  BlockMutexPolicy()$/;"	f	class:BlockMutexPolicy
BlockMutexPolicy	include/sync0policy.h	/^class BlockMutexPolicy$/;"	c
BlockReporter	include/buf0checksum.h	/^  BlockReporter(bool check_lsn, const byte *read_buf,$/;"	f	class:BlockReporter
BlockReporter	include/buf0checksum.h	/^class BlockReporter {$/;"	c
BlockWaitMutex	include/sync0arr_impl.h	/^typedef BlockSyncArrayMutex::MutexType BlockWaitMutex;$/;"	t
Block_hint	include/buf0block_hint.h	/^class Block_hint {$/;"	c	namespace:buf
BtrBulk	btr/btr0bulk.cc	/^BtrBulk::BtrBulk(dict_index_t *index, trx_id_t trx_id, FlushObserver *observer)$/;"	f	class:BtrBulk
BtrBulk	include/btr0bulk.h	/^class BtrBulk {$/;"	c
BtrContext	include/lob0lob.h	/^  BtrContext()$/;"	f	class:lob::BtrContext
BtrContext	include/lob0lob.h	/^  BtrContext(const BtrContext &other)$/;"	f	class:lob::BtrContext
BtrContext	include/lob0lob.h	/^  BtrContext(mtr_t *mtr, btr_pcur_t *pcur, dict_index_t *index, rec_t *rec,$/;"	f	class:lob::BtrContext
BtrContext	include/lob0lob.h	/^class BtrContext {$/;"	c	namespace:lob
BufListMutex	include/buf0types.h	/^typedef ib_mutex_t BufListMutex;$/;"	t
BufPoolZipMutex	include/buf0types.h	/^typedef BPageMutex BufPoolZipMutex;$/;"	t
Buf_fetch	buf/buf0buf.cc	/^struct Buf_fetch {$/;"	s	file:
Buf_fetch_normal	buf/buf0buf.cc	/^  Buf_fetch_normal(const page_id_t &page_id, const page_size_t &page_size)$/;"	f	struct:Buf_fetch_normal
Buf_fetch_normal	buf/buf0buf.cc	/^struct Buf_fetch_normal : public Buf_fetch<Buf_fetch_normal> {$/;"	s	file:
Buf_fetch_other	buf/buf0buf.cc	/^  Buf_fetch_other(const page_id_t &page_id, const page_size_t &page_size)$/;"	f	struct:Buf_fetch_other
Buf_fetch_other	buf/buf0buf.cc	/^struct Buf_fetch_other : public Buf_fetch<Buf_fetch_other> {$/;"	s	file:
Buf_pages	buf/buf0dblwr.cc	/^    explicit Buf_pages(uint32_t size) : m_pages(size) {$/;"	f	struct:Double_write::Buf_pages
Buf_pages	buf/buf0dblwr.cc	/^  struct Buf_pages {$/;"	s	class:Double_write	file:
Buffer	include/buf0dblwr.h	/^struct Buffer {$/;"	s	namespace:dblwr
CACHE_MIN_IDLE_TIME_US	trx/trx0i_s.cc	826;"	d	file:
CACHE_STORAGE_HASH_CELLS	trx/trx0i_s.cc	189;"	d	file:
CACHE_STORAGE_INITIAL_SIZE	trx/trx0i_s.cc	187;"	d	file:
CALL_AND_TEST	row/row0row.cc	1233;"	d	file:
CALL_MEMBER_FN	ut/ut0test.cc	34;"	d	file:
CFG	include/fil0fil.h	/^  CFG = 2,$/;"	e	enum:ib_file_suffix
CFP	include/fil0fil.h	/^  CFP = 3,$/;"	e	enum:ib_file_suffix
CHANGE_BUFFER_DEFAULT_SIZE	include/ibuf0ibuf.h	46;"	d
CHAR_COLL_MASK	include/data0type.h	286;"	d
CHECK_ABORTED_OK	include/dict0dict.h	/^  CHECK_ABORTED_OK,$/;"	e	enum:check_name
CHECK_ALL_COMPLETE	include/dict0dict.h	/^  CHECK_ALL_COMPLETE,$/;"	e	enum:check_name
CHECK_PARTIAL_OK	include/dict0dict.h	/^  CHECK_PARTIAL_OK$/;"	e	enum:check_name
CHRONO_PRINT	include/ut0dbg.h	155;"	d
CLONE_ALIGN_DIRECT_IO	include/clone0desc.h	/^const uint32_t CLONE_ALIGN_DIRECT_IO = 4 * 1024;$/;"	v
CLONE_API_INCLUDE	include/clone0api.h	33;"	d
CLONE_ARR_SIZE	include/clone0clone.h	/^const int CLONE_ARR_SIZE = 2 * MAX_CLONES;$/;"	v
CLONE_CLONE_INCLUDE	include/clone0clone.h	33;"	d
CLONE_DATA_FILE_IDX_OFFSET	clone/clone0desc.cc	/^static const uint CLONE_DATA_FILE_IDX_OFFSET = CLONE_DATA_TASK_BLOCK_OFFSET + 4;$/;"	v	file:
CLONE_DATA_FILE_SIZE_OFFSET	clone/clone0desc.cc	/^static const uint CLONE_DATA_FILE_SIZE_OFFSET = CLONE_DATA_FOFF_OFFSET + 8;$/;"	v	file:
CLONE_DATA_FOFF_OFFSET	clone/clone0desc.cc	/^static const uint CLONE_DATA_FOFF_OFFSET = CLONE_DATA_LEN_OFFSET + 4;$/;"	v	file:
CLONE_DATA_LEN_OFFSET	clone/clone0desc.cc	/^static const uint CLONE_DATA_LEN_OFFSET = CLONE_DATA_FILE_IDX_OFFSET + 4;$/;"	v	file:
CLONE_DATA_STATE_OFFSET	clone/clone0desc.cc	/^static const uint CLONE_DATA_STATE_OFFSET = CLONE_DESC_HEADER_LEN;$/;"	v	file:
CLONE_DATA_TASK_BLOCK_OFFSET	clone/clone0desc.cc	/^static const uint CLONE_DATA_TASK_BLOCK_OFFSET =$/;"	v	file:
CLONE_DATA_TASK_CHUNK_OFFSET	clone/clone0desc.cc	/^static const uint CLONE_DATA_TASK_CHUNK_OFFSET =$/;"	v	file:
CLONE_DATA_TASK_INDEX_OFFSET	clone/clone0desc.cc	/^static const uint CLONE_DATA_TASK_INDEX_OFFSET = CLONE_DATA_STATE_OFFSET + 4;$/;"	v	file:
CLONE_DESC_DATA	include/clone0desc.h	/^  CLONE_DESC_DATA,$/;"	e	enum:Clone_Desc_Type
CLONE_DESC_DATA_LEN	clone/clone0desc.cc	/^static const uint CLONE_DESC_DATA_LEN = CLONE_DATA_FILE_SIZE_OFFSET + 8;$/;"	v	file:
CLONE_DESC_FILE_FLAG_AES	clone/clone0desc.cc	/^static const uint CLONE_DESC_FILE_FLAG_AES = 3;$/;"	v	file:
CLONE_DESC_FILE_FLAG_LZ4	clone/clone0desc.cc	/^static const uint CLONE_DESC_FILE_FLAG_LZ4 = 2;$/;"	v	file:
CLONE_DESC_FILE_FLAG_ZLIB	clone/clone0desc.cc	/^static const uint CLONE_DESC_FILE_FLAG_ZLIB = 1;$/;"	v	file:
CLONE_DESC_FILE_METADATA	include/clone0desc.h	/^  CLONE_DESC_FILE_METADATA,$/;"	e	enum:Clone_Desc_Type
CLONE_DESC_HEADER_LEN	clone/clone0desc.cc	/^static const uint CLONE_DESC_HEADER_LEN = CLONE_DESC_TYPE_OFFSET + 4;$/;"	v	file:
CLONE_DESC_INCLUDE	include/clone0desc.h	33;"	d
CLONE_DESC_LEN_OFFSET	clone/clone0desc.cc	/^static const uint CLONE_DESC_LEN_OFFSET = CLONE_DESC_VER_OFFSET + 4;$/;"	v	file:
CLONE_DESC_LOCATOR	include/clone0desc.h	/^  CLONE_DESC_LOCATOR = 1,$/;"	e	enum:Clone_Desc_Type
CLONE_DESC_LOC_BASE_LEN	clone/clone0desc.cc	/^static const uint CLONE_DESC_LOC_BASE_LEN = CLONE_LOC_META_OFFSET + 1;$/;"	v	file:
CLONE_DESC_MAX	include/clone0desc.h	/^  CLONE_DESC_MAX$/;"	e	enum:Clone_Desc_Type
CLONE_DESC_MAX_BASE_LEN	include/clone0desc.h	/^const uint32_t CLONE_DESC_MAX_BASE_LEN = 64;$/;"	v
CLONE_DESC_MAX_VERSION	clone/clone0desc.cc	/^static const uint CLONE_DESC_MAX_VERSION = 100;$/;"	v	file:
CLONE_DESC_STATE	include/clone0desc.h	/^  CLONE_DESC_STATE,$/;"	e	enum:Clone_Desc_Type
CLONE_DESC_STATE_EST_BYTES	clone/clone0desc.cc	/^static const uint CLONE_DESC_STATE_EST_BYTES = CLONE_DESC_STATE_NUM_FILES + 4;$/;"	v	file:
CLONE_DESC_STATE_EST_DISK	clone/clone0desc.cc	/^static const uint CLONE_DESC_STATE_EST_DISK = CLONE_DESC_STATE_EST_BYTES + 8;$/;"	v	file:
CLONE_DESC_STATE_FLAGS	clone/clone0desc.cc	/^static const uint CLONE_DESC_STATE_FLAGS = CLONE_DESC_STATE_EST_DISK + 8;$/;"	v	file:
CLONE_DESC_STATE_FLAG_ACK	clone/clone0desc.cc	/^static const uint CLONE_DESC_STATE_FLAG_ACK = 2;$/;"	v	file:
CLONE_DESC_STATE_FLAG_START	clone/clone0desc.cc	/^static const uint CLONE_DESC_STATE_FLAG_START = 1;$/;"	v	file:
CLONE_DESC_STATE_LEN	clone/clone0desc.cc	/^static const uint CLONE_DESC_STATE_LEN = CLONE_DESC_STATE_FLAGS + 2;$/;"	v	file:
CLONE_DESC_STATE_NUM_CHUNKS	clone/clone0desc.cc	/^static const uint CLONE_DESC_STATE_NUM_CHUNKS = CLONE_DESC_TASK_OFFSET + 4;$/;"	v	file:
CLONE_DESC_STATE_NUM_FILES	clone/clone0desc.cc	/^static const uint CLONE_DESC_STATE_NUM_FILES = CLONE_DESC_STATE_NUM_CHUNKS + 4;$/;"	v	file:
CLONE_DESC_STATE_OFFSET	clone/clone0desc.cc	/^static const uint CLONE_DESC_STATE_OFFSET = CLONE_DESC_HEADER_LEN;$/;"	v	file:
CLONE_DESC_TASK_METADATA	include/clone0desc.h	/^  CLONE_DESC_TASK_METADATA,$/;"	e	enum:Clone_Desc_Type
CLONE_DESC_TASK_OFFSET	clone/clone0desc.cc	/^static const uint CLONE_DESC_TASK_OFFSET = CLONE_DESC_STATE_OFFSET + 4;$/;"	v	file:
CLONE_DESC_TYPE_OFFSET	clone/clone0desc.cc	/^static const uint CLONE_DESC_TYPE_OFFSET = CLONE_DESC_LEN_OFFSET + 4;$/;"	v	file:
CLONE_DESC_VER_OFFSET	clone/clone0desc.cc	/^static const uint CLONE_DESC_VER_OFFSET = 0;$/;"	v	file:
CLONE_FILES_DIR	include/clone0clone.h	47;"	d
CLONE_FILE_ALLOC_SIZE_OFFSET	clone/clone0desc.cc	/^static const uint CLONE_FILE_ALLOC_SIZE_OFFSET = CLONE_FILE_SIZE_OFFSET + 8;$/;"	v	file:
CLONE_FILE_BASE_LEN	clone/clone0desc.cc	/^static const uint CLONE_FILE_BASE_LEN = CLONE_FILE_FNAME_OFFSET;$/;"	v	file:
CLONE_FILE_BCHUNK_OFFSET	clone/clone0desc.cc	/^static const uint CLONE_FILE_BCHUNK_OFFSET = CLONE_FILE_IDX_OFFSET + 4;$/;"	v	file:
CLONE_FILE_ECHUNK_OFFSET	clone/clone0desc.cc	/^static const uint CLONE_FILE_ECHUNK_OFFSET = CLONE_FILE_BCHUNK_OFFSET + 4;$/;"	v	file:
CLONE_FILE_FLAGS_OFFSET	clone/clone0desc.cc	/^static const uint CLONE_FILE_FLAGS_OFFSET = CLONE_FILE_FSBLK_OFFSET + 4;$/;"	v	file:
CLONE_FILE_FNAMEL_OFFSET	clone/clone0desc.cc	/^static const uint CLONE_FILE_FNAMEL_OFFSET = CLONE_FILE_ECHUNK_OFFSET + 4;$/;"	v	file:
CLONE_FILE_FNAME_OFFSET	clone/clone0desc.cc	/^static const uint CLONE_FILE_FNAME_OFFSET = CLONE_FILE_FNAMEL_OFFSET + 4;$/;"	v	file:
CLONE_FILE_FSBLK_OFFSET	clone/clone0desc.cc	/^static const uint CLONE_FILE_FSBLK_OFFSET = CLONE_FILE_FSP_OFFSET + 4;$/;"	v	file:
CLONE_FILE_FSP_OFFSET	clone/clone0desc.cc	/^static const uint CLONE_FILE_FSP_OFFSET = CLONE_FILE_ALLOC_SIZE_OFFSET + 8;$/;"	v	file:
CLONE_FILE_IDX_OFFSET	clone/clone0desc.cc	/^static const uint CLONE_FILE_IDX_OFFSET = CLONE_FILE_SPACE_ID_OFFSET + 4;$/;"	v	file:
CLONE_FILE_SIZE_OFFSET	clone/clone0desc.cc	/^static const uint CLONE_FILE_SIZE_OFFSET = CLONE_FILE_STATE_OFFSET + 4;$/;"	v	file:
CLONE_FILE_SPACE_ID_OFFSET	clone/clone0desc.cc	/^static const uint CLONE_FILE_SPACE_ID_OFFSET = CLONE_FILE_FLAGS_OFFSET + 2;$/;"	v	file:
CLONE_FILE_STATE_OFFSET	clone/clone0desc.cc	/^static const uint CLONE_FILE_STATE_OFFSET = CLONE_DESC_HEADER_LEN;$/;"	v	file:
CLONE_HDL_APPLY	include/clone0snapshot.h	/^  CLONE_HDL_APPLY$/;"	e	enum:Clone_Handle_Type
CLONE_HDL_COPY	include/clone0snapshot.h	/^  CLONE_HDL_COPY = 1,$/;"	e	enum:Clone_Handle_Type
CLONE_INNODB_ERROR_FILE	include/clone0clone.h	/^const char CLONE_INNODB_ERROR_FILE[] =$/;"	v
CLONE_INNODB_FILE_LEN	include/clone0clone.h	/^const size_t CLONE_INNODB_FILE_LEN = 64;$/;"	v
CLONE_INNODB_FIXUP_FILE	include/clone0clone.h	/^const char CLONE_INNODB_FIXUP_FILE[] =$/;"	v
CLONE_INNODB_IN_PROGRESS_FILE	include/clone0clone.h	/^const char CLONE_INNODB_IN_PROGRESS_FILE[] =$/;"	v
CLONE_INNODB_NEW_FILES	include/clone0clone.h	/^const char CLONE_INNODB_NEW_FILES[] =$/;"	v
CLONE_INNODB_OLD_FILES	include/clone0clone.h	/^const char CLONE_INNODB_OLD_FILES[] =$/;"	v
CLONE_INNODB_RECOVERY_CRASH_POINT	include/clone0clone.h	/^const char CLONE_INNODB_RECOVERY_CRASH_POINT[] =$/;"	v
CLONE_INNODB_RECOVERY_FILE	include/clone0clone.h	/^const char CLONE_INNODB_RECOVERY_FILE[] =$/;"	v
CLONE_INNODB_REPLACED_FILES	include/clone0clone.h	/^const char CLONE_INNODB_REPLACED_FILES[] =$/;"	v
CLONE_INNODB_REPLACED_FILE_EXTN	include/clone0clone.h	/^const char CLONE_INNODB_REPLACED_FILE_EXTN[] = "." OS_FILE_PREFIX "clone";$/;"	v
CLONE_INNODB_SAVED_FILE_EXTN	include/clone0clone.h	/^const char CLONE_INNODB_SAVED_FILE_EXTN[] = "." OS_FILE_PREFIX "clone_save";$/;"	v
CLONE_LOC_CID_OFFSET	clone/clone0desc.cc	/^static const uint CLONE_LOC_CID_OFFSET = CLONE_DESC_HEADER_LEN;$/;"	v	file:
CLONE_LOC_IDX_OFFSET	clone/clone0desc.cc	/^static const uint CLONE_LOC_IDX_OFFSET = CLONE_LOC_SID_OFFSET + 8;$/;"	v	file:
CLONE_LOC_INVALID_ID	include/clone0desc.h	/^const ib_uint64_t CLONE_LOC_INVALID_ID = 0;$/;"	v
CLONE_LOC_META_OFFSET	clone/clone0desc.cc	/^static const uint CLONE_LOC_META_OFFSET = CLONE_LOC_STATE_OFFSET + 1;$/;"	v	file:
CLONE_LOC_SID_OFFSET	clone/clone0desc.cc	/^static const uint CLONE_LOC_SID_OFFSET = CLONE_LOC_CID_OFFSET + 8;$/;"	v	file:
CLONE_LOC_STATE_OFFSET	clone/clone0desc.cc	/^static const uint CLONE_LOC_STATE_OFFSET = CLONE_LOC_IDX_OFFSET + 4;$/;"	v	file:
CLONE_MAX_TASKS	include/clone0desc.h	/^const int CLONE_MAX_TASKS = 128;$/;"	v
CLONE_MONITOR_H	include/clone0monitor.h	33;"	d
CLONE_REPL_INCLUDE	include/clone0repl.h	33;"	d
CLONE_SNAPSHOT_DONE	include/clone0desc.h	/^  CLONE_SNAPSHOT_DONE$/;"	e	enum:Snapshot_State
CLONE_SNAPSHOT_FILE_COPY	include/clone0desc.h	/^  CLONE_SNAPSHOT_FILE_COPY,$/;"	e	enum:Snapshot_State
CLONE_SNAPSHOT_INCLUDE	include/clone0snapshot.h	33;"	d
CLONE_SNAPSHOT_INIT	include/clone0desc.h	/^  CLONE_SNAPSHOT_INIT,$/;"	e	enum:Snapshot_State
CLONE_SNAPSHOT_NONE	include/clone0desc.h	/^  CLONE_SNAPSHOT_NONE = 0,$/;"	e	enum:Snapshot_State
CLONE_SNAPSHOT_PAGE_COPY	include/clone0desc.h	/^  CLONE_SNAPSHOT_PAGE_COPY,$/;"	e	enum:Snapshot_State
CLONE_SNAPSHOT_REDO_COPY	include/clone0desc.h	/^  CLONE_SNAPSHOT_REDO_COPY,$/;"	e	enum:Snapshot_State
CLONE_STATE_ABORT	include/clone0clone.h	/^  CLONE_STATE_ABORT$/;"	e	enum:Clone_Handle_State
CLONE_STATE_ACTIVE	include/clone0clone.h	/^  CLONE_STATE_ACTIVE,$/;"	e	enum:Clone_Handle_State
CLONE_STATE_IDLE	include/clone0clone.h	/^  CLONE_STATE_IDLE,$/;"	e	enum:Clone_Handle_State
CLONE_STATE_INIT	include/clone0clone.h	/^  CLONE_STATE_INIT = 1,$/;"	e	enum:Clone_Handle_State
CLONE_SYS_ABORT	include/clone0clone.h	/^  CLONE_SYS_ABORT$/;"	e	enum:Clone_System_State
CLONE_SYS_ACTIVE	include/clone0clone.h	/^  CLONE_SYS_ACTIVE,$/;"	e	enum:Clone_System_State
CLONE_SYS_INACTIVE	include/clone0clone.h	/^  CLONE_SYS_INACTIVE,$/;"	e	enum:Clone_System_State
CLONE_TASK_ACTIVE	include/clone0clone.h	/^enum Clone_Task_State { CLONE_TASK_INACTIVE = 1, CLONE_TASK_ACTIVE };$/;"	e	enum:Clone_Task_State
CLONE_TASK_BLOCK_OFFSET	clone/clone0desc.cc	/^static const uint CLONE_TASK_BLOCK_OFFSET = CLONE_TASK_CHUNK_OFFSET + 4;$/;"	v	file:
CLONE_TASK_CHUNK_OFFSET	clone/clone0desc.cc	/^static const uint CLONE_TASK_CHUNK_OFFSET = CLONE_TASK_INDEX_OFFSET + 4;$/;"	v	file:
CLONE_TASK_INACTIVE	include/clone0clone.h	/^enum Clone_Task_State { CLONE_TASK_INACTIVE = 1, CLONE_TASK_ACTIVE };$/;"	e	enum:Clone_Task_State
CLONE_TASK_INDEX_OFFSET	clone/clone0desc.cc	/^static const uint CLONE_TASK_INDEX_OFFSET = CLONE_DESC_HEADER_LEN;$/;"	v	file:
CLONE_TASK_META_LEN	clone/clone0desc.cc	/^static const uint CLONE_TASK_META_LEN = CLONE_TASK_BLOCK_OFFSET + 4;$/;"	v	file:
CLUST_INDEX_SIZE_COL_NO	include/dict0stats.h	/^  static constexpr unsigned CLUST_INDEX_SIZE_COL_NO = 4;$/;"	m	class:TableStatsRecord
COMMIT	include/trx0undo.h	/^    COMMIT,$/;"	m	class:trx_undo_t::Gtid_storage
COMMIT_NODE_SEND	include/trx0trx.h	/^  COMMIT_NODE_SEND = 1, \/*!< about to send a commit signal to$/;"	e	enum:commit_node_state
COMMIT_NODE_WAIT	include/trx0trx.h	/^  COMMIT_NODE_WAIT      \/*!< commit signal sent to the transaction,$/;"	e	enum:commit_node_state
COMPLETE_WORK	include/clone0monitor.h	/^  enum { NOT_STARTED = 0, ESTIMATE_WORK, COMPLETE_WORK } m_cur_phase;$/;"	e	enum:Clone_Monitor::__anon7
CONCURRENT_UNDO_TRUNCATE_LIMIT	srv/srv0srv.cc	/^const size_t CONCURRENT_UNDO_TRUNCATE_LIMIT =$/;"	v
COUNT_ALL_NON_BORING_AND_SKIP_DEL_MARKED	dict/dict0stats.cc	/^  COUNT_ALL_NON_BORING_AND_SKIP_DEL_MARKED, \/* scan all records on$/;"	e	enum:page_scan_method_t	file:
COUNT_ALL_NON_BORING_INCLUDE_DEL_MARKED	dict/dict0stats.cc	/^  COUNT_ALL_NON_BORING_INCLUDE_DEL_MARKED \/* scan all records on$/;"	e	enum:page_scan_method_t	file:
Cache_hint	include/buf0buf.h	/^enum class Cache_hint {$/;"	c
Cacheline_padded	include/ut0cpu_cache.h	/^struct Cacheline_padded : public T {$/;"	s	namespace:ut
Cell	include/ut0mpmcbq.h	/^  struct Cell {$/;"	s	class:mpmc_bq
Char_Ptr_Compare	fil/fil0fil.cc	/^struct Char_Ptr_Compare {$/;"	s	file:
Char_Ptr_Hash	fil/fil0fil.cc	/^struct Char_Ptr_Hash {$/;"	s	file:
Check	buf/buf0flu.cc	/^struct Check {$/;"	s	file:
CheckInFreeList	include/buf0buf.h	/^struct CheckInFreeList {$/;"	s	class:Cache_hint
CheckInLRUList	include/buf0buf.h	/^struct CheckInLRUList {$/;"	s	class:Cache_hint
CheckUnzipLRUAndLRUList	include/buf0buf.h	/^struct CheckUnzipLRUAndLRUList {$/;"	s	class:Cache_hint
CheckZipFree	buf/buf0buddy.cc	/^  CheckZipFree(ulint i) : m_i(i) {}$/;"	f	struct:CheckZipFree
CheckZipFree	buf/buf0buddy.cc	/^struct CheckZipFree {$/;"	s	file:
Chnunk_Bitmap	include/clone0desc.h	/^  Chnunk_Bitmap() : m_bitmap(), m_size(), m_bits() {}$/;"	f	class:Chnunk_Bitmap
Chnunk_Bitmap	include/clone0desc.h	/^class Chnunk_Bitmap {$/;"	c
Chunk_Info	include/clone0desc.h	/^struct Chunk_Info {$/;"	s
Clone_Desc_Data	include/clone0desc.h	/^struct Clone_Desc_Data {$/;"	s
Clone_Desc_File_MetaData	include/clone0desc.h	/^struct Clone_Desc_File_MetaData {$/;"	s
Clone_Desc_Header	include/clone0desc.h	/^struct Clone_Desc_Header {$/;"	s
Clone_Desc_Locator	include/clone0desc.h	/^struct Clone_Desc_Locator {$/;"	s
Clone_Desc_State	include/clone0desc.h	/^struct Clone_Desc_State {$/;"	s
Clone_Desc_Task_Meta	include/clone0desc.h	/^struct Clone_Desc_Task_Meta {$/;"	s
Clone_Desc_Type	include/clone0desc.h	/^enum Clone_Desc_Type {$/;"	g
Clone_File_Meta	include/clone0desc.h	/^struct Clone_File_Meta {$/;"	s
Clone_Handle	clone/clone0clone.cc	/^Clone_Handle::Clone_Handle(Clone_Handle_Type handle_type, uint clone_version,$/;"	f	class:Clone_Handle
Clone_Handle	include/clone0clone.h	/^class Clone_Handle {$/;"	c
Clone_Handle_State	include/clone0clone.h	/^enum Clone_Handle_State {$/;"	g
Clone_Handle_Type	include/clone0snapshot.h	/^enum Clone_Handle_Type {$/;"	g
Clone_Monitor	include/clone0monitor.h	/^  Clone_Monitor()$/;"	f	class:Clone_Monitor
Clone_Monitor	include/clone0monitor.h	/^class Clone_Monitor {$/;"	c
Clone_Page	include/clone0snapshot.h	/^struct Clone_Page {$/;"	s
Clone_Snapshot	clone/clone0snapshot.cc	/^Clone_Snapshot::Clone_Snapshot(Clone_Handle_Type hdl_type,$/;"	f	class:Clone_Snapshot
Clone_Snapshot	include/clone0snapshot.h	/^class Clone_Snapshot {$/;"	c
Clone_Sys	clone/clone0clone.cc	/^Clone_Sys::Clone_Sys()$/;"	f	class:Clone_Sys
Clone_Sys	include/clone0clone.h	/^class Clone_Sys {$/;"	c
Clone_System_State	include/clone0clone.h	/^enum Clone_System_State {$/;"	g
Clone_Task	include/clone0clone.h	/^struct Clone_Task {$/;"	s
Clone_Task_Manager	include/clone0clone.h	/^class Clone_Task_Manager {$/;"	c
Clone_Task_Meta	include/clone0desc.h	/^struct Clone_Task_Meta {$/;"	s
Clone_Task_State	include/clone0clone.h	/^enum Clone_Task_State { CLONE_TASK_INACTIVE = 1, CLONE_TASK_ACTIVE };$/;"	g
Clone_persist_gtid	include/clone0repl.h	/^  Clone_persist_gtid() {$/;"	f	class:Clone_persist_gtid
Clone_persist_gtid	include/clone0repl.h	/^class Clone_persist_gtid {$/;"	c
Command	mtr/mtr0mtr.cc	/^  explicit Command(mtr_t *mtr) : m_locks_released() { init(mtr); }$/;"	f	class:mtr_t::Command
Command	mtr/mtr0mtr.cc	/^class mtr_t::Command {$/;"	c	class:mtr_t	file:
Compression	os/file.h	/^  Compression() : m_type(NONE) {}$/;"	f	struct:Compression
Compression	os/file.h	/^  explicit Compression(Type type) : m_type(type) {$/;"	f	struct:Compression
Compression	os/file.h	/^struct Compression {$/;"	s
Config	include/row0pread.h	/^    Config(const Config &config)$/;"	f	struct:Parallel_reader::Config
Config	include/row0pread.h	/^    Config(const Scan_range &scan_range, dict_index_t *index,$/;"	f	struct:Parallel_reader::Config
Config	include/row0pread.h	/^  struct Config {$/;"	s	class:Parallel_reader
Context	include/sync0policy.h	/^    Context()$/;"	f	struct:MutexDebug::Context
Context	include/sync0policy.h	/^    Context(latch_id_t id) : latch_t(id) { \/* No op *\/$/;"	f	struct:MutexDebug::Context
Context	include/sync0policy.h	/^  struct Context : public latch_t {$/;"	s	class:MutexDebug
CorruptedIndexPersister	include/dict0mem.h	/^class CorruptedIndexPersister : public Persister {$/;"	c
Count	handler/ha_innodb.cc	/^    typedef latch_meta_t::CounterType::Count Count;$/;"	t	struct:ShowStatus::GetCount	file:
Count	include/sync0policy.h	/^  typedef typename latch_meta_t::CounterType::Count Count;$/;"	t	class:BlockMutexPolicy
Count	include/sync0types.h	/^  struct Count {$/;"	s	class:LatchCounter
Counter	include/sync0policy.h	/^  typedef latch_meta_t::CounterType Counter;$/;"	t	class:BlockMutexPolicy
Counter	include/sync0policy.h	/^  typedef latch_meta_t::CounterType Counter;$/;"	t	struct:GenericPolicy
Counter	include/ut0counter.h	/^namespace Counter {$/;"	n
CounterType	include/sync0types.h	/^  typedef Counter CounterType;$/;"	t	class:LatchMeta
Counters	include/sync0types.h	/^  typedef std::vector<Count *> Counters;$/;"	t	class:LatchCounter
CreateTracker	sync/sync0debug.cc	/^struct CreateTracker {$/;"	s	file:
DATA_BIG_COL	include/data0type.h	275;"	d
DATA_BIG_LEN_MTYPE	include/data0type.h	272;"	d
DATA_BINARY	include/data0type.h	64;"	d
DATA_BINARY_TYPE	include/data0type.h	205;"	d
DATA_BLOB	include/data0type.h	65;"	d
DATA_CHAR	include/data0type.h	60;"	d
DATA_DECIMAL	include/data0type.h	81;"	d
DATA_DOUBLE	include/data0type.h	80;"	d
DATA_ENGLISH	include/data0type.h	157;"	d
DATA_ERROR	include/data0type.h	161;"	d
DATA_FILE	include/os0file.h	/^    DATA_FILE = 8,$/;"	e	enum:IORequest::__anon5
DATA_FIXBINARY	include/data0type.h	63;"	d
DATA_FLOAT	include/data0type.h	79;"	d
DATA_FTS_DOC_ID	include/data0type.h	194;"	d
DATA_GEOMETRY	include/data0type.h	97;"	d
DATA_GEOMETRY_MTYPE	include/data0type.h	262;"	d
DATA_GIS_MBR	include/data0type.h	214;"	d
DATA_INT	include/data0type.h	72;"	d
DATA_ITT_N_SYS_COLS	include/data0type.h	190;"	d
DATA_LARGE_BINARY	include/data0type.h	278;"	d
DATA_LARGE_MTYPE	include/data0type.h	267;"	d
DATA_LONG_TRUE_VARCHAR	include/data0type.h	217;"	d
DATA_MBMAX	include/data0type.h	236;"	d
DATA_MBMAXLEN	include/data0type.h	255;"	d
DATA_MBMINLEN	include/data0type.h	252;"	d
DATA_MBMINMAXLEN	include/data0type.h	248;"	d
DATA_MBR_LEN	include/data0type.h	215;"	d
DATA_MISSING	include/data0type.h	52;"	d
DATA_MTYPE_CURRENT_MAX	include/data0type.h	112;"	d
DATA_MTYPE_CURRENT_MIN	include/data0type.h	111;"	d
DATA_MTYPE_MAX	include/data0type.h	107;"	d
DATA_MULTI_VALUE	include/data0type.h	223;"	d
DATA_MYSQL	include/data0type.h	83;"	d
DATA_MYSQL_BINARY_CHARSET_COLL	include/data0type.h	39;"	d
DATA_MYSQL_TRUE_VARCHAR	include/data0type.h	166;"	d
DATA_MYSQL_TYPE_MASK	include/data0type.h	163;"	d
DATA_NEW_ORDER_NULL_TYPE_BUF_SIZE	include/data0type.h	233;"	d
DATA_NOT_NULL	include/data0type.h	199;"	d
DATA_N_SYS_COLS	include/data0type.h	188;"	d
DATA_ORDER_NULL_TYPE_BUF_SIZE	include/data0type.h	230;"	d
DATA_POINT	include/data0type.h	102;"	d
DATA_POINT_LEN	include/data0type.h	245;"	d
DATA_POINT_MTYPE	include/data0type.h	258;"	d
DATA_ROLL_PTR	include/data0type.h	/^constexpr size_t DATA_ROLL_PTR = 2;$/;"	v
DATA_ROLL_PTR_LEN	include/data0type.h	/^constexpr size_t DATA_ROLL_PTR_LEN = 7;$/;"	v
DATA_ROW_ID	include/data0type.h	173;"	d
DATA_ROW_ID_LEN	include/data0type.h	174;"	d
DATA_SYS	include/data0type.h	74;"	d
DATA_SYS_CHILD	include/data0type.h	73;"	d
DATA_SYS_PRTYPE_MASK	include/data0type.h	196;"	d
DATA_TRX_ID	include/data0type.h	/^constexpr size_t DATA_TRX_ID = 1;$/;"	v
DATA_TRX_ID_LEN	include/data0type.h	/^constexpr size_t DATA_TRX_ID_LEN = 6;$/;"	v
DATA_TUPLE_MAGIC_N	include/data0data.h	743;"	d
DATA_UNSIGNED	include/data0type.h	202;"	d
DATA_VARCHAR	include/data0type.h	53;"	d
DATA_VARMYSQL	include/data0type.h	82;"	d
DATA_VAR_POINT	include/data0type.h	103;"	d
DATA_VIRTUAL	include/data0type.h	222;"	d
DBLWR	include/os0file.h	/^    DBLWR = 4,$/;"	e	enum:IORequest::__anon5
DBLWR_V1	buf/buf0dblwr.cc	/^constexpr ulint DBLWR_V1 = 536853855;$/;"	v
DBLWR_V1_BLOCK1	include/buf0dblwr.h	/^constexpr ulint DBLWR_V1_BLOCK1 = (4 + FSEG_HEADER_SIZE);$/;"	v
DBLWR_V1_BLOCK2	include/buf0dblwr.h	/^constexpr ulint DBLWR_V1_BLOCK2 = (8 + FSEG_HEADER_SIZE);$/;"	v
DBLWR_V1_EXTENT_SIZE	include/buf0dblwr.h	42;"	d
DBLWR_V1_FSEG	buf/buf0dblwr.cc	/^constexpr ulint DBLWR_V1_FSEG = 0;$/;"	v
DBLWR_V1_REPEAT	buf/buf0dblwr.cc	/^constexpr ulint DBLWR_V1_REPEAT = 12;$/;"	v
DBLWR_V1_SPACE_ID_STORED	buf/buf0dblwr.cc	/^constexpr ulint DBLWR_V1_SPACE_ID_STORED = (24 + FSEG_HEADER_SIZE);$/;"	v
DBLWR_V1_SPACE_ID_STORED_N	buf/buf0dblwr.cc	/^constexpr ulint DBLWR_V1_SPACE_ID_STORED_N = 1783657386;$/;"	v
DBLWR_VER	include/buf0dblwr.h	/^constexpr ulint DBLWR_VER = FSEG_HEADER_SIZE;$/;"	v
DBUG_INJECT_CRASH	include/ut0dbg.h	82;"	d
DBUG_INJECT_CRASH	include/ut0dbg.h	96;"	d
DBUG_INJECT_CRASH_WITH_LOG_FLUSH	include/ut0dbg.h	89;"	d
DBUG_INJECT_CRASH_WITH_LOG_FLUSH	include/ut0dbg.h	97;"	d
DB_ABORT_INCOMPLETE_CLONE	include/db0err.h	/^  DB_ABORT_INCOMPLETE_CLONE,$/;"	e	enum:dberr_t
DB_BTREE_LEVEL_LIMIT_EXCEEDED	include/db0err.h	/^  DB_BTREE_LEVEL_LIMIT_EXCEEDED,$/;"	e	enum:dberr_t
DB_CACHE_RECORDS	include/db0err.h	/^  DB_CACHE_RECORDS,$/;"	e	enum:dberr_t
DB_CANNOT_ADD_CONSTRAINT	include/db0err.h	/^  DB_CANNOT_ADD_CONSTRAINT,$/;"	e	enum:dberr_t
DB_CANNOT_DROP_CONSTRAINT	include/db0err.h	/^  DB_CANNOT_DROP_CONSTRAINT,$/;"	e	enum:dberr_t
DB_CANNOT_OPEN_FILE	include/db0err.h	/^  DB_CANNOT_OPEN_FILE,$/;"	e	enum:dberr_t
DB_CANT_CREATE_GEOMETRY_OBJECT	include/db0err.h	/^  DB_CANT_CREATE_GEOMETRY_OBJECT,$/;"	e	enum:dberr_t
DB_CHILD_NO_INDEX	include/db0err.h	/^  DB_CHILD_NO_INDEX,$/;"	e	enum:dberr_t
DB_CLUSTER_NOT_FOUND	include/db0err.h	/^  DB_CLUSTER_NOT_FOUND = 30,$/;"	e	enum:dberr_t
DB_COMPUTE_VALUE_FAILED	include/db0err.h	/^  DB_COMPUTE_VALUE_FAILED,$/;"	e	enum:dberr_t
DB_CORRUPTION	include/db0err.h	/^  DB_CORRUPTION,$/;"	e	enum:dberr_t
DB_DATA_MISMATCH	include/db0err.h	/^  DB_DATA_MISMATCH = 2000,$/;"	e	enum:dberr_t
DB_DBLWR_INIT_FAILED	include/db0err.h	/^  DB_DBLWR_INIT_FAILED,$/;"	e	enum:dberr_t
DB_DBLWR_NOT_EXISTS	include/db0err.h	/^  DB_DBLWR_NOT_EXISTS,$/;"	e	enum:dberr_t
DB_DEADLOCK	include/db0err.h	/^  DB_DEADLOCK,$/;"	e	enum:dberr_t
DB_DUPLICATE_KEY	include/db0err.h	/^  DB_DUPLICATE_KEY,$/;"	e	enum:dberr_t
DB_END_OF_BLOCK	include/db0err.h	/^  DB_END_OF_BLOCK,$/;"	e	enum:dberr_t
DB_END_OF_INDEX	include/db0err.h	/^  DB_END_OF_INDEX,$/;"	e	enum:dberr_t
DB_END_SAMPLE_READ	include/db0err.h	/^  DB_END_SAMPLE_READ,$/;"	e	enum:dberr_t
DB_ERROR	include/db0err.h	/^  DB_ERROR,$/;"	e	enum:dberr_t
DB_ERROR_UNSET	include/db0err.h	/^  DB_ERROR_UNSET = 0,$/;"	e	enum:dberr_t
DB_FAIL	include/db0err.h	/^  DB_FAIL = 1000,$/;"	e	enum:dberr_t
DB_FORCED_ABORT	include/db0err.h	/^  DB_FORCED_ABORT,$/;"	e	enum:dberr_t
DB_FOREIGN_DUPLICATE_KEY	include/db0err.h	/^  DB_FOREIGN_DUPLICATE_KEY,$/;"	e	enum:dberr_t
DB_FOREIGN_EXCEED_MAX_CASCADE	include/db0err.h	/^  DB_FOREIGN_EXCEED_MAX_CASCADE,$/;"	e	enum:dberr_t
DB_FTS_EXCEED_RESULT_CACHE_LIMIT	include/db0err.h	/^  DB_FTS_EXCEED_RESULT_CACHE_LIMIT,$/;"	e	enum:dberr_t
DB_FTS_INVALID_DOCID	include/db0err.h	/^  DB_FTS_INVALID_DOCID,$/;"	e	enum:dberr_t
DB_FTS_TOO_MANY_NESTED_EXP	include/db0err.h	/^  DB_FTS_TOO_MANY_NESTED_EXP$/;"	e	enum:dberr_t
DB_FTS_TOO_MANY_WORDS_IN_PHRASE	include/db0err.h	/^  DB_FTS_TOO_MANY_WORDS_IN_PHRASE,$/;"	e	enum:dberr_t
DB_IDENTIFIER_TOO_LONG	include/db0err.h	/^  DB_IDENTIFIER_TOO_LONG,$/;"	e	enum:dberr_t
DB_INDEX_CORRUPT	include/db0err.h	/^  DB_INDEX_CORRUPT,$/;"	e	enum:dberr_t
DB_INTERRUPTED	include/db0err.h	/^  DB_INTERRUPTED,$/;"	e	enum:dberr_t
DB_INVALID_ENCRYPTION_META	include/db0err.h	/^  DB_INVALID_ENCRYPTION_META,$/;"	e	enum:dberr_t
DB_INVALID_NULL	include/db0err.h	/^  DB_INVALID_NULL,$/;"	e	enum:dberr_t
DB_IO_DECOMPRESS_FAIL	include/db0err.h	/^  DB_IO_DECOMPRESS_FAIL,$/;"	e	enum:dberr_t
DB_IO_DECRYPT_FAIL	include/db0err.h	/^  DB_IO_DECRYPT_FAIL,$/;"	e	enum:dberr_t
DB_IO_ERROR	include/db0err.h	/^  DB_IO_ERROR = 100,$/;"	e	enum:dberr_t
DB_IO_NO_ENCRYPT_TABLESPACE	include/db0err.h	/^  DB_IO_NO_ENCRYPT_TABLESPACE,$/;"	e	enum:dberr_t
DB_IO_NO_PUNCH_HOLE	include/db0err.h	/^  DB_IO_NO_PUNCH_HOLE,$/;"	e	enum:dberr_t
DB_IO_NO_PUNCH_HOLE_FS	include/db0err.h	/^  DB_IO_NO_PUNCH_HOLE_FS,$/;"	e	enum:dberr_t
DB_IO_NO_PUNCH_HOLE_TABLESPACE	include/db0err.h	/^  DB_IO_NO_PUNCH_HOLE_TABLESPACE,$/;"	e	enum:dberr_t
DB_IO_PARTIAL_FAILED	include/db0err.h	/^  DB_IO_PARTIAL_FAILED,$/;"	e	enum:dberr_t
DB_LOCK_NOWAIT	include/db0err.h	/^  DB_LOCK_NOWAIT,$/;"	e	enum:dberr_t
DB_LOCK_TABLE_FULL	include/db0err.h	/^  DB_LOCK_TABLE_FULL,$/;"	e	enum:dberr_t
DB_LOCK_WAIT	include/db0err.h	/^  DB_LOCK_WAIT,$/;"	e	enum:dberr_t
DB_LOCK_WAIT_TIMEOUT	include/db0err.h	/^  DB_LOCK_WAIT_TIMEOUT,$/;"	e	enum:dberr_t
DB_MISSING_HISTORY	include/db0err.h	/^  DB_MISSING_HISTORY,$/;"	e	enum:dberr_t
DB_MUST_GET_MORE_FILE_SPACE	include/db0err.h	/^  DB_MUST_GET_MORE_FILE_SPACE,$/;"	e	enum:dberr_t
DB_NAME_COL_NO	include/dict0stats.h	/^  static constexpr unsigned DB_NAME_COL_NO = 0;$/;"	m	class:TableStatsRecord
DB_NOT_FOUND	include/db0err.h	/^  DB_NOT_FOUND,$/;"	e	enum:dberr_t
DB_NO_FK_ON_S_BASE_COL	include/db0err.h	/^  DB_NO_FK_ON_S_BASE_COL,$/;"	e	enum:dberr_t
DB_NO_REFERENCED_ROW	include/db0err.h	/^  DB_NO_REFERENCED_ROW,$/;"	e	enum:dberr_t
DB_NO_SAVEPOINT	include/db0err.h	/^  DB_NO_SAVEPOINT,$/;"	e	enum:dberr_t
DB_NO_SESSION_TEMP	include/db0err.h	/^  DB_NO_SESSION_TEMP,$/;"	e	enum:dberr_t
DB_ONLINE_LOG_TOO_BIG	include/db0err.h	/^  DB_ONLINE_LOG_TOO_BIG,$/;"	e	enum:dberr_t
DB_OUT_OF_DISK_SPACE	include/db0err.h	/^  DB_OUT_OF_DISK_SPACE,$/;"	e	enum:dberr_t
DB_OUT_OF_FILE_SPACE	include/db0err.h	/^  DB_OUT_OF_FILE_SPACE,$/;"	e	enum:dberr_t
DB_OUT_OF_MEMORY	include/db0err.h	/^  DB_OUT_OF_MEMORY,$/;"	e	enum:dberr_t
DB_OUT_OF_RESOURCES	include/db0err.h	/^  DB_OUT_OF_RESOURCES,$/;"	e	enum:dberr_t
DB_OVERFLOW	include/db0err.h	/^  DB_OVERFLOW,$/;"	e	enum:dberr_t
DB_PAGE_IS_STALE	include/db0err.h	/^  DB_PAGE_IS_STALE,$/;"	e	enum:dberr_t
DB_PARENT_NO_INDEX	include/db0err.h	/^  DB_PARENT_NO_INDEX,$/;"	e	enum:dberr_t
DB_READ_ONLY	include/db0err.h	/^  DB_READ_ONLY,$/;"	e	enum:dberr_t
DB_RECORD_NOT_FOUND	include/db0err.h	/^  DB_RECORD_NOT_FOUND = 1500,$/;"	e	enum:dberr_t
DB_ROLLBACK	include/db0err.h	/^  DB_ROLLBACK,$/;"	e	enum:dberr_t
DB_ROW_IS_REFERENCED	include/db0err.h	/^  DB_ROW_IS_REFERENCED,$/;"	e	enum:dberr_t
DB_SCHEMA_MISMATCH	include/db0err.h	/^  DB_SCHEMA_MISMATCH,$/;"	e	enum:dberr_t
DB_SEPARATOR	fil/fil0fil.cc	/^constexpr char Fil_path::DB_SEPARATOR;$/;"	m	class:Fil_path	file:
DB_SEPARATOR	include/fil0fil.h	/^  static constexpr auto DB_SEPARATOR = '\/';$/;"	m	class:Fil_path
DB_SERVER_VERSION_LOW	include/db0err.h	/^  DB_SERVER_VERSION_LOW,$/;"	e	enum:dberr_t
DB_SKIP_LOCKED	include/db0err.h	/^  DB_SKIP_LOCKED,$/;"	e	enum:dberr_t
DB_STATS_DO_NOT_EXIST	include/db0err.h	/^  DB_STATS_DO_NOT_EXIST,$/;"	e	enum:dberr_t
DB_STRONG_FAIL	include/db0err.h	/^  DB_STRONG_FAIL,$/;"	e	enum:dberr_t
DB_SUCCESS	include/db0err.h	/^  DB_SUCCESS = 10,$/;"	e	enum:dberr_t
DB_SUCCESS_LOCKED_REC	include/db0err.h	/^  DB_SUCCESS_LOCKED_REC = 9,$/;"	e	enum:dberr_t
DB_TABLESPACE_DELETED	include/db0err.h	/^  DB_TABLESPACE_DELETED,$/;"	e	enum:dberr_t
DB_TABLESPACE_EXISTS	include/db0err.h	/^  DB_TABLESPACE_EXISTS,$/;"	e	enum:dberr_t
DB_TABLESPACE_NOT_FOUND	include/db0err.h	/^  DB_TABLESPACE_NOT_FOUND,$/;"	e	enum:dberr_t
DB_TABLE_CORRUPT	include/db0err.h	/^  DB_TABLE_CORRUPT,$/;"	e	enum:dberr_t
DB_TABLE_IN_FK_CHECK	include/db0err.h	/^  DB_TABLE_IN_FK_CHECK,$/;"	e	enum:dberr_t
DB_TABLE_IS_BEING_USED	include/db0err.h	/^  DB_TABLE_IS_BEING_USED,$/;"	e	enum:dberr_t
DB_TABLE_NOT_FOUND	include/db0err.h	/^  DB_TABLE_NOT_FOUND,$/;"	e	enum:dberr_t
DB_TEMP_FILE_WRITE_FAIL	include/db0err.h	/^  DB_TEMP_FILE_WRITE_FAIL,$/;"	e	enum:dberr_t
DB_TOO_BIG_INDEX_COL	include/db0err.h	/^  DB_TOO_BIG_INDEX_COL,$/;"	e	enum:dberr_t
DB_TOO_BIG_RECORD	include/db0err.h	/^  DB_TOO_BIG_RECORD,$/;"	e	enum:dberr_t
DB_TOO_LONG_PATH	include/db0err.h	/^  DB_TOO_LONG_PATH,$/;"	e	enum:dberr_t
DB_TOO_MANY_CONCURRENT_TRXS	include/db0err.h	/^  DB_TOO_MANY_CONCURRENT_TRXS,$/;"	e	enum:dberr_t
DB_UNDERFLOW	include/db0err.h	/^  DB_UNDERFLOW,$/;"	e	enum:dberr_t
DB_UNDO_RECORD_TOO_BIG	include/db0err.h	/^  DB_UNDO_RECORD_TOO_BIG,$/;"	e	enum:dberr_t
DB_UNSUPPORTED	include/db0err.h	/^  DB_UNSUPPORTED,$/;"	e	enum:dberr_t
DB_V1_DBLWR_CREATE_FAILED	include/db0err.h	/^  DB_V1_DBLWR_CREATE_FAILED,$/;"	e	enum:dberr_t
DB_V1_DBLWR_INIT_FAILED	include/db0err.h	/^  DB_V1_DBLWR_INIT_FAILED,$/;"	e	enum:dberr_t
DB_WRONG_FILE_NAME	include/db0err.h	/^  DB_WRONG_FILE_NAME,$/;"	e	enum:dberr_t
DB_ZIP_OVERFLOW	include/db0err.h	/^  DB_ZIP_OVERFLOW,$/;"	e	enum:dberr_t
DDL_Log_Table	include/log0ddl.h	/^class DDL_Log_Table {$/;"	c	class:Log_Type
DDL_Log_Table	log/log0ddl.cc	/^DDL_Log_Table::DDL_Log_Table() : DDL_Log_Table(nullptr) {}$/;"	f	class:DDL_Log_Table
DDL_Log_Table	log/log0ddl.cc	/^DDL_Log_Table::DDL_Log_Table(trx_t *trx)$/;"	f	class:DDL_Log_Table
DDL_Record	include/log0ddl.h	/^class DDL_Record {$/;"	c	class:Log_Type
DDL_Record	log/log0ddl.cc	/^DDL_Record::DDL_Record()$/;"	f	class:DDL_Record
DDTableBuffer	dict/dict0dict.cc	/^DDTableBuffer::DDTableBuffer() {$/;"	f	class:DDTableBuffer
DDTableBuffer	include/dict0dict.h	/^class DDTableBuffer {$/;"	c
DD_COLUMN__LAST	include/dict0dd.h	/^  DD_COLUMN__LAST$/;"	e	enum:dd_column_keys
DD_FAILURE	include/dict0dd.h	70;"	d
DD_FIELD_OFFSET	dict/dict0dd.cc	/^static const int DD_FIELD_OFFSET = 2;$/;"	v	file:
DD_INDEX_ID	include/dict0dd.h	/^  DD_INDEX_ID,$/;"	e	enum:dd_index_keys
DD_INDEX_ROOT	include/dict0dd.h	/^  DD_INDEX_ROOT,$/;"	e	enum:dd_index_keys
DD_INDEX_SPACE_ID	include/dict0dd.h	/^  DD_INDEX_SPACE_ID,$/;"	e	enum:dd_index_keys
DD_INDEX_TRX_ID	include/dict0dd.h	/^  DD_INDEX_TRX_ID,$/;"	e	enum:dd_index_keys
DD_INDEX__LAST	include/dict0dd.h	/^  DD_INDEX__LAST$/;"	e	enum:dd_index_keys
DD_INSTANT_COLUMN_DEFAULT	include/dict0dd.h	/^  DD_INSTANT_COLUMN_DEFAULT,$/;"	e	enum:dd_column_keys
DD_INSTANT_COLUMN_DEFAULT_NULL	include/dict0dd.h	/^  DD_INSTANT_COLUMN_DEFAULT_NULL,$/;"	e	enum:dd_column_keys
DD_PARTITION_DISCARD	include/dict0dd.h	/^  DD_PARTITION_DISCARD,$/;"	e	enum:dd_partition_keys
DD_PARTITION_INSTANT_COLS	include/dict0dd.h	/^  DD_PARTITION_INSTANT_COLS,$/;"	e	enum:dd_partition_keys
DD_PARTITION_ROW_FORMAT	include/dict0dd.h	/^  DD_PARTITION_ROW_FORMAT,$/;"	e	enum:dd_partition_keys
DD_PARTITION__LAST	include/dict0dd.h	/^  DD_PARTITION__LAST$/;"	e	enum:dd_partition_keys
DD_SPACE_CURRENT_SPACE_VERSION	include/dict0dd.h	/^const uint32 DD_SPACE_CURRENT_SPACE_VERSION = 1;$/;"	v
DD_SPACE_CURRENT_SRV_VERSION	include/dict0dd.h	/^const uint32 DD_SPACE_CURRENT_SRV_VERSION = MYSQL_VERSION_ID;$/;"	v
DD_SPACE_DISCARD	include/dict0dd.h	/^  DD_SPACE_DISCARD,$/;"	e	enum:dd_space_keys
DD_SPACE_FLAGS	include/dict0dd.h	/^  DD_SPACE_FLAGS,$/;"	e	enum:dd_space_keys
DD_SPACE_ID	include/dict0dd.h	/^  DD_SPACE_ID,$/;"	e	enum:dd_space_keys
DD_SPACE_SERVER_VERSION	include/dict0dd.h	/^  DD_SPACE_SERVER_VERSION,$/;"	e	enum:dd_space_keys
DD_SPACE_STATE	include/dict0dd.h	/^  DD_SPACE_STATE,$/;"	e	enum:dd_space_keys
DD_SPACE_STATE_ACTIVE	include/dict0dd.h	/^  DD_SPACE_STATE_ACTIVE,$/;"	e	enum:dd_space_states
DD_SPACE_STATE_CORRUPTED	include/dict0dd.h	/^  DD_SPACE_STATE_CORRUPTED,$/;"	e	enum:dd_space_states
DD_SPACE_STATE_DISCARDED	include/dict0dd.h	/^  DD_SPACE_STATE_DISCARDED,$/;"	e	enum:dd_space_states
DD_SPACE_STATE_EMPTY	include/dict0dd.h	/^  DD_SPACE_STATE_EMPTY,$/;"	e	enum:dd_space_states
DD_SPACE_STATE_INACTIVE	include/dict0dd.h	/^  DD_SPACE_STATE_INACTIVE,$/;"	e	enum:dd_space_states
DD_SPACE_STATE_NORMAL	include/dict0dd.h	/^  DD_SPACE_STATE_NORMAL,$/;"	e	enum:dd_space_states
DD_SPACE_STATE__LAST	include/dict0dd.h	/^  DD_SPACE_STATE__LAST$/;"	e	enum:dd_space_states
DD_SPACE_VERSION	include/dict0dd.h	/^  DD_SPACE_VERSION,$/;"	e	enum:dd_space_keys
DD_SPACE__LAST	include/dict0dd.h	/^  DD_SPACE__LAST$/;"	e	enum:dd_space_keys
DD_SUCCESS	include/dict0dd.h	69;"	d
DD_TABLE_AUTOINC	include/dict0dd.h	/^  DD_TABLE_AUTOINC,$/;"	e	enum:dd_table_keys
DD_TABLE_DATA_DIRECTORY	include/dict0dd.h	/^  DD_TABLE_DATA_DIRECTORY,$/;"	e	enum:dd_table_keys
DD_TABLE_DISCARD	include/dict0dd.h	/^  DD_TABLE_DISCARD,$/;"	e	enum:dd_table_keys
DD_TABLE_ID	include/dict0dd.h	/^  DD_TABLE_ID,$/;"	e	enum:dd_index_keys
DD_TABLE_INSTANT_COLS	include/dict0dd.h	/^  DD_TABLE_INSTANT_COLS,$/;"	e	enum:dd_table_keys
DD_TABLE_VERSION	include/dict0dd.h	/^  DD_TABLE_VERSION,$/;"	e	enum:dd_table_keys
DD_TABLE__LAST	include/dict0dd.h	/^  DD_TABLE__LAST$/;"	e	enum:dd_table_keys
DD_instant_col_val_coder	include/dict0dd.h	/^  DD_instant_col_val_coder() : m_result(nullptr) {}$/;"	f	class:DD_instant_col_val_coder
DD_instant_col_val_coder	include/dict0dd.h	/^class DD_instant_col_val_coder {$/;"	c
DEBUG_FTS_SORT_PRINT	include/row0ftsort.h	159;"	d
DEBUG_FTS_SORT_PRINT	include/row0ftsort.h	165;"	d
DEBUG_PRINTF	dict/dict0stats.cc	124;"	d	file:
DEBUG_PRINTF	dict/dict0stats.cc	126;"	d	file:
DECRYPTION	include/fil0fil.h	/^enum encryption_op_type { ENCRYPTION = 1, DECRYPTION = 2, NONE };$/;"	e	enum:encryption_op_type
DECRYPT_IN_PROGRESS	include/os0enc.h	/^  static constexpr size_t DECRYPT_IN_PROGRESS = 1 << 1;$/;"	m	class:Encryption
DEFAULT_COMPRESSION_LEVEL	include/page0zip.h	63;"	d
DEFAULT_MASTER_KEY	include/os0enc.h	/^  static constexpr char DEFAULT_MASTER_KEY[] = "DefaultMasterKey";$/;"	m	class:Encryption
DEFAULT_MASTER_KEY	os/os0enc.cc	/^constexpr char Encryption::DEFAULT_MASTER_KEY[];$/;"	m	class:Encryption	file:
DEFAULT_MASTER_KEY_ID	include/os0enc.h	/^  static constexpr uint32_t DEFAULT_MASTER_KEY_ID = 0;$/;"	m	class:Encryption
DEFAULT_ROW_FORMAT_COMPACT	handler/ha_innodb.cc	/^  DEFAULT_ROW_FORMAT_COMPACT = 1,$/;"	e	enum:default_row_format_enum	file:
DEFAULT_ROW_FORMAT_DYNAMIC	handler/ha_innodb.cc	/^  DEFAULT_ROW_FORMAT_DYNAMIC = 2,$/;"	e	enum:default_row_format_enum	file:
DEFAULT_ROW_FORMAT_REDUNDANT	handler/ha_innodb.cc	/^  DEFAULT_ROW_FORMAT_REDUNDANT = 0,$/;"	e	enum:default_row_format_enum	file:
DELETED	include/fil0fil.h	/^  DELETED,$/;"	m	class:Fil_state
DELETED	include/ut0lock_free_hash.h	/^  static const int64_t DELETED = NOT_FOUND - 1;$/;"	m	class:ut_lock_free_hash_t
DELETE_IDS_RETRIES_MAX	log/log0ddl.cc	1536;"	d	file:
DELETE_SPACE_LOG	include/log0ddl.h	/^  DELETE_SPACE_LOG,$/;"	m	class:Log_Type
DEPLOY_FENCE	mach/mach0data.cc	102;"	d	file:
DEPLOY_FENCE	mach/mach0data.cc	207;"	d	file:
DESC_CHECK_FLAG	clone/clone0desc.cc	/^inline bool DESC_CHECK_FLAG(ulint flag, ulint bit) {$/;"	f
DESC_SET_FLAG	clone/clone0desc.cc	/^inline void DESC_SET_FLAG(ulint &flag, ulint bit) {$/;"	f
DFS_IOCTL_ATOMIC_WRITE_SET	fil/fil0fil.cc	2407;"	d	file:
DICT_ANTELOPE_MAX_INDEX_COL_LEN	include/dict0mem.h	702;"	d
DICT_CLUSTERED	include/dict0mem.h	85;"	d
DICT_COLUMNS_ID	include/dict0boot.h	100;"	d
DICT_COL__SYS_COLUMNS__LEN	include/dict0boot.h	/^  DICT_COL__SYS_COLUMNS__LEN = 5,$/;"	e	enum:dict_col_sys_columns_enum
DICT_COL__SYS_COLUMNS__MTYPE	include/dict0boot.h	/^  DICT_COL__SYS_COLUMNS__MTYPE = 3,$/;"	e	enum:dict_col_sys_columns_enum
DICT_COL__SYS_COLUMNS__NAME	include/dict0boot.h	/^  DICT_COL__SYS_COLUMNS__NAME = 2,$/;"	e	enum:dict_col_sys_columns_enum
DICT_COL__SYS_COLUMNS__POS	include/dict0boot.h	/^  DICT_COL__SYS_COLUMNS__POS = 1,$/;"	e	enum:dict_col_sys_columns_enum
DICT_COL__SYS_COLUMNS__PREC	include/dict0boot.h	/^  DICT_COL__SYS_COLUMNS__PREC = 6,$/;"	e	enum:dict_col_sys_columns_enum
DICT_COL__SYS_COLUMNS__PRTYPE	include/dict0boot.h	/^  DICT_COL__SYS_COLUMNS__PRTYPE = 4,$/;"	e	enum:dict_col_sys_columns_enum
DICT_COL__SYS_COLUMNS__TABLE_ID	include/dict0boot.h	/^  DICT_COL__SYS_COLUMNS__TABLE_ID = 0,$/;"	e	enum:dict_col_sys_columns_enum
DICT_COL__SYS_DATAFILES__PATH	include/dict0boot.h	/^  DICT_COL__SYS_DATAFILES__PATH = 1,$/;"	e	enum:dict_col_sys_datafiles_enum
DICT_COL__SYS_DATAFILES__SPACE	include/dict0boot.h	/^  DICT_COL__SYS_DATAFILES__SPACE = 0,$/;"	e	enum:dict_col_sys_datafiles_enum
DICT_COL__SYS_FIELDS__COL_NAME	include/dict0boot.h	/^  DICT_COL__SYS_FIELDS__COL_NAME = 2,$/;"	e	enum:dict_col_sys_fields_enum
DICT_COL__SYS_FIELDS__INDEX_ID	include/dict0boot.h	/^  DICT_COL__SYS_FIELDS__INDEX_ID = 0,$/;"	e	enum:dict_col_sys_fields_enum
DICT_COL__SYS_FIELDS__POS	include/dict0boot.h	/^  DICT_COL__SYS_FIELDS__POS = 1,$/;"	e	enum:dict_col_sys_fields_enum
DICT_COL__SYS_FOREIGN_COLS__FOR_COL_NAME	include/dict0boot.h	/^  DICT_COL__SYS_FOREIGN_COLS__FOR_COL_NAME = 2,$/;"	e	enum:dict_col_sys_foreign_cols_enum
DICT_COL__SYS_FOREIGN_COLS__ID	include/dict0boot.h	/^  DICT_COL__SYS_FOREIGN_COLS__ID = 0,$/;"	e	enum:dict_col_sys_foreign_cols_enum
DICT_COL__SYS_FOREIGN_COLS__POS	include/dict0boot.h	/^  DICT_COL__SYS_FOREIGN_COLS__POS = 1,$/;"	e	enum:dict_col_sys_foreign_cols_enum
DICT_COL__SYS_FOREIGN_COLS__REF_COL_NAME	include/dict0boot.h	/^  DICT_COL__SYS_FOREIGN_COLS__REF_COL_NAME = 3,$/;"	e	enum:dict_col_sys_foreign_cols_enum
DICT_COL__SYS_FOREIGN__FOR_NAME	include/dict0boot.h	/^  DICT_COL__SYS_FOREIGN__FOR_NAME = 1,$/;"	e	enum:dict_col_sys_foreign_enum
DICT_COL__SYS_FOREIGN__ID	include/dict0boot.h	/^  DICT_COL__SYS_FOREIGN__ID = 0,$/;"	e	enum:dict_col_sys_foreign_enum
DICT_COL__SYS_FOREIGN__N_COLS	include/dict0boot.h	/^  DICT_COL__SYS_FOREIGN__N_COLS = 3,$/;"	e	enum:dict_col_sys_foreign_enum
DICT_COL__SYS_FOREIGN__REF_NAME	include/dict0boot.h	/^  DICT_COL__SYS_FOREIGN__REF_NAME = 2,$/;"	e	enum:dict_col_sys_foreign_enum
DICT_COL__SYS_INDEXES__ID	include/dict0boot.h	/^  DICT_COL__SYS_INDEXES__ID = 1,$/;"	e	enum:dict_col_sys_indexes_enum
DICT_COL__SYS_INDEXES__MERGE_THRESHOLD	include/dict0boot.h	/^  DICT_COL__SYS_INDEXES__MERGE_THRESHOLD = 7,$/;"	e	enum:dict_col_sys_indexes_enum
DICT_COL__SYS_INDEXES__NAME	include/dict0boot.h	/^  DICT_COL__SYS_INDEXES__NAME = 2,$/;"	e	enum:dict_col_sys_indexes_enum
DICT_COL__SYS_INDEXES__N_FIELDS	include/dict0boot.h	/^  DICT_COL__SYS_INDEXES__N_FIELDS = 3,$/;"	e	enum:dict_col_sys_indexes_enum
DICT_COL__SYS_INDEXES__PAGE_NO	include/dict0boot.h	/^  DICT_COL__SYS_INDEXES__PAGE_NO = 6,$/;"	e	enum:dict_col_sys_indexes_enum
DICT_COL__SYS_INDEXES__SPACE	include/dict0boot.h	/^  DICT_COL__SYS_INDEXES__SPACE = 5,$/;"	e	enum:dict_col_sys_indexes_enum
DICT_COL__SYS_INDEXES__TABLE_ID	include/dict0boot.h	/^  DICT_COL__SYS_INDEXES__TABLE_ID = 0,$/;"	e	enum:dict_col_sys_indexes_enum
DICT_COL__SYS_INDEXES__TYPE	include/dict0boot.h	/^  DICT_COL__SYS_INDEXES__TYPE = 4,$/;"	e	enum:dict_col_sys_indexes_enum
DICT_COL__SYS_TABLESPACES__FLAGS	include/dict0boot.h	/^  DICT_COL__SYS_TABLESPACES__FLAGS = 2,$/;"	e	enum:dict_col_sys_tablespaces_enum
DICT_COL__SYS_TABLESPACES__NAME	include/dict0boot.h	/^  DICT_COL__SYS_TABLESPACES__NAME = 1,$/;"	e	enum:dict_col_sys_tablespaces_enum
DICT_COL__SYS_TABLESPACES__SPACE	include/dict0boot.h	/^  DICT_COL__SYS_TABLESPACES__SPACE = 0,$/;"	e	enum:dict_col_sys_tablespaces_enum
DICT_COL__SYS_TABLES__CLUSTER_ID	include/dict0boot.h	/^  DICT_COL__SYS_TABLES__CLUSTER_ID = 6,$/;"	e	enum:dict_col_sys_tables_enum
DICT_COL__SYS_TABLES__ID	include/dict0boot.h	/^  DICT_COL__SYS_TABLES__ID = 1,$/;"	e	enum:dict_col_sys_tables_enum
DICT_COL__SYS_TABLES__MIX_ID	include/dict0boot.h	/^  DICT_COL__SYS_TABLES__MIX_ID = 4,$/;"	e	enum:dict_col_sys_tables_enum
DICT_COL__SYS_TABLES__MIX_LEN	include/dict0boot.h	/^  DICT_COL__SYS_TABLES__MIX_LEN = 5,$/;"	e	enum:dict_col_sys_tables_enum
DICT_COL__SYS_TABLES__NAME	include/dict0boot.h	/^  DICT_COL__SYS_TABLES__NAME = 0,$/;"	e	enum:dict_col_sys_tables_enum
DICT_COL__SYS_TABLES__N_COLS	include/dict0boot.h	/^  DICT_COL__SYS_TABLES__N_COLS = 2,$/;"	e	enum:dict_col_sys_tables_enum
DICT_COL__SYS_TABLES__SPACE	include/dict0boot.h	/^  DICT_COL__SYS_TABLES__SPACE = 7,$/;"	e	enum:dict_col_sys_tables_enum
DICT_COL__SYS_TABLES__TYPE	include/dict0boot.h	/^  DICT_COL__SYS_TABLES__TYPE = 3,$/;"	e	enum:dict_col_sys_tables_enum
DICT_COL__SYS_VIRTUAL__BASE_POS	include/dict0boot.h	/^  DICT_COL__SYS_VIRTUAL__BASE_POS = 2,$/;"	e	enum:dict_col_sys_virtual_enum
DICT_COL__SYS_VIRTUAL__POS	include/dict0boot.h	/^  DICT_COL__SYS_VIRTUAL__POS = 1,$/;"	e	enum:dict_col_sys_virtual_enum
DICT_COL__SYS_VIRTUAL__TABLE_ID	include/dict0boot.h	/^  DICT_COL__SYS_VIRTUAL__TABLE_ID = 0,$/;"	e	enum:dict_col_sys_virtual_enum
DICT_CORRUPT	include/dict0mem.h	91;"	d
DICT_ERR_IGNORE_ALL	include/dict0types.h	/^  DICT_ERR_IGNORE_ALL = 0xFFFF \/*!< ignore all errors *\/$/;"	e	enum:dict_err_ignore_t
DICT_ERR_IGNORE_CORRUPT	include/dict0types.h	/^  DICT_ERR_IGNORE_CORRUPT = 2,    \/*!< skip corrupted indexes *\/$/;"	e	enum:dict_err_ignore_t
DICT_ERR_IGNORE_FK_NOKEY	include/dict0types.h	/^  DICT_ERR_IGNORE_FK_NOKEY = 4,   \/*!< ignore error if any foreign$/;"	e	enum:dict_err_ignore_t
DICT_ERR_IGNORE_INDEX_ROOT	include/dict0types.h	/^  DICT_ERR_IGNORE_INDEX_ROOT = 1, \/*!< ignore error if index root$/;"	e	enum:dict_err_ignore_t
DICT_ERR_IGNORE_NONE	include/dict0types.h	/^  DICT_ERR_IGNORE_NONE = 0,       \/*!< no error to ignore *\/$/;"	e	enum:dict_err_ignore_t
DICT_ERR_IGNORE_RECOVER_LOCK	include/dict0types.h	/^  DICT_ERR_IGNORE_RECOVER_LOCK = 8,$/;"	e	enum:dict_err_ignore_t
DICT_FIELDS_ID	include/dict0boot.h	102;"	d
DICT_FK_MAX_RECURSIVE_LOAD	include/dict0mem.h	299;"	d
DICT_FLD_LEN_FLAGS	include/dict0boot.h	327;"	d
DICT_FLD_LEN_SPACE	include/dict0boot.h	326;"	d
DICT_FLD__SYS_COLUMNS__DB_ROLL_PTR	include/dict0boot.h	/^  DICT_FLD__SYS_COLUMNS__DB_ROLL_PTR = 3,$/;"	e	enum:dict_fld_sys_columns_enum
DICT_FLD__SYS_COLUMNS__DB_TRX_ID	include/dict0boot.h	/^  DICT_FLD__SYS_COLUMNS__DB_TRX_ID = 2,$/;"	e	enum:dict_fld_sys_columns_enum
DICT_FLD__SYS_COLUMNS__LEN	include/dict0boot.h	/^  DICT_FLD__SYS_COLUMNS__LEN = 7,$/;"	e	enum:dict_fld_sys_columns_enum
DICT_FLD__SYS_COLUMNS__MTYPE	include/dict0boot.h	/^  DICT_FLD__SYS_COLUMNS__MTYPE = 5,$/;"	e	enum:dict_fld_sys_columns_enum
DICT_FLD__SYS_COLUMNS__NAME	include/dict0boot.h	/^  DICT_FLD__SYS_COLUMNS__NAME = 4,$/;"	e	enum:dict_fld_sys_columns_enum
DICT_FLD__SYS_COLUMNS__POS	include/dict0boot.h	/^  DICT_FLD__SYS_COLUMNS__POS = 1,$/;"	e	enum:dict_fld_sys_columns_enum
DICT_FLD__SYS_COLUMNS__PREC	include/dict0boot.h	/^  DICT_FLD__SYS_COLUMNS__PREC = 8,$/;"	e	enum:dict_fld_sys_columns_enum
DICT_FLD__SYS_COLUMNS__PRTYPE	include/dict0boot.h	/^  DICT_FLD__SYS_COLUMNS__PRTYPE = 6,$/;"	e	enum:dict_fld_sys_columns_enum
DICT_FLD__SYS_COLUMNS__TABLE_ID	include/dict0boot.h	/^  DICT_FLD__SYS_COLUMNS__TABLE_ID = 0,$/;"	e	enum:dict_fld_sys_columns_enum
DICT_FLD__SYS_DATAFILES__DB_ROLL_PTR	include/dict0boot.h	/^  DICT_FLD__SYS_DATAFILES__DB_ROLL_PTR = 2,$/;"	e	enum:dict_fld_sys_datafiles_enum
DICT_FLD__SYS_DATAFILES__DB_TRX_ID	include/dict0boot.h	/^  DICT_FLD__SYS_DATAFILES__DB_TRX_ID = 1,$/;"	e	enum:dict_fld_sys_datafiles_enum
DICT_FLD__SYS_DATAFILES__PATH	include/dict0boot.h	/^  DICT_FLD__SYS_DATAFILES__PATH = 3,$/;"	e	enum:dict_fld_sys_datafiles_enum
DICT_FLD__SYS_DATAFILES__SPACE	include/dict0boot.h	/^  DICT_FLD__SYS_DATAFILES__SPACE = 0,$/;"	e	enum:dict_fld_sys_datafiles_enum
DICT_FLD__SYS_FIELDS__COL_NAME	include/dict0boot.h	/^  DICT_FLD__SYS_FIELDS__COL_NAME = 4,$/;"	e	enum:dict_fld_sys_fields_enum
DICT_FLD__SYS_FIELDS__DB_ROLL_PTR	include/dict0boot.h	/^  DICT_FLD__SYS_FIELDS__DB_ROLL_PTR = 3,$/;"	e	enum:dict_fld_sys_fields_enum
DICT_FLD__SYS_FIELDS__DB_TRX_ID	include/dict0boot.h	/^  DICT_FLD__SYS_FIELDS__DB_TRX_ID = 2,$/;"	e	enum:dict_fld_sys_fields_enum
DICT_FLD__SYS_FIELDS__INDEX_ID	include/dict0boot.h	/^  DICT_FLD__SYS_FIELDS__INDEX_ID = 0,$/;"	e	enum:dict_fld_sys_fields_enum
DICT_FLD__SYS_FIELDS__POS	include/dict0boot.h	/^  DICT_FLD__SYS_FIELDS__POS = 1,$/;"	e	enum:dict_fld_sys_fields_enum
DICT_FLD__SYS_FOREIGN_COLS__DB_ROLL_PTR	include/dict0boot.h	/^  DICT_FLD__SYS_FOREIGN_COLS__DB_ROLL_PTR = 3,$/;"	e	enum:dict_fld_sys_foreign_cols_enum
DICT_FLD__SYS_FOREIGN_COLS__DB_TRX_ID	include/dict0boot.h	/^  DICT_FLD__SYS_FOREIGN_COLS__DB_TRX_ID = 2,$/;"	e	enum:dict_fld_sys_foreign_cols_enum
DICT_FLD__SYS_FOREIGN_COLS__FOR_COL_NAME	include/dict0boot.h	/^  DICT_FLD__SYS_FOREIGN_COLS__FOR_COL_NAME = 4,$/;"	e	enum:dict_fld_sys_foreign_cols_enum
DICT_FLD__SYS_FOREIGN_COLS__ID	include/dict0boot.h	/^  DICT_FLD__SYS_FOREIGN_COLS__ID = 0,$/;"	e	enum:dict_fld_sys_foreign_cols_enum
DICT_FLD__SYS_FOREIGN_COLS__POS	include/dict0boot.h	/^  DICT_FLD__SYS_FOREIGN_COLS__POS = 1,$/;"	e	enum:dict_fld_sys_foreign_cols_enum
DICT_FLD__SYS_FOREIGN_COLS__REF_COL_NAME	include/dict0boot.h	/^  DICT_FLD__SYS_FOREIGN_COLS__REF_COL_NAME = 5,$/;"	e	enum:dict_fld_sys_foreign_cols_enum
DICT_FLD__SYS_FOREIGN_FOR_NAME__ID	include/dict0boot.h	/^  DICT_FLD__SYS_FOREIGN_FOR_NAME__ID = 1,$/;"	e	enum:dict_fld_sys_foreign_for_name_enum
DICT_FLD__SYS_FOREIGN_FOR_NAME__NAME	include/dict0boot.h	/^  DICT_FLD__SYS_FOREIGN_FOR_NAME__NAME = 0,$/;"	e	enum:dict_fld_sys_foreign_for_name_enum
DICT_FLD__SYS_FOREIGN__DB_ROLL_PTR	include/dict0boot.h	/^  DICT_FLD__SYS_FOREIGN__DB_ROLL_PTR = 2,$/;"	e	enum:dict_fld_sys_foreign_enum
DICT_FLD__SYS_FOREIGN__DB_TRX_ID	include/dict0boot.h	/^  DICT_FLD__SYS_FOREIGN__DB_TRX_ID = 1,$/;"	e	enum:dict_fld_sys_foreign_enum
DICT_FLD__SYS_FOREIGN__FOR_NAME	include/dict0boot.h	/^  DICT_FLD__SYS_FOREIGN__FOR_NAME = 3,$/;"	e	enum:dict_fld_sys_foreign_enum
DICT_FLD__SYS_FOREIGN__ID	include/dict0boot.h	/^  DICT_FLD__SYS_FOREIGN__ID = 0,$/;"	e	enum:dict_fld_sys_foreign_enum
DICT_FLD__SYS_FOREIGN__N_COLS	include/dict0boot.h	/^  DICT_FLD__SYS_FOREIGN__N_COLS = 5,$/;"	e	enum:dict_fld_sys_foreign_enum
DICT_FLD__SYS_FOREIGN__REF_NAME	include/dict0boot.h	/^  DICT_FLD__SYS_FOREIGN__REF_NAME = 4,$/;"	e	enum:dict_fld_sys_foreign_enum
DICT_FLD__SYS_INDEXES__DB_ROLL_PTR	include/dict0boot.h	/^  DICT_FLD__SYS_INDEXES__DB_ROLL_PTR = 3,$/;"	e	enum:dict_fld_sys_indexes_enum
DICT_FLD__SYS_INDEXES__DB_TRX_ID	include/dict0boot.h	/^  DICT_FLD__SYS_INDEXES__DB_TRX_ID = 2,$/;"	e	enum:dict_fld_sys_indexes_enum
DICT_FLD__SYS_INDEXES__ID	include/dict0boot.h	/^  DICT_FLD__SYS_INDEXES__ID = 1,$/;"	e	enum:dict_fld_sys_indexes_enum
DICT_FLD__SYS_INDEXES__MERGE_THRESHOLD	include/dict0boot.h	/^  DICT_FLD__SYS_INDEXES__MERGE_THRESHOLD = 9,$/;"	e	enum:dict_fld_sys_indexes_enum
DICT_FLD__SYS_INDEXES__NAME	include/dict0boot.h	/^  DICT_FLD__SYS_INDEXES__NAME = 4,$/;"	e	enum:dict_fld_sys_indexes_enum
DICT_FLD__SYS_INDEXES__N_FIELDS	include/dict0boot.h	/^  DICT_FLD__SYS_INDEXES__N_FIELDS = 5,$/;"	e	enum:dict_fld_sys_indexes_enum
DICT_FLD__SYS_INDEXES__PAGE_NO	include/dict0boot.h	/^  DICT_FLD__SYS_INDEXES__PAGE_NO = 8,$/;"	e	enum:dict_fld_sys_indexes_enum
DICT_FLD__SYS_INDEXES__SPACE	include/dict0boot.h	/^  DICT_FLD__SYS_INDEXES__SPACE = 7,$/;"	e	enum:dict_fld_sys_indexes_enum
DICT_FLD__SYS_INDEXES__TABLE_ID	include/dict0boot.h	/^  DICT_FLD__SYS_INDEXES__TABLE_ID = 0,$/;"	e	enum:dict_fld_sys_indexes_enum
DICT_FLD__SYS_INDEXES__TYPE	include/dict0boot.h	/^  DICT_FLD__SYS_INDEXES__TYPE = 6,$/;"	e	enum:dict_fld_sys_indexes_enum
DICT_FLD__SYS_TABLESPACES__DB_ROLL_PTR	include/dict0boot.h	/^  DICT_FLD__SYS_TABLESPACES__DB_ROLL_PTR = 2,$/;"	e	enum:dict_fld_sys_tablespaces_enum
DICT_FLD__SYS_TABLESPACES__DB_TRX_ID	include/dict0boot.h	/^  DICT_FLD__SYS_TABLESPACES__DB_TRX_ID = 1,$/;"	e	enum:dict_fld_sys_tablespaces_enum
DICT_FLD__SYS_TABLESPACES__FLAGS	include/dict0boot.h	/^  DICT_FLD__SYS_TABLESPACES__FLAGS = 4,$/;"	e	enum:dict_fld_sys_tablespaces_enum
DICT_FLD__SYS_TABLESPACES__NAME	include/dict0boot.h	/^  DICT_FLD__SYS_TABLESPACES__NAME = 3,$/;"	e	enum:dict_fld_sys_tablespaces_enum
DICT_FLD__SYS_TABLESPACES__SPACE	include/dict0boot.h	/^  DICT_FLD__SYS_TABLESPACES__SPACE = 0,$/;"	e	enum:dict_fld_sys_tablespaces_enum
DICT_FLD__SYS_TABLES__CLUSTER_ID	include/dict0boot.h	/^  DICT_FLD__SYS_TABLES__CLUSTER_ID = 8,$/;"	e	enum:dict_fld_sys_tables_enum
DICT_FLD__SYS_TABLES__DB_ROLL_PTR	include/dict0boot.h	/^  DICT_FLD__SYS_TABLES__DB_ROLL_PTR = 2,$/;"	e	enum:dict_fld_sys_tables_enum
DICT_FLD__SYS_TABLES__DB_TRX_ID	include/dict0boot.h	/^  DICT_FLD__SYS_TABLES__DB_TRX_ID = 1,$/;"	e	enum:dict_fld_sys_tables_enum
DICT_FLD__SYS_TABLES__ID	include/dict0boot.h	/^  DICT_FLD__SYS_TABLES__ID = 3,$/;"	e	enum:dict_fld_sys_tables_enum
DICT_FLD__SYS_TABLES__MIX_ID	include/dict0boot.h	/^  DICT_FLD__SYS_TABLES__MIX_ID = 6,$/;"	e	enum:dict_fld_sys_tables_enum
DICT_FLD__SYS_TABLES__MIX_LEN	include/dict0boot.h	/^  DICT_FLD__SYS_TABLES__MIX_LEN = 7,$/;"	e	enum:dict_fld_sys_tables_enum
DICT_FLD__SYS_TABLES__NAME	include/dict0boot.h	/^  DICT_FLD__SYS_TABLES__NAME = 0,$/;"	e	enum:dict_fld_sys_tables_enum
DICT_FLD__SYS_TABLES__N_COLS	include/dict0boot.h	/^  DICT_FLD__SYS_TABLES__N_COLS = 4,$/;"	e	enum:dict_fld_sys_tables_enum
DICT_FLD__SYS_TABLES__SPACE	include/dict0boot.h	/^  DICT_FLD__SYS_TABLES__SPACE = 9,$/;"	e	enum:dict_fld_sys_tables_enum
DICT_FLD__SYS_TABLES__TYPE	include/dict0boot.h	/^  DICT_FLD__SYS_TABLES__TYPE = 5,$/;"	e	enum:dict_fld_sys_tables_enum
DICT_FLD__SYS_TABLE_IDS__ID	include/dict0boot.h	/^  DICT_FLD__SYS_TABLE_IDS__ID = 0,$/;"	e	enum:dict_fld_sys_table_ids_enum
DICT_FLD__SYS_TABLE_IDS__NAME	include/dict0boot.h	/^  DICT_FLD__SYS_TABLE_IDS__NAME = 1,$/;"	e	enum:dict_fld_sys_table_ids_enum
DICT_FLD__SYS_VIRTUAL__BASE_POS	include/dict0boot.h	/^  DICT_FLD__SYS_VIRTUAL__BASE_POS = 2,$/;"	e	enum:dict_fld_sys_virtual_enum
DICT_FLD__SYS_VIRTUAL__DB_ROLL_PTR	include/dict0boot.h	/^  DICT_FLD__SYS_VIRTUAL__DB_ROLL_PTR = 4,$/;"	e	enum:dict_fld_sys_virtual_enum
DICT_FLD__SYS_VIRTUAL__DB_TRX_ID	include/dict0boot.h	/^  DICT_FLD__SYS_VIRTUAL__DB_TRX_ID = 3,$/;"	e	enum:dict_fld_sys_virtual_enum
DICT_FLD__SYS_VIRTUAL__POS	include/dict0boot.h	/^  DICT_FLD__SYS_VIRTUAL__POS = 1,$/;"	e	enum:dict_fld_sys_virtual_enum
DICT_FLD__SYS_VIRTUAL__TABLE_ID	include/dict0boot.h	/^  DICT_FLD__SYS_VIRTUAL__TABLE_ID = 0,$/;"	e	enum:dict_fld_sys_virtual_enum
DICT_FOREIGN_ON_DELETE_CASCADE	include/dict0mem.h	1436;"	d
DICT_FOREIGN_ON_DELETE_NO_ACTION	include/dict0mem.h	1440;"	d
DICT_FOREIGN_ON_DELETE_SET_NULL	include/dict0mem.h	1437;"	d
DICT_FOREIGN_ON_UPDATE_CASCADE	include/dict0mem.h	1438;"	d
DICT_FOREIGN_ON_UPDATE_NO_ACTION	include/dict0mem.h	1441;"	d
DICT_FOREIGN_ON_UPDATE_SET_NULL	include/dict0mem.h	1439;"	d
DICT_FTS	include/dict0mem.h	94;"	d
DICT_HDR	include/dict0boot.h	115;"	d
DICT_HDR_COLUMNS	include/dict0boot.h	126;"	d
DICT_HDR_FIELDS	include/dict0boot.h	128;"	d
DICT_HDR_FIRST_ID	include/dict0boot.h	106;"	d
DICT_HDR_FSEG_HEADER	include/dict0boot.h	130;"	d
DICT_HDR_INDEXES	include/dict0boot.h	127;"	d
DICT_HDR_INDEX_ID	include/dict0boot.h	121;"	d
DICT_HDR_MAX_SPACE_ID	include/dict0boot.h	122;"	d
DICT_HDR_MIX_ID_LOW	include/dict0boot.h	123;"	d
DICT_HDR_PAGE_NO	include/dict0boot.h	96;"	d
DICT_HDR_PAGE_NO	include/dict0types.h	208;"	d
DICT_HDR_ROW_ID	include/dict0boot.h	119;"	d
DICT_HDR_ROW_ID_WRITE_MARGIN	include/dict0boot.h	332;"	d
DICT_HDR_SPACE	include/dict0boot.h	95;"	d
DICT_HDR_SPACE	include/dict0types.h	207;"	d
DICT_HDR_TABLES	include/dict0boot.h	124;"	d
DICT_HDR_TABLE_ID	include/dict0boot.h	120;"	d
DICT_HDR_TABLE_IDS	include/dict0boot.h	125;"	d
DICT_HEAP_SIZE	include/dict0dict.h	60;"	d
DICT_IBUF	include/dict0mem.h	90;"	d
DICT_IBUF_ID_MIN	include/dict0types.h	212;"	d
DICT_INDEXES_ID	include/dict0boot.h	101;"	d
DICT_INDEX_MAGIC_N	include/dict0mem.h	964;"	d
DICT_INDEX_MERGE_THRESHOLD_DEFAULT	include/dict0mem.h	895;"	d
DICT_INDEX_SPATIAL_NODEPTR_SIZE	include/dict0dict.h	734;"	d
DICT_IT_BITS	include/dict0mem.h	107;"	d
DICT_MAX_DD_TABLES	include/dict0dd.h	81;"	d
DICT_MAX_FIELD_LEN_BY_FORMAT	include/dict0mem.h	709;"	d
DICT_MAX_FIELD_LEN_BY_FORMAT_FLAG	include/dict0mem.h	713;"	d
DICT_MAX_FIXED_COL_LEN	include/dict0mem.h	718;"	d
DICT_MULTI_VALUE	include/dict0mem.h	105;"	d
DICT_NUM_COLS__SYS_COLUMNS	include/dict0boot.h	/^  DICT_NUM_COLS__SYS_COLUMNS = 7$/;"	e	enum:dict_col_sys_columns_enum
DICT_NUM_COLS__SYS_DATAFILES	include/dict0boot.h	/^  DICT_NUM_COLS__SYS_DATAFILES = 2$/;"	e	enum:dict_col_sys_datafiles_enum
DICT_NUM_COLS__SYS_FIELDS	include/dict0boot.h	/^  DICT_NUM_COLS__SYS_FIELDS = 3$/;"	e	enum:dict_col_sys_fields_enum
DICT_NUM_COLS__SYS_FOREIGN	include/dict0boot.h	/^  DICT_NUM_COLS__SYS_FOREIGN = 4$/;"	e	enum:dict_col_sys_foreign_enum
DICT_NUM_COLS__SYS_FOREIGN_COLS	include/dict0boot.h	/^  DICT_NUM_COLS__SYS_FOREIGN_COLS = 4$/;"	e	enum:dict_col_sys_foreign_cols_enum
DICT_NUM_COLS__SYS_INDEXES	include/dict0boot.h	/^  DICT_NUM_COLS__SYS_INDEXES = 8$/;"	e	enum:dict_col_sys_indexes_enum
DICT_NUM_COLS__SYS_TABLES	include/dict0boot.h	/^  DICT_NUM_COLS__SYS_TABLES = 8$/;"	e	enum:dict_col_sys_tables_enum
DICT_NUM_COLS__SYS_TABLESPACES	include/dict0boot.h	/^  DICT_NUM_COLS__SYS_TABLESPACES = 3$/;"	e	enum:dict_col_sys_tablespaces_enum
DICT_NUM_COLS__SYS_VIRTUAL	include/dict0boot.h	/^  DICT_NUM_COLS__SYS_VIRTUAL = 3$/;"	e	enum:dict_col_sys_virtual_enum
DICT_NUM_FIELDS__SYS_COLUMNS	include/dict0boot.h	/^  DICT_NUM_FIELDS__SYS_COLUMNS = 9$/;"	e	enum:dict_fld_sys_columns_enum
DICT_NUM_FIELDS__SYS_DATAFILES	include/dict0boot.h	/^  DICT_NUM_FIELDS__SYS_DATAFILES = 4$/;"	e	enum:dict_fld_sys_datafiles_enum
DICT_NUM_FIELDS__SYS_FIELDS	include/dict0boot.h	/^  DICT_NUM_FIELDS__SYS_FIELDS = 5$/;"	e	enum:dict_fld_sys_fields_enum
DICT_NUM_FIELDS__SYS_FOREIGN	include/dict0boot.h	/^  DICT_NUM_FIELDS__SYS_FOREIGN = 6$/;"	e	enum:dict_fld_sys_foreign_enum
DICT_NUM_FIELDS__SYS_FOREIGN_COLS	include/dict0boot.h	/^  DICT_NUM_FIELDS__SYS_FOREIGN_COLS = 6$/;"	e	enum:dict_fld_sys_foreign_cols_enum
DICT_NUM_FIELDS__SYS_FOREIGN_FOR_NAME	include/dict0boot.h	/^  DICT_NUM_FIELDS__SYS_FOREIGN_FOR_NAME = 2$/;"	e	enum:dict_fld_sys_foreign_for_name_enum
DICT_NUM_FIELDS__SYS_INDEXES	include/dict0boot.h	/^  DICT_NUM_FIELDS__SYS_INDEXES = 10$/;"	e	enum:dict_fld_sys_indexes_enum
DICT_NUM_FIELDS__SYS_TABLES	include/dict0boot.h	/^  DICT_NUM_FIELDS__SYS_TABLES = 10$/;"	e	enum:dict_fld_sys_tables_enum
DICT_NUM_FIELDS__SYS_TABLESPACES	include/dict0boot.h	/^  DICT_NUM_FIELDS__SYS_TABLESPACES = 5$/;"	e	enum:dict_fld_sys_tablespaces_enum
DICT_NUM_FIELDS__SYS_TABLE_IDS	include/dict0boot.h	/^  DICT_NUM_FIELDS__SYS_TABLE_IDS = 2$/;"	e	enum:dict_fld_sys_table_ids_enum
DICT_NUM_FIELDS__SYS_VIRTUAL	include/dict0boot.h	/^  DICT_NUM_FIELDS__SYS_VIRTUAL = 5$/;"	e	enum:dict_fld_sys_virtual_enum
DICT_N_COLS_COMPACT	include/dict0mem.h	148;"	d
DICT_POOL_PER_TABLE_HASH	dict/dict0dict.cc	183;"	d	file:
DICT_SDI	include/dict0mem.h	102;"	d
DICT_SDI_DECOMPRESS_H	include/dict0sdi-decompress.h	28;"	d
DICT_SDI_H	include/dict0sdi.h	28;"	d
DICT_SPATIAL	include/dict0mem.h	97;"	d
DICT_STATS_AUTO_RECALC_OFF	include/dict0mem.h	1839;"	d
DICT_STATS_AUTO_RECALC_ON	include/dict0mem.h	1838;"	d
DICT_STATS_BG_YIELD	include/dict0stats_bg.h	70;"	d
DICT_STATS_EMPTY_TABLE	include/dict0stats.h	/^  DICT_STATS_EMPTY_TABLE,       \/* Write all zeros (or 1 where it makes sense)$/;"	e	enum:dict_stats_upd_option_t
DICT_STATS_FETCH_ONLY_IF_NOT_IN_MEMORY	include/dict0stats.h	/^  DICT_STATS_FETCH_ONLY_IF_NOT_IN_MEMORY \/* fetch the stats$/;"	e	enum:dict_stats_upd_option_t
DICT_STATS_PERSISTENT_OFF	include/dict0mem.h	1822;"	d
DICT_STATS_PERSISTENT_ON	include/dict0mem.h	1821;"	d
DICT_STATS_RECALC_PERSISTENT	include/dict0stats.h	/^  DICT_STATS_RECALC_PERSISTENT, \/* (re) calculate the$/;"	e	enum:dict_stats_upd_option_t
DICT_STATS_RECALC_TRANSIENT	include/dict0stats.h	/^  DICT_STATS_RECALC_TRANSIENT,  \/* (re) calculate the statistics$/;"	e	enum:dict_stats_upd_option_t
DICT_TABLES_ID	include/dict0boot.h	99;"	d
DICT_TABLE_IDS_ID	include/dict0boot.h	104;"	d
DICT_TABLE_LOAD_FROM_CACHE	include/dict0load.h	/^  DICT_TABLE_LOAD_FROM_CACHE = 1   \/*!< Check first whether dict_table_t$/;"	e	enum:dict_table_info_t
DICT_TABLE_LOAD_FROM_RECORD	include/dict0load.h	/^  DICT_TABLE_LOAD_FROM_RECORD = 0, \/*!< Directly populate a dict_table_t$/;"	e	enum:dict_table_info_t
DICT_TABLE_MAGIC_N	include/dict0mem.h	2022;"	d
DICT_TABLE_OP_DROP_ORPHAN	include/dict0dict.h	/^  DICT_TABLE_OP_DROP_ORPHAN,$/;"	e	enum:dict_table_op_t
DICT_TABLE_OP_LOAD_TABLESPACE	include/dict0dict.h	/^  DICT_TABLE_OP_LOAD_TABLESPACE$/;"	e	enum:dict_table_op_t
DICT_TABLE_OP_NORMAL	include/dict0dict.h	/^  DICT_TABLE_OP_NORMAL = 0,$/;"	e	enum:dict_table_op_t
DICT_TF2_AUX	include/dict0mem.h	281;"	d
DICT_TF2_BITS	include/dict0mem.h	247;"	d
DICT_TF2_BIT_MASK	include/dict0mem.h	249;"	d
DICT_TF2_DISCARDED	include/dict0mem.h	269;"	d
DICT_TF2_ENCRYPTION_FILE_PER_TABLE	include/dict0mem.h	278;"	d
DICT_TF2_FLAG_IS_SET	include/dict0mem.h	289;"	d
DICT_TF2_FLAG_SET	include/dict0mem.h	287;"	d
DICT_TF2_FLAG_UNSET	include/dict0mem.h	291;"	d
DICT_TF2_FTS	include/dict0mem.h	258;"	d
DICT_TF2_FTS_ADD_DOC_ID	include/dict0mem.h	262;"	d
DICT_TF2_FTS_HAS_DOC_ID	include/dict0mem.h	255;"	d
DICT_TF2_INTRINSIC	include/dict0mem.h	275;"	d
DICT_TF2_RESURRECT_PREPARED	include/dict0mem.h	284;"	d
DICT_TF2_TEMPORARY	include/dict0mem.h	252;"	d
DICT_TF2_UNUSED_BIT_MASK	include/dict0mem.h	248;"	d
DICT_TF2_USE_FILE_PER_TABLE	include/dict0mem.h	266;"	d
DICT_TF_BITS	include/dict0mem.h	179;"	d
DICT_TF_BIT_MASK	include/dict0mem.h	185;"	d
DICT_TF_COMPACT	include/dict0mem.h	144;"	d
DICT_TF_GET_COMPACT	include/dict0mem.h	220;"	d
DICT_TF_GET_UNUSED	include/dict0mem.h	235;"	d
DICT_TF_GET_ZIP_SSIZE	include/dict0mem.h	223;"	d
DICT_TF_HAS_ATOMIC_BLOBS	include/dict0mem.h	226;"	d
DICT_TF_HAS_DATA_DIR	include/dict0mem.h	229;"	d
DICT_TF_HAS_SHARED_SPACE	include/dict0mem.h	232;"	d
DICT_TF_MASK_ATOMIC_BLOBS	include/dict0mem.h	210;"	d
DICT_TF_MASK_COMPACT	include/dict0mem.h	204;"	d
DICT_TF_MASK_DATA_DIR	include/dict0mem.h	213;"	d
DICT_TF_MASK_SHARED_SPACE	include/dict0mem.h	216;"	d
DICT_TF_MASK_ZIP_SSIZE	include/dict0mem.h	207;"	d
DICT_TF_POS_ATOMIC_BLOBS	include/dict0mem.h	192;"	d
DICT_TF_POS_COMPACT	include/dict0mem.h	188;"	d
DICT_TF_POS_DATA_DIR	include/dict0mem.h	195;"	d
DICT_TF_POS_SHARED_SPACE	include/dict0mem.h	198;"	d
DICT_TF_POS_UNUSED	include/dict0mem.h	200;"	d
DICT_TF_POS_ZIP_SSIZE	include/dict0mem.h	190;"	d
DICT_TF_REDUNDANT	include/dict0mem.h	142;"	d
DICT_TF_WIDTH_ATOMIC_BLOBS	include/dict0mem.h	162;"	d
DICT_TF_WIDTH_COMPACT	include/dict0mem.h	151;"	d
DICT_TF_WIDTH_DATA_DIR	include/dict0mem.h	168;"	d
DICT_TF_WIDTH_SHARED_SPACE	include/dict0mem.h	176;"	d
DICT_TF_WIDTH_ZIP_SSIZE	include/dict0mem.h	154;"	d
DICT_UNIQUE	include/dict0mem.h	89;"	d
DICT_VIRTUAL	include/dict0mem.h	100;"	d
DIR_NAME	srv/srv0tmp.cc	/^static const char DIR_NAME[] = "#innodb_temp";$/;"	m	namespace:ibt	file:
DISABLE_MIN_REC_FLAG_CHECK	include/rem0cmp.h	/^constexpr auto DISABLE_MIN_REC_FLAG_CHECK = ULINT_UNDEFINED;$/;"	v
DISABLE_PARTIAL_IO_WARNINGS	include/os0file.h	/^    DISABLE_PARTIAL_IO_WARNINGS = 32,$/;"	e	enum:IORequest::__anon5
DISABLE_PUNCH_HOLE_OPTIMISATION	include/os0file.h	/^    DISABLE_PUNCH_HOLE_OPTIMISATION = 2048$/;"	e	enum:IORequest::__anon5
DISPATCH	ut/ut0test.cc	50;"	d	file:
DISPATCH_FUNCTION	include/ut0test.h	248;"	d
DISPATCH_FUNCTION_DEF	ut/ut0test.cc	/^DISPATCH_FUNCTION_DEF(Tester::dblwr_force_crash) {$/;"	f	namespace:ib
DISPATCH_FUNCTION_DEF	ut/ut0test.cc	/^DISPATCH_FUNCTION_DEF(Tester::find_tablespace_physical_page_size) {$/;"	f	namespace:ib
DISPATCH_FUNCTION_DEF	ut/ut0test.cc	/^DISPATCH_FUNCTION_DEF(Tester::make_ondisk_root_page_zeroes) {$/;"	f	namespace:ib
DISPATCH_FUNCTION_DEF	ut/ut0test.cc	/^DISPATCH_FUNCTION_DEF(Tester::make_page_dirty) {$/;"	f	namespace:ib
DISPATCH_FUNCTION_DEF	ut/ut0test.cc	39;"	d	file:
DISPLAY	fil/fil0fil.cc	9723;"	d	file:
DONE	include/os0once.h	/^  static const state_t DONE = 2;$/;"	m	class:os_once
DONE_SCANNING	handler/p_s.cc	/^  DONE_SCANNING$/;"	e	enum:scan_pass	file:
DOT_CFG	include/fil0fil.h	582;"	d
DOT_CFP	include/fil0fil.h	583;"	d
DOT_DOT_SLASH	fil/fil0fil.cc	/^constexpr const char *Fil_path::DOT_DOT_SLASH;$/;"	m	class:Fil_path	file:
DOT_DOT_SLASH	include/fil0fil.h	/^  static constexpr auto DOT_DOT_SLASH = "..\/";$/;"	m	class:Fil_path
DOT_DOT_SLASH	include/fil0fil.h	/^  static constexpr auto DOT_DOT_SLASH = "..\\\\";$/;"	m	class:Fil_path
DOT_DWR	include/fil0fil.h	586;"	d
DOT_IBD	include/fil0fil.h	581;"	d
DOT_IBT	include/fil0fil.h	584;"	d
DOT_IBU	include/fil0fil.h	585;"	d
DOT_SLASH	fil/fil0fil.cc	/^constexpr const char *Fil_path::DOT_SLASH;$/;"	m	class:Fil_path	file:
DOT_SLASH	include/fil0fil.h	/^  static constexpr auto DOT_SLASH = ".\/";$/;"	m	class:Fil_path
DOT_SLASH	include/fil0fil.h	/^  static constexpr auto DOT_SLASH = ".\\\\";$/;"	m	class:Fil_path
DO_NOT_WAKE	include/os0file.h	/^    DO_NOT_WAKE = 64,$/;"	e	enum:IORequest::__anon5
DROP_LOG	include/log0ddl.h	/^  DROP_LOG,$/;"	m	class:Log_Type
DTUPLE_EST_ALLOC	include/data0data.h	245;"	d
DWR	include/fil0fil.h	/^  DWR = 6$/;"	e	enum:ib_file_suffix
DYN_ARRAY_DATA_SIZE	include/dyn0types.h	41;"	d
DYN_BLOCK_FULL_FLAG	include/dyn0types.h	44;"	d
DYN_BLOCK_MAGIC_N	include/dyn0types.h	37;"	d
Datafile	include/fsp0file.h	/^  Datafile()$/;"	f	class:Datafile
Datafile	include/fsp0file.h	/^  Datafile(const Datafile &file)$/;"	f	class:Datafile
Datafile	include/fsp0file.h	/^  Datafile(const char *name, uint32_t flags, page_no_t size, ulint order)$/;"	f	class:Datafile
Datafile	include/fsp0file.h	/^class Datafile {$/;"	c
Dblwr_tuple	buf/buf0dblwr.cc	/^    typedef std::tuple<buf_page_t *, const file::Block *, uint32_t> Dblwr_tuple;$/;"	t	struct:Double_write::Buf_pages	file:
Deadlock_notifier	lock/lock0lock.cc	/^class Deadlock_notifier {$/;"	c	file:
Debug_check	mtr/mtr0mtr.cc	/^struct Debug_check {$/;"	s	file:
Debug_check_no_latching	mtr/mtr0mtr.cc	/^struct Debug_check_no_latching {$/;"	s	file:
DeleteContext	include/lob0lob.h	/^  DeleteContext(const BtrContext &btr, byte *field_ref, ulint field_no,$/;"	f	struct:lob::DeleteContext
DeleteContext	include/lob0lob.h	/^struct DeleteContext : public BtrContext {$/;"	s	namespace:lob
Deleter	include/lob0del.h	/^  Deleter(DeleteContext &ctx) : m_ctx(ctx) {$/;"	f	class:lob::Deleter
Deleter	include/lob0del.h	/^class Deleter {$/;"	c	namespace:lob
DictSysMutex	include/dict0types.h	/^typedef ib_mutex_t DictSysMutex;$/;"	t
Dir_Walker	include/os0file.h	/^class Dir_Walker {$/;"	c	class:AIO_mode
Distance	include/ut0link_buf.h	/^  typedef Position Distance;$/;"	t	class:Link_buf
Double_write	buf/buf0dblwr.cc	/^class Double_write {$/;"	c	file:
ECHO	fts/fts0blex.cc	635;"	d	file:
ECHO	fts/fts0tlex.cc	631;"	d	file:
ECHO	pars/lexyy.cc	1051;"	d	file:
EMPTY	include/trx0types.h	/^    EMPTY$/;"	e	enum:Rsegs::undo_space_states
EMPTY_OPEN_SLOT	fil/fil0fil.cc	/^static const size_t EMPTY_OPEN_SLOT = std::numeric_limits<size_t>::max();$/;"	v	file:
ENCRYPTION	include/fil0fil.h	/^enum encryption_op_type { ENCRYPTION = 1, DECRYPTION = 2, NONE };$/;"	e	enum:encryption_op_type
ENCRYPT_IN_PROGRESS	include/os0enc.h	/^  static constexpr size_t ENCRYPT_IN_PROGRESS = 1 << 0;$/;"	m	class:Encryption
END	include/ut0stage.h	/^    END = 7,$/;"	e	enum:ut_stage_alter_t::__anon13
END_OF_ST_FIELD_INFO	handler/i_s.cc	228;"	d	file:
EOB_ACT_CONTINUE_SCAN	fts/fts0blex.cc	226;"	d	file:
EOB_ACT_CONTINUE_SCAN	fts/fts0tlex.cc	225;"	d	file:
EOB_ACT_CONTINUE_SCAN	pars/lexyy.cc	176;"	d	file:
EOB_ACT_END_OF_FILE	fts/fts0blex.cc	227;"	d	file:
EOB_ACT_END_OF_FILE	fts/fts0tlex.cc	226;"	d	file:
EOB_ACT_END_OF_FILE	pars/lexyy.cc	177;"	d	file:
EOB_ACT_LAST_MATCH	fts/fts0blex.cc	228;"	d	file:
EOB_ACT_LAST_MATCH	fts/fts0tlex.cc	227;"	d	file:
EOB_ACT_LAST_MATCH	pars/lexyy.cc	178;"	d	file:
EQ_CURRENT_THD	handler/ha_innodb.cc	275;"	d	file:
ERROR_CREATING_MSG	handler/ha_innodb.cc	/^const char *ERROR_CREATING_MSG =$/;"	v
ERROR_STR_LENGTH	include/handler0alter.h	34;"	d
ESTIMATE_WORK	include/clone0monitor.h	/^  enum { NOT_STARTED = 0, ESTIMATE_WORK, COMPLETE_WORK } m_cur_phase;$/;"	e	enum:Clone_Monitor::__anon7
EXIT_SUCCESS	fts/fts0pars.cc	284;"	d	file:
EXIT_SUCCESS	fts/fts0pars.cc	312;"	d	file:
EXIT_SUCCESS	pars/pars0grm.cc	363;"	d	file:
EXIT_SUCCESS	pars/pars0grm.cc	391;"	d	file:
Element	include/ut0pool.h	/^  struct Element {$/;"	s	struct:Pool
Encryption	include/os0enc.h	/^class Encryption {$/;"	c
Encryption_Key	include/log0recv.h	/^  struct Encryption_Key {$/;"	s	struct:recv_sys_t
EventMutex	include/ut0mutex.h	/^typedef OSMutex EventMutex;$/;"	t
FALSE	include/ut0rbt.h	51;"	d
FIELD_REF_SIZE	include/page0size.h	/^constexpr size_t FIELD_REF_SIZE = 20;$/;"	v
FILETIME_to_microseconds	srv/srv0srv.cc	/^static uint64 FILETIME_to_microseconds(const FILETIME &ft) {$/;"	f	file:
FILE_CLONED	clone/clone0api.cc	/^const int FILE_CLONED = 100;$/;"	v
FILE_DATA	clone/clone0api.cc	/^const int FILE_DATA = 1;$/;"	v
FILE_LOGFILE	page/page0zip.cc	600;"	d	file:
FILE_LOGFILE	page/page0zip.cc	605;"	d	file:
FILE_SAVED	clone/clone0api.cc	/^const int FILE_SAVED = 10;$/;"	v
FILE_STATE_CLONED	clone/clone0api.cc	/^const int FILE_STATE_CLONED = FILE_DATA + FILE_CLONED;$/;"	v
FILE_STATE_CLONE_SAVED	clone/clone0api.cc	/^const int FILE_STATE_CLONE_SAVED = FILE_SAVED + FILE_CLONED;$/;"	v
FILE_STATE_NONE	clone/clone0api.cc	/^const int FILE_STATE_NONE = 0;$/;"	v
FILE_STATE_NORMAL	clone/clone0api.cc	/^const int FILE_STATE_NORMAL = FILE_DATA;$/;"	v
FILE_STATE_REPLACED	clone/clone0api.cc	/^const int FILE_STATE_REPLACED = FILE_SAVED + FILE_DATA;$/;"	v
FILE_STATE_SAVED	clone/clone0api.cc	/^const int FILE_STATE_SAVED = FILE_SAVED;$/;"	v
FILE_STATUS_NOT_REGULAR_FILE_ERROR	include/fsp0sysspace.h	/^    FILE_STATUS_NOT_REGULAR_FILE_ERROR \/** not a regular file *\/$/;"	e	enum:SysTablespace::file_status_t
FILE_STATUS_READ_WRITE_ERROR	include/fsp0sysspace.h	/^    FILE_STATUS_READ_WRITE_ERROR,      \/** not readable\/writable *\/$/;"	e	enum:SysTablespace::file_status_t
FILE_STATUS_RW_PERMISSION_ERROR	include/fsp0sysspace.h	/^    FILE_STATUS_RW_PERMISSION_ERROR,   \/** permission error *\/$/;"	e	enum:SysTablespace::file_status_t
FILE_STATUS_VOID	include/fsp0sysspace.h	/^    FILE_STATUS_VOID = 0,              \/** status not set *\/$/;"	e	enum:SysTablespace::file_status_t
FIL_ADDR_BYTE	include/fil0types.h	/^constexpr size_t FIL_ADDR_BYTE = 4;$/;"	v
FIL_ADDR_PAGE	include/fil0types.h	/^constexpr size_t FIL_ADDR_PAGE = 0;$/;"	v
FIL_ADDR_SIZE	include/fil0types.h	/^constexpr size_t FIL_ADDR_SIZE = 6;$/;"	v
FIL_IBD_FILE_INITIAL_SIZE	include/fil0fil.h	/^constexpr size_t FIL_IBD_FILE_INITIAL_SIZE = 7;$/;"	v
FIL_IBD_FILE_INITIAL_SIZE_5_7	include/fil0fil.h	/^constexpr size_t FIL_IBD_FILE_INITIAL_SIZE_5_7 = 4;$/;"	v
FIL_IBT_FILE_INITIAL_SIZE	include/fil0fil.h	/^constexpr size_t FIL_IBT_FILE_INITIAL_SIZE = 5;$/;"	v
FIL_LOAD_ID_CHANGED	fil/fil0fil.cc	/^  FIL_LOAD_ID_CHANGED,$/;"	e	enum:fil_load_status	file:
FIL_LOAD_INVALID	fil/fil0fil.cc	/^  FIL_LOAD_INVALID,$/;"	e	enum:fil_load_status	file:
FIL_LOAD_MISMATCH	fil/fil0fil.cc	/^  FIL_LOAD_MISMATCH$/;"	e	enum:fil_load_status	file:
FIL_LOAD_NOT_FOUND	fil/fil0fil.cc	/^  FIL_LOAD_NOT_FOUND,$/;"	e	enum:fil_load_status	file:
FIL_LOAD_OK	fil/fil0fil.cc	/^  FIL_LOAD_OK,$/;"	e	enum:fil_load_status	file:
FIL_NODE_MAGIC_N	include/fil0fil.h	/^constexpr size_t FIL_NODE_MAGIC_N = 89389;$/;"	v
FIL_NULL	include/fil0fil.h	/^constexpr page_no_t FIL_NULL = std::numeric_limits<page_no_t>::max();$/;"	v
FIL_OPERATION_CLOSE	fil/fil0fil.cc	/^  FIL_OPERATION_CLOSE$/;"	e	enum:fil_operation_t	file:
FIL_OPERATION_DELETE	fil/fil0fil.cc	/^  FIL_OPERATION_DELETE,$/;"	e	enum:fil_operation_t	file:
FIL_PAGE_ALGORITHM_V1	include/fil0types.h	/^constexpr ulint FIL_PAGE_ALGORITHM_V1 = FIL_PAGE_VERSION + 1;$/;"	v
FIL_PAGE_ARCH_LOG_NO_OR_SPACE_ID	include/fil0types.h	/^constexpr ulint FIL_PAGE_ARCH_LOG_NO_OR_SPACE_ID = 34;$/;"	v
FIL_PAGE_COMPRESSED	include/fil0fil.h	/^constexpr page_type_t FIL_PAGE_COMPRESSED = 14;$/;"	v
FIL_PAGE_COMPRESSED_AND_ENCRYPTED	include/fil0fil.h	/^constexpr page_type_t FIL_PAGE_COMPRESSED_AND_ENCRYPTED = 16;$/;"	v
FIL_PAGE_COMPRESS_SIZE_V1	include/fil0types.h	/^constexpr ulint FIL_PAGE_COMPRESS_SIZE_V1 = FIL_PAGE_ORIGINAL_SIZE_V1 + 2;$/;"	v
FIL_PAGE_DATA	include/fil0types.h	/^constexpr ulint FIL_PAGE_DATA = 38;$/;"	v
FIL_PAGE_DATA_END	include/fil0types.h	/^constexpr ulint FIL_PAGE_DATA_END = 8;$/;"	v
FIL_PAGE_ENCRYPTED	include/fil0fil.h	/^constexpr page_type_t FIL_PAGE_ENCRYPTED = 15;$/;"	v
FIL_PAGE_ENCRYPTED_RTREE	include/fil0fil.h	/^constexpr page_type_t FIL_PAGE_ENCRYPTED_RTREE = 17;$/;"	v
FIL_PAGE_END_LSN_OLD_CHKSUM	include/fil0types.h	/^constexpr ulint FIL_PAGE_END_LSN_OLD_CHKSUM = 8;$/;"	v
FIL_PAGE_FILE_FLUSH_LSN	include/fil0types.h	80;"	d
FIL_PAGE_IBUF_BITMAP	include/fil0fil.h	/^constexpr page_type_t FIL_PAGE_IBUF_BITMAP = 5;$/;"	v
FIL_PAGE_IBUF_FREE_LIST	include/fil0fil.h	/^constexpr page_type_t FIL_PAGE_IBUF_FREE_LIST = 4;$/;"	v
FIL_PAGE_INODE	include/fil0fil.h	/^constexpr page_type_t FIL_PAGE_INODE = 3;$/;"	v
FIL_PAGE_LSN	include/fil0types.h	66;"	d
FIL_PAGE_NEXT	include/fil0types.h	60;"	d
FIL_PAGE_OFFSET	include/fil0types.h	45;"	d
FIL_PAGE_ORIGINAL_SIZE_V1	include/fil0types.h	/^constexpr ulint FIL_PAGE_ORIGINAL_SIZE_V1 = FIL_PAGE_ORIGINAL_TYPE_V1 + 2;$/;"	v
FIL_PAGE_ORIGINAL_TYPE_V1	include/fil0types.h	/^constexpr ulint FIL_PAGE_ORIGINAL_TYPE_V1 = FIL_PAGE_ALGORITHM_V1 + 1;$/;"	v
FIL_PAGE_PREV	include/fil0types.h	50;"	d
FIL_PAGE_RTREE	include/fil0fil.h	/^constexpr page_type_t FIL_PAGE_RTREE = 17854;$/;"	v
FIL_PAGE_SDI	include/fil0fil.h	/^constexpr page_type_t FIL_PAGE_SDI = 17853;$/;"	v
FIL_PAGE_SDI_BLOB	include/fil0fil.h	/^constexpr page_type_t FIL_PAGE_SDI_BLOB = 18;$/;"	v
FIL_PAGE_SDI_ZBLOB	include/fil0fil.h	/^constexpr page_type_t FIL_PAGE_SDI_ZBLOB = 19;$/;"	v
FIL_PAGE_SPACE_ID	include/fil0types.h	107;"	d
FIL_PAGE_SPACE_OR_CHKSUM	include/fil0types.h	42;"	d
FIL_PAGE_SPACE_VERSION	include/fil0types.h	63;"	d
FIL_PAGE_SRV_VERSION	include/fil0types.h	53;"	d
FIL_PAGE_TYPE	include/fil0types.h	75;"	d
FIL_PAGE_TYPE_ALLOCATED	include/fil0fil.h	/^constexpr page_type_t FIL_PAGE_TYPE_ALLOCATED = 0;$/;"	v
FIL_PAGE_TYPE_BLOB	include/fil0fil.h	/^constexpr page_type_t FIL_PAGE_TYPE_BLOB = 10;$/;"	v
FIL_PAGE_TYPE_FSP_HDR	include/fil0fil.h	/^constexpr page_type_t FIL_PAGE_TYPE_FSP_HDR = 8;$/;"	v
FIL_PAGE_TYPE_LAST	include/fil0fil.h	/^constexpr page_type_t FIL_PAGE_TYPE_LAST = FIL_PAGE_TYPE_ZLOB_FRAG_ENTRY;$/;"	v
FIL_PAGE_TYPE_LEGACY_DBLWR	include/fil0fil.h	/^constexpr page_type_t FIL_PAGE_TYPE_LEGACY_DBLWR = 20;$/;"	v
FIL_PAGE_TYPE_LOB_DATA	include/fil0fil.h	/^constexpr page_type_t FIL_PAGE_TYPE_LOB_DATA = 23;$/;"	v
FIL_PAGE_TYPE_LOB_FIRST	include/fil0fil.h	/^constexpr page_type_t FIL_PAGE_TYPE_LOB_FIRST = 24;$/;"	v
FIL_PAGE_TYPE_LOB_INDEX	include/fil0fil.h	/^constexpr page_type_t FIL_PAGE_TYPE_LOB_INDEX = 22;$/;"	v
FIL_PAGE_TYPE_RSEG_ARRAY	include/fil0fil.h	/^constexpr page_type_t FIL_PAGE_TYPE_RSEG_ARRAY = 21;$/;"	v
FIL_PAGE_TYPE_SYS	include/fil0fil.h	/^constexpr page_type_t FIL_PAGE_TYPE_SYS = 6;$/;"	v
FIL_PAGE_TYPE_TRX_SYS	include/fil0fil.h	/^constexpr page_type_t FIL_PAGE_TYPE_TRX_SYS = 7;$/;"	v
FIL_PAGE_TYPE_UNKNOWN	include/fil0fil.h	/^constexpr page_type_t FIL_PAGE_TYPE_UNKNOWN = 13;$/;"	v
FIL_PAGE_TYPE_UNUSED	include/fil0fil.h	/^constexpr page_type_t FIL_PAGE_TYPE_UNUSED = 1;$/;"	v
FIL_PAGE_TYPE_XDES	include/fil0fil.h	/^constexpr page_type_t FIL_PAGE_TYPE_XDES = 9;$/;"	v
FIL_PAGE_TYPE_ZBLOB	include/fil0fil.h	/^constexpr page_type_t FIL_PAGE_TYPE_ZBLOB = 11;$/;"	v
FIL_PAGE_TYPE_ZBLOB2	include/fil0fil.h	/^constexpr page_type_t FIL_PAGE_TYPE_ZBLOB2 = 12;$/;"	v
FIL_PAGE_TYPE_ZLOB_DATA	include/fil0fil.h	/^constexpr page_type_t FIL_PAGE_TYPE_ZLOB_DATA = 26;$/;"	v
FIL_PAGE_TYPE_ZLOB_FIRST	include/fil0fil.h	/^constexpr page_type_t FIL_PAGE_TYPE_ZLOB_FIRST = 25;$/;"	v
FIL_PAGE_TYPE_ZLOB_FRAG	include/fil0fil.h	/^constexpr page_type_t FIL_PAGE_TYPE_ZLOB_FRAG = 28;$/;"	v
FIL_PAGE_TYPE_ZLOB_FRAG_ENTRY	include/fil0fil.h	/^constexpr page_type_t FIL_PAGE_TYPE_ZLOB_FRAG_ENTRY = 29;$/;"	v
FIL_PAGE_TYPE_ZLOB_INDEX	include/fil0fil.h	/^constexpr page_type_t FIL_PAGE_TYPE_ZLOB_INDEX = 27;$/;"	v
FIL_PAGE_UNDO_LOG	include/fil0fil.h	/^constexpr page_type_t FIL_PAGE_UNDO_LOG = 2;$/;"	v
FIL_PAGE_VERSION	include/fil0types.h	/^constexpr ulint FIL_PAGE_VERSION = FIL_PAGE_FILE_FLUSH_LSN;$/;"	v
FIL_PATH_SEPARATOR	include/fil0types.h	/^constexpr char FIL_PATH_SEPARATOR = ';';$/;"	v
FIL_RTREE_SPLIT_SEQ_NUM	include/fil0types.h	/^constexpr ulint FIL_RTREE_SPLIT_SEQ_NUM = FIL_PAGE_FILE_FLUSH_LSN;$/;"	v
FIL_SCAN_MAX_TABLESPACES_PER_THREAD	include/fil0fil.h	/^constexpr size_t FIL_SCAN_MAX_TABLESPACES_PER_THREAD = 8000;$/;"	v
FIL_SCAN_MAX_THREADS	include/fil0fil.h	/^constexpr size_t FIL_SCAN_MAX_THREADS = 16;$/;"	v
FIL_SCAN_THREADS_PER_CORE	include/fil0fil.h	/^constexpr size_t FIL_SCAN_THREADS_PER_CORE = 2;$/;"	v
FIL_SPACE_MAGIC_N	include/fil0fil.h	/^constexpr size_t FIL_SPACE_MAGIC_N = 89472;$/;"	v
FIL_TYPE_IMPORT	include/fil0fil.h	/^  FIL_TYPE_IMPORT = 2,$/;"	e	enum:uint8_t
FIL_TYPE_LOG	include/fil0fil.h	/^  FIL_TYPE_LOG = 8$/;"	e	enum:uint8_t
FIL_TYPE_TABLESPACE	include/fil0fil.h	/^  FIL_TYPE_TABLESPACE = 4,$/;"	e	enum:uint8_t
FIL_TYPE_TEMPORARY	include/fil0fil.h	/^  FIL_TYPE_TEMPORARY = 1,$/;"	e	enum:uint8_t
FIL_VALIDATE_SKIP	fil/fil0fil.cc	/^static const size_t FIL_VALIDATE_SKIP = 17;$/;"	v	file:
FK_MAX_CASCADE_DEL	include/dict0mem.h	307;"	d
FLEXINT_H	fts/fts0blex.cc	68;"	d	file:
FLEXINT_H	fts/fts0tlex.cc	67;"	d	file:
FLEXINT_H	include/fts0blex.h	71;"	d
FLEXINT_H	include/fts0tlex.h	70;"	d
FLEXINT_H	pars/lexyy.cc	32;"	d	file:
FLEX_BETA	fts/fts0blex.cc	52;"	d	file:
FLEX_BETA	fts/fts0tlex.cc	51;"	d	file:
FLEX_BETA	include/fts0blex.h	55;"	d
FLEX_BETA	include/fts0tlex.h	54;"	d
FLEX_BETA	pars/lexyy.cc	16;"	d	file:
FLEX_SCANNER	fts/fts0blex.cc	47;"	d	file:
FLEX_SCANNER	fts/fts0tlex.cc	46;"	d	file:
FLEX_SCANNER	include/fts0blex.h	50;"	d
FLEX_SCANNER	include/fts0tlex.h	49;"	d
FLEX_SCANNER	pars/lexyy.cc	11;"	d	file:
FLST_BASE_NODE_SIZE	include/fut0lst.h	/^constexpr ulint FLST_BASE_NODE_SIZE = 4 + 2 * FIL_ADDR_SIZE;$/;"	v
FLST_NODE_SIZE	include/fut0lst.h	/^constexpr ulint FLST_NODE_SIZE = 2 * FIL_ADDR_SIZE;$/;"	v
FLUSH	include/ut0stage.h	/^    FLUSH = 4,$/;"	e	enum:ut_stage_alter_t::__anon13
FORCE_RECOVERY_MSG	handler/ha_innodb.cc	/^const char *FORCE_RECOVERY_MSG = "Please refer to " REFMAN$/;"	v
FOREIGN_KEY_CONSTRAINTS_MSG	handler/ha_innodb.cc	/^const char *FOREIGN_KEY_CONSTRAINTS_MSG =$/;"	v
FOR_EACH_API_METHOD_NAME_STEM	include/api0api.h	918;"	d
FRAG_ID_NULL	include/lob0impl.h	/^const ulint FRAG_ID_NULL = std::numeric_limits<uint16_t>::max();$/;"	m	namespace:lob
FREE_TREE_LOG	include/log0ddl.h	/^  FREE_TREE_LOG = 1,$/;"	m	class:Log_Type
FSEG_ARR_OFFSET	include/fsp0fsp.h	207;"	d
FSEG_FILLFACTOR	include/fsp0fsp.h	246;"	d
FSEG_FRAG_ARR	include/fsp0fsp.h	224;"	d
FSEG_FRAG_ARR_N_SLOTS	include/fsp0fsp.h	228;"	d
FSEG_FRAG_LIMIT	include/fsp0fsp.h	257;"	d
FSEG_FRAG_SLOT_SIZE	include/fsp0fsp.h	231;"	d
FSEG_FREE	include/fsp0fsp.h	215;"	d
FSEG_FREE_LIST_LIMIT	include/fsp0fsp.h	264;"	d
FSEG_FREE_LIST_MAX_LEN	include/fsp0fsp.h	270;"	d
FSEG_FULL	include/fsp0fsp.h	220;"	d
FSEG_HDR_OFFSET	include/fsp0types.h	84;"	d
FSEG_HDR_PAGE_NO	include/fsp0types.h	83;"	d
FSEG_HDR_SPACE	include/fsp0types.h	82;"	d
FSEG_HEADER_SIZE	include/fsp0types.h	86;"	d
FSEG_ID	include/fsp0fsp.h	209;"	d
FSEG_INODE_PAGE_NODE	include/fsp0fsp.h	203;"	d
FSEG_INODE_SIZE	include/fsp0fsp.h	236;"	d
FSEG_MAGIC_N	include/fsp0fsp.h	222;"	d
FSEG_MAGIC_N_VALUE	include/fsp0fsp.h	244;"	d
FSEG_NOT_FULL	include/fsp0fsp.h	218;"	d
FSEG_NOT_FULL_N_USED	include/fsp0fsp.h	212;"	d
FSEG_PAGE_DATA	include/fsp0types.h	74;"	d
FSP_BLOB	include/fsp0types.h	/^  FSP_BLOB      \/* reservation being done for BLOB insertion *\/$/;"	e	enum:fsp_reserve_t
FSP_CLEANING	include/fsp0types.h	/^  FSP_CLEANING, \/* reservation done during purge operations *\/$/;"	e	enum:fsp_reserve_t
FSP_DICT_HDR_PAGE_NO	include/fsp0types.h	176;"	d
FSP_DOWN	include/fsp0types.h	46;"	d
FSP_EXTENT_SIZE	include/fsp0types.h	59;"	d
FSP_EXTENT_SIZE_MAX	include/fsp0types.h	67;"	d
FSP_EXTENT_SIZE_MIN	include/fsp0types.h	70;"	d
FSP_FIRST_INODE_PAGE_NO	include/fsp0types.h	154;"	d
FSP_FIRST_RSEG_PAGE_NO	include/fsp0types.h	173;"	d
FSP_FLAGS_ARE_NOT_SET	include/fsp0types.h	354;"	d
FSP_FLAGS_GET_ENCRYPTION	include/fsp0types.h	346;"	d
FSP_FLAGS_GET_PAGE_SSIZE	include/fsp0types.h	334;"	d
FSP_FLAGS_GET_POST_ANTELOPE	include/fsp0types.h	325;"	d
FSP_FLAGS_GET_SHARED	include/fsp0types.h	340;"	d
FSP_FLAGS_GET_TEMPORARY	include/fsp0types.h	343;"	d
FSP_FLAGS_GET_UNUSED	include/fsp0types.h	352;"	d
FSP_FLAGS_GET_ZIP_SSIZE	include/fsp0types.h	328;"	d
FSP_FLAGS_HAS_ATOMIC_BLOBS	include/fsp0types.h	331;"	d
FSP_FLAGS_HAS_DATA_DIR	include/fsp0types.h	337;"	d
FSP_FLAGS_HAS_SDI	include/fsp0types.h	349;"	d
FSP_FLAGS_MASK	include/fsp0types.h	266;"	d
FSP_FLAGS_MASK_ATOMIC_BLOBS	include/fsp0types.h	303;"	d
FSP_FLAGS_MASK_DATA_DIR	include/fsp0types.h	309;"	d
FSP_FLAGS_MASK_ENCRYPTION	include/fsp0types.h	318;"	d
FSP_FLAGS_MASK_PAGE_SSIZE	include/fsp0types.h	306;"	d
FSP_FLAGS_MASK_POST_ANTELOPE	include/fsp0types.h	297;"	d
FSP_FLAGS_MASK_SDI	include/fsp0types.h	321;"	d
FSP_FLAGS_MASK_SHARED	include/fsp0types.h	312;"	d
FSP_FLAGS_MASK_TEMPORARY	include/fsp0types.h	315;"	d
FSP_FLAGS_MASK_ZIP_SSIZE	include/fsp0types.h	300;"	d
FSP_FLAGS_POS_ATOMIC_BLOBS	include/fsp0types.h	274;"	d
FSP_FLAGS_POS_DATA_DIR	include/fsp0types.h	280;"	d
FSP_FLAGS_POS_ENCRYPTION	include/fsp0types.h	287;"	d
FSP_FLAGS_POS_PAGE_SSIZE	include/fsp0types.h	277;"	d
FSP_FLAGS_POS_POST_ANTELOPE	include/fsp0types.h	269;"	d
FSP_FLAGS_POS_SDI	include/fsp0types.h	290;"	d
FSP_FLAGS_POS_SHARED	include/fsp0types.h	283;"	d
FSP_FLAGS_POS_TEMPORARY	include/fsp0types.h	285;"	d
FSP_FLAGS_POS_UNUSED	include/fsp0types.h	294;"	d
FSP_FLAGS_POS_ZIP_SSIZE	include/fsp0types.h	271;"	d
FSP_FLAGS_WIDTH	include/fsp0types.h	258;"	d
FSP_FLAGS_WIDTH_ATOMIC_BLOBS	include/fsp0types.h	237;"	d
FSP_FLAGS_WIDTH_DATA_DIR	include/fsp0types.h	242;"	d
FSP_FLAGS_WIDTH_ENCRYPTION	include/fsp0types.h	252;"	d
FSP_FLAGS_WIDTH_PAGE_SSIZE	include/fsp0types.h	239;"	d
FSP_FLAGS_WIDTH_POST_ANTELOPE	include/fsp0types.h	231;"	d
FSP_FLAGS_WIDTH_SDI	include/fsp0types.h	255;"	d
FSP_FLAGS_WIDTH_SHARED	include/fsp0types.h	245;"	d
FSP_FLAGS_WIDTH_TEMPORARY	include/fsp0types.h	249;"	d
FSP_FLAGS_WIDTH_ZIP_SSIZE	include/fsp0types.h	233;"	d
FSP_FRAG_N_USED	include/fsp0fsp.h	156;"	d
FSP_FREE	include/fsp0fsp.h	159;"	d
FSP_FREE_ADD	include/fsp0fsp.h	181;"	d
FSP_FREE_FRAG	include/fsp0fsp.h	160;"	d
FSP_FREE_LIMIT	include/fsp0fsp.h	142;"	d
FSP_FULL_FRAG	include/fsp0fsp.h	163;"	d
FSP_HEADER_OFFSET	include/fsp0fsp.h	66;"	d
FSP_HEADER_SIZE	include/fsp0fsp.h	179;"	d
FSP_IBUF_BITMAP_OFFSET	include/fsp0types.h	149;"	d
FSP_IBUF_HEADER_PAGE_NO	include/fsp0types.h	158;"	d
FSP_IBUF_TREE_ROOT_PAGE_NO	include/fsp0types.h	162;"	d
FSP_IMPLICIT_UNDO_TABLESPACES	include/fsp0types.h	/^constexpr size_t FSP_IMPLICIT_UNDO_TABLESPACES = 2;$/;"	v
FSP_MAX_ROLLBACK_SEGMENTS	include/fsp0types.h	/^constexpr size_t FSP_MAX_ROLLBACK_SEGMENTS = TRX_SYS_N_RSEGS;$/;"	v
FSP_MAX_UNDO_TABLESPACES	include/fsp0types.h	/^constexpr size_t FSP_MAX_UNDO_TABLESPACES = TRX_SYS_N_RSEGS - 1;$/;"	v
FSP_MIN_UNDO_TABLESPACES	include/fsp0types.h	/^constexpr size_t FSP_MIN_UNDO_TABLESPACES = 2;$/;"	v
FSP_NORMAL	include/fsp0types.h	/^  FSP_NORMAL,   \/* reservation during normal B-tree operations *\/$/;"	e	enum:fsp_reserve_t
FSP_NOT_USED	include/fsp0fsp.h	134;"	d
FSP_NO_DIR	include/fsp0types.h	47;"	d
FSP_RSEG_ARRAY_PAGE_NO	include/fsp0types.h	184;"	d
FSP_SDI_HEADER_LEN	include/fsp0fsp.h	70;"	d
FSP_SEG_ID	include/fsp0fsp.h	166;"	d
FSP_SEG_INODES_FREE	include/fsp0fsp.h	173;"	d
FSP_SEG_INODES_FULL	include/fsp0fsp.h	169;"	d
FSP_SEG_INODES_PER_PAGE	include/fsp0fsp.h	239;"	d
FSP_SIZE	include/fsp0fsp.h	139;"	d
FSP_SPACE_FLAGS	include/fsp0fsp.h	153;"	d
FSP_SPACE_ID	include/fsp0fsp.h	133;"	d
FSP_TRX_SYS_PAGE_NO	include/fsp0types.h	169;"	d
FSP_UNDO	include/fsp0types.h	/^  FSP_UNDO,     \/* reservation done for undo logging *\/$/;"	e	enum:fsp_reserve_t
FSP_UP	include/fsp0types.h	45;"	d
FSP_XDES_OFFSET	include/fsp0types.h	148;"	d
FTB_DEC	include/fts0tokenize.h	51;"	d
FTB_EGAL	include/fts0tokenize.h	48;"	d
FTB_INC	include/fts0tokenize.h	50;"	d
FTB_LBR	include/fts0tokenize.h	52;"	d
FTB_LQUOT	include/fts0tokenize.h	56;"	d
FTB_NEG	include/fts0tokenize.h	54;"	d
FTB_NO	include/fts0tokenize.h	49;"	d
FTB_RBR	include/fts0tokenize.h	53;"	d
FTB_RQUOT	include/fts0tokenize.h	57;"	d
FTB_TRUNC	include/fts0tokenize.h	55;"	d
FTB_YES	include/fts0tokenize.h	47;"	d
FTSORT_PRINT	include/row0ftsort.h	156;"	d
FTS_AST_LIST	include/fts0ast.h	/^  FTS_AST_LIST,               \/*!< Expression list *\/$/;"	e	enum:fts_ast_type_t
FTS_AST_NUMB	include/fts0ast.h	/^  FTS_AST_NUMB,               \/*!< Number *\/$/;"	e	enum:fts_ast_type_t
FTS_AST_OPER	include/fts0ast.h	/^  FTS_AST_OPER,               \/*!< Operator *\/$/;"	e	enum:fts_ast_type_t
FTS_AST_PARSER_PHRASE_LIST	include/fts0ast.h	/^  FTS_AST_PARSER_PHRASE_LIST, \/*!< Phase for plugin parser$/;"	e	enum:fts_ast_type_t
FTS_AST_SUBEXP_LIST	include/fts0ast.h	/^  FTS_AST_SUBEXP_LIST         \/*!< Sub-Expression list *\/$/;"	e	enum:fts_ast_type_t
FTS_AST_TERM	include/fts0ast.h	/^  FTS_AST_TERM,               \/*!< Term (or word) *\/$/;"	e	enum:fts_ast_type_t
FTS_AST_TEXT	include/fts0ast.h	/^  FTS_AST_TEXT,               \/*!< Text string *\/$/;"	e	enum:fts_ast_type_t
FTS_AUX_INDEX_TABLE_NUM_COLS	include/fts0fts.h	126;"	d
FTS_AUX_MIN_TABLE_ID_LENGTH	include/fts0priv.h	117;"	d
FTS_BACKGROUND_THREAD_WAIT_COUNT	include/fts0priv.h	64;"	d
FTS_BOOL	include/fts0fts.h	93;"	d
FTS_CACHE_SIZE_LOWER_LIMIT_IN_MB	fts/fts0fts.cc	/^static const ulint FTS_CACHE_SIZE_LOWER_LIMIT_IN_MB = 1;$/;"	v	file:
FTS_CACHE_SIZE_UPPER_LIMIT_IN_MB	fts/fts0fts.cc	/^static const ulint FTS_CACHE_SIZE_UPPER_LIMIT_IN_MB = 1024;$/;"	v	file:
FTS_CHILD_COMPLETE	include/row0ftsort.h	152;"	d
FTS_CHILD_EXITING	include/row0ftsort.h	153;"	d
FTS_COMMON_TABLE	include/fts0fts.h	/^  FTS_COMMON_TABLE, \/*!< FTS auxiliary table that is common$/;"	e	enum:fts_table_type_t
FTS_COMMON_TABLE_IND_NAME	include/fts0fts.h	102;"	d
FTS_CONFIG_TABLE_KEY_COL_LEN	include/fts0fts.h	131;"	d
FTS_CONFIG_TABLE_NUM_COLS	include/fts0fts.h	125;"	d
FTS_CONFIG_TABLE_VALUE_COL_LEN	include/fts0fts.h	132;"	d
FTS_DEADLOCK_RETRY_WAIT_MS	fts/fts0fts.cc	/^static constexpr uint32_t FTS_DEADLOCK_RETRY_WAIT_MS = 100;$/;"	v	file:
FTS_DEBUG_PRINT	fts/fts0opt.cc	1244;"	d	file:
FTS_DECR_RATING	include/fts0ast.h	/^  FTS_DECR_RATING, \/*!< Decrease the rank for this$/;"	e	enum:fts_ast_oper_t
FTS_DELETE	include/fts0fts.h	/^  FTS_DELETE,$/;"	e	enum:fts_row_state
FTS_DELETED_TABLE_COL_LEN	include/fts0fts.h	129;"	d
FTS_DELETED_TABLE_NUM_COLS	include/fts0fts.h	124;"	d
FTS_DISTANCE	include/fts0ast.h	/^  FTS_DISTANCE,    \/*!< Proximity distance *\/$/;"	e	enum:fts_ast_oper_t
FTS_DOC_ID_COL_NAME	include/fts0fts.h	57;"	d
FTS_DOC_ID_FORMAT	include/fts0fts.h	79;"	d
FTS_DOC_ID_INDEX_NAME	include/fts0fts.h	60;"	d
FTS_DOC_ID_INDEX_NAME_LEN	include/fts0fts.h	62;"	d
FTS_DOC_ID_LEN	include/fts0fts.h	65;"	d
FTS_DOC_ID_MAX_STEP	include/fts0fts.h	115;"	d
FTS_ELEM	fts/fts0que.cc	53;"	d	file:
FTS_EXIST	include/fts0ast.h	/^  FTS_EXIST, \/*!< Include rows that contain$/;"	e	enum:fts_ast_oper_t
FTS_EXIST_DOC_ID_INDEX	handler/ha_innodb.h	/^  FTS_EXIST_DOC_ID_INDEX,$/;"	e	enum:fts_doc_id_index_enum
FTS_EXIST_SKIP	include/fts0ast.h	/^  FTS_EXIST_SKIP   \/*!< Transient node operator$/;"	e	enum:fts_ast_oper_t
FTS_EXPAND	include/fts0fts.h	95;"	d
FTS_FETCH_DOC_BY_ID_EQUAL	include/fts0priv.h	172;"	d
FTS_FETCH_DOC_BY_ID_LARGE	include/fts0priv.h	173;"	d
FTS_IGNORE	include/fts0ast.h	/^  FTS_IGNORE, \/*!< Ignore rows that contain$/;"	e	enum:fts_ast_oper_t
FTS_IGNORE_SKIP	include/fts0ast.h	/^  FTS_IGNORE_SKIP, \/*!< Transient node operator$/;"	e	enum:fts_ast_oper_t
FTS_ILIST_MAX_SIZE	include/fts0priv.h	73;"	d
FTS_INCORRECT_DOC_ID_INDEX	handler/ha_innodb.h	/^  FTS_INCORRECT_DOC_ID_INDEX,$/;"	e	enum:fts_doc_id_index_enum
FTS_INCR_RATING	include/fts0ast.h	/^  FTS_INCR_RATING, \/*!< Increase the rank for this$/;"	e	enum:fts_ast_oper_t
FTS_INDEX_DOC_COUNT_LEN	include/fts0fts.h	137;"	d
FTS_INDEX_FIRST_DOC_ID_LEN	include/fts0fts.h	135;"	d
FTS_INDEX_ILIST_LEN	include/fts0fts.h	139;"	d
FTS_INDEX_LAST_DOC_ID_LEN	include/fts0fts.h	136;"	d
FTS_INDEX_TABLE	include/fts0fts.h	/^  FTS_INDEX_TABLE, \/*!< FTS auxiliary table that is$/;"	e	enum:fts_table_type_t
FTS_INDEX_TABLE_IND_NAME	include/fts0fts.h	101;"	d
FTS_INDEX_WORD_LEN	include/fts0fts.h	134;"	d
FTS_INIT_FTS_TABLE	include/fts0fts.h	208;"	d
FTS_INIT_INDEX_TABLE	include/fts0fts.h	217;"	d
FTS_INSERT	include/fts0fts.h	/^  FTS_INSERT = 0,$/;"	e	enum:fts_row_state
FTS_INVALID	include/fts0fts.h	/^  FTS_INVALID$/;"	e	enum:fts_row_state
FTS_IS_OBSOLETE_AUX_TABLE	fts/fts0fts.cc	66;"	d	file:
FTS_LAST_OPTIMIZED_WORD	include/fts0priv.h	84;"	d
FTS_MAX_BACKGROUND_THREAD_WAIT_US	include/fts0priv.h	61;"	d
FTS_MAX_CACHE_SIZE_IN_MB	fts/fts0fts.cc	62;"	d	file:
FTS_MAX_CONFIG_NAME_LEN	include/fts0priv.h	67;"	d
FTS_MAX_CONFIG_VALUE_LEN	include/fts0priv.h	70;"	d
FTS_MAX_ID_LEN	fts/fts0fts.cc	/^static const ulint FTS_MAX_ID_LEN = 32;$/;"	v	file:
FTS_MAX_INT_LEN	include/fts0priv.h	120;"	d
FTS_MAX_NESTED_EXP	include/fts0fts.h	141;"	d
FTS_MAX_WORD_LEN	include/fts0fts.h	118;"	d
FTS_MAX_WORD_LEN_IN_CHAR	include/fts0fts.h	121;"	d
FTS_MODIFY	include/fts0fts.h	/^  FTS_MODIFY,$/;"	e	enum:fts_row_state
FTS_MSG_ADD_TABLE	fts/fts0opt.cc	/^  FTS_MSG_ADD_TABLE, \/*!< Add table to the optimize thread's$/;"	e	enum:fts_msg_type_t	file:
FTS_MSG_DEL_TABLE	fts/fts0opt.cc	/^  FTS_MSG_DEL_TABLE, \/*!< Remove a table from the optimize$/;"	e	enum:fts_msg_type_t	file:
FTS_MSG_OPTIMIZE_TABLE	fts/fts0opt.cc	/^  FTS_MSG_OPTIMIZE_TABLE, \/*!< Optimize a table *\/$/;"	e	enum:fts_msg_type_t	file:
FTS_MSG_PAUSE	fts/fts0opt.cc	/^  FTS_MSG_PAUSE, \/*!< Pause optimizing thread *\/$/;"	e	enum:fts_msg_type_t	file:
FTS_MSG_START	fts/fts0opt.cc	/^  FTS_MSG_START, \/*!< Start optimizing thread *\/$/;"	e	enum:fts_msg_type_t	file:
FTS_MSG_STOP	fts/fts0opt.cc	/^  FTS_MSG_STOP, \/*!< Stop optimizing and exit thread *\/$/;"	e	enum:fts_msg_type_t	file:
FTS_MSG_SYNC_TABLE	fts/fts0opt.cc	/^  FTS_MSG_SYNC_TABLE \/*!< Sync fts cache of a table *\/$/;"	e	enum:fts_msg_type_t	file:
FTS_NEGATE	include/fts0ast.h	/^  FTS_NEGATE, \/*!< Include rows that contain$/;"	e	enum:fts_ast_oper_t
FTS_NL	include/fts0fts.h	92;"	d
FTS_NONE	include/fts0ast.h	/^  FTS_NONE, \/*!< No operator *\/$/;"	e	enum:fts_ast_oper_t
FTS_NOTHING	include/fts0fts.h	/^  FTS_NOTHING,$/;"	e	enum:fts_row_state
FTS_NOT_EXIST_DOC_ID_INDEX	handler/ha_innodb.h	/^  FTS_NOT_EXIST_DOC_ID_INDEX$/;"	e	enum:fts_doc_id_index_enum
FTS_NO_RANKING	include/fts0fts.h	96;"	d
FTS_NULL_DOC_ID	include/fts0fts.h	54;"	d
FTS_NUMB	fts/fts0pars.cc	/^     FTS_NUMB = 261$/;"	e	enum:yytokentype	file:
FTS_NUMB	include/fts0pars.h	/^     FTS_NUMB = 261$/;"	e	enum:yytokentype
FTS_NUM_AUX_COMMON	include/fts0fts.h	108;"	d
FTS_NUM_AUX_INDEX	include/fts0fts.h	105;"	d
FTS_NUM_FIELDS_SORT	include/fts0fts.h	69;"	d
FTS_OBSOLETED_TABLE	include/fts0fts.h	/^  FTS_OBSOLETED_TABLE \/*!< FTS obsoleted tables like DOC_ID,$/;"	e	enum:fts_table_type_t
FTS_OPER	fts/fts0pars.cc	/^     FTS_OPER = 258,$/;"	e	enum:yytokentype	file:
FTS_OPER	include/fts0pars.h	/^     FTS_OPER = 258,$/;"	e	enum:yytokentype
FTS_OPTIMIZE_END_TIME	include/fts0priv.h	97;"	d
FTS_OPTIMIZE_INTERVAL_IN_SECS	fts/fts0opt.cc	/^static const ulint FTS_OPTIMIZE_INTERVAL_IN_SECS = 300;$/;"	v	file:
FTS_OPTIMIZE_LIMIT_IN_SECS	include/fts0priv.h	78;"	d
FTS_OPTIMIZE_START_TIME	include/fts0priv.h	94;"	d
FTS_OPTIMIZE_THRESHOLD	include/fts0fts.h	111;"	d
FTS_OPT_RANKING	include/fts0fts.h	99;"	d
FTS_PARENT_COMPLETE	include/row0ftsort.h	150;"	d
FTS_PARENT_EXITING	include/row0ftsort.h	151;"	d
FTS_PASS_EXIST	fts/fts0ast.cc	/^  FTS_PASS_EXIST, \/*!< Exist visit pass,$/;"	e	enum:fts_ast_visit_pass_t	file:
FTS_PASS_FIRST	fts/fts0ast.cc	/^  FTS_PASS_FIRST, \/*!< First visit pass,$/;"	e	enum:fts_ast_visit_pass_t	file:
FTS_PASS_IGNORE	fts/fts0ast.cc	/^  FTS_PASS_IGNORE \/*!< Ignore visit pass,$/;"	e	enum:fts_ast_visit_pass_t	file:
FTS_PENDING_DOC_MEMORY_LIMIT	row/row0merge.cc	269;"	d	file:
FTS_PHRASE	include/fts0fts.h	98;"	d
FTS_PLL_MERGE	include/row0ftsort.h	63;"	d
FTS_PREFIX	fts/fts0fts.cc	/^const char *FTS_PREFIX = "fts_";$/;"	v
FTS_PREFIX_5_7	fts/fts0fts.cc	/^const char *FTS_PREFIX_5_7 = "FTS_";$/;"	v
FTS_PROXIMITY	include/fts0fts.h	97;"	d
FTS_QUEUE_WAIT_IN_USECS	fts/fts0opt.cc	/^static const ulint FTS_QUEUE_WAIT_IN_USECS = 5000000;$/;"	v	file:
FTS_SORTED	include/fts0fts.h	94;"	d
FTS_STATE_DONE	fts/fts0opt.cc	/^  FTS_STATE_DONE,$/;"	e	enum:fts_state_t	file:
FTS_STATE_EMPTY	fts/fts0opt.cc	/^  FTS_STATE_EMPTY$/;"	e	enum:fts_state_t	file:
FTS_STATE_LOADED	fts/fts0opt.cc	/^  FTS_STATE_LOADED,$/;"	e	enum:fts_state_t	file:
FTS_STATE_RUNNING	fts/fts0opt.cc	/^  FTS_STATE_RUNNING,$/;"	e	enum:fts_state_t	file:
FTS_STATE_SUSPENDED	fts/fts0opt.cc	/^  FTS_STATE_SUSPENDED,$/;"	e	enum:fts_state_t	file:
FTS_STOPWORD_TABLE_NAME	include/fts0priv.h	100;"	d
FTS_SUFFIX_BEING_DELETED	fts/fts0fts.cc	/^const char *FTS_SUFFIX_BEING_DELETED = fts_common_tables[0];$/;"	v
FTS_SUFFIX_BEING_DELETED_CACHE	fts/fts0fts.cc	/^const char *FTS_SUFFIX_BEING_DELETED_CACHE = fts_common_tables[1];$/;"	v
FTS_SUFFIX_CONFIG	fts/fts0fts.cc	/^const char *FTS_SUFFIX_CONFIG = fts_common_tables[2];$/;"	v
FTS_SUFFIX_CONFIG_5_7	fts/fts0fts.cc	/^const char *FTS_SUFFIX_CONFIG_5_7 = fts_common_tables_5_7[2];$/;"	v
FTS_SUFFIX_DELETED	fts/fts0fts.cc	/^const char *FTS_SUFFIX_DELETED = fts_common_tables[3];$/;"	v
FTS_SUFFIX_DELETED_CACHE	fts/fts0fts.cc	/^const char *FTS_SUFFIX_DELETED_CACHE = fts_common_tables[4];$/;"	v
FTS_SYNCED_DOC_ID	include/fts0priv.h	81;"	d
FTS_TABLE_STATE	include/fts0priv.h	107;"	d
FTS_TABLE_STATE_DELETED	include/fts0priv.h	/^  FTS_TABLE_STATE_DELETED \/*!< All aux tables to be dropped when$/;"	e	enum:fts_table_state_enum
FTS_TABLE_STATE_OPTIMIZING	include/fts0priv.h	/^  FTS_TABLE_STATE_OPTIMIZING, \/*!< This is a substate of RUNNING *\/$/;"	e	enum:fts_table_state_enum
FTS_TABLE_STATE_RUNNING	include/fts0priv.h	/^  FTS_TABLE_STATE_RUNNING = 0, \/*!< Auxiliary tables created OK *\/$/;"	e	enum:fts_table_state_enum
FTS_TERM	fts/fts0pars.cc	/^     FTS_TERM = 260,$/;"	e	enum:yytokentype	file:
FTS_TERM	include/fts0pars.h	/^     FTS_TERM = 260,$/;"	e	enum:yytokentype
FTS_TEXT	fts/fts0pars.cc	/^     FTS_TEXT = 259,$/;"	e	enum:yytokentype	file:
FTS_TEXT	include/fts0pars.h	/^     FTS_TEXT = 259,$/;"	e	enum:yytokentype
FTS_TOTAL_DELETED_COUNT	include/fts0priv.h	88;"	d
FTS_TOTAL_WORD_COUNT	include/fts0priv.h	91;"	d
FTS_USE_STOPWORD	include/fts0priv.h	103;"	d
FTS_WORD_NODES_INIT_SIZE	fts/fts0opt.cc	/^static const ulint FTS_WORD_NODES_INIT_SIZE = 64;$/;"	v	file:
FTS_ZIP_BLOCK_SIZE	fts/fts0opt.cc	/^static ulint FTS_ZIP_BLOCK_SIZE = 1024;$/;"	v	file:
FT_WORD	include/fts0tokenize.h	/^struct FT_WORD {$/;"	s
FetchIndexRootPages	row/row0import.cc	/^struct FetchIndexRootPages : public AbstractCallback {$/;"	s	file:
Fil_iterator	include/fil0fil.h	/^class Fil_iterator {$/;"	c
Fil_page_header	include/fil0types.h	/^  explicit Fil_page_header(const byte *frame) : m_frame(frame) {}$/;"	f	struct:Fil_page_header
Fil_page_header	include/fil0types.h	/^struct Fil_page_header {$/;"	s
Fil_page_iterator	fil/fil0fil.cc	/^struct Fil_page_iterator {$/;"	s	file:
Fil_path	fil/fil0fil.cc	/^Fil_path::Fil_path() : m_path(), m_abs_path() { \/* No op *\/$/;"	f	class:Fil_path
Fil_path	fil/fil0fil.cc	/^Fil_path::Fil_path(const char *path, bool normalize_path) : m_path(path) {$/;"	f	class:Fil_path
Fil_path	fil/fil0fil.cc	/^Fil_path::Fil_path(const char *path, size_t len, bool normalize_path)$/;"	f	class:Fil_path
Fil_path	fil/fil0fil.cc	/^Fil_path::Fil_path(const std::string &path, bool normalize_path)$/;"	f	class:Fil_path
Fil_path	include/fil0fil.h	/^class Fil_path {$/;"	c
Fil_shard	fil/fil0fil.cc	/^Fil_shard::Fil_shard(size_t shard_id)$/;"	f	class:Fil_shard
Fil_shard	fil/fil0fil.cc	/^class Fil_shard {$/;"	c	file:
Fil_state	include/fil0fil.h	/^enum class Fil_state {$/;"	c
Fil_system	fil/fil0fil.cc	/^Fil_system::Fil_system(size_t n_shards, size_t max_open)$/;"	f	class:Fil_system
Fil_system	fil/fil0fil.cc	/^class Fil_system {$/;"	c	file:
File	buf/buf0dblwr.cc	/^struct File {$/;"	s	namespace:dblwr	file:
File	sync/sync0debug.cc	/^  struct File {$/;"	s	struct:CreateTracker	file:
File_segment_inode	include/fsp0fsp.h	/^  File_segment_inode(space_id_t space_id, const page_size_t &page_size,$/;"	f	class:File_segment_inode
File_segment_inode	include/fsp0fsp.h	/^class File_segment_inode {$/;"	c
Files	sync/sync0debug.cc	/^      Files;$/;"	t	struct:CreateTracker	file:
Find	mtr/mtr0mtr.cc	/^  Find(const void *object, ulint type)$/;"	f	struct:Find
Find	mtr/mtr0mtr.cc	/^struct Find {$/;"	s	file:
Find_page	mtr/mtr0mtr.cc	/^  Find_page(const void *ptr, ulint flags)$/;"	f	struct:Find_page
Find_page	mtr/mtr0mtr.cc	/^struct Find_page {$/;"	s	file:
Fixup_data	clone/clone0api.cc	/^  Fixup_data(bool concurrent, bool is_drop)$/;"	f	class:__anon2::Fixup_data
Fixup_data	clone/clone0api.cc	/^class Fixup_data {$/;"	c	namespace:__anon2	file:
FlaggedCheck	mtr/mtr0mtr.cc	/^  FlaggedCheck(const void *ptr, ulint flags) : m_ptr(ptr), m_flags(flags) {$/;"	f	struct:FlaggedCheck
FlaggedCheck	mtr/mtr0mtr.cc	/^struct FlaggedCheck {$/;"	s	file:
FlushHp	include/buf0buf.h	/^  FlushHp(const buf_pool_t *buf_pool, const ib_mutex_t *mutex)$/;"	f	class:Cache_hint::FlushHp
FlushHp	include/buf0buf.h	/^class FlushHp : public HazardPointer {$/;"	c	class:Cache_hint
FlushListMutex	include/buf0types.h	/^typedef ib_mutex_t FlushListMutex;$/;"	t
FlushObserver	include/buf0flu.h	/^class FlushObserver {$/;"	c
GB	handler/ha_innodb.cc	/^static const uint64_t GB = MB * 1024;$/;"	v	file:
GEO_DATA_HEADER_SIZE	include/gis0rtree.h	60;"	d
GOTO_NEXT_ARRAY	include/ut0lock_free_hash.h	/^  static const int64_t GOTO_NEXT_ARRAY = DELETED - 1;$/;"	m	class:ut_lock_free_hash_t
GTID_INFO_SIZE	include/clone0repl.h	/^static const size_t GTID_INFO_SIZE = 64;$/;"	v
GTID_VERSION	include/clone0repl.h	/^static const uint32_t GTID_VERSION = 1;$/;"	v
GenericGetNode	include/ut0lst.h	/^  GenericGetNode(node_type Type::*node) : m_node(node) {}$/;"	f	struct:GenericGetNode
GenericGetNode	include/ut0lst.h	/^struct GenericGetNode {$/;"	s
GenericPolicy	include/sync0policy.h	/^struct GenericPolicy$/;"	s
GetCount	handler/ha_innodb.cc	/^  struct GetCount {$/;"	s	struct:ShowStatus	file:
Global_exclusive_latch_guard	include/lock0guards.h	/^class Global_exclusive_latch_guard : private ut::Non_copyable {$/;"	c	namespace:locksys
Global_exclusive_latch_guard	lock/lock0guards.cc	/^Global_exclusive_latch_guard::Global_exclusive_latch_guard($/;"	f	class:locksys::Global_exclusive_latch_guard
Global_exclusive_try_latch	include/lock0guards.h	/^class Global_exclusive_try_latch : private ut::Non_copyable {$/;"	c	namespace:locksys
Global_exclusive_try_latch	lock/lock0guards.cc	/^Global_exclusive_try_latch::Global_exclusive_try_latch(ut::Location location) {$/;"	f	class:locksys::Global_exclusive_try_latch
Global_shared_latch_guard	include/lock0guards.h	/^class Global_shared_latch_guard : private ut::Non_copyable {$/;"	c	namespace:locksys
Global_shared_latch_guard	lock/lock0guards.cc	/^Global_shared_latch_guard::Global_shared_latch_guard(ut::Location location) {$/;"	f	class:locksys::Global_shared_latch_guard
Gtid_desc	include/clone0repl.h	/^struct Gtid_desc {$/;"	s
Gtid_storage	include/trx0undo.h	/^  enum class Gtid_storage {$/;"	c	struct:trx_undo_t
Guardian	log/log0meb.cc	/^  Guardian(bool *state, os_event_t *event, ib_mutex_t *mutex)$/;"	f	class:meb::Guardian
Guardian	log/log0meb.cc	/^class Guardian {$/;"	c	namespace:meb	file:
HASH_ASSERT_OWN	include/hash0hash.h	93;"	d
HASH_ASSERT_OWN	include/hash0hash.h	97;"	d
HASH_ASSERT_VALID	include/hash0hash.h	127;"	d
HASH_ASSERT_VALID	include/hash0hash.h	130;"	d
HASH_DELETE	include/hash0hash.h	140;"	d
HASH_DELETE_AND_COMPACT	include/hash0hash.h	237;"	d
HASH_GET_FIRST	include/hash0hash.h	167;"	d
HASH_GET_NEXT	include/hash0hash.h	172;"	d
HASH_INSERT	include/hash0hash.h	102;"	d
HASH_INVALIDATE	include/hash0hash.h	128;"	d
HASH_INVALIDATE	include/hash0hash.h	133;"	d
HASH_MIGRATE	include/hash0hash.h	291;"	d
HASH_SEARCH	include/hash0hash.h	175;"	d
HASH_SEARCH_ALL	include/hash0hash.h	194;"	d
HASH_TABLE_MAGIC_N	include/hash0hash.h	440;"	d
HASH_TABLE_SYNC_MUTEX	include/hash0hash.h	/^  HASH_TABLE_SYNC_MUTEX,    \/*!< Use mutexes to control$/;"	e	enum:hash_table_sync_t
HASH_TABLE_SYNC_NONE	include/hash0hash.h	/^  HASH_TABLE_SYNC_NONE = 0, \/*!< Don't use any internal$/;"	e	enum:hash_table_sync_t
HASH_TABLE_SYNC_RW_LOCK	include/hash0hash.h	/^  HASH_TABLE_SYNC_RW_LOCK   \/*!< Use rw_locks to control$/;"	e	enum:hash_table_sync_t
HAVE_MEMORY_BARRIER	include/os0atomic.h	48;"	d
HAVE_MEMORY_BARRIER	include/os0atomic.h	55;"	d
HAVE_MEMORY_BARRIER	include/os0atomic.h	62;"	d
HAVE_MEMORY_BARRIER	include/os0atomic.h	70;"	d
HAVE_OS_GETCPU	include/os0numa.h	214;"	d
HAVE_UT_CHRONO_T	include/ut0dbg.h	106;"	d
HAVE_WINNUMA	include/os0numa.h	61;"	d
HA_INNODB_PROTOTYPES_H	include/ha_prototypes.h	37;"	d
HA_INNOPART_DISABLED_TABLE_FLAGS	handler/ha_innopart.h	/^const handler::Table_flags HA_INNOPART_DISABLED_TABLE_FLAGS =$/;"	v
HA_STORAGE_DEFAULT_HASH_CELLS	include/ha0storage.h	46;"	d
HA_STORAGE_DEFAULT_HEAP_BYTES	include/ha0storage.h	42;"	d
Ha_innopart_share	handler/ha_innopart.cc	/^Ha_innopart_share::Ha_innopart_share(TABLE_SHARE *table_share)$/;"	f	class:Ha_innopart_share
Ha_innopart_share	handler/ha_innopart.h	/^  Ha_innopart_share() {}$/;"	f	class:Ha_innopart_share
Ha_innopart_share	handler/ha_innopart.h	/^class Ha_innopart_share : public Partition_share {$/;"	c
Handles	os/os0file.cc	/^  typedef std::vector<HANDLE, ut_allocator<HANDLE>> Handles;$/;"	t	class:AIO	file:
HazardPointer	include/buf0buf.h	/^  HazardPointer(const buf_pool_t *buf_pool, const ib_mutex_t *mutex)$/;"	f	class:Cache_hint::HazardPointer
HazardPointer	include/buf0buf.h	/^class HazardPointer {$/;"	c	class:Cache_hint
Histogram_sampler	include/row0pread-histogram.h	/^class Histogram_sampler {$/;"	c
Histogram_sampler	row/row0pread-histogram.cc	/^Histogram_sampler::Histogram_sampler(size_t max_threads, int sampling_seed,$/;"	f	class:Histogram_sampler
IBD	include/fil0fil.h	/^  IBD = 1,$/;"	e	enum:ib_file_suffix
IBT	include/fil0fil.h	/^  IBT = 4,$/;"	e	enum:ib_file_suffix
IBU	include/fil0fil.h	/^  IBU = 5,$/;"	e	enum:ib_file_suffix
IBUF	include/os0file.h	/^  IBUF = 22,$/;"	m	class:AIO_mode
IBUF_BITMAP	ibuf/ibuf0ibuf.cc	52;"	d	file:
IBUF_BITMAP_BUFFERED	ibuf/ibuf0ibuf.cc	243;"	d	file:
IBUF_BITMAP_FREE	ibuf/ibuf0ibuf.cc	240;"	d	file:
IBUF_BITMAP_IBUF	ibuf/ibuf0ibuf.cc	246;"	d	file:
IBUF_BITS_PER_PAGE	ibuf/ibuf0ibuf.cc	47;"	d	file:
IBUF_CONTRACT_DO_NOT_INSERT	ibuf/ibuf0ibuf.cc	/^const ulint IBUF_CONTRACT_DO_NOT_INSERT = 10;$/;"	v
IBUF_CONTRACT_ON_INSERT_NON_SYNC	ibuf/ibuf0ibuf.cc	/^const ulint IBUF_CONTRACT_ON_INSERT_NON_SYNC = 0;$/;"	v
IBUF_CONTRACT_ON_INSERT_SYNC	ibuf/ibuf0ibuf.cc	/^const ulint IBUF_CONTRACT_ON_INSERT_SYNC = 5;$/;"	v
IBUF_COUNT_N_PAGES	ibuf/ibuf0ibuf.cc	215;"	d	file:
IBUF_COUNT_N_SPACES	ibuf/ibuf0ibuf.cc	213;"	d	file:
IBUF_HEADER	include/ibuf0ibuf.h	372;"	d
IBUF_HEADER_PAGE_NO	include/ibuf0ibuf.h	365;"	d
IBUF_MAX_N_PAGES_MERGED	ibuf/ibuf0ibuf.cc	/^const ulint IBUF_MAX_N_PAGES_MERGED = IBUF_MERGE_AREA;$/;"	v
IBUF_MERGE_AREA	ibuf/ibuf0ibuf.cc	/^const ulint IBUF_MERGE_AREA = 8;$/;"	v
IBUF_MERGE_THRESHOLD	ibuf/ibuf0ibuf.cc	/^const ulint IBUF_MERGE_THRESHOLD = 4;$/;"	v
IBUF_OP_COUNT	include/ibuf0ibuf.h	/^  IBUF_OP_COUNT = 3$/;"	e	enum:__anon8
IBUF_OP_DELETE	include/ibuf0ibuf.h	/^  IBUF_OP_DELETE = 2,$/;"	e	enum:__anon8
IBUF_OP_DELETE_MARK	include/ibuf0ibuf.h	/^  IBUF_OP_DELETE_MARK = 1,$/;"	e	enum:__anon8
IBUF_OP_INSERT	include/ibuf0ibuf.h	/^  IBUF_OP_INSERT = 0,$/;"	e	enum:__anon8
IBUF_REC_COMPACT	ibuf/ibuf0ibuf.cc	285;"	d	file:
IBUF_REC_FIELD_MARKER	ibuf/ibuf0ibuf.cc	256;"	d	file:
IBUF_REC_FIELD_METADATA	ibuf/ibuf0ibuf.cc	262;"	d	file:
IBUF_REC_FIELD_PAGE	ibuf/ibuf0ibuf.cc	259;"	d	file:
IBUF_REC_FIELD_SPACE	ibuf/ibuf0ibuf.cc	253;"	d	file:
IBUF_REC_FIELD_USER	ibuf/ibuf0ibuf.cc	263;"	d	file:
IBUF_REC_INFO_SIZE	ibuf/ibuf0ibuf.cc	272;"	d	file:
IBUF_REC_OFFSET_COUNTER	ibuf/ibuf0ibuf.cc	280;"	d	file:
IBUF_REC_OFFSET_FLAGS	ibuf/ibuf0ibuf.cc	282;"	d	file:
IBUF_REC_OFFSET_TYPE	ibuf/ibuf0ibuf.cc	281;"	d	file:
IBUF_SPACE_ID	include/ibuf0types.h	37;"	d
IBUF_TREE_ROOT_PAGE_NO	include/ibuf0ibuf.h	366;"	d
IBUF_TREE_SEG_HEADER	include/ibuf0ibuf.h	373;"	d
IBUF_USE_ALL	include/ibuf0ibuf.h	/^  IBUF_USE_ALL                 \/* insert+delete+purge *\/$/;"	e	enum:ibuf_use_t
IBUF_USE_DELETE	include/ibuf0ibuf.h	/^  IBUF_USE_DELETE,             \/* delete+purge *\/$/;"	e	enum:ibuf_use_t
IBUF_USE_DELETE_MARK	include/ibuf0ibuf.h	/^  IBUF_USE_DELETE_MARK,        \/* delete *\/$/;"	e	enum:ibuf_use_t
IBUF_USE_INSERT	include/ibuf0ibuf.h	/^  IBUF_USE_INSERT,             \/* insert *\/$/;"	e	enum:ibuf_use_t
IBUF_USE_INSERT_DELETE_MARK	include/ibuf0ibuf.h	/^  IBUF_USE_INSERT_DELETE_MARK, \/* insert+delete *\/$/;"	e	enum:ibuf_use_t
IBUF_USE_NONE	include/ibuf0ibuf.h	/^  IBUF_USE_NONE = 0,$/;"	e	enum:ibuf_use_t
IB_BINARY	include/api0api.h	/^  IB_BINARY = 3, \/*!< Fixed length binary, similar to$/;"	e	enum:__anon19
IB_BLOB	include/api0api.h	/^  IB_BLOB = 5, \/*!< Binary large object, or$/;"	e	enum:__anon19
IB_CFG_BINLOG_ENABLED	include/api0api.h	389;"	d
IB_CFG_CB	include/api0api.h	/^  IB_CFG_CB \/*!< The configuration parameter is$/;"	e	enum:__anon18
IB_CFG_DISABLE_ROWLOCK	include/api0api.h	391;"	d
IB_CFG_IBOOL	include/api0api.h	/^  IB_CFG_IBOOL, \/*!< The configuration parameter is$/;"	e	enum:__anon18
IB_CFG_MDL_ENABLED	include/api0api.h	390;"	d
IB_CFG_TEXT	include/api0api.h	/^  IB_CFG_TEXT, \/*!< The configuration parameter is$/;"	e	enum:__anon18
IB_CFG_ULINT	include/api0api.h	/^  IB_CFG_ULINT, \/*!< The configuration parameter is$/;"	e	enum:__anon18
IB_CFG_ULONG	include/api0api.h	/^  IB_CFG_ULONG, \/*!< The configuration parameter is$/;"	e	enum:__anon18
IB_CHAR	include/api0api.h	/^  IB_CHAR = 2, \/*!< Fixed length character string. The$/;"	e	enum:__anon19
IB_CHAR_ANYCHARSET	include/api0api.h	/^  IB_CHAR_ANYCHARSET = 13 \/*!< Any charset, fixed length *\/$/;"	e	enum:__anon19
IB_CLOSEST_MATCH	include/api0api.h	/^  IB_CLOSEST_MATCH, \/*!< Closest match possible *\/$/;"	e	enum:__anon25
IB_CLUSTERED	include/api0api.h	/^  IB_CLUSTERED = 1, \/*!< clustered index *\/$/;"	e	enum:__anon23
IB_COL_CUSTOM1	include/api0api.h	/^  IB_COL_CUSTOM1 = 8, \/*!< Custom precision type, this is$/;"	e	enum:__anon21
IB_COL_CUSTOM2	include/api0api.h	/^  IB_COL_CUSTOM2 = 16, \/*!< Custom precision type, this is$/;"	e	enum:__anon21
IB_COL_CUSTOM3	include/api0api.h	/^  IB_COL_CUSTOM3 = 32 \/*!< Custom precision type, this is$/;"	e	enum:__anon21
IB_COL_NONE	include/api0api.h	/^  IB_COL_NONE = 0, \/*!< No special attributes. *\/$/;"	e	enum:__anon21
IB_COL_NOT_NULL	include/api0api.h	/^  IB_COL_NOT_NULL = 1, \/*!< Column data can't be NULL. *\/$/;"	e	enum:__anon21
IB_COL_NOT_USED	include/api0api.h	/^  IB_COL_NOT_USED = 4, \/*!< Future use, reserved. *\/$/;"	e	enum:__anon21
IB_COL_UNSIGNED	include/api0api.h	/^  IB_COL_UNSIGNED = 2, \/*!< Column is IB_INT and unsigned. *\/$/;"	e	enum:__anon21
IB_CUR_G	include/api0api.h	/^  IB_CUR_G = 1, \/*!< If search key is not found then$/;"	e	enum:__anon24
IB_CUR_GE	include/api0api.h	/^  IB_CUR_GE = 2, \/*!< If the search key not found then$/;"	e	enum:__anon24
IB_CUR_L	include/api0api.h	/^  IB_CUR_L = 3, \/*!< If search key is not found then$/;"	e	enum:__anon24
IB_CUR_LE	include/api0api.h	/^  IB_CUR_LE = 4 \/*!< If search key is not found then$/;"	e	enum:__anon24
IB_DECIMAL	include/api0api.h	/^  IB_DECIMAL = 11, \/*!< Decimal stored as an ASCII$/;"	e	enum:__anon19
IB_DOUBLE	include/api0api.h	/^  IB_DOUBLE = 10, \/*!> C (double) floating point value. *\/$/;"	e	enum:__anon19
IB_EXACT_MATCH	include/api0api.h	/^  IB_EXACT_MATCH, \/*!< Search using a complete key$/;"	e	enum:__anon25
IB_EXACT_PREFIX	include/api0api.h	/^  IB_EXACT_PREFIX \/*!< Search using a key prefix which$/;"	e	enum:__anon25
IB_EXPORT_CFG_VERSION_V1	include/row0quiesce.h	43;"	d
IB_EXPORT_CFG_VERSION_V2	include/row0quiesce.h	45;"	d
IB_EXPORT_CFG_VERSION_V3	include/row0quiesce.h	47;"	d
IB_EXPORT_CFG_VERSION_V4	include/row0quiesce.h	49;"	d
IB_EXPORT_CFG_VERSION_V5	include/row0quiesce.h	52;"	d
IB_EXPORT_CFG_VERSION_V6	include/row0quiesce.h	54;"	d
IB_EXPORT_CFG_VERSION_V99	include/row0quiesce.h	56;"	d
IB_FALSE	include/api0api.h	74;"	d
IB_FLOAT	include/api0api.h	/^  IB_FLOAT = 9, \/*!< C (float)  floating point value. *\/$/;"	e	enum:__anon19
IB_INT	include/api0api.h	/^  IB_INT = 6, \/*!< Integer: can be any size$/;"	e	enum:__anon19
IB_LIKE_EXACT	include/data0type.h	/^  IB_LIKE_EXACT, \/**< e.g.  STRING *\/$/;"	e	enum:ib_like_t
IB_LIKE_PREFIX	include/data0type.h	/^  IB_LIKE_PREFIX \/**< e.g., STRING% *\/$/;"	e	enum:ib_like_t
IB_LIST_H	include/ut0list.h	53;"	d
IB_LOCK_IS	include/api0api.h	/^  IB_LOCK_IS = 0, \/*!< Intention shared, an intention$/;"	e	enum:__anon22
IB_LOCK_IX	include/api0api.h	/^  IB_LOCK_IX, \/*!< Intention exclusive, an intention$/;"	e	enum:__anon22
IB_LOCK_NONE	include/api0api.h	/^  IB_LOCK_NONE, \/*!< This is used internally to note$/;"	e	enum:__anon22
IB_LOCK_NUM	include/api0api.h	/^  IB_LOCK_NUM = IB_LOCK_NONE \/*!< number of lock modes *\/$/;"	e	enum:__anon22
IB_LOCK_S	include/api0api.h	/^  IB_LOCK_S, \/*!< Shared locks should be used to$/;"	e	enum:__anon22
IB_LOCK_TABLE_X	include/api0api.h	/^  IB_LOCK_TABLE_X, \/*!< exclusive table lock *\/$/;"	e	enum:__anon22
IB_LOCK_X	include/api0api.h	/^  IB_LOCK_X, \/*!< Exclusive locks should be used to$/;"	e	enum:__anon22
IB_LOG_LEVEL_ERROR	include/ha_prototypes.h	/^  IB_LOG_LEVEL_ERROR,$/;"	e	enum:ib_log_level_t
IB_LOG_LEVEL_FATAL	include/ha_prototypes.h	/^  IB_LOG_LEVEL_FATAL$/;"	e	enum:ib_log_level_t
IB_LOG_LEVEL_INFO	include/ha_prototypes.h	/^  IB_LOG_LEVEL_INFO,$/;"	e	enum:ib_log_level_t
IB_LOG_LEVEL_WARN	include/ha_prototypes.h	/^  IB_LOG_LEVEL_WARN,$/;"	e	enum:ib_log_level_t
IB_MEMORY_BARRIER_STARTUP_MSG	include/os0atomic.h	51;"	d
IB_MEMORY_BARRIER_STARTUP_MSG	include/os0atomic.h	58;"	d
IB_MEMORY_BARRIER_STARTUP_MSG	include/os0atomic.h	66;"	d
IB_MEMORY_BARRIER_STARTUP_MSG	include/os0atomic.h	74;"	d
IB_MEMORY_BARRIER_STARTUP_MSG	include/os0atomic.h	80;"	d
IB_N_SLOTS	include/ut0counter.h	50;"	d
IB_RBT_BLACK	include/ut0rbt.h	/^enum ib_rbt_color_t { IB_RBT_RED, IB_RBT_BLACK };$/;"	e	enum:ib_rbt_color_t
IB_RBT_RED	include/ut0rbt.h	/^enum ib_rbt_color_t { IB_RBT_RED, IB_RBT_BLACK };$/;"	e	enum:ib_rbt_color_t
IB_SQL_NULL	include/api0api.h	446;"	d
IB_SYS	include/api0api.h	/^  IB_SYS = 8, \/*!< System column, this column can$/;"	e	enum:__anon19
IB_TBL_COMPACT	include/api0api.h	/^  IB_TBL_COMPACT, \/*!< Compact row format, the column$/;"	e	enum:__anon20
IB_TBL_COMPRESSED	include/api0api.h	/^  IB_TBL_COMPRESSED \/*!< Similar to dynamic format but$/;"	e	enum:__anon20
IB_TBL_DYNAMIC	include/api0api.h	/^  IB_TBL_DYNAMIC, \/*!< Compact row format. BLOB prefixes$/;"	e	enum:__anon20
IB_TBL_REDUNDANT	include/api0api.h	/^  IB_TBL_REDUNDANT, \/*!< Redundant row format, the column$/;"	e	enum:__anon20
IB_TRUE	include/api0api.h	72;"	d
IB_TRX_READ_COMMITTED	include/api0api.h	/^  IB_TRX_READ_COMMITTED = 1, \/*!< Somewhat Oracle-like isolation,$/;"	e	enum:__anon27
IB_TRX_READ_UNCOMMITTED	include/api0api.h	/^  IB_TRX_READ_UNCOMMITTED = 0, \/*!< Dirty read: non-locking SELECTs are$/;"	e	enum:__anon27
IB_TRX_REPEATABLE_READ	include/api0api.h	/^  IB_TRX_REPEATABLE_READ = 2, \/*!< All consistent reads in the same$/;"	e	enum:__anon27
IB_TRX_SERIALIZABLE	include/api0api.h	/^  IB_TRX_SERIALIZABLE = 3 \/*!< All plain SELECTs are converted to$/;"	e	enum:__anon27
IB_UNIQUE	include/api0api.h	/^  IB_UNIQUE = 2     \/*!< unique index *\/$/;"	e	enum:__anon23
IB_VARBINARY	include/api0api.h	/^  IB_VARBINARY = 4, \/*!< Variable length binary *\/$/;"	e	enum:__anon19
IB_VARCHAR	include/api0api.h	/^  IB_VARCHAR = 1, \/*!< Character varying length. The$/;"	e	enum:__anon19
IB_VARCHAR_ANYCHARSET	include/api0api.h	/^  IB_VARCHAR_ANYCHARSET = 12, \/*!< Any charset, varying length *\/$/;"	e	enum:__anon19
IB_VECTOR_H	include/ut0vec.h	34;"	d
IB_WORK_QUEUE_H	include/ut0wqueue.h	39;"	d
IB_mutex_guard	include/ut0mutex.h	/^  explicit IB_mutex_guard(ib_mutex_t *in_mutex) : m_mutex(in_mutex) {$/;"	f	struct:IB_mutex_guard
IB_mutex_guard	include/ut0mutex.h	/^struct IB_mutex_guard {$/;"	s
IB_thread	include/os0thread.h	/^class IB_thread {$/;"	c
IF_IN_POOL	include/buf0buf.h	/^  IF_IN_POOL,$/;"	m	class:Page_fetch
IF_IN_POOL_OR_WATCH	include/buf0buf.h	/^  IF_IN_POOL_OR_WATCH,$/;"	m	class:Page_fetch
IGNORE_MISSING	include/os0file.h	/^    IGNORE_MISSING = 128,$/;"	e	enum:IORequest::__anon5
IMPORT_PAGE_STATUS_ALL_ZERO	row/row0import.cc	/^    IMPORT_PAGE_STATUS_ALL_ZERO, \/*!< Page is all zeros *\/$/;"	e	enum:PageConverter::import_page_status_t	file:
IMPORT_PAGE_STATUS_CORRUPTED	row/row0import.cc	/^    IMPORT_PAGE_STATUS_CORRUPTED \/*!< Page is corrupted *\/$/;"	e	enum:PageConverter::import_page_status_t	file:
IMPORT_PAGE_STATUS_OK	row/row0import.cc	/^    IMPORT_PAGE_STATUS_OK,       \/*!< Page is OK *\/$/;"	e	enum:PageConverter::import_page_status_t	file:
INACTIVE_EXPLICIT	include/trx0types.h	/^    INACTIVE_EXPLICIT,$/;"	e	enum:Rsegs::undo_space_states
INACTIVE_IMPLICIT	include/trx0types.h	/^    INACTIVE_IMPLICIT,$/;"	e	enum:Rsegs::undo_space_states
INDEX_EQ	dict/dict0stats.cc	490;"	d	file:
INDEX_ID_LENGTH	include/dict0mem.h	/^  static const size_t INDEX_ID_LENGTH = 12;$/;"	m	class:CorruptedIndexPersister
INDEX_STATS_NAME	dict/dict0stats.cc	120;"	d	file:
INDEX_STATS_NAME_PRINT	dict/dict0stats.cc	121;"	d	file:
INFO_MAX_SIZE	include/os0enc.h	/^  static constexpr size_t INFO_MAX_SIZE = INFO_SIZE + sizeof(uint32);$/;"	m	class:Encryption
INFO_SIZE	include/os0enc.h	/^  static constexpr size_t INFO_SIZE =$/;"	m	class:Encryption
INIT	include/trx0types.h	/^    INIT,$/;"	e	enum:Rsegs::undo_space_states
INITIAL	fts/fts0blex.cc	503;"	d	file:
INITIAL	fts/fts0tlex.cc	499;"	d	file:
INITIAL	include/fts0blex.h	268;"	d
INITIAL	include/fts0tlex.h	267;"	d
INITIAL	pars/lexyy.cc	958;"	d	file:
INITIATED	include/ut0stage.h	/^    INITIATED = 1,$/;"	e	enum:ut_stage_alter_ts::__anon14
INIT_LOG_FILE0	srv/srv0start.cc	335;"	d	file:
INIT_SCANNING	handler/p_s.cc	/^  INIT_SCANNING,$/;"	e	enum:scan_pass	file:
INIT_SIZE	srv/srv0tmp.cc	/^const uint32_t INIT_SIZE = 10;$/;"	m	namespace:ibt	file:
INNOBASE_ALTER_DATA	handler/handler0alter.cc	/^static const Alter_inplace_info::HA_ALTER_FLAGS INNOBASE_ALTER_DATA =$/;"	v	file:
INNOBASE_ALTER_NOREBUILD	handler/handler0alter.cc	/^static const Alter_inplace_info::HA_ALTER_FLAGS INNOBASE_ALTER_NOREBUILD =$/;"	v	file:
INNOBASE_ALTER_REBUILD	handler/handler0alter.cc	/^static const Alter_inplace_info::HA_ALTER_FLAGS INNOBASE_ALTER_REBUILD =$/;"	v	file:
INNOBASE_FOREIGN_OPERATIONS	handler/handler0alter.cc	/^static const Alter_inplace_info::HA_ALTER_FLAGS INNOBASE_FOREIGN_OPERATIONS =$/;"	v	file:
INNOBASE_FST0AST_H	include/fts0ast.h	34;"	d
INNOBASE_FTS0PLUGIN_H	include/fts0plugin.h	34;"	d
INNOBASE_FTS0PRIV_H	include/fts0priv.h	34;"	d
INNOBASE_FTS0TYPES_H	include/fts0types.h	34;"	d
INNOBASE_INPLACE_IGNORE	handler/handler0alter.cc	/^static const Alter_inplace_info::HA_ALTER_FLAGS INNOBASE_INPLACE_IGNORE =$/;"	v	file:
INNOBASE_ONLINE_CREATE	handler/handler0alter.cc	/^static const Alter_inplace_info::HA_ALTER_FLAGS INNOBASE_ONLINE_CREATE =$/;"	v	file:
INNOBASE_SHARE	handler/ha_innodb.h	/^struct INNOBASE_SHARE {$/;"	s
INNOBASE_UT0RBT_H	include/ut0rbt.h	33;"	d
INNOBASE_WAKE_INTERVAL	api/api0api.cc	218;"	d	file:
INNOBASE_WAKE_INTERVAL	handler/ha_innodb.cc	530;"	d	file:
INNODB_API_CB_ARRAY_ELEMENT_TRANSFORM	handler/ha_innodb.cc	842;"	d	file:
INNODB_CACHE_LINE_SIZE	include/ut0cpu_cache.h	/^constexpr size_t INNODB_CACHE_LINE_SIZE = 128;$/;"	m	namespace:ut
INNODB_FTS0OPT_H	include/fts0opt.h	33;"	d
INNODB_LOG_BUFFER_SIZE_DEFAULT	include/log0log.h	/^constexpr ulong INNODB_LOG_BUFFER_SIZE_DEFAULT = 16 * 1024 * 1024UL;$/;"	v
INNODB_LOG_BUFFER_SIZE_MAX	include/log0log.h	/^constexpr ulong INNODB_LOG_BUFFER_SIZE_MAX = ULONG_MAX;$/;"	v
INNODB_LOG_BUFFER_SIZE_MIN	include/log0log.h	/^constexpr ulong INNODB_LOG_BUFFER_SIZE_MIN = 256 * 1024UL;$/;"	v
INNODB_LOG_CHECKPOINT_EVERY_DEFAULT	include/log0log.h	/^constexpr ulong INNODB_LOG_CHECKPOINT_EVERY_DEFAULT = 1000;  \/\/ 1000ms = 1s$/;"	v
INNODB_LOG_EVENTS_DEFAULT	include/log0log.h	/^constexpr ulong INNODB_LOG_EVENTS_DEFAULT = 2048;$/;"	v
INNODB_LOG_EVENTS_MAX	include/log0log.h	/^constexpr ulong INNODB_LOG_EVENTS_MAX = 1024 * 1024 * 1024UL;$/;"	v
INNODB_LOG_EVENTS_MIN	include/log0log.h	/^constexpr ulong INNODB_LOG_EVENTS_MIN = 1;$/;"	v
INNODB_LOG_FLUSHER_SPIN_DELAY_DEFAULT	include/log0log.h	/^constexpr ulong INNODB_LOG_FLUSHER_SPIN_DELAY_DEFAULT = 250000;$/;"	v
INNODB_LOG_FLUSHER_TIMEOUT_DEFAULT	include/log0log.h	/^constexpr ulong INNODB_LOG_FLUSHER_TIMEOUT_DEFAULT = 10;$/;"	v
INNODB_LOG_FLUSH_NOTIFIER_SPIN_DELAY_DEFAULT	include/log0log.h	/^constexpr ulong INNODB_LOG_FLUSH_NOTIFIER_SPIN_DELAY_DEFAULT = 0;$/;"	v
INNODB_LOG_FLUSH_NOTIFIER_TIMEOUT_DEFAULT	include/log0log.h	/^constexpr ulong INNODB_LOG_FLUSH_NOTIFIER_TIMEOUT_DEFAULT = 10;$/;"	v
INNODB_LOG_RECENT_CLOSED_SIZE_DEFAULT	include/log0log.h	/^constexpr ulong INNODB_LOG_RECENT_CLOSED_SIZE_DEFAULT = 2 * 1024 * 1024;$/;"	v
INNODB_LOG_RECENT_CLOSED_SIZE_MAX	include/log0log.h	/^constexpr ulong INNODB_LOG_RECENT_CLOSED_SIZE_MAX = 1024 * 1024 * 1024UL;$/;"	v
INNODB_LOG_RECENT_CLOSED_SIZE_MIN	include/log0log.h	/^constexpr ulong INNODB_LOG_RECENT_CLOSED_SIZE_MIN = OS_FILE_LOG_BLOCK_SIZE;$/;"	v
INNODB_LOG_RECENT_WRITTEN_SIZE_DEFAULT	include/log0log.h	/^constexpr ulong INNODB_LOG_RECENT_WRITTEN_SIZE_DEFAULT = 1024 * 1024;$/;"	v
INNODB_LOG_RECENT_WRITTEN_SIZE_MAX	include/log0log.h	/^constexpr ulong INNODB_LOG_RECENT_WRITTEN_SIZE_MAX = 1024 * 1024 * 1024UL;$/;"	v
INNODB_LOG_RECENT_WRITTEN_SIZE_MIN	include/log0log.h	/^constexpr ulong INNODB_LOG_RECENT_WRITTEN_SIZE_MIN = OS_FILE_LOG_BLOCK_SIZE;$/;"	v
INNODB_LOG_SPIN_CPU_ABS_LWM_DEFAULT	include/log0log.h	/^constexpr ulong INNODB_LOG_SPIN_CPU_ABS_LWM_DEFAULT = 80;$/;"	v
INNODB_LOG_SPIN_CPU_PCT_HWM_DEFAULT	include/log0log.h	/^constexpr uint INNODB_LOG_SPIN_CPU_PCT_HWM_DEFAULT = 50;$/;"	v
INNODB_LOG_WAIT_FOR_FLUSH_SPIN_DELAY_DEFAULT	include/log0log.h	/^constexpr ulong INNODB_LOG_WAIT_FOR_FLUSH_SPIN_DELAY_DEFAULT = 25000;$/;"	v
INNODB_LOG_WAIT_FOR_FLUSH_SPIN_HWM_DEFAULT	include/log0log.h	/^constexpr ulong INNODB_LOG_WAIT_FOR_FLUSH_SPIN_HWM_DEFAULT = 400;$/;"	v
INNODB_LOG_WAIT_FOR_FLUSH_TIMEOUT_DEFAULT	include/log0log.h	/^constexpr ulong INNODB_LOG_WAIT_FOR_FLUSH_TIMEOUT_DEFAULT = 1000;$/;"	v
INNODB_LOG_WAIT_FOR_WRITE_SPIN_DELAY_DEFAULT	include/log0log.h	/^constexpr ulong INNODB_LOG_WAIT_FOR_WRITE_SPIN_DELAY_DEFAULT = 25000;$/;"	v
INNODB_LOG_WAIT_FOR_WRITE_TIMEOUT_DEFAULT	include/log0log.h	/^constexpr ulong INNODB_LOG_WAIT_FOR_WRITE_TIMEOUT_DEFAULT = 1000;$/;"	v
INNODB_LOG_WRITER_SPIN_DELAY_DEFAULT	include/log0log.h	/^constexpr ulong INNODB_LOG_WRITER_SPIN_DELAY_DEFAULT = 250000;$/;"	v
INNODB_LOG_WRITER_TIMEOUT_DEFAULT	include/log0log.h	/^constexpr ulong INNODB_LOG_WRITER_TIMEOUT_DEFAULT = 10;$/;"	v
INNODB_LOG_WRITE_AHEAD_SIZE_DEFAULT	include/log0log.h	/^constexpr ulong INNODB_LOG_WRITE_AHEAD_SIZE_DEFAULT = 8192;$/;"	v
INNODB_LOG_WRITE_AHEAD_SIZE_MAX	include/log0log.h	/^constexpr ulint INNODB_LOG_WRITE_AHEAD_SIZE_MAX =$/;"	v
INNODB_LOG_WRITE_AHEAD_SIZE_MIN	include/log0log.h	/^constexpr ulong INNODB_LOG_WRITE_AHEAD_SIZE_MIN = OS_FILE_LOG_BLOCK_SIZE;$/;"	v
INNODB_LOG_WRITE_MAX_SIZE_DEFAULT	include/log0log.h	/^constexpr ulint INNODB_LOG_WRITE_MAX_SIZE_DEFAULT = 4096;$/;"	v
INNODB_LOG_WRITE_NOTIFIER_SPIN_DELAY_DEFAULT	include/log0log.h	/^constexpr ulong INNODB_LOG_WRITE_NOTIFIER_SPIN_DELAY_DEFAULT = 0;$/;"	v
INNODB_LOG_WRITE_NOTIFIER_TIMEOUT_DEFAULT	include/log0log.h	/^constexpr ulong INNODB_LOG_WRITE_NOTIFIER_TIMEOUT_DEFAULT = 10;$/;"	v
INNODB_PARAMETERS_MSG	handler/ha_innodb.cc	/^const char *INNODB_PARAMETERS_MSG =$/;"	v
INSERT	include/ut0stage.h	/^    INSERT = 3,$/;"	e	enum:ut_stage_alter_t::__anon13
INSTANT_IMPOSSIBLE	handler/handler0alter.cc	/^  INSTANT_IMPOSSIBLE,$/;"	m	class:Instant_Type	file:
INSTANT_NO_CHANGE	handler/handler0alter.cc	/^  INSTANT_NO_CHANGE,$/;"	m	class:Instant_Type	file:
INSTANT_VIRTUAL_ONLY	handler/handler0alter.cc	/^  INSTANT_VIRTUAL_ONLY,$/;"	m	class:Instant_Type	file:
INS_DIRECT	include/row0ins.h	207;"	d
INS_NODE_ALLOC_ROW_ID	include/row0ins.h	213;"	d
INS_NODE_INSERT_ENTRIES	include/row0ins.h	214;"	d
INS_NODE_MAGIC_N	include/row0ins.h	202;"	d
INS_NODE_SET_IX_LOCK	include/row0ins.h	212;"	d
INS_SEARCHED	include/row0ins.h	205;"	d
INS_VALUES	include/row0ins.h	206;"	d
INT16_MAX	fts/fts0blex.cc	111;"	d	file:
INT16_MAX	fts/fts0tlex.cc	110;"	d	file:
INT16_MAX	include/fts0blex.h	113;"	d
INT16_MAX	include/fts0tlex.h	112;"	d
INT16_MAX	pars/lexyy.cc	74;"	d	file:
INT16_MIN	fts/fts0blex.cc	102;"	d	file:
INT16_MIN	fts/fts0tlex.cc	101;"	d	file:
INT16_MIN	include/fts0blex.h	104;"	d
INT16_MIN	include/fts0tlex.h	103;"	d
INT16_MIN	pars/lexyy.cc	65;"	d	file:
INT32_MAX	fts/fts0blex.cc	114;"	d	file:
INT32_MAX	fts/fts0tlex.cc	113;"	d	file:
INT32_MAX	include/fts0blex.h	116;"	d
INT32_MAX	include/fts0tlex.h	115;"	d
INT32_MAX	pars/lexyy.cc	77;"	d	file:
INT32_MIN	fts/fts0blex.cc	105;"	d	file:
INT32_MIN	fts/fts0tlex.cc	104;"	d	file:
INT32_MIN	include/fts0blex.h	107;"	d
INT32_MIN	include/fts0tlex.h	106;"	d
INT32_MIN	pars/lexyy.cc	68;"	d	file:
INT8_MAX	fts/fts0blex.cc	108;"	d	file:
INT8_MAX	fts/fts0tlex.cc	107;"	d	file:
INT8_MAX	include/fts0blex.h	110;"	d
INT8_MAX	include/fts0tlex.h	109;"	d
INT8_MAX	pars/lexyy.cc	71;"	d	file:
INT8_MIN	fts/fts0blex.cc	99;"	d	file:
INT8_MIN	fts/fts0tlex.cc	98;"	d	file:
INT8_MIN	include/fts0blex.h	101;"	d
INT8_MIN	include/fts0tlex.h	100;"	d
INT8_MIN	pars/lexyy.cc	62;"	d	file:
INVALID	include/os0thread.h	/^  enum class State { INVALID, NOT_STARTED, ALLOWED_TO_START, STARTED, STOPPED };$/;"	m	class:IB_thread::State
IN_PROGRESS	include/os0once.h	/^  static const state_t IN_PROGRESS = 1;$/;"	m	class:os_once
IOEvents	os/os0file.cc	/^  typedef std::vector<io_event> IOEvents;$/;"	t	class:AIO	file:
IORequest	include/os0file.h	/^  IORequest()$/;"	f	class:IORequest
IORequest	include/os0file.h	/^  explicit IORequest(ulint type)$/;"	f	class:IORequest
IORequest	include/os0file.h	/^class IORequest {$/;"	c
IORequestLogRead	include/os0file.h	259;"	d
IORequestLogWrite	include/os0file.h	260;"	d
IORequestRead	include/os0file.h	257;"	d
IORequestWrite	include/os0file.h	258;"	d
IO_BUFFER_SIZE	row/row0import.cc	73;"	d	file:
IO_IBUF_SEGMENT	os/os0file.cc	/^static const ulint IO_IBUF_SEGMENT = 0;$/;"	v	file:
IO_LOG_SEGMENT	os/os0file.cc	/^static const ulint IO_LOG_SEGMENT = 1;$/;"	v	file:
IS_FOUND	ha/ha0storage.cc	55;"	d	file:
IS_LOCK_S_OR_X	lock/lock0lock.cc	4183;"	d	file:
I_S_INNODB_TRX	include/trx0i_s.h	/^  I_S_INNODB_TRX, \/*!< INFORMATION_SCHEMA.innodb_trx *\/$/;"	e	enum:i_s_table
I_S_PAGE_TYPE_BITS	handler/i_s.cc	/^constexpr auto I_S_PAGE_TYPE_BITS = 6;$/;"	v
I_S_PAGE_TYPE_IBUF	handler/i_s.cc	/^constexpr auto I_S_PAGE_TYPE_IBUF = (FIL_PAGE_TYPE_LAST + 2);$/;"	v
I_S_PAGE_TYPE_INDEX	handler/i_s.cc	/^constexpr size_t I_S_PAGE_TYPE_INDEX = 1;$/;"	v
I_S_PAGE_TYPE_LAST	handler/i_s.cc	/^constexpr auto I_S_PAGE_TYPE_LAST = I_S_PAGE_TYPE_SDI;$/;"	v
I_S_PAGE_TYPE_RTREE	handler/i_s.cc	/^constexpr auto I_S_PAGE_TYPE_RTREE = (FIL_PAGE_TYPE_LAST + 1);$/;"	v
I_S_PAGE_TYPE_SDI	handler/i_s.cc	/^constexpr auto I_S_PAGE_TYPE_SDI = (FIL_PAGE_TYPE_LAST + 3);$/;"	v
I_S_PAGE_TYPE_UNKNOWN	handler/i_s.cc	/^constexpr auto I_S_PAGE_TYPE_UNKNOWN = FIL_PAGE_TYPE_UNKNOWN;$/;"	v
Impl	include/mtr0mtr.h	/^  struct Impl {$/;"	s	struct:mtr_t
Index	row/row0import.cc	/^    Index(space_index_t id, page_no_t page_no) : m_id(id), m_page_no(page_no) {}$/;"	f	struct:FetchIndexRootPages::Index
Index	row/row0import.cc	/^  struct Index {$/;"	s	struct:FetchIndexRootPages	file:
IndexPurge	row/row0import.cc	/^class IndexPurge {$/;"	c	file:
Indexes	row/row0import.cc	/^  typedef std::vector<Index, ut_allocator<Index>> Indexes;$/;"	t	struct:FetchIndexRootPages	file:
Infos	sync/sync0rw.cc	/^typedef std::vector<rw_lock_debug_t *> Infos;$/;"	t	file:
Inject_failure_once	include/trx0purge.h	/^  Inject_failure_once(const char *inject_name)$/;"	f	class:undo::Inject_failure_once
Inject_failure_once	include/trx0purge.h	/^class Inject_failure_once {$/;"	c	namespace:undo
Innodb_data_lock_inspector	handler/p_s.cc	/^Innodb_data_lock_inspector::Innodb_data_lock_inspector() {}$/;"	f	class:Innodb_data_lock_inspector
Innodb_data_lock_inspector	handler/p_s.h	/^class Innodb_data_lock_inspector : public PSI_engine_data_lock_inspector {$/;"	c
Innodb_data_lock_iterator	handler/p_s.cc	/^Innodb_data_lock_iterator::Innodb_data_lock_iterator() {}$/;"	f	class:Innodb_data_lock_iterator
Innodb_data_lock_iterator	handler/p_s.cc	/^class Innodb_data_lock_iterator : public PSI_engine_data_lock_iterator {$/;"	c	file:
Innodb_data_lock_wait_iterator	handler/p_s.cc	/^Innodb_data_lock_wait_iterator::Innodb_data_lock_wait_iterator()$/;"	f	class:Innodb_data_lock_wait_iterator
Innodb_data_lock_wait_iterator	handler/p_s.cc	/^class Innodb_data_lock_wait_iterator$/;"	c	file:
Innodb_trx_scan_state	handler/p_s.cc	/^  Innodb_trx_scan_state()$/;"	f	class:Innodb_trx_scan_state
Innodb_trx_scan_state	handler/p_s.cc	/^class Innodb_trx_scan_state {$/;"	c	file:
InsertContext	include/lob0lob.h	/^  InsertContext(const BtrContext &btr_ctx, const big_rec_t *big_rec_vec)$/;"	f	struct:lob::InsertContext
InsertContext	include/lob0lob.h	/^struct InsertContext : public BtrContext {$/;"	s	namespace:lob
Inserter	include/lob0ins.h	/^  Inserter(InsertContext *ctx) : BaseInserter(ctx) {}$/;"	f	class:lob::Inserter
Inserter	include/lob0ins.h	/^class Inserter : private BaseInserter {$/;"	c	namespace:lob
Instant_Type	handler/handler0alter.cc	/^enum class Instant_Type : uint16_t {$/;"	c	file:
Iterate	mtr/mtr0mtr.cc	/^  explicit Iterate(Functor &functor) : m_functor(functor) { \/* Do nothing *\/$/;"	f	struct:Iterate
Iterate	mtr/mtr0mtr.cc	/^struct Iterate {$/;"	s	file:
KB	handler/ha_innodb.cc	/^static const uint64_t KB = 1024;$/;"	v	file:
KB128	include/lob0lob.h	89;"	d
KB16	include/lob0impl.h	/^const ulint KB16 = 16 * 1024;$/;"	m	namespace:lob
KEEP_OLD	include/buf0buf.h	/^  KEEP_OLD = 52$/;"	m	class:Cache_hint
KEY_LEN	include/os0enc.h	/^  static constexpr size_t KEY_LEN = 32;$/;"	m	class:Encryption
KEY_MAGIC_V1	include/os0enc.h	/^  static constexpr char KEY_MAGIC_V1[] = "lCA";$/;"	m	class:Encryption
KEY_MAGIC_V1	os/os0enc.cc	/^constexpr char Encryption::KEY_MAGIC_V1[];$/;"	m	class:Encryption	file:
KEY_MAGIC_V2	include/os0enc.h	/^  static constexpr char KEY_MAGIC_V2[] = "lCB";$/;"	m	class:Encryption
KEY_MAGIC_V2	os/os0enc.cc	/^constexpr char Encryption::KEY_MAGIC_V2[];$/;"	m	class:Encryption	file:
KEY_MAGIC_V3	include/os0enc.h	/^  static constexpr char KEY_MAGIC_V3[] = "lCC";$/;"	m	class:Encryption
KEY_MAGIC_V3	os/os0enc.cc	/^constexpr char Encryption::KEY_MAGIC_V3[];$/;"	m	class:Encryption	file:
Key	include/log0test.h	/^  typedef page_no_t Key;$/;"	t	class:Log_test
LATCH_ADD_MUTEX	include/sync0types.h	586;"	d
LATCH_ADD_MUTEX	include/sync0types.h	606;"	d
LATCH_ADD_RWLOCK	include/sync0types.h	596;"	d
LATCH_ADD_RWLOCK	include/sync0types.h	600;"	d
LATCH_ADD_RWLOCK	include/sync0types.h	609;"	d
LATCH_ID_AUTOINC	include/sync0types.h	/^  LATCH_ID_AUTOINC,$/;"	e	enum:latch_id_t
LATCH_ID_BTR_SEARCH	include/sync0types.h	/^  LATCH_ID_BTR_SEARCH,$/;"	e	enum:latch_id_t
LATCH_ID_BUF_BLOCK_DEBUG	include/sync0types.h	/^  LATCH_ID_BUF_BLOCK_DEBUG,$/;"	e	enum:latch_id_t
LATCH_ID_BUF_BLOCK_LOCK	include/sync0types.h	/^  LATCH_ID_BUF_BLOCK_LOCK,$/;"	e	enum:latch_id_t
LATCH_ID_BUF_BLOCK_MUTEX	include/sync0types.h	/^  LATCH_ID_BUF_BLOCK_MUTEX,$/;"	e	enum:latch_id_t
LATCH_ID_BUF_CHUNK_MAP_LATCH	include/sync0types.h	/^  LATCH_ID_BUF_CHUNK_MAP_LATCH,$/;"	e	enum:latch_id_t
LATCH_ID_BUF_POOL_CHUNKS	include/sync0types.h	/^  LATCH_ID_BUF_POOL_CHUNKS,$/;"	e	enum:latch_id_t
LATCH_ID_BUF_POOL_FLUSH_STATE	include/sync0types.h	/^  LATCH_ID_BUF_POOL_FLUSH_STATE,$/;"	e	enum:latch_id_t
LATCH_ID_BUF_POOL_FREE_LIST	include/sync0types.h	/^  LATCH_ID_BUF_POOL_FREE_LIST,$/;"	e	enum:latch_id_t
LATCH_ID_BUF_POOL_LRU_LIST	include/sync0types.h	/^  LATCH_ID_BUF_POOL_LRU_LIST,$/;"	e	enum:latch_id_t
LATCH_ID_BUF_POOL_ZIP	include/sync0types.h	/^  LATCH_ID_BUF_POOL_ZIP,$/;"	e	enum:latch_id_t
LATCH_ID_BUF_POOL_ZIP_FREE	include/sync0types.h	/^  LATCH_ID_BUF_POOL_ZIP_FREE,$/;"	e	enum:latch_id_t
LATCH_ID_BUF_POOL_ZIP_HASH	include/sync0types.h	/^  LATCH_ID_BUF_POOL_ZIP_HASH,$/;"	e	enum:latch_id_t
LATCH_ID_CACHE_LAST_READ	include/sync0types.h	/^  LATCH_ID_CACHE_LAST_READ,$/;"	e	enum:latch_id_t
LATCH_ID_CHECKPOINT	include/sync0types.h	/^  LATCH_ID_CHECKPOINT,$/;"	e	enum:latch_id_t
LATCH_ID_CLONE_SNAPSHOT	include/sync0types.h	/^  LATCH_ID_CLONE_SNAPSHOT,$/;"	e	enum:latch_id_t
LATCH_ID_CLONE_SYS	include/sync0types.h	/^  LATCH_ID_CLONE_SYS,$/;"	e	enum:latch_id_t
LATCH_ID_CLONE_TASK	include/sync0types.h	/^  LATCH_ID_CLONE_TASK,$/;"	e	enum:latch_id_t
LATCH_ID_DBLR	include/sync0types.h	/^  LATCH_ID_DBLR,$/;"	e	enum:latch_id_t
LATCH_ID_DBLWR	include/sync0types.h	/^  LATCH_ID_DBLWR,$/;"	e	enum:latch_id_t
LATCH_ID_DBLWR_SPACE_CACHE	include/sync0types.h	/^  LATCH_ID_DBLWR_SPACE_CACHE,$/;"	e	enum:latch_id_t
LATCH_ID_DICT_FOREIGN_ERR	include/sync0types.h	/^  LATCH_ID_DICT_FOREIGN_ERR,$/;"	e	enum:latch_id_t
LATCH_ID_DICT_OPERATION	include/sync0types.h	/^  LATCH_ID_DICT_OPERATION,$/;"	e	enum:latch_id_t
LATCH_ID_DICT_PERSIST_CHECKPOINT	include/sync0types.h	/^  LATCH_ID_DICT_PERSIST_CHECKPOINT,$/;"	e	enum:latch_id_t
LATCH_ID_DICT_PERSIST_DIRTY_TABLES	include/sync0types.h	/^  LATCH_ID_DICT_PERSIST_DIRTY_TABLES,$/;"	e	enum:latch_id_t
LATCH_ID_DICT_SYS	include/sync0types.h	/^  LATCH_ID_DICT_SYS,$/;"	e	enum:latch_id_t
LATCH_ID_DICT_TABLE	include/sync0types.h	/^  LATCH_ID_DICT_TABLE,$/;"	e	enum:latch_id_t
LATCH_ID_DICT_TABLE_STATS	include/sync0types.h	/^  LATCH_ID_DICT_TABLE_STATS,$/;"	e	enum:latch_id_t
LATCH_ID_EVENT_MANAGER	include/sync0types.h	/^  LATCH_ID_EVENT_MANAGER,$/;"	e	enum:latch_id_t
LATCH_ID_EVENT_MUTEX	include/sync0types.h	/^  LATCH_ID_EVENT_MUTEX,$/;"	e	enum:latch_id_t
LATCH_ID_FILE_OPEN	include/sync0types.h	/^  LATCH_ID_FILE_OPEN,$/;"	e	enum:latch_id_t
LATCH_ID_FIL_SHARD	include/sync0types.h	/^  LATCH_ID_FIL_SHARD,$/;"	e	enum:latch_id_t
LATCH_ID_FIL_SPACE	include/sync0types.h	/^  LATCH_ID_FIL_SPACE,$/;"	e	enum:latch_id_t
LATCH_ID_FLUSH_LIST	include/sync0types.h	/^  LATCH_ID_FLUSH_LIST,$/;"	e	enum:latch_id_t
LATCH_ID_FTS_BG_THREADS	include/sync0types.h	/^  LATCH_ID_FTS_BG_THREADS,$/;"	e	enum:latch_id_t
LATCH_ID_FTS_CACHE	include/sync0types.h	/^  LATCH_ID_FTS_CACHE,$/;"	e	enum:latch_id_t
LATCH_ID_FTS_CACHE_INIT	include/sync0types.h	/^  LATCH_ID_FTS_CACHE_INIT,$/;"	e	enum:latch_id_t
LATCH_ID_FTS_DELETE	include/sync0types.h	/^  LATCH_ID_FTS_DELETE,$/;"	e	enum:latch_id_t
LATCH_ID_FTS_DOC_ID	include/sync0types.h	/^  LATCH_ID_FTS_DOC_ID,$/;"	e	enum:latch_id_t
LATCH_ID_FTS_OPTIMIZE	include/sync0types.h	/^  LATCH_ID_FTS_OPTIMIZE,$/;"	e	enum:latch_id_t
LATCH_ID_FTS_PLL_TOKENIZE	include/sync0types.h	/^  LATCH_ID_FTS_PLL_TOKENIZE,$/;"	e	enum:latch_id_t
LATCH_ID_HASH_TABLE_MUTEX	include/sync0types.h	/^  LATCH_ID_HASH_TABLE_MUTEX,$/;"	e	enum:latch_id_t
LATCH_ID_HASH_TABLE_RW_LOCK	include/sync0types.h	/^  LATCH_ID_HASH_TABLE_RW_LOCK,$/;"	e	enum:latch_id_t
LATCH_ID_IBUF	include/sync0types.h	/^  LATCH_ID_IBUF,$/;"	e	enum:latch_id_t
LATCH_ID_IBUF_BITMAP	include/sync0types.h	/^  LATCH_ID_IBUF_BITMAP,$/;"	e	enum:latch_id_t
LATCH_ID_IBUF_INDEX_TREE	include/sync0types.h	/^  LATCH_ID_IBUF_INDEX_TREE,$/;"	e	enum:latch_id_t
LATCH_ID_IBUF_PESSIMISTIC_INSERT	include/sync0types.h	/^  LATCH_ID_IBUF_PESSIMISTIC_INSERT,$/;"	e	enum:latch_id_t
LATCH_ID_INDEX_ONLINE_LOG	include/sync0types.h	/^  LATCH_ID_INDEX_ONLINE_LOG,$/;"	e	enum:latch_id_t
LATCH_ID_INDEX_TREE	include/sync0types.h	/^  LATCH_ID_INDEX_TREE,$/;"	e	enum:latch_id_t
LATCH_ID_LOCK_FREE_HASH	include/sync0types.h	/^  LATCH_ID_LOCK_FREE_HASH,$/;"	e	enum:latch_id_t
LATCH_ID_LOCK_SYS_GLOBAL	include/sync0types.h	/^  LATCH_ID_LOCK_SYS_GLOBAL,$/;"	e	enum:latch_id_t
LATCH_ID_LOCK_SYS_PAGE	include/sync0types.h	/^  LATCH_ID_LOCK_SYS_PAGE,$/;"	e	enum:latch_id_t
LATCH_ID_LOCK_SYS_TABLE	include/sync0types.h	/^  LATCH_ID_LOCK_SYS_TABLE,$/;"	e	enum:latch_id_t
LATCH_ID_LOCK_SYS_WAIT	include/sync0types.h	/^  LATCH_ID_LOCK_SYS_WAIT,$/;"	e	enum:latch_id_t
LATCH_ID_LOG_ARCH	include/sync0types.h	/^  LATCH_ID_LOG_ARCH,$/;"	e	enum:latch_id_t
LATCH_ID_LOG_CHECKPOINTER	include/sync0types.h	/^  LATCH_ID_LOG_CHECKPOINTER,$/;"	e	enum:latch_id_t
LATCH_ID_LOG_CLOSER	include/sync0types.h	/^  LATCH_ID_LOG_CLOSER,$/;"	e	enum:latch_id_t
LATCH_ID_LOG_FLUSHER	include/sync0types.h	/^  LATCH_ID_LOG_FLUSHER,$/;"	e	enum:latch_id_t
LATCH_ID_LOG_FLUSH_NOTIFIER	include/sync0types.h	/^  LATCH_ID_LOG_FLUSH_NOTIFIER,$/;"	e	enum:latch_id_t
LATCH_ID_LOG_LIMITS	include/sync0types.h	/^  LATCH_ID_LOG_LIMITS,$/;"	e	enum:latch_id_t
LATCH_ID_LOG_SN	include/sync0types.h	/^  LATCH_ID_LOG_SN,$/;"	e	enum:latch_id_t
LATCH_ID_LOG_SN_MUTEX	include/sync0types.h	/^  LATCH_ID_LOG_SN_MUTEX,$/;"	e	enum:latch_id_t
LATCH_ID_LOG_WRITER	include/sync0types.h	/^  LATCH_ID_LOG_WRITER,$/;"	e	enum:latch_id_t
LATCH_ID_LOG_WRITE_NOTIFIER	include/sync0types.h	/^  LATCH_ID_LOG_WRITE_NOTIFIER,$/;"	e	enum:latch_id_t
LATCH_ID_MASTER_KEY_ID_MUTEX	include/sync0types.h	/^  LATCH_ID_MASTER_KEY_ID_MUTEX,$/;"	e	enum:latch_id_t
LATCH_ID_MAX	include/sync0types.h	/^  LATCH_ID_MAX = LATCH_ID_TEST_MUTEX$/;"	e	enum:latch_id_t
LATCH_ID_NONE	include/sync0types.h	/^  LATCH_ID_NONE = 0,$/;"	e	enum:latch_id_t
LATCH_ID_OS_AIO_IBUF_MUTEX	include/sync0types.h	/^  LATCH_ID_OS_AIO_IBUF_MUTEX,$/;"	e	enum:latch_id_t
LATCH_ID_OS_AIO_LOG_MUTEX	include/sync0types.h	/^  LATCH_ID_OS_AIO_LOG_MUTEX,$/;"	e	enum:latch_id_t
LATCH_ID_OS_AIO_READ_MUTEX	include/sync0types.h	/^  LATCH_ID_OS_AIO_READ_MUTEX,$/;"	e	enum:latch_id_t
LATCH_ID_OS_AIO_SYNC_MUTEX	include/sync0types.h	/^  LATCH_ID_OS_AIO_SYNC_MUTEX,$/;"	e	enum:latch_id_t
LATCH_ID_OS_AIO_WRITE_MUTEX	include/sync0types.h	/^  LATCH_ID_OS_AIO_WRITE_MUTEX,$/;"	e	enum:latch_id_t
LATCH_ID_PAGE_ARCH	include/sync0types.h	/^  LATCH_ID_PAGE_ARCH,$/;"	e	enum:latch_id_t
LATCH_ID_PAGE_ARCH_CLIENT	include/sync0types.h	/^  LATCH_ID_PAGE_ARCH_CLIENT,$/;"	e	enum:latch_id_t
LATCH_ID_PAGE_ARCH_OPER	include/sync0types.h	/^  LATCH_ID_PAGE_ARCH_OPER,$/;"	e	enum:latch_id_t
LATCH_ID_PAGE_CLEANER	include/sync0types.h	/^  LATCH_ID_PAGE_CLEANER,$/;"	e	enum:latch_id_t
LATCH_ID_PAGE_ZIP_STAT_PER_INDEX	include/sync0types.h	/^  LATCH_ID_PAGE_ZIP_STAT_PER_INDEX,$/;"	e	enum:latch_id_t
LATCH_ID_PARALLEL_READ	include/sync0types.h	/^  LATCH_ID_PARALLEL_READ,$/;"	e	enum:latch_id_t
LATCH_ID_PARSER	include/sync0types.h	/^  LATCH_ID_PARSER,$/;"	e	enum:latch_id_t
LATCH_ID_PERSIST_AUTOINC	include/sync0types.h	/^  LATCH_ID_PERSIST_AUTOINC,$/;"	e	enum:latch_id_t
LATCH_ID_PERSIST_METADATA_BUFFER	include/sync0types.h	/^  LATCH_ID_PERSIST_METADATA_BUFFER,$/;"	e	enum:latch_id_t
LATCH_ID_PURGE_SYS_PQ	include/sync0types.h	/^  LATCH_ID_PURGE_SYS_PQ,$/;"	e	enum:latch_id_t
LATCH_ID_RECALC_POOL	include/sync0types.h	/^  LATCH_ID_RECALC_POOL,$/;"	e	enum:latch_id_t
LATCH_ID_RECV_SYS	include/sync0types.h	/^  LATCH_ID_RECV_SYS,$/;"	e	enum:latch_id_t
LATCH_ID_RECV_WRITER	include/sync0types.h	/^  LATCH_ID_RECV_WRITER,$/;"	e	enum:latch_id_t
LATCH_ID_REDO_LOG_ARCHIVE_ADMIN_MUTEX	include/sync0types.h	/^  LATCH_ID_REDO_LOG_ARCHIVE_ADMIN_MUTEX,$/;"	e	enum:latch_id_t
LATCH_ID_REDO_LOG_ARCHIVE_QUEUE_MUTEX	include/sync0types.h	/^  LATCH_ID_REDO_LOG_ARCHIVE_QUEUE_MUTEX,$/;"	e	enum:latch_id_t
LATCH_ID_ROW_DROP_LIST	include/sync0types.h	/^  LATCH_ID_ROW_DROP_LIST,$/;"	e	enum:latch_id_t
LATCH_ID_RSEGS	include/sync0types.h	/^  LATCH_ID_RSEGS,$/;"	e	enum:latch_id_t
LATCH_ID_RTR_ACTIVE_MUTEX	include/sync0types.h	/^  LATCH_ID_RTR_ACTIVE_MUTEX,$/;"	e	enum:latch_id_t
LATCH_ID_RTR_MATCH_MUTEX	include/sync0types.h	/^  LATCH_ID_RTR_MATCH_MUTEX,$/;"	e	enum:latch_id_t
LATCH_ID_RTR_PATH_MUTEX	include/sync0types.h	/^  LATCH_ID_RTR_PATH_MUTEX,$/;"	e	enum:latch_id_t
LATCH_ID_RTR_SSN_MUTEX	include/sync0types.h	/^  LATCH_ID_RTR_SSN_MUTEX,$/;"	e	enum:latch_id_t
LATCH_ID_RW_LOCK_DEBUG	include/sync0types.h	/^  LATCH_ID_RW_LOCK_DEBUG,$/;"	e	enum:latch_id_t
LATCH_ID_RW_LOCK_LIST	include/sync0types.h	/^  LATCH_ID_RW_LOCK_LIST,$/;"	e	enum:latch_id_t
LATCH_ID_SRV_INNODB_MONITOR	include/sync0types.h	/^  LATCH_ID_SRV_INNODB_MONITOR,$/;"	e	enum:latch_id_t
LATCH_ID_SRV_MISC_TMPFILE	include/sync0types.h	/^  LATCH_ID_SRV_MISC_TMPFILE,$/;"	e	enum:latch_id_t
LATCH_ID_SRV_MONITOR_FILE	include/sync0types.h	/^  LATCH_ID_SRV_MONITOR_FILE,$/;"	e	enum:latch_id_t
LATCH_ID_SRV_SYS	include/sync0types.h	/^  LATCH_ID_SRV_SYS,$/;"	e	enum:latch_id_t
LATCH_ID_SRV_SYS_TASKS	include/sync0types.h	/^  LATCH_ID_SRV_SYS_TASKS,$/;"	e	enum:latch_id_t
LATCH_ID_SYNC_ARRAY_MUTEX	include/sync0types.h	/^  LATCH_ID_SYNC_ARRAY_MUTEX,$/;"	e	enum:latch_id_t
LATCH_ID_SYNC_DEBUG_MUTEX	include/sync0types.h	/^  LATCH_ID_SYNC_DEBUG_MUTEX,$/;"	e	enum:latch_id_t
LATCH_ID_SYNC_THREAD	include/sync0types.h	/^  LATCH_ID_SYNC_THREAD,$/;"	e	enum:latch_id_t
LATCH_ID_TEMP_POOL_MANAGER	include/sync0types.h	/^  LATCH_ID_TEMP_POOL_MANAGER,$/;"	e	enum:latch_id_t
LATCH_ID_TEMP_SPACE_RSEG	include/sync0types.h	/^  LATCH_ID_TEMP_SPACE_RSEG,$/;"	e	enum:latch_id_t
LATCH_ID_TEST_MUTEX	include/sync0types.h	/^  LATCH_ID_TEST_MUTEX,$/;"	e	enum:latch_id_t
LATCH_ID_TRX	include/sync0types.h	/^  LATCH_ID_TRX,$/;"	e	enum:latch_id_t
LATCH_ID_TRX_I_S_CACHE	include/sync0types.h	/^  LATCH_ID_TRX_I_S_CACHE,$/;"	e	enum:latch_id_t
LATCH_ID_TRX_POOL	include/sync0types.h	/^  LATCH_ID_TRX_POOL,$/;"	e	enum:latch_id_t
LATCH_ID_TRX_POOL_MANAGER	include/sync0types.h	/^  LATCH_ID_TRX_POOL_MANAGER,$/;"	e	enum:latch_id_t
LATCH_ID_TRX_PURGE	include/sync0types.h	/^  LATCH_ID_TRX_PURGE,$/;"	e	enum:latch_id_t
LATCH_ID_TRX_SYS	include/sync0types.h	/^  LATCH_ID_TRX_SYS,$/;"	e	enum:latch_id_t
LATCH_ID_TRX_SYS_RSEG	include/sync0types.h	/^  LATCH_ID_TRX_SYS_RSEG,$/;"	e	enum:latch_id_t
LATCH_ID_TRX_UNDO	include/sync0types.h	/^  LATCH_ID_TRX_UNDO,$/;"	e	enum:latch_id_t
LATCH_ID_UNDO_DDL	include/sync0types.h	/^  LATCH_ID_UNDO_DDL,$/;"	e	enum:latch_id_t
LATCH_ID_UNDO_SPACES	include/sync0types.h	/^  LATCH_ID_UNDO_SPACES,$/;"	e	enum:latch_id_t
LATCH_ID_UNDO_SPACE_RSEG	include/sync0types.h	/^  LATCH_ID_UNDO_SPACE_RSEG,$/;"	e	enum:latch_id_t
LATCH_ID_WORK_QUEUE	include/sync0types.h	/^  LATCH_ID_WORK_QUEUE,$/;"	e	enum:latch_id_t
LATCH_ID_ZIP_PAD_MUTEX	include/sync0types.h	/^  LATCH_ID_ZIP_PAD_MUTEX,$/;"	e	enum:latch_id_t
LCG_a	page/page0cur.cc	67;"	d	file:
LCG_c	page/page0cur.cc	68;"	d	file:
LEGACY_PAGE1	buf/buf0dblwr.cc	/^static page_no_t LEGACY_PAGE1;$/;"	m	namespace:dblwr	file:
LEGACY_PAGE2	buf/buf0dblwr.cc	/^static page_no_t LEGACY_PAGE2;$/;"	m	namespace:dblwr	file:
LEVEL_MAP_INSERT	sync/sync0debug.cc	383;"	d	file:
LINUX_NATIVE_AIO	os/os0file.cc	75;"	d	file:
LOB_BIG_THRESHOLD_SIZE	include/lob0lob.h	/^  static const ulint LOB_BIG_THRESHOLD_SIZE = 2;$/;"	m	struct:lob::ref_t
LOB_HDR_NEXT_PAGE_NO	include/lob0lob.h	/^const ulint LOB_HDR_NEXT_PAGE_NO = 4;$/;"	m	namespace:lob
LOB_HDR_PART_LEN	include/lob0lob.h	/^const ulint LOB_HDR_PART_LEN = 0;$/;"	m	namespace:lob
LOB_HDR_SIZE	include/lob0lob.h	/^const ulint LOB_HDR_SIZE = 8;$/;"	m	namespace:lob
LOB_PAGE_DATA	include/lob0first.h	/^  static const ulint LOB_PAGE_DATA =$/;"	m	struct:lob::first_page_t
LOB_PAGE_DATA	include/lob0impl.h	/^  static const ulint LOB_PAGE_DATA = OFFSET_VERSION + 1;$/;"	m	struct:lob::node_page_t
LOB_PAGE_DATA	include/lob0impl.h	/^  static const ulint LOB_PAGE_DATA = OFFSET_VERSION + 1;$/;"	m	struct:lob::z_frag_node_page_t
LOB_PAGE_DATA	include/lob0impl.h	/^  static const ulint LOB_PAGE_DATA = OFFSET_VERSION + 1;$/;"	m	struct:lob::z_index_page_t
LOB_PAGE_DATA	include/lob0pages.h	/^  static const ulint LOB_PAGE_DATA = OFFSET_TRX_ID + 6;$/;"	m	struct:lob::data_page_t
LOB_PAGE_TRAILER_LEN	include/lob0first.h	/^  static const ulint LOB_PAGE_TRAILER_LEN = FIL_PAGE_DATA_END;$/;"	m	struct:lob::first_page_t
LOB_SMALL_CHANGE_THRESHOLD	include/lob0lob.h	/^  static const ulint LOB_SMALL_CHANGE_THRESHOLD = 100;$/;"	m	struct:lob::ref_t
LOCKS_HASH_CELLS_NUM	trx/trx0i_s.cc	182;"	d	file:
LOCK_AUTO_INC	include/lock0types.h	/^  LOCK_AUTO_INC,        \/* locks the auto-inc counter of a table$/;"	e	enum:lock_mode
LOCK_CLUST_PCUR	include/row0mysql.h	/^    LOCK_CLUST_PCUR,$/;"	e	enum:row_prebuilt_t::__anon16
LOCK_COUNT	include/row0mysql.h	/^    LOCK_COUNT,$/;"	e	enum:row_prebuilt_t::__anon16
LOCK_GAP	include/lock0lock.h	892;"	d
LOCK_INSERT_INTENTION	include/lock0lock.h	909;"	d
LOCK_IS	include/lock0types.h	/^  LOCK_IS = 0,          \/* intention shared *\/$/;"	e	enum:lock_mode
LOCK_IX	include/lock0types.h	/^  LOCK_IX,              \/* intention exclusive *\/$/;"	e	enum:lock_mode
LOCK_MODE_MASK	include/lock0lock.h	869;"	d
LOCK_MODULE_IMPLEMENTATION	lock/lock0guards.cc	27;"	d	file:
LOCK_MODULE_IMPLEMENTATION	lock/lock0iter.cc	34;"	d	file:
LOCK_MODULE_IMPLEMENTATION	lock/lock0latches.cc	27;"	d	file:
LOCK_MODULE_IMPLEMENTATION	lock/lock0lock.cc	33;"	d	file:
LOCK_MODULE_IMPLEMENTATION	lock/lock0prdt.cc	33;"	d	file:
LOCK_MODULE_IMPLEMENTATION	lock/lock0wait.cc	33;"	d	file:
LOCK_NONE	include/lock0types.h	/^  LOCK_NONE,            \/* this is used elsewhere to note consistent read *\/$/;"	e	enum:lock_mode
LOCK_NONE_UNSET	include/lock0types.h	/^  LOCK_NONE_UNSET = 255$/;"	e	enum:lock_mode
LOCK_NUM	include/lock0types.h	/^  LOCK_NUM = LOCK_NONE, \/* number of lock modes *\/$/;"	e	enum:lock_mode
LOCK_ORDINARY	include/lock0lock.h	888;"	d
LOCK_PAGE_BITMAP_MARGIN	include/lock0priv.h	/^static const ulint LOCK_PAGE_BITMAP_MARGIN = 64;$/;"	v
LOCK_PCUR	include/row0mysql.h	/^    LOCK_PCUR,$/;"	e	enum:row_prebuilt_t::__anon16
LOCK_PRDT_PAGE	include/lock0lock.h	919;"	d
LOCK_PREDICATE	include/lock0lock.h	918;"	d
LOCK_REC	include/lock0lock.h	874;"	d
LOCK_RECORD_ID_FORMAT	trx/trx0i_s.cc	/^constexpr const char *LOCK_RECORD_ID_FORMAT =$/;"	v
LOCK_REC_FAIL	include/lock0priv.h	/^  LOCK_REC_FAIL,$/;"	e	enum:lock_rec_req_status
LOCK_REC_NOT_GAP	include/lock0lock.h	900;"	d
LOCK_REC_SUCCESS	include/lock0priv.h	/^  LOCK_REC_SUCCESS,$/;"	e	enum:lock_rec_req_status
LOCK_REC_SUCCESS_CREATED	include/lock0priv.h	/^  LOCK_REC_SUCCESS_CREATED$/;"	e	enum:lock_rec_req_status
LOCK_S	include/lock0types.h	/^  LOCK_S,               \/* shared *\/$/;"	e	enum:lock_mode
LOCK_TABLE	include/lock0lock.h	873;"	d
LOCK_TABLE_ID_FORMAT	trx/trx0i_s.cc	/^constexpr const char *LOCK_TABLE_ID_FORMAT = UINT64PF ":" UINT64PF ":" UINT64PF;$/;"	v
LOCK_TYPE_MASK	include/lock0lock.h	875;"	d
LOCK_WAIT	include/lock0lock.h	882;"	d
LOCK_X	include/lock0types.h	/^  LOCK_X,               \/* exclusive *\/$/;"	e	enum:lock_mode
LOG	include/os0file.h	/^    LOG = 16,$/;"	e	enum:IORequest::__anon5
LOG	include/os0file.h	/^  LOG = 23,$/;"	m	class:AIO_mode
LOGFILE	page/page0zip.cc	602;"	d	file:
LOGFILE	page/page0zip.cc	607;"	d	file:
LOG_BLOCK_CHECKPOINT_NO	include/log0log.h	/^constexpr uint32_t LOG_BLOCK_CHECKPOINT_NO = 8;$/;"	v
LOG_BLOCK_CHECKSUM	include/log0log.h	/^constexpr uint32_t LOG_BLOCK_CHECKSUM = 4;$/;"	v
LOG_BLOCK_DATA_SIZE	include/log0log.h	/^constexpr uint32_t LOG_BLOCK_DATA_SIZE =$/;"	v
LOG_BLOCK_ENCRYPT_BIT_MASK	include/log0log.h	/^constexpr uint32_t LOG_BLOCK_ENCRYPT_BIT_MASK = 0x8000UL;$/;"	v
LOG_BLOCK_FIRST_REC_GROUP	include/log0log.h	/^constexpr uint32_t LOG_BLOCK_FIRST_REC_GROUP = 6;$/;"	v
LOG_BLOCK_FLUSH_BIT_MASK	include/log0log.h	/^constexpr uint32_t LOG_BLOCK_FLUSH_BIT_MASK = 0x80000000UL;$/;"	v
LOG_BLOCK_HDR_DATA_LEN	include/log0log.h	/^constexpr uint32_t LOG_BLOCK_HDR_DATA_LEN = 4;$/;"	v
LOG_BLOCK_HDR_NO	include/log0log.h	/^constexpr uint32_t LOG_BLOCK_HDR_NO = 0;$/;"	v
LOG_BLOCK_HDR_SIZE	include/log0log.h	/^constexpr uint32_t LOG_BLOCK_HDR_SIZE = 12;$/;"	v
LOG_BLOCK_MAX_NO	include/log0log.h	/^constexpr uint32_t LOG_BLOCK_MAX_NO = 0x3FFFFFFFUL + 1;$/;"	v
LOG_BLOCK_TRL_SIZE	include/log0log.h	/^constexpr uint32_t LOG_BLOCK_TRL_SIZE = 4;$/;"	v
LOG_CHECKPOINT_1	include/log0log.h	/^constexpr uint32_t LOG_CHECKPOINT_1 = OS_FILE_LOG_BLOCK_SIZE;$/;"	v
LOG_CHECKPOINT_2	include/log0log.h	/^constexpr uint32_t LOG_CHECKPOINT_2 = 3 * OS_FILE_LOG_BLOCK_SIZE;$/;"	v
LOG_CHECKPOINT_EXTRA_FREE	include/log0log.h	/^constexpr uint32_t LOG_CHECKPOINT_EXTRA_FREE = 8;$/;"	v
LOG_CHECKPOINT_FREE_PER_THREAD	include/log0log.h	/^constexpr uint32_t LOG_CHECKPOINT_FREE_PER_THREAD = 4;$/;"	v
LOG_CHECKPOINT_LOG_BUF_SIZE	include/log0log.h	/^constexpr uint32_t LOG_CHECKPOINT_LOG_BUF_SIZE = 24;$/;"	v
LOG_CHECKPOINT_LSN	include/log0log.h	/^constexpr uint32_t LOG_CHECKPOINT_LSN = 8;$/;"	v
LOG_CHECKPOINT_NO	include/log0log.h	/^constexpr uint32_t LOG_CHECKPOINT_NO = 0;$/;"	v
LOG_CHECKPOINT_OFFSET	include/log0log.h	/^constexpr uint32_t LOG_CHECKPOINT_OFFSET = 16;$/;"	v
LOG_ENCRYPTION	include/log0log.h	/^constexpr uint32_t LOG_ENCRYPTION = 2 * OS_FILE_LOG_BLOCK_SIZE;$/;"	v
LOG_FILE_HDR_SIZE	include/log0log.h	/^constexpr uint32_t LOG_FILE_HDR_SIZE = 4 * OS_FILE_LOG_BLOCK_SIZE;$/;"	v
LOG_HEADER_CHECK_FLAG	include/log0log.h	/^inline bool LOG_HEADER_CHECK_FLAG(uint32_t flag, uint32_t bit) {$/;"	f
LOG_HEADER_CREATOR	include/log0log.h	/^constexpr uint32_t LOG_HEADER_CREATOR = 16;$/;"	v
LOG_HEADER_CREATOR_CLONE	include/log0log.h	249;"	d
LOG_HEADER_CREATOR_CURRENT	include/log0log.h	246;"	d
LOG_HEADER_CREATOR_END	include/log0log.h	/^constexpr uint32_t LOG_HEADER_CREATOR_END = LOG_HEADER_CREATOR + 32;$/;"	v
LOG_HEADER_FLAGS	include/log0log.h	/^constexpr uint32_t LOG_HEADER_FLAGS = LOG_HEADER_CREATOR_END;$/;"	v
LOG_HEADER_FLAG_CRASH_UNSAFE	include/log0log.h	/^constexpr uint32_t LOG_HEADER_FLAG_CRASH_UNSAFE = 2;$/;"	v
LOG_HEADER_FLAG_MAX	include/log0log.h	/^constexpr uint32_t LOG_HEADER_FLAG_MAX = LOG_HEADER_FLAG_CRASH_UNSAFE;$/;"	v
LOG_HEADER_FLAG_NO_LOGGING	include/log0log.h	/^constexpr uint32_t LOG_HEADER_FLAG_NO_LOGGING = 1;$/;"	v
LOG_HEADER_FORMAT	include/log0log.h	/^constexpr uint32_t LOG_HEADER_FORMAT = 0;$/;"	v
LOG_HEADER_FORMAT_5_7_9	include/log0types.h	/^  LOG_HEADER_FORMAT_5_7_9 = 1,$/;"	e	enum:log_header_format_t
LOG_HEADER_FORMAT_8_0_1	include/log0types.h	/^  LOG_HEADER_FORMAT_8_0_1 = 2,$/;"	e	enum:log_header_format_t
LOG_HEADER_FORMAT_8_0_19	include/log0types.h	/^  LOG_HEADER_FORMAT_8_0_19 = 4,$/;"	e	enum:log_header_format_t
LOG_HEADER_FORMAT_8_0_3	include/log0types.h	/^  LOG_HEADER_FORMAT_8_0_3 = 3,$/;"	e	enum:log_header_format_t
LOG_HEADER_FORMAT_CURRENT	include/log0types.h	/^  LOG_HEADER_FORMAT_CURRENT = LOG_HEADER_FORMAT_8_0_19$/;"	e	enum:log_header_format_t
LOG_HEADER_PAD1	include/log0log.h	/^constexpr uint32_t LOG_HEADER_PAD1 = 4;$/;"	v
LOG_HEADER_SET_FLAG	include/log0log.h	/^inline void LOG_HEADER_SET_FLAG(uint32_t &flag, uint32_t bit) {$/;"	f
LOG_HEADER_SIZE	include/log0log.h	/^constexpr uint32_t LOG_HEADER_SIZE = LOG_HEADER_FLAGS + 4;$/;"	v
LOG_HEADER_START_LSN	include/log0log.h	/^constexpr uint32_t LOG_HEADER_START_LSN = 8;$/;"	v
LOG_INDEX	include/ut0stage.h	/^    LOG_INDEX = 5,$/;"	e	enum:ut_stage_alter_t::__anon13
LOG_NO_CHECKSUM_MAGIC	include/log0log.h	/^constexpr uint32_t LOG_NO_CHECKSUM_MAGIC = 0xDEADBEEFUL;$/;"	v
LOG_POOL_CHECKPOINT_RATIO_ASYNC	include/log0log.h	/^constexpr uint32_t LOG_POOL_CHECKPOINT_RATIO_ASYNC = 32;$/;"	v
LOG_POOL_PREFLUSH_RATIO_ASYNC	include/log0log.h	/^constexpr uint32_t LOG_POOL_PREFLUSH_RATIO_ASYNC = 8;$/;"	v
LOG_POOL_PREFLUSH_RATIO_SYNC	include/log0log.h	/^constexpr uint32_t LOG_POOL_PREFLUSH_RATIO_SYNC = 16;$/;"	v
LOG_START_LSN	include/log0log.h	/^constexpr lsn_t LOG_START_LSN = 16 * OS_FILE_LOG_BLOCK_SIZE;$/;"	v
LOG_SYNC_POINT	include/log0log.h	1253;"	d
LOG_TABLE	include/ut0stage.h	/^    LOG_TABLE = 6,$/;"	e	enum:ut_stage_alter_t::__anon13
LRU	include/buf0buf.h	/^  UT_LIST_BASE_NODE_T(buf_page_t) LRU;$/;"	m	struct:Cache_hint::buf_pool_t
LRU	include/buf0buf.h	/^  UT_LIST_NODE_T(buf_page_t) LRU;$/;"	m	class:Cache_hint::buf_page_t
LRU	include/fil0fil.h	/^  List_node LRU;$/;"	m	struct:fil_node_t
LRUHp	include/buf0buf.h	/^  LRUHp(const buf_pool_t *buf_pool, const ib_mutex_t *mutex)$/;"	f	class:Cache_hint::LRUHp
LRUHp	include/buf0buf.h	/^class LRUHp : public HazardPointer {$/;"	c	class:Cache_hint
LRUItr	include/buf0buf.h	/^  LRUItr(const buf_pool_t *buf_pool, const ib_mutex_t *mutex)$/;"	f	class:Cache_hint::LRUItr
LRUItr	include/buf0buf.h	/^class LRUItr : public LRUHp {$/;"	c	class:Cache_hint
LRU_bytes	include/buf0buf.h	/^  uint64_t LRU_bytes;$/;"	m	struct:Cache_hint::buf_pool_stat_t
LRU_bytes	include/buf0buf.h	/^  ulint LRU_bytes;        \/*!< LRU size in bytes *\/$/;"	m	struct:Cache_hint::buf_pools_list_size_t
LRU_list_mutex	include/buf0buf.h	/^  BufListMutex LRU_list_mutex;$/;"	m	struct:Cache_hint::buf_pool_t
LRU_old	include/buf0buf.h	/^  buf_page_t *LRU_old;$/;"	m	struct:Cache_hint::buf_pool_t
LRU_old_len	include/buf0buf.h	/^  ulint LRU_old_len;$/;"	m	struct:Cache_hint::buf_pool_t
LRU_old_ratio	include/buf0buf.h	/^  ulint LRU_old_ratio;$/;"	m	struct:Cache_hint::buf_pool_t
LSN_MAX	include/log0log.h	/^constexpr lsn_t LSN_MAX = (1ULL << 63) - 1;$/;"	v
LSN_PF	include/log0types.h	63;"	d
LZ4	os/file.h	/^    LZ4 = 2$/;"	m	struct:Compression	typeref:enum:Compression::
LatchCounter	include/sync0types.h	/^class LatchCounter {$/;"	c
LatchDebug	sync/sync0debug.cc	/^LatchDebug::LatchDebug() {$/;"	f	class:LatchDebug
LatchDebug	sync/sync0debug.cc	/^struct LatchDebug {$/;"	s	file:
LatchMeta	include/sync0types.h	/^  LatchMeta()$/;"	f	class:LatchMeta
LatchMeta	include/sync0types.h	/^  LatchMeta(latch_id_t id, const char *name, latch_level_t level,$/;"	f	class:LatchMeta
LatchMeta	include/sync0types.h	/^class LatchMeta {$/;"	c
LatchMetaData	include/sync0types.h	/^typedef std::vector<latch_meta_t *, ut_allocator<latch_meta_t *>> LatchMetaData;$/;"	t
Latched	sync/sync0debug.cc	/^  Latched() : m_latch(), m_level(SYNC_UNKNOWN) {}$/;"	f	struct:Latched
Latched	sync/sync0debug.cc	/^  Latched(const latch_t *latch, latch_level_t level)$/;"	f	struct:Latched
Latched	sync/sync0debug.cc	/^struct Latched {$/;"	s	file:
Latches	include/lock0latches.h	/^class Latches {$/;"	c	namespace:locksys
Latches	sync/sync0debug.cc	/^typedef std::vector<Latched, ut_allocator<Latched>> Latches;$/;"	t	file:
Latching_rules_helpers	buf/buf0buf.cc	/^class buf_page_t::Latching_rules_helpers {$/;"	c	class:buf_page_t	file:
Less_Clone_Page	include/clone0snapshot.h	/^struct Less_Clone_Page {$/;"	s
Levels	sync/sync0debug.cc	/^      Levels;$/;"	t	struct:LatchDebug	file:
Link_buf	include/ut0link_buf.h	/^Link_buf<Position>::Link_buf() : Link_buf(0) {}$/;"	f	class:Link_buf
Link_buf	include/ut0link_buf.h	/^Link_buf<Position>::Link_buf(Link_buf &&rhs)$/;"	f	class:Link_buf
Link_buf	include/ut0link_buf.h	/^Link_buf<Position>::Link_buf(size_t capacity)$/;"	f	class:Link_buf
Link_buf	include/ut0link_buf.h	/^class Link_buf {$/;"	c
LinuxAIOHandler	os/os0file.cc	/^  LinuxAIOHandler(ulint global_segment) : m_global_segment(global_segment) {$/;"	f	class:LinuxAIOHandler
LinuxAIOHandler	os/os0file.cc	/^class LinuxAIOHandler {$/;"	c	file:
Lob_diff	include/row0upd.h	/^  Lob_diff(mem_heap_t *mem_heap) : heap(mem_heap) {$/;"	f	struct:Lob_diff
Lob_diff	include/row0upd.h	/^struct Lob_diff {$/;"	s
Location	include/ut0ut.h	/^struct Location {$/;"	s	namespace:ut
Lock_iter	include/lock0priv.h	/^struct Lock_iter {$/;"	s
Lock_mutex	include/lock0lock.h	/^typedef ib_mutex_t Lock_mutex;$/;"	t
Log_Arch_Client_Ctx	include/arch0log.h	/^  Log_Arch_Client_Ctx()$/;"	f	class:Log_Arch_Client_Ctx
Log_Arch_Client_Ctx	include/arch0log.h	/^class Log_Arch_Client_Ctx {$/;"	c
Log_DDL	include/log0ddl.h	/^class Log_DDL {$/;"	c	class:Log_Type
Log_DDL	log/log0ddl.cc	/^Log_DDL::Log_DDL() {$/;"	f	class:Log_DDL
Log_Type	include/log0ddl.h	/^enum class Log_Type : uint32_t {$/;"	c
Log_files_write_impl	log/log0write.cc	/^namespace Log_files_write_impl {$/;"	n	file:
Log_handle	include/log0types.h	/^struct Log_handle {$/;"	s
Log_test	include/log0test.h	/^class Log_test {$/;"	c
Log_thread_waiting	log/log0write.cc	/^  Log_thread_waiting(const log_t &log, os_event_t event, uint64_t spin_delay,$/;"	f	struct:Log_thread_waiting
Log_thread_waiting	log/log0write.cc	/^struct Log_thread_waiting {$/;"	s	file:
Log_write_to_file_requests_monitor	log/log0write.cc	/^  explicit Log_write_to_file_requests_monitor(log_t &log)$/;"	f	struct:Log_write_to_file_requests_monitor
Log_write_to_file_requests_monitor	log/log0write.cc	/^struct Log_write_to_file_requests_monitor {$/;"	s	file:
Logging	include/mtr0mtr.h	/^  class Logging {$/;"	c	struct:mtr_t
Loop	include/detail/ut0new.h	/^struct Loop {$/;"	s	namespace:ut::detail
Loop	include/detail/ut0new.h	/^struct Loop<Count, Count, T, Offset, N_args_per_T, Tuple_idx, Tuple> {$/;"	s	namespace:ut::detail
MAGIC_N	include/sync0rw.h	/^  static const uint32_t MAGIC_N = 22643;$/;"	m	struct:rw_lock_t
MAGIC_SIZE	include/os0enc.h	/^  static constexpr size_t MAGIC_SIZE = 3;$/;"	m	class:Encryption
MAKE_YOUNG	include/buf0buf.h	/^  MAKE_YOUNG = 51,$/;"	m	class:Cache_hint
MASTER_KEY_NAME_MAX_LEN	include/os0enc.h	/^  static constexpr size_t MASTER_KEY_NAME_MAX_LEN = 100;$/;"	m	class:Encryption
MASTER_KEY_PREFIX	include/os0enc.h	/^  static constexpr char MASTER_KEY_PREFIX[] = "INNODBKey";$/;"	m	class:Encryption
MASTER_KEY_PREFIX	os/os0enc.cc	/^constexpr char Encryption::MASTER_KEY_PREFIX[];$/;"	m	class:Encryption	file:
MASTER_KEY_PRIFIX_LEN	include/os0enc.h	/^  static constexpr size_t MASTER_KEY_PRIFIX_LEN = 9;$/;"	m	class:Encryption
MATCHES	include/fil0fil.h	/^  MATCHES,$/;"	m	class:Fil_state
MAXBQUALSIZE	include/trx0xa.h	47;"	d
MAXGTRIDSIZE	include/trx0xa.h	46;"	d
MAX_ALLOWED_FOR_ALLOC	trx/trx0i_s.cc	144;"	d	file:
MAX_ALLOWED_FOR_STORAGE	trx/trx0i_s.cc	139;"	d	file:
MAX_ARCH_DIR_NAME_LEN	include/arch0arch.h	/^const uint MAX_ARCH_DIR_NAME_LEN =$/;"	v
MAX_ARCH_LOG_FILE_NAME_LEN	include/arch0arch.h	/^const uint MAX_ARCH_LOG_FILE_NAME_LEN =$/;"	v
MAX_ARCH_PAGE_FILE_NAME_LEN	include/arch0arch.h	/^const uint MAX_ARCH_PAGE_FILE_NAME_LEN =$/;"	v
MAX_BLOCKS	os/os0file.cc	/^static const size_t MAX_BLOCKS = 128;$/;"	v	file:
MAX_BUFFER_POOLS	include/buf0buf.h	/^constexpr ulint MAX_BUFFER_POOLS = (1 << MAX_BUFFER_POOLS_BITS);$/;"	m	class:Cache_hint
MAX_BUFFER_POOLS_BITS	include/buf0buf.h	/^constexpr ulint MAX_BUFFER_POOLS_BITS = 6;$/;"	m	class:Cache_hint
MAX_CHAR_COLL_NUM	include/data0type.h	283;"	d
MAX_CLONES	include/clone0clone.h	/^const int MAX_CLONES = 1;$/;"	v
MAX_CLONES_PER_SNAPSHOT	clone/clone0snapshot.cc	/^const uint MAX_CLONES_PER_SNAPSHOT = 1;$/;"	v
MAX_DATA_SIZE	include/dyn0buf.h	/^    static constexpr auto MAX_DATA_SIZE = SIZE;$/;"	m	class:dyn_buf_t::block_t
MAX_DATA_SIZE	include/dyn0buf.h	/^  static constexpr auto MAX_DATA_SIZE = block_t::MAX_DATA_SIZE;$/;"	m	class:dyn_buf_t
MAX_DB_CHAR_LEN	include/dict0types.h	/^constexpr size_t MAX_DB_CHAR_LEN = NAME_CHAR_LEN;$/;"	m	namespace:dict_name
MAX_DB_UTF8_LEN	include/dict0types.h	/^constexpr size_t MAX_DB_UTF8_LEN = NAME_LEN + 1;$/;"	m	namespace:dict_name
MAX_DETAILED_ERROR_LEN	trx/trx0trx.cc	/^static const ulint MAX_DETAILED_ERROR_LEN = 256;$/;"	v	file:
MAX_DOC_ID_OPT_VAL	include/fts0fts.h	73;"	d
MAX_KEY_LENGTH_BITS	include/dict0mem.h	899;"	d
MAX_LOG_FILE_NAME	include/log0log.h	/^constexpr uint32_t MAX_LOG_FILE_NAME = 32;$/;"	v
MAX_LSN_DECIMAL_DIGIT	include/arch0arch.h	/^const uint MAX_LSN_DECIMAL_DIGIT = 32;$/;"	v
MAX_MUTEX_NOWAIT	srv/srv0srv.cc	373;"	d	file:
MAX_NUM_FK_COLUMNS	include/dict0dict.h	1021;"	d
MAX_N_POINTERS	ha/ha0ha.cc	/^static const ulint MAX_N_POINTERS = UNIV_PAGE_SIZE_MAX \/ REC_N_NEW_EXTRA_BYTES;$/;"	v	file:
MAX_PAGES_TO_READ	fil/fil0fil.cc	/^static const size_t MAX_PAGES_TO_READ = 1;$/;"	v	file:
MAX_PAGE_HASH_LOCKS	include/buf0buf.h	/^constexpr ulint MAX_PAGE_HASH_LOCKS = 1024;$/;"	m	class:Cache_hint
MAX_PARTIAL_UPDATE_LIMIT	include/lob0util.h	/^const uint32_t MAX_PARTIAL_UPDATE_LIMIT = 1000;$/;"	m	namespace:lob
MAX_PROXIMITY_ITEM	fts/fts0que.cc	59;"	d	file:
MAX_PURGE_THREADS	include/srv0srv.h	634;"	d
MAX_RESERVED	include/srv0mon.h	113;"	d
MAX_SAVED_MLOG_RECS	include/log0recv.h	/^  static constexpr size_t MAX_SAVED_MLOG_RECS = 8 * 1024;$/;"	m	struct:recv_sys_t
MAX_SECTOR_SIZE	os/os0file.cc	/^static const ulint MAX_SECTOR_SIZE = 4096;$/;"	v	file:
MAX_SHARDS	fil/fil0fil.cc	/^static const size_t MAX_SHARDS = 1;$/;"	v	file:
MAX_SHARDS	fil/fil0fil.cc	/^static const size_t MAX_SHARDS = 69;$/;"	v	file:
MAX_SIZE	include/lob0lob.h	/^const ulint MAX_SIZE = UINT32_MAX;$/;"	m	namespace:lob
MAX_SNAPSHOTS	include/clone0clone.h	/^const int MAX_SNAPSHOTS = 1;$/;"	v
MAX_SPACE_NAME_LEN	include/dict0types.h	/^constexpr size_t MAX_SPACE_NAME_LEN =$/;"	m	namespace:dict_name
MAX_SRCH_KEY_VAL_BUFFER	row/row0mysql.cc	800;"	d	file:
MAX_STACK_SIZE	include/lock0priv.h	/^static const ulint MAX_STACK_SIZE = 4096;$/;"	v
MAX_TABLE_CHAR_LEN	include/dict0types.h	/^constexpr size_t MAX_TABLE_CHAR_LEN = NAME_CHAR_LEN + PART_SEPARATOR_LEN +$/;"	m	namespace:dict_name
MAX_TABLE_UTF8_LEN	include/dict0types.h	/^constexpr size_t MAX_TABLE_UTF8_LEN = NAME_LEN + PART_SEPARATOR_LEN + NAME_LEN +$/;"	m	namespace:dict_name
MAX_TRX_BLOCK_SIZE	trx/trx0trx.cc	/^static const ulint MAX_TRX_BLOCK_SIZE = 1024 * 1024 * 4;$/;"	v	file:
MAX_WAIT_FOR_EVENTS	buf/buf0dblwr.cc	/^  static constexpr auto MAX_WAIT_FOR_EVENTS = 10000000;$/;"	m	class:Double_write	file:
MB	handler/ha_innodb.cc	/^static const uint64_t MB = KB * 1024;$/;"	v	file:
MEB_file_name	fil/fil0fil.cc	/^  MEB_file_name(std::string name, bool deleted)$/;"	f	struct:MEB_file_name
MEB_file_name	fil/fil0fil.cc	/^struct MEB_file_name {$/;"	s	file:
MEM_BLOCK_HEADER_SIZE	include/mem0mem.h	390;"	d
MEM_BLOCK_MAGIC_N	include/mem0mem.h	386;"	d
MEM_BLOCK_STANDARD_SIZE	include/mem0mem.h	82;"	d
MEM_BLOCK_START_SIZE	include/mem0mem.h	81;"	d
MEM_CHUNKS_IN_TABLE_CACHE	trx/trx0i_s.cc	93;"	d	file:
MEM_FREED_BLOCK_MAGIC_N	include/mem0mem.h	387;"	d
MEM_HEAP_BTR_SEARCH	include/mem0mem.h	61;"	d
MEM_HEAP_BUFFER	include/mem0mem.h	60;"	d
MEM_HEAP_DYNAMIC	include/mem0mem.h	59;"	d
MEM_HEAP_FOR_BTR_SEARCH	include/mem0mem.h	71;"	d
MEM_HEAP_FOR_LOCK_HEAP	include/mem0mem.h	74;"	d
MEM_HEAP_FOR_PAGE_HASH	include/mem0mem.h	72;"	d
MEM_HEAP_FOR_RECV_SYS	include/mem0mem.h	73;"	d
MEM_MAX_ALLOC_IN_BUF	include/mem0mem.h	91;"	d
MEM_NO_MANS_LAND	include/mem0mem.h	/^const int MEM_NO_MANS_LAND = 0;$/;"	v
MEM_NO_MANS_LAND	include/mem0mem.h	/^const int MEM_NO_MANS_LAND = 16;$/;"	v
MEM_NO_MANS_LAND_AFTER_BYTE	include/mem0mem.h	/^const byte MEM_NO_MANS_LAND_AFTER_BYTE = 0xDF;$/;"	v
MEM_NO_MANS_LAND_BEFORE_BYTE	include/mem0mem.h	/^const byte MEM_NO_MANS_LAND_BEFORE_BYTE = 0xCE;$/;"	v
MEM_SPACE_NEEDED	include/mem0mem.h	114;"	d
METADATA_BUFFERED	include/dict0mem.h	/^  METADATA_BUFFERED,$/;"	e	enum:table_dirty_status
METADATA_CLEAN	include/dict0mem.h	/^  METADATA_CLEAN$/;"	e	enum:table_dirty_status
METADATA_COL_NO	include/dict0dict.h	/^  static constexpr unsigned METADATA_COL_NO = 2;$/;"	m	class:DDTableBuffer
METADATA_DIRTY	include/dict0mem.h	/^  METADATA_DIRTY = 0,$/;"	e	enum:table_dirty_status
METADATA_FIELD_NO	include/dict0dict.h	/^  static constexpr unsigned METADATA_FIELD_NO = METADATA_COL_NO + 2;$/;"	m	class:DDTableBuffer
MF	fil/fil0fil.cc	9722;"	d	file:
MICROSECS_IN_A_SECOND	os/os0event.cc	/^static const uint64_t MICROSECS_IN_A_SECOND = 1000000;$/;"	v	file:
MIN_ENCRYPTION_LEN	os/os0enc.cc	/^constexpr size_t MIN_ENCRYPTION_LEN = 2 * MY_AES_BLOCK_SIZE + FIL_PAGE_DATA;$/;"	v
MIN_EXPECTED_TABLESPACE_SIZE	handler/ha_innodb.cc	/^static const ulint MIN_EXPECTED_TABLESPACE_SIZE = 5 * 1024 * 1024;$/;"	v	file:
MIN_RECALC_INTERVAL	dict/dict0stats_bg.cc	50;"	d	file:
MIN_RESERVED	include/srv0mon.h	112;"	d
MIN_TRX_IDS	read/read0read.cc	/^static const ulint MIN_TRX_IDS = 32;$/;"	v	file:
MISSING	include/fil0fil.h	/^  MISSING,$/;"	m	class:Fil_state
MLOG_1BYTE	include/mtr0types.h	/^  MLOG_1BYTE = 1,$/;"	e	enum:mlog_id_t
MLOG_2BYTES	include/mtr0types.h	/^  MLOG_2BYTES = 2,$/;"	e	enum:mlog_id_t
MLOG_4BYTES	include/mtr0types.h	/^  MLOG_4BYTES = 4,$/;"	e	enum:mlog_id_t
MLOG_8BYTES	include/mtr0types.h	/^  MLOG_8BYTES = 8,$/;"	e	enum:mlog_id_t
MLOG_BIGGEST_TYPE	include/mtr0types.h	/^  MLOG_BIGGEST_TYPE = MLOG_TEST$/;"	e	enum:mlog_id_t
MLOG_BUF_MARGIN	include/mtr0log.h	242;"	d
MLOG_COMP_LIST_END_COPY_CREATED	include/mtr0types.h	/^  MLOG_COMP_LIST_END_COPY_CREATED = 45,$/;"	e	enum:mlog_id_t
MLOG_COMP_LIST_END_DELETE	include/mtr0types.h	/^  MLOG_COMP_LIST_END_DELETE = 43,$/;"	e	enum:mlog_id_t
MLOG_COMP_LIST_START_DELETE	include/mtr0types.h	/^  MLOG_COMP_LIST_START_DELETE = 44,$/;"	e	enum:mlog_id_t
MLOG_COMP_PAGE_CREATE	include/mtr0types.h	/^  MLOG_COMP_PAGE_CREATE = 37,$/;"	e	enum:mlog_id_t
MLOG_COMP_PAGE_CREATE_RTREE	include/mtr0types.h	/^  MLOG_COMP_PAGE_CREATE_RTREE = 58,$/;"	e	enum:mlog_id_t
MLOG_COMP_PAGE_CREATE_SDI	include/mtr0types.h	/^  MLOG_COMP_PAGE_CREATE_SDI = 64,$/;"	e	enum:mlog_id_t
MLOG_COMP_PAGE_REORGANIZE	include/mtr0types.h	/^  MLOG_COMP_PAGE_REORGANIZE = 46,$/;"	e	enum:mlog_id_t
MLOG_COMP_REC_CLUST_DELETE_MARK	include/mtr0types.h	/^  MLOG_COMP_REC_CLUST_DELETE_MARK = 39,$/;"	e	enum:mlog_id_t
MLOG_COMP_REC_DELETE	include/mtr0types.h	/^  MLOG_COMP_REC_DELETE = 42,$/;"	e	enum:mlog_id_t
MLOG_COMP_REC_INSERT	include/mtr0types.h	/^  MLOG_COMP_REC_INSERT = 38,$/;"	e	enum:mlog_id_t
MLOG_COMP_REC_MIN_MARK	include/mtr0types.h	/^  MLOG_COMP_REC_MIN_MARK = 36,$/;"	e	enum:mlog_id_t
MLOG_COMP_REC_SEC_DELETE_MARK	include/mtr0types.h	/^  MLOG_COMP_REC_SEC_DELETE_MARK = 40,$/;"	e	enum:mlog_id_t
MLOG_COMP_REC_UPDATE_IN_PLACE	include/mtr0types.h	/^  MLOG_COMP_REC_UPDATE_IN_PLACE = 41,$/;"	e	enum:mlog_id_t
MLOG_DUMMY_RECORD	include/mtr0types.h	/^  MLOG_DUMMY_RECORD = 32,$/;"	e	enum:mlog_id_t
MLOG_FILE_CREATE	include/mtr0types.h	/^  MLOG_FILE_CREATE = 33,$/;"	e	enum:mlog_id_t
MLOG_FILE_DELETE	include/mtr0types.h	/^  MLOG_FILE_DELETE = 35,$/;"	e	enum:mlog_id_t
MLOG_FILE_EXTEND	include/mtr0types.h	/^  MLOG_FILE_EXTEND = 65,$/;"	e	enum:mlog_id_t
MLOG_FILE_RENAME	include/mtr0types.h	/^  MLOG_FILE_RENAME = 34,$/;"	e	enum:mlog_id_t
MLOG_IBUF_BITMAP_INIT	include/mtr0types.h	/^  MLOG_IBUF_BITMAP_INIT = 27,$/;"	e	enum:mlog_id_t
MLOG_INDEX_LOAD	include/mtr0types.h	/^  MLOG_INDEX_LOAD = 61,$/;"	e	enum:mlog_id_t
MLOG_INIT_FILE_PAGE	include/mtr0types.h	/^  MLOG_INIT_FILE_PAGE = 29,$/;"	e	enum:mlog_id_t
MLOG_INIT_FILE_PAGE2	include/mtr0types.h	/^  MLOG_INIT_FILE_PAGE2 = 59,$/;"	e	enum:mlog_id_t
MLOG_LIST_END_COPY_CREATED	include/mtr0types.h	/^  MLOG_LIST_END_COPY_CREATED = 17,$/;"	e	enum:mlog_id_t
MLOG_LIST_END_DELETE	include/mtr0types.h	/^  MLOG_LIST_END_DELETE = 15,$/;"	e	enum:mlog_id_t
MLOG_LIST_START_DELETE	include/mtr0types.h	/^  MLOG_LIST_START_DELETE = 16,$/;"	e	enum:mlog_id_t
MLOG_LSN	include/mtr0types.h	/^  MLOG_LSN = 28,$/;"	e	enum:mlog_id_t
MLOG_MULTI_REC_END	include/mtr0types.h	/^  MLOG_MULTI_REC_END = 31,$/;"	e	enum:mlog_id_t
MLOG_PAGE_CREATE	include/mtr0types.h	/^  MLOG_PAGE_CREATE = 19,$/;"	e	enum:mlog_id_t
MLOG_PAGE_CREATE_RTREE	include/mtr0types.h	/^  MLOG_PAGE_CREATE_RTREE = 57,$/;"	e	enum:mlog_id_t
MLOG_PAGE_CREATE_SDI	include/mtr0types.h	/^  MLOG_PAGE_CREATE_SDI = 63,$/;"	e	enum:mlog_id_t
MLOG_PAGE_REORGANIZE	include/mtr0types.h	/^  MLOG_PAGE_REORGANIZE = 18,$/;"	e	enum:mlog_id_t
MLOG_REC_CLUST_DELETE_MARK	include/mtr0types.h	/^  MLOG_REC_CLUST_DELETE_MARK = 10,$/;"	e	enum:mlog_id_t
MLOG_REC_DELETE	include/mtr0types.h	/^  MLOG_REC_DELETE = 14,$/;"	e	enum:mlog_id_t
MLOG_REC_INSERT	include/mtr0types.h	/^  MLOG_REC_INSERT = 9,$/;"	e	enum:mlog_id_t
MLOG_REC_MIN_MARK	include/mtr0types.h	/^  MLOG_REC_MIN_MARK = 26,$/;"	e	enum:mlog_id_t
MLOG_REC_SEC_DELETE_MARK	include/mtr0types.h	/^  MLOG_REC_SEC_DELETE_MARK = 11,$/;"	e	enum:mlog_id_t
MLOG_REC_UPDATE_IN_PLACE	include/mtr0types.h	/^  MLOG_REC_UPDATE_IN_PLACE = 13,$/;"	e	enum:mlog_id_t
MLOG_SINGLE_REC_FLAG	include/mtr0types.h	/^  MLOG_SINGLE_REC_FLAG = 128,$/;"	e	enum:mlog_id_t
MLOG_TABLE_DYNAMIC_META	include/mtr0types.h	/^  MLOG_TABLE_DYNAMIC_META = 62,$/;"	e	enum:mlog_id_t
MLOG_TEST	include/mtr0types.h	/^  MLOG_TEST = 66,$/;"	e	enum:mlog_id_t
MLOG_TEST_GROUP_MAX_REC_N	include/log0log.h	/^constexpr uint32_t MLOG_TEST_GROUP_MAX_REC_N = 100;$/;"	v
MLOG_TEST_MAX_REC_LEN	include/log0log.h	/^constexpr uint32_t MLOG_TEST_MAX_REC_LEN = 100;$/;"	v
MLOG_TEST_PAGE_SPACE_ID	log/log0test.cc	/^static constexpr size_t MLOG_TEST_PAGE_SPACE_ID = 1;$/;"	v	file:
MLOG_TEST_PAYLOAD_MAX_LEN	log/log0test.cc	/^static constexpr size_t MLOG_TEST_PAYLOAD_MAX_LEN = 50;$/;"	v	file:
MLOG_TEST_REC_OVERHEAD	include/log0log.h	/^constexpr uint32_t MLOG_TEST_REC_OVERHEAD = 37;$/;"	v
MLOG_TEST_VALUE	include/log0log.h	/^constexpr int64_t MLOG_TEST_VALUE = 10000;$/;"	v
MLOG_UNDO_ERASE_END	include/mtr0types.h	/^  MLOG_UNDO_ERASE_END = 21,$/;"	e	enum:mlog_id_t
MLOG_UNDO_HDR_CREATE	include/mtr0types.h	/^  MLOG_UNDO_HDR_CREATE = 25,$/;"	e	enum:mlog_id_t
MLOG_UNDO_HDR_REUSE	include/mtr0types.h	/^  MLOG_UNDO_HDR_REUSE = 24,$/;"	e	enum:mlog_id_t
MLOG_UNDO_INIT	include/mtr0types.h	/^  MLOG_UNDO_INIT = 22,$/;"	e	enum:mlog_id_t
MLOG_UNDO_INSERT	include/mtr0types.h	/^  MLOG_UNDO_INSERT = 20,$/;"	e	enum:mlog_id_t
MLOG_WRITE_STRING	include/mtr0types.h	/^  MLOG_WRITE_STRING = 30,$/;"	e	enum:mlog_id_t
MLOG_ZIP_PAGE_COMPRESS	include/mtr0types.h	/^  MLOG_ZIP_PAGE_COMPRESS = 51,$/;"	e	enum:mlog_id_t
MLOG_ZIP_PAGE_COMPRESS_NO_DATA	include/mtr0types.h	/^  MLOG_ZIP_PAGE_COMPRESS_NO_DATA = 52,$/;"	e	enum:mlog_id_t
MLOG_ZIP_PAGE_REORGANIZE	include/mtr0types.h	/^  MLOG_ZIP_PAGE_REORGANIZE = 53,$/;"	e	enum:mlog_id_t
MLOG_ZIP_WRITE_BLOB_PTR	include/mtr0types.h	/^  MLOG_ZIP_WRITE_BLOB_PTR = 49,$/;"	e	enum:mlog_id_t
MLOG_ZIP_WRITE_HEADER	include/mtr0types.h	/^  MLOG_ZIP_WRITE_HEADER = 50,$/;"	e	enum:mlog_id_t
MLOG_ZIP_WRITE_NODE_PTR	include/mtr0types.h	/^  MLOG_ZIP_WRITE_NODE_PTR = 48,$/;"	e	enum:mlog_id_t
MODIFICATIONS_NOT_ALLOWED_MSG_FORCE_RECOVERY	row/row0mysql.cc	/^static const char *MODIFICATIONS_NOT_ALLOWED_MSG_FORCE_RECOVERY =$/;"	v	file:
MONITOR_ADAPTIVE_HASH_PAGE_ADDED	include/srv0mon.h	/^  MONITOR_ADAPTIVE_HASH_PAGE_ADDED,$/;"	e	enum:monitor_id_t
MONITOR_ADAPTIVE_HASH_PAGE_REMOVED	include/srv0mon.h	/^  MONITOR_ADAPTIVE_HASH_PAGE_REMOVED,$/;"	e	enum:monitor_id_t
MONITOR_ADAPTIVE_HASH_ROW_ADDED	include/srv0mon.h	/^  MONITOR_ADAPTIVE_HASH_ROW_ADDED,$/;"	e	enum:monitor_id_t
MONITOR_ADAPTIVE_HASH_ROW_REMOVED	include/srv0mon.h	/^  MONITOR_ADAPTIVE_HASH_ROW_REMOVED,$/;"	e	enum:monitor_id_t
MONITOR_ADAPTIVE_HASH_ROW_REMOVE_NOT_FOUND	include/srv0mon.h	/^  MONITOR_ADAPTIVE_HASH_ROW_REMOVE_NOT_FOUND,$/;"	e	enum:monitor_id_t
MONITOR_ADAPTIVE_HASH_ROW_UPDATED	include/srv0mon.h	/^  MONITOR_ADAPTIVE_HASH_ROW_UPDATED,$/;"	e	enum:monitor_id_t
MONITOR_ALL_COUNTER	include/srv0mon.h	/^  MONITOR_ALL_COUNTER,$/;"	e	enum:monitor_id_t
MONITOR_ALTER_TABLE_LOG_FILES	include/srv0mon.h	/^  MONITOR_ALTER_TABLE_LOG_FILES,$/;"	e	enum:monitor_id_t
MONITOR_ALTER_TABLE_SORT_FILES	include/srv0mon.h	/^  MONITOR_ALTER_TABLE_SORT_FILES,$/;"	e	enum:monitor_id_t
MONITOR_ATOMIC_DEC	include/srv0mon.h	689;"	d
MONITOR_ATOMIC_INC	include/srv0mon.h	684;"	d
MONITOR_BACKGROUND_DROP_TABLE	include/srv0mon.h	/^  MONITOR_BACKGROUND_DROP_TABLE,$/;"	e	enum:monitor_id_t
MONITOR_BLOB_PAGE_READ	include/srv0mon.h	/^  MONITOR_BLOB_PAGE_READ,$/;"	e	enum:monitor_id_t
MONITOR_BLOB_PAGE_WRITTEN	include/srv0mon.h	/^  MONITOR_BLOB_PAGE_WRITTEN,$/;"	e	enum:monitor_id_t
MONITOR_BUF_PAGE	srv/srv0mon.cc	51;"	d	file:
MONITOR_BUF_PAGE_READ	srv/srv0mon.cc	58;"	d	file:
MONITOR_BUF_PAGE_WRITTEN	srv/srv0mon.cc	61;"	d	file:
MONITOR_BUF_PAGE_WRITTEN_WAIT_STATS	srv/srv0mon.cc	83;"	d	file:
MONITOR_BUF_PAGE_WRITTEN_WAIT_STATS_WRAP	srv/srv0mon.cc	79;"	d	file:
MONITOR_CHECK_DEFINED	include/srv0mon.h	658;"	d
MONITOR_CHECK_DEFINED	include/srv0mon.h	664;"	d
MONITOR_CPU_N	include/srv0mon.h	/^  MONITOR_CPU_N,$/;"	e	enum:monitor_id_t
MONITOR_CPU_STIME_ABS	include/srv0mon.h	/^  MONITOR_CPU_STIME_ABS,$/;"	e	enum:monitor_id_t
MONITOR_CPU_STIME_PCT	include/srv0mon.h	/^  MONITOR_CPU_STIME_PCT,$/;"	e	enum:monitor_id_t
MONITOR_CPU_UTIME_ABS	include/srv0mon.h	/^  MONITOR_CPU_UTIME_ABS,$/;"	e	enum:monitor_id_t
MONITOR_CPU_UTIME_PCT	include/srv0mon.h	/^  MONITOR_CPU_UTIME_PCT,$/;"	e	enum:monitor_id_t
MONITOR_DBLWR_ASYNC_REQUESTS	include/srv0mon.h	/^  MONITOR_DBLWR_ASYNC_REQUESTS,$/;"	e	enum:monitor_id_t
MONITOR_DBLWR_FLUSH_REQUESTS	include/srv0mon.h	/^  MONITOR_DBLWR_FLUSH_REQUESTS,$/;"	e	enum:monitor_id_t
MONITOR_DBLWR_FLUSH_WAIT_EVENTS	include/srv0mon.h	/^  MONITOR_DBLWR_FLUSH_WAIT_EVENTS,$/;"	e	enum:monitor_id_t
MONITOR_DBLWR_SYNC_REQUESTS	include/srv0mon.h	/^  MONITOR_DBLWR_SYNC_REQUESTS,$/;"	e	enum:monitor_id_t
MONITOR_DEADLOCK	include/srv0mon.h	/^  MONITOR_DEADLOCK,$/;"	e	enum:monitor_id_t
MONITOR_DEADLOCK_FALSE_POSITIVES	include/srv0mon.h	/^  MONITOR_DEADLOCK_FALSE_POSITIVES,$/;"	e	enum:monitor_id_t
MONITOR_DEADLOCK_ROUNDS	include/srv0mon.h	/^  MONITOR_DEADLOCK_ROUNDS,$/;"	e	enum:monitor_id_t
MONITOR_DEC	include/srv0mon.h	672;"	d
MONITOR_DEC	include/srv0mon.h	948;"	d
MONITOR_DEC_NOCHECK	include/srv0mon.h	679;"	d
MONITOR_DEC_VALUE	include/srv0mon.h	674;"	d
MONITOR_DEFAULT_ON	include/srv0mon.h	/^  MONITOR_DEFAULT_ON = 32,     \/*!< Monitor will be turned on by default at$/;"	e	enum:monitor_type_t
MONITOR_DEFAULT_START	include/srv0mon.h	/^  MONITOR_DEFAULT_START = 0,$/;"	e	enum:monitor_id_t
MONITOR_DISPLAY_CURRENT	include/srv0mon.h	/^  MONITOR_DISPLAY_CURRENT = 8, \/*!< Display current value of the$/;"	e	enum:monitor_type_t
MONITOR_DML_PURGE_DELAY	include/srv0mon.h	/^  MONITOR_DML_PURGE_DELAY,$/;"	e	enum:monitor_id_t
MONITOR_EXISTING	include/srv0mon.h	/^  MONITOR_EXISTING = 2,        \/*!< The monitor carries information from$/;"	e	enum:monitor_type_t
MONITOR_FIELD	include/srv0mon.h	603;"	d
MONITOR_FLUSH_ADAPTIVE_AVG_PASS	include/srv0mon.h	/^  MONITOR_FLUSH_ADAPTIVE_AVG_PASS,$/;"	e	enum:monitor_id_t
MONITOR_FLUSH_ADAPTIVE_AVG_TIME_EST	include/srv0mon.h	/^  MONITOR_FLUSH_ADAPTIVE_AVG_TIME_EST,$/;"	e	enum:monitor_id_t
MONITOR_FLUSH_ADAPTIVE_AVG_TIME_SLOT	include/srv0mon.h	/^  MONITOR_FLUSH_ADAPTIVE_AVG_TIME_SLOT,$/;"	e	enum:monitor_id_t
MONITOR_FLUSH_ADAPTIVE_AVG_TIME_THREAD	include/srv0mon.h	/^  MONITOR_FLUSH_ADAPTIVE_AVG_TIME_THREAD,$/;"	e	enum:monitor_id_t
MONITOR_FLUSH_ADAPTIVE_COUNT	include/srv0mon.h	/^  MONITOR_FLUSH_ADAPTIVE_COUNT,$/;"	e	enum:monitor_id_t
MONITOR_FLUSH_ADAPTIVE_PAGES	include/srv0mon.h	/^  MONITOR_FLUSH_ADAPTIVE_PAGES,$/;"	e	enum:monitor_id_t
MONITOR_FLUSH_ADAPTIVE_TOTAL_PAGE	include/srv0mon.h	/^  MONITOR_FLUSH_ADAPTIVE_TOTAL_PAGE,$/;"	e	enum:monitor_id_t
MONITOR_FLUSH_AVG_PAGE_RATE	include/srv0mon.h	/^  MONITOR_FLUSH_AVG_PAGE_RATE,$/;"	e	enum:monitor_id_t
MONITOR_FLUSH_AVG_PASS	include/srv0mon.h	/^  MONITOR_FLUSH_AVG_PASS,$/;"	e	enum:monitor_id_t
MONITOR_FLUSH_AVG_TIME	include/srv0mon.h	/^  MONITOR_FLUSH_AVG_TIME,$/;"	e	enum:monitor_id_t
MONITOR_FLUSH_BACKGROUND_COUNT	include/srv0mon.h	/^  MONITOR_FLUSH_BACKGROUND_COUNT,$/;"	e	enum:monitor_id_t
MONITOR_FLUSH_BACKGROUND_PAGES	include/srv0mon.h	/^  MONITOR_FLUSH_BACKGROUND_PAGES,$/;"	e	enum:monitor_id_t
MONITOR_FLUSH_BACKGROUND_TOTAL_PAGE	include/srv0mon.h	/^  MONITOR_FLUSH_BACKGROUND_TOTAL_PAGE,$/;"	e	enum:monitor_id_t
MONITOR_FLUSH_BATCH_COUNT	include/srv0mon.h	/^  MONITOR_FLUSH_BATCH_COUNT,$/;"	e	enum:monitor_id_t
MONITOR_FLUSH_BATCH_PAGES	include/srv0mon.h	/^  MONITOR_FLUSH_BATCH_PAGES,$/;"	e	enum:monitor_id_t
MONITOR_FLUSH_BATCH_SCANNED	include/srv0mon.h	/^  MONITOR_FLUSH_BATCH_SCANNED,$/;"	e	enum:monitor_id_t
MONITOR_FLUSH_BATCH_SCANNED_NUM_CALL	include/srv0mon.h	/^  MONITOR_FLUSH_BATCH_SCANNED_NUM_CALL,$/;"	e	enum:monitor_id_t
MONITOR_FLUSH_BATCH_SCANNED_PER_CALL	include/srv0mon.h	/^  MONITOR_FLUSH_BATCH_SCANNED_PER_CALL,$/;"	e	enum:monitor_id_t
MONITOR_FLUSH_BATCH_TOTAL_PAGE	include/srv0mon.h	/^  MONITOR_FLUSH_BATCH_TOTAL_PAGE,$/;"	e	enum:monitor_id_t
MONITOR_FLUSH_LSN_AVG_RATE	include/srv0mon.h	/^  MONITOR_FLUSH_LSN_AVG_RATE,$/;"	e	enum:monitor_id_t
MONITOR_FLUSH_NEIGHBOR_COUNT	include/srv0mon.h	/^  MONITOR_FLUSH_NEIGHBOR_COUNT,$/;"	e	enum:monitor_id_t
MONITOR_FLUSH_NEIGHBOR_PAGES	include/srv0mon.h	/^  MONITOR_FLUSH_NEIGHBOR_PAGES,$/;"	e	enum:monitor_id_t
MONITOR_FLUSH_NEIGHBOR_TOTAL_PAGE	include/srv0mon.h	/^  MONITOR_FLUSH_NEIGHBOR_TOTAL_PAGE,$/;"	e	enum:monitor_id_t
MONITOR_FLUSH_N_TO_FLUSH_BY_AGE	include/srv0mon.h	/^  MONITOR_FLUSH_N_TO_FLUSH_BY_AGE,$/;"	e	enum:monitor_id_t
MONITOR_FLUSH_N_TO_FLUSH_BY_DIRTY_PAGE	include/srv0mon.h	/^  MONITOR_FLUSH_N_TO_FLUSH_BY_DIRTY_PAGE,$/;"	e	enum:monitor_id_t
MONITOR_FLUSH_N_TO_FLUSH_REQUESTED	include/srv0mon.h	/^  MONITOR_FLUSH_N_TO_FLUSH_REQUESTED,$/;"	e	enum:monitor_id_t
MONITOR_FLUSH_PCT_FOR_DIRTY	include/srv0mon.h	/^  MONITOR_FLUSH_PCT_FOR_DIRTY,$/;"	e	enum:monitor_id_t
MONITOR_FLUSH_PCT_FOR_LSN	include/srv0mon.h	/^  MONITOR_FLUSH_PCT_FOR_LSN,$/;"	e	enum:monitor_id_t
MONITOR_FLUSH_SYNC_COUNT	include/srv0mon.h	/^  MONITOR_FLUSH_SYNC_COUNT,$/;"	e	enum:monitor_id_t
MONITOR_FLUSH_SYNC_PAGES	include/srv0mon.h	/^  MONITOR_FLUSH_SYNC_PAGES,$/;"	e	enum:monitor_id_t
MONITOR_FLUSH_SYNC_TOTAL_PAGE	include/srv0mon.h	/^  MONITOR_FLUSH_SYNC_TOTAL_PAGE,$/;"	e	enum:monitor_id_t
MONITOR_FLUSH_SYNC_WAITS	include/srv0mon.h	/^  MONITOR_FLUSH_SYNC_WAITS,$/;"	e	enum:monitor_id_t
MONITOR_FSP_HDR_PAGE_READ	include/srv0mon.h	/^  MONITOR_FSP_HDR_PAGE_READ,$/;"	e	enum:monitor_id_t
MONITOR_FSP_HDR_PAGE_WRITTEN	include/srv0mon.h	/^  MONITOR_FSP_HDR_PAGE_WRITTEN,$/;"	e	enum:monitor_id_t
MONITOR_GET_VALUE	include/srv0mon.h	/^  MONITOR_GET_VALUE        \/*!< Option for$/;"	e	enum:mon_option_t
MONITOR_GROUP_MODULE	include/srv0mon.h	/^  MONITOR_GROUP_MODULE = 16,   \/*!< Monitor can be turned on\/off$/;"	e	enum:monitor_type_t
MONITOR_HIDDEN	include/srv0mon.h	/^  MONITOR_HIDDEN = 256         \/*!< Do not display this monitor in the$/;"	e	enum:monitor_type_t
MONITOR_IBUF_BITMAP_PAGE_READ	include/srv0mon.h	/^  MONITOR_IBUF_BITMAP_PAGE_READ,$/;"	e	enum:monitor_id_t
MONITOR_IBUF_BITMAP_PAGE_WRITTEN	include/srv0mon.h	/^  MONITOR_IBUF_BITMAP_PAGE_WRITTEN,$/;"	e	enum:monitor_id_t
MONITOR_IBUF_FREELIST_PAGE_READ	include/srv0mon.h	/^  MONITOR_IBUF_FREELIST_PAGE_READ,$/;"	e	enum:monitor_id_t
MONITOR_IBUF_FREELIST_PAGE_WRITTEN	include/srv0mon.h	/^  MONITOR_IBUF_FREELIST_PAGE_WRITTEN,$/;"	e	enum:monitor_id_t
MONITOR_ICP_ATTEMPTS	include/srv0mon.h	/^  MONITOR_ICP_ATTEMPTS,$/;"	e	enum:monitor_id_t
MONITOR_ICP_MATCH	include/srv0mon.h	/^  MONITOR_ICP_MATCH,$/;"	e	enum:monitor_id_t
MONITOR_ICP_NO_MATCH	include/srv0mon.h	/^  MONITOR_ICP_NO_MATCH,$/;"	e	enum:monitor_id_t
MONITOR_ICP_OUT_OF_RANGE	include/srv0mon.h	/^  MONITOR_ICP_OUT_OF_RANGE,$/;"	e	enum:monitor_id_t
MONITOR_INC	include/srv0mon.h	671;"	d
MONITOR_INC	include/srv0mon.h	947;"	d
MONITOR_INC	page/page0zip.cc	68;"	d	file:
MONITOR_INC_NOCHECK	include/srv0mon.h	678;"	d
MONITOR_INC_TIME_IN_MICRO_SECS	include/srv0mon.h	791;"	d
MONITOR_INC_VALUE	include/srv0mon.h	673;"	d
MONITOR_INC_VALUE_CUMULATIVE	include/srv0mon.h	815;"	d
MONITOR_INC_WAIT_STATS	include/srv0mon.h	960;"	d
MONITOR_INC_WAIT_STATS_EX	include/srv0mon.h	951;"	d
MONITOR_INDEX_DISCARD	include/srv0mon.h	/^  MONITOR_INDEX_DISCARD,$/;"	e	enum:monitor_id_t
MONITOR_INDEX_IBUF_LEAF_PAGE_READ	include/srv0mon.h	/^  MONITOR_INDEX_IBUF_LEAF_PAGE_READ,$/;"	e	enum:monitor_id_t
MONITOR_INDEX_IBUF_LEAF_PAGE_WRITTEN	include/srv0mon.h	/^  MONITOR_INDEX_IBUF_LEAF_PAGE_WRITTEN,$/;"	e	enum:monitor_id_t
MONITOR_INDEX_IBUF_NON_LEAF_PAGE_READ	include/srv0mon.h	/^  MONITOR_INDEX_IBUF_NON_LEAF_PAGE_READ,$/;"	e	enum:monitor_id_t
MONITOR_INDEX_IBUF_NON_LEAF_PAGE_WRITTEN	include/srv0mon.h	/^  MONITOR_INDEX_IBUF_NON_LEAF_PAGE_WRITTEN,$/;"	e	enum:monitor_id_t
MONITOR_INDEX_LEAF_PAGE_READ	include/srv0mon.h	/^  MONITOR_INDEX_LEAF_PAGE_READ,$/;"	e	enum:monitor_id_t
MONITOR_INDEX_LEAF_PAGE_WRITTEN	include/srv0mon.h	/^  MONITOR_INDEX_LEAF_PAGE_WRITTEN,$/;"	e	enum:monitor_id_t
MONITOR_INDEX_MERGE_ATTEMPTS	include/srv0mon.h	/^  MONITOR_INDEX_MERGE_ATTEMPTS,$/;"	e	enum:monitor_id_t
MONITOR_INDEX_MERGE_SUCCESSFUL	include/srv0mon.h	/^  MONITOR_INDEX_MERGE_SUCCESSFUL,$/;"	e	enum:monitor_id_t
MONITOR_INDEX_NON_LEAF_PAGE_READ	include/srv0mon.h	/^  MONITOR_INDEX_NON_LEAF_PAGE_READ,$/;"	e	enum:monitor_id_t
MONITOR_INDEX_NON_LEAF_PAGE_WRITTEN	include/srv0mon.h	/^  MONITOR_INDEX_NON_LEAF_PAGE_WRITTEN,$/;"	e	enum:monitor_id_t
MONITOR_INDEX_REORG_ATTEMPTS	include/srv0mon.h	/^  MONITOR_INDEX_REORG_ATTEMPTS,$/;"	e	enum:monitor_id_t
MONITOR_INDEX_REORG_SUCCESSFUL	include/srv0mon.h	/^  MONITOR_INDEX_REORG_SUCCESSFUL,$/;"	e	enum:monitor_id_t
MONITOR_INDEX_SPLIT	include/srv0mon.h	/^  MONITOR_INDEX_SPLIT,$/;"	e	enum:monitor_id_t
MONITOR_INIT	include/srv0mon.h	649;"	d
MONITOR_INIT_ZERO_VALUE	include/srv0mon.h	640;"	d
MONITOR_INODE_PAGE_READ	include/srv0mon.h	/^  MONITOR_INODE_PAGE_READ,$/;"	e	enum:monitor_id_t
MONITOR_INODE_PAGE_WRITTEN	include/srv0mon.h	/^  MONITOR_INODE_PAGE_WRITTEN,$/;"	e	enum:monitor_id_t
MONITOR_IS_ON	include/srv0mon.h	588;"	d
MONITOR_LAST_VALUE	include/srv0mon.h	619;"	d
MONITOR_LATCHES	include/srv0mon.h	/^  MONITOR_LATCHES,$/;"	e	enum:monitor_id_t
MONITOR_LOCKREC_WAIT	include/srv0mon.h	/^  MONITOR_LOCKREC_WAIT,$/;"	e	enum:monitor_id_t
MONITOR_LOCK_THREADS_WAITING	include/srv0mon.h	/^  MONITOR_LOCK_THREADS_WAITING,$/;"	e	enum:monitor_id_t
MONITOR_LOG_CHECKPOINTS	include/srv0mon.h	/^  MONITOR_LOG_CHECKPOINTS,$/;"	e	enum:monitor_id_t
MONITOR_LOG_CONCURRENCY_MARGIN	include/srv0mon.h	/^  MONITOR_LOG_CONCURRENCY_MARGIN,$/;"	e	enum:monitor_id_t
MONITOR_LOG_FLUSHER_NO_WAITS	include/srv0mon.h	/^  MONITOR_LOG_FLUSHER_NO_WAITS,$/;"	e	enum:monitor_id_t
MONITOR_LOG_FLUSHER_WAITS	include/srv0mon.h	/^  MONITOR_LOG_FLUSHER_WAITS,$/;"	e	enum:monitor_id_t
MONITOR_LOG_FLUSHER_WAIT_LOOPS	include/srv0mon.h	/^  MONITOR_LOG_FLUSHER_WAIT_LOOPS,$/;"	e	enum:monitor_id_t
MONITOR_LOG_FLUSH_AVG_TIME	include/srv0mon.h	/^  MONITOR_LOG_FLUSH_AVG_TIME,$/;"	e	enum:monitor_id_t
MONITOR_LOG_FLUSH_LSN_AVG_RATE	include/srv0mon.h	/^  MONITOR_LOG_FLUSH_LSN_AVG_RATE,$/;"	e	enum:monitor_id_t
MONITOR_LOG_FLUSH_MAX_TIME	include/srv0mon.h	/^  MONITOR_LOG_FLUSH_MAX_TIME,$/;"	e	enum:monitor_id_t
MONITOR_LOG_FLUSH_NOTIFIER_NO_WAITS	include/srv0mon.h	/^  MONITOR_LOG_FLUSH_NOTIFIER_NO_WAITS,$/;"	e	enum:monitor_id_t
MONITOR_LOG_FLUSH_NOTIFIER_WAITS	include/srv0mon.h	/^  MONITOR_LOG_FLUSH_NOTIFIER_WAITS,$/;"	e	enum:monitor_id_t
MONITOR_LOG_FLUSH_NOTIFIER_WAIT_LOOPS	include/srv0mon.h	/^  MONITOR_LOG_FLUSH_NOTIFIER_WAIT_LOOPS,$/;"	e	enum:monitor_id_t
MONITOR_LOG_FLUSH_TOTAL_TIME	include/srv0mon.h	/^  MONITOR_LOG_FLUSH_TOTAL_TIME,$/;"	e	enum:monitor_id_t
MONITOR_LOG_FREE_SPACE	include/srv0mon.h	/^  MONITOR_LOG_FREE_SPACE,$/;"	e	enum:monitor_id_t
MONITOR_LOG_FULL_BLOCK_WRITES	include/srv0mon.h	/^  MONITOR_LOG_FULL_BLOCK_WRITES,$/;"	e	enum:monitor_id_t
MONITOR_LOG_NEXT_FILE	include/srv0mon.h	/^  MONITOR_LOG_NEXT_FILE,$/;"	e	enum:monitor_id_t
MONITOR_LOG_ON_BUFFER_SPACE_NO_WAITS	include/srv0mon.h	/^  MONITOR_LOG_ON_BUFFER_SPACE_NO_WAITS,$/;"	e	enum:monitor_id_t
MONITOR_LOG_ON_BUFFER_SPACE_WAITS	include/srv0mon.h	/^  MONITOR_LOG_ON_BUFFER_SPACE_WAITS,$/;"	e	enum:monitor_id_t
MONITOR_LOG_ON_BUFFER_SPACE_WAIT_LOOPS	include/srv0mon.h	/^  MONITOR_LOG_ON_BUFFER_SPACE_WAIT_LOOPS,$/;"	e	enum:monitor_id_t
MONITOR_LOG_ON_FILE_SPACE_NO_WAITS	include/srv0mon.h	/^  MONITOR_LOG_ON_FILE_SPACE_NO_WAITS,$/;"	e	enum:monitor_id_t
MONITOR_LOG_ON_FILE_SPACE_WAITS	include/srv0mon.h	/^  MONITOR_LOG_ON_FILE_SPACE_WAITS,$/;"	e	enum:monitor_id_t
MONITOR_LOG_ON_FILE_SPACE_WAIT_LOOPS	include/srv0mon.h	/^  MONITOR_LOG_ON_FILE_SPACE_WAIT_LOOPS,$/;"	e	enum:monitor_id_t
MONITOR_LOG_ON_FLUSH_NO_WAITS	include/srv0mon.h	/^  MONITOR_LOG_ON_FLUSH_NO_WAITS,$/;"	e	enum:monitor_id_t
MONITOR_LOG_ON_FLUSH_WAITS	include/srv0mon.h	/^  MONITOR_LOG_ON_FLUSH_WAITS,$/;"	e	enum:monitor_id_t
MONITOR_LOG_ON_FLUSH_WAIT_LOOPS	include/srv0mon.h	/^  MONITOR_LOG_ON_FLUSH_WAIT_LOOPS,$/;"	e	enum:monitor_id_t
MONITOR_LOG_ON_RECENT_CLOSED_WAIT_LOOPS	include/srv0mon.h	/^  MONITOR_LOG_ON_RECENT_CLOSED_WAIT_LOOPS,$/;"	e	enum:monitor_id_t
MONITOR_LOG_ON_RECENT_WRITTEN_WAIT_LOOPS	include/srv0mon.h	/^  MONITOR_LOG_ON_RECENT_WRITTEN_WAIT_LOOPS,$/;"	e	enum:monitor_id_t
MONITOR_LOG_ON_WRITE_NO_WAITS	include/srv0mon.h	/^  MONITOR_LOG_ON_WRITE_NO_WAITS,$/;"	e	enum:monitor_id_t
MONITOR_LOG_ON_WRITE_WAITS	include/srv0mon.h	/^  MONITOR_LOG_ON_WRITE_WAITS,$/;"	e	enum:monitor_id_t
MONITOR_LOG_ON_WRITE_WAIT_LOOPS	include/srv0mon.h	/^  MONITOR_LOG_ON_WRITE_WAIT_LOOPS,$/;"	e	enum:monitor_id_t
MONITOR_LOG_PADDED	include/srv0mon.h	/^  MONITOR_LOG_PADDED,$/;"	e	enum:monitor_id_t
MONITOR_LOG_PARTIAL_BLOCK_WRITES	include/srv0mon.h	/^  MONITOR_LOG_PARTIAL_BLOCK_WRITES,$/;"	e	enum:monitor_id_t
MONITOR_LOG_WRITER_NO_WAITS	include/srv0mon.h	/^  MONITOR_LOG_WRITER_NO_WAITS,$/;"	e	enum:monitor_id_t
MONITOR_LOG_WRITER_ON_ARCHIVER_WAITS	include/srv0mon.h	/^  MONITOR_LOG_WRITER_ON_ARCHIVER_WAITS,$/;"	e	enum:monitor_id_t
MONITOR_LOG_WRITER_ON_FREE_SPACE_WAITS	include/srv0mon.h	/^  MONITOR_LOG_WRITER_ON_FREE_SPACE_WAITS,$/;"	e	enum:monitor_id_t
MONITOR_LOG_WRITER_WAITS	include/srv0mon.h	/^  MONITOR_LOG_WRITER_WAITS,$/;"	e	enum:monitor_id_t
MONITOR_LOG_WRITER_WAIT_LOOPS	include/srv0mon.h	/^  MONITOR_LOG_WRITER_WAIT_LOOPS,$/;"	e	enum:monitor_id_t
MONITOR_LOG_WRITE_NOTIFIER_NO_WAITS	include/srv0mon.h	/^  MONITOR_LOG_WRITE_NOTIFIER_NO_WAITS,$/;"	e	enum:monitor_id_t
MONITOR_LOG_WRITE_NOTIFIER_WAITS	include/srv0mon.h	/^  MONITOR_LOG_WRITE_NOTIFIER_WAITS,$/;"	e	enum:monitor_id_t
MONITOR_LOG_WRITE_NOTIFIER_WAIT_LOOPS	include/srv0mon.h	/^  MONITOR_LOG_WRITE_NOTIFIER_WAIT_LOOPS,$/;"	e	enum:monitor_id_t
MONITOR_LOG_WRITE_TO_FILE_REQUESTS_INTERVAL	include/srv0mon.h	/^  MONITOR_LOG_WRITE_TO_FILE_REQUESTS_INTERVAL,$/;"	e	enum:monitor_id_t
MONITOR_LRU_BATCH_EVICT_COUNT	include/srv0mon.h	/^  MONITOR_LRU_BATCH_EVICT_COUNT,$/;"	e	enum:monitor_id_t
MONITOR_LRU_BATCH_EVICT_PAGES	include/srv0mon.h	/^  MONITOR_LRU_BATCH_EVICT_PAGES,$/;"	e	enum:monitor_id_t
MONITOR_LRU_BATCH_EVICT_TOTAL_PAGE	include/srv0mon.h	/^  MONITOR_LRU_BATCH_EVICT_TOTAL_PAGE,$/;"	e	enum:monitor_id_t
MONITOR_LRU_BATCH_FLUSH_AVG_PASS	include/srv0mon.h	/^  MONITOR_LRU_BATCH_FLUSH_AVG_PASS,$/;"	e	enum:monitor_id_t
MONITOR_LRU_BATCH_FLUSH_AVG_TIME_EST	include/srv0mon.h	/^  MONITOR_LRU_BATCH_FLUSH_AVG_TIME_EST,$/;"	e	enum:monitor_id_t
MONITOR_LRU_BATCH_FLUSH_AVG_TIME_SLOT	include/srv0mon.h	/^  MONITOR_LRU_BATCH_FLUSH_AVG_TIME_SLOT,$/;"	e	enum:monitor_id_t
MONITOR_LRU_BATCH_FLUSH_AVG_TIME_THREAD	include/srv0mon.h	/^  MONITOR_LRU_BATCH_FLUSH_AVG_TIME_THREAD,$/;"	e	enum:monitor_id_t
MONITOR_LRU_BATCH_FLUSH_COUNT	include/srv0mon.h	/^  MONITOR_LRU_BATCH_FLUSH_COUNT,$/;"	e	enum:monitor_id_t
MONITOR_LRU_BATCH_FLUSH_PAGES	include/srv0mon.h	/^  MONITOR_LRU_BATCH_FLUSH_PAGES,$/;"	e	enum:monitor_id_t
MONITOR_LRU_BATCH_FLUSH_TOTAL_PAGE	include/srv0mon.h	/^  MONITOR_LRU_BATCH_FLUSH_TOTAL_PAGE,$/;"	e	enum:monitor_id_t
MONITOR_LRU_BATCH_SCANNED	include/srv0mon.h	/^  MONITOR_LRU_BATCH_SCANNED,$/;"	e	enum:monitor_id_t
MONITOR_LRU_BATCH_SCANNED_NUM_CALL	include/srv0mon.h	/^  MONITOR_LRU_BATCH_SCANNED_NUM_CALL,$/;"	e	enum:monitor_id_t
MONITOR_LRU_BATCH_SCANNED_PER_CALL	include/srv0mon.h	/^  MONITOR_LRU_BATCH_SCANNED_PER_CALL,$/;"	e	enum:monitor_id_t
MONITOR_LRU_GET_FREE_LOOPS	include/srv0mon.h	/^  MONITOR_LRU_GET_FREE_LOOPS,$/;"	e	enum:monitor_id_t
MONITOR_LRU_GET_FREE_SEARCH	include/srv0mon.h	/^  MONITOR_LRU_GET_FREE_SEARCH,$/;"	e	enum:monitor_id_t
MONITOR_LRU_GET_FREE_WAITS	include/srv0mon.h	/^  MONITOR_LRU_GET_FREE_WAITS,$/;"	e	enum:monitor_id_t
MONITOR_LRU_SEARCH_SCANNED	include/srv0mon.h	/^  MONITOR_LRU_SEARCH_SCANNED,$/;"	e	enum:monitor_id_t
MONITOR_LRU_SEARCH_SCANNED_NUM_CALL	include/srv0mon.h	/^  MONITOR_LRU_SEARCH_SCANNED_NUM_CALL,$/;"	e	enum:monitor_id_t
MONITOR_LRU_SEARCH_SCANNED_PER_CALL	include/srv0mon.h	/^  MONITOR_LRU_SEARCH_SCANNED_PER_CALL,$/;"	e	enum:monitor_id_t
MONITOR_LRU_SINGLE_FLUSH_FAILURE_COUNT	include/srv0mon.h	/^  MONITOR_LRU_SINGLE_FLUSH_FAILURE_COUNT,$/;"	e	enum:monitor_id_t
MONITOR_LRU_SINGLE_FLUSH_SCANNED	include/srv0mon.h	/^  MONITOR_LRU_SINGLE_FLUSH_SCANNED,$/;"	e	enum:monitor_id_t
MONITOR_LRU_SINGLE_FLUSH_SCANNED_NUM_CALL	include/srv0mon.h	/^  MONITOR_LRU_SINGLE_FLUSH_SCANNED_NUM_CALL,$/;"	e	enum:monitor_id_t
MONITOR_LRU_SINGLE_FLUSH_SCANNED_PER_CALL	include/srv0mon.h	/^  MONITOR_LRU_SINGLE_FLUSH_SCANNED_PER_CALL,$/;"	e	enum:monitor_id_t
MONITOR_LRU_UNZIP_SEARCH_SCANNED	include/srv0mon.h	/^  MONITOR_LRU_UNZIP_SEARCH_SCANNED,$/;"	e	enum:monitor_id_t
MONITOR_LRU_UNZIP_SEARCH_SCANNED_NUM_CALL	include/srv0mon.h	/^  MONITOR_LRU_UNZIP_SEARCH_SCANNED_NUM_CALL,$/;"	e	enum:monitor_id_t
MONITOR_LRU_UNZIP_SEARCH_SCANNED_PER_CALL	include/srv0mon.h	/^  MONITOR_LRU_UNZIP_SEARCH_SCANNED_PER_CALL,$/;"	e	enum:monitor_id_t
MONITOR_MASTER_ACTIVE_LOOPS	include/srv0mon.h	/^  MONITOR_MASTER_ACTIVE_LOOPS,$/;"	e	enum:monitor_id_t
MONITOR_MASTER_IDLE_LOOPS	include/srv0mon.h	/^  MONITOR_MASTER_IDLE_LOOPS,$/;"	e	enum:monitor_id_t
MONITOR_MASTER_THREAD_SLEEP	include/srv0mon.h	/^  MONITOR_MASTER_THREAD_SLEEP,$/;"	e	enum:monitor_id_t
MONITOR_MAX_MIN_NOT_INIT	include/srv0mon.h	644;"	d
MONITOR_MAX_VALUE	include/srv0mon.h	607;"	d
MONITOR_MAX_VALUE_START	include/srv0mon.h	613;"	d
MONITOR_MIN_VALUE	include/srv0mon.h	609;"	d
MONITOR_MIN_VALUE_START	include/srv0mon.h	616;"	d
MONITOR_MODULE	include/srv0mon.h	/^  MONITOR_MODULE = 1,          \/*!< This is a monitor module type,$/;"	e	enum:monitor_type_t
MONITOR_MODULE_ADAPTIVE_HASH	include/srv0mon.h	/^  MONITOR_MODULE_ADAPTIVE_HASH,$/;"	e	enum:monitor_id_t
MONITOR_MODULE_BUFFER	include/srv0mon.h	/^  MONITOR_MODULE_BUFFER,$/;"	e	enum:monitor_id_t
MONITOR_MODULE_BUF_PAGE	include/srv0mon.h	/^  MONITOR_MODULE_BUF_PAGE,$/;"	e	enum:monitor_id_t
MONITOR_MODULE_CPU	include/srv0mon.h	/^  MONITOR_MODULE_CPU,$/;"	e	enum:monitor_id_t
MONITOR_MODULE_DBLWR	include/srv0mon.h	/^  MONITOR_MODULE_DBLWR,$/;"	e	enum:monitor_id_t
MONITOR_MODULE_DDL_STATS	include/srv0mon.h	/^  MONITOR_MODULE_DDL_STATS,$/;"	e	enum:monitor_id_t
MONITOR_MODULE_DML_STATS	include/srv0mon.h	/^  MONITOR_MODULE_DML_STATS,$/;"	e	enum:monitor_id_t
MONITOR_MODULE_FIL_SYSTEM	include/srv0mon.h	/^  MONITOR_MODULE_FIL_SYSTEM,$/;"	e	enum:monitor_id_t
MONITOR_MODULE_IBUF_SYSTEM	include/srv0mon.h	/^  MONITOR_MODULE_IBUF_SYSTEM,$/;"	e	enum:monitor_id_t
MONITOR_MODULE_ICP	include/srv0mon.h	/^  MONITOR_MODULE_ICP,$/;"	e	enum:monitor_id_t
MONITOR_MODULE_INDEX	include/srv0mon.h	/^  MONITOR_MODULE_INDEX,$/;"	e	enum:monitor_id_t
MONITOR_MODULE_LATCHES	include/srv0mon.h	/^  MONITOR_MODULE_LATCHES,$/;"	e	enum:monitor_id_t
MONITOR_MODULE_LOCK	include/srv0mon.h	/^  MONITOR_MODULE_LOCK,$/;"	e	enum:monitor_id_t
MONITOR_MODULE_METADATA	include/srv0mon.h	/^  MONITOR_MODULE_METADATA,$/;"	e	enum:monitor_id_t
MONITOR_MODULE_OS	include/srv0mon.h	/^  MONITOR_MODULE_OS,$/;"	e	enum:monitor_id_t
MONITOR_MODULE_PAGE	include/srv0mon.h	/^  MONITOR_MODULE_PAGE,$/;"	e	enum:monitor_id_t
MONITOR_MODULE_PAGE_TRACK	include/srv0mon.h	/^  MONITOR_MODULE_PAGE_TRACK,$/;"	e	enum:monitor_id_t
MONITOR_MODULE_PURGE	include/srv0mon.h	/^  MONITOR_MODULE_PURGE,$/;"	e	enum:monitor_id_t
MONITOR_MODULE_REDO_LOG	include/srv0mon.h	/^  MONITOR_MODULE_REDO_LOG,$/;"	e	enum:monitor_id_t
MONITOR_MODULE_SAMPLING_STATS	include/srv0mon.h	/^  MONITOR_MODULE_SAMPLING_STATS,$/;"	e	enum:monitor_id_t
MONITOR_MODULE_SERVER	include/srv0mon.h	/^  MONITOR_MODULE_SERVER,$/;"	e	enum:monitor_id_t
MONITOR_MODULE_TRX	include/srv0mon.h	/^  MONITOR_MODULE_TRX,$/;"	e	enum:monitor_id_t
MONITOR_NONE	include/srv0mon.h	/^  MONITOR_NONE = 0,            \/*!< No monitoring *\/$/;"	e	enum:monitor_type_t
MONITOR_NO_AVERAGE	include/srv0mon.h	/^  MONITOR_NO_AVERAGE = 4,      \/*!< Set this status if we don't want to$/;"	e	enum:monitor_type_t
MONITOR_NO_MATCH	include/srv0mon.h	537;"	d
MONITOR_NUM_RECLOCK	include/srv0mon.h	/^  MONITOR_NUM_RECLOCK,$/;"	e	enum:monitor_id_t
MONITOR_NUM_RECLOCK_REQ	include/srv0mon.h	/^  MONITOR_NUM_RECLOCK_REQ,$/;"	e	enum:monitor_id_t
MONITOR_NUM_TABLELOCK	include/srv0mon.h	/^  MONITOR_NUM_TABLELOCK,$/;"	e	enum:monitor_id_t
MONITOR_NUM_UNDO_SLOT_CACHED	include/srv0mon.h	/^  MONITOR_NUM_UNDO_SLOT_CACHED,$/;"	e	enum:monitor_id_t
MONITOR_NUM_UNDO_SLOT_USED	include/srv0mon.h	/^  MONITOR_NUM_UNDO_SLOT_USED,$/;"	e	enum:monitor_id_t
MONITOR_N_DEL_ROW_PURGE	include/srv0mon.h	/^  MONITOR_N_DEL_ROW_PURGE,$/;"	e	enum:monitor_id_t
MONITOR_N_UPD_EXIST_EXTERN	include/srv0mon.h	/^  MONITOR_N_UPD_EXIST_EXTERN,$/;"	e	enum:monitor_id_t
MONITOR_OFF	include/srv0mon.h	583;"	d
MONITOR_OLVD_ROW_DELETED	include/srv0mon.h	/^  MONITOR_OLVD_ROW_DELETED,$/;"	e	enum:monitor_id_t
MONITOR_OLVD_ROW_INSERTED	include/srv0mon.h	/^  MONITOR_OLVD_ROW_INSERTED,$/;"	e	enum:monitor_id_t
MONITOR_OLVD_ROW_READ	include/srv0mon.h	/^  MONITOR_OLVD_ROW_READ,$/;"	e	enum:monitor_id_t
MONITOR_OLVD_ROW_UPDTATED	include/srv0mon.h	/^  MONITOR_OLVD_ROW_UPDTATED,$/;"	e	enum:monitor_id_t
MONITOR_OLVD_SYSTEM_ROW_DELETED	include/srv0mon.h	/^  MONITOR_OLVD_SYSTEM_ROW_DELETED,$/;"	e	enum:monitor_id_t
MONITOR_OLVD_SYSTEM_ROW_INSERTED	include/srv0mon.h	/^  MONITOR_OLVD_SYSTEM_ROW_INSERTED,$/;"	e	enum:monitor_id_t
MONITOR_OLVD_SYSTEM_ROW_READ	include/srv0mon.h	/^  MONITOR_OLVD_SYSTEM_ROW_READ,$/;"	e	enum:monitor_id_t
MONITOR_OLVD_SYSTEM_ROW_UPDATED	include/srv0mon.h	/^  MONITOR_OLVD_SYSTEM_ROW_UPDATED,$/;"	e	enum:monitor_id_t
MONITOR_ON	include/srv0mon.h	579;"	d
MONITOR_ONLINE_CREATE_INDEX	include/srv0mon.h	/^  MONITOR_ONLINE_CREATE_INDEX,$/;"	e	enum:monitor_id_t
MONITOR_ON_LOG_NO_WAITS_PAGE_WRITTEN	include/srv0mon.h	/^  MONITOR_ON_LOG_NO_WAITS_PAGE_WRITTEN,$/;"	e	enum:monitor_id_t
MONITOR_ON_LOG_WAITS_PAGE_WRITTEN	include/srv0mon.h	/^  MONITOR_ON_LOG_WAITS_PAGE_WRITTEN,$/;"	e	enum:monitor_id_t
MONITOR_ON_LOG_WAIT_LOOPS_PAGE_WRITTEN	include/srv0mon.h	/^  MONITOR_ON_LOG_WAIT_LOOPS_PAGE_WRITTEN,$/;"	e	enum:monitor_id_t
MONITOR_OS_PENDING_READS	include/srv0mon.h	/^  MONITOR_OS_PENDING_READS,$/;"	e	enum:monitor_id_t
MONITOR_OS_PENDING_WRITES	include/srv0mon.h	/^  MONITOR_OS_PENDING_WRITES,$/;"	e	enum:monitor_id_t
MONITOR_OTHER_PAGE_READ	include/srv0mon.h	/^  MONITOR_OTHER_PAGE_READ,$/;"	e	enum:monitor_id_t
MONITOR_OTHER_PAGE_WRITTEN	include/srv0mon.h	/^  MONITOR_OTHER_PAGE_WRITTEN,$/;"	e	enum:monitor_id_t
MONITOR_OVLD_ADAPTIVE_HASH_SEARCH	include/srv0mon.h	/^  MONITOR_OVLD_ADAPTIVE_HASH_SEARCH,$/;"	e	enum:monitor_id_t
MONITOR_OVLD_ADAPTIVE_HASH_SEARCH_BTREE	include/srv0mon.h	/^  MONITOR_OVLD_ADAPTIVE_HASH_SEARCH_BTREE,$/;"	e	enum:monitor_id_t
MONITOR_OVLD_BUFFER_POOL_SIZE	include/srv0mon.h	/^  MONITOR_OVLD_BUFFER_POOL_SIZE,$/;"	e	enum:monitor_id_t
MONITOR_OVLD_BUF_OLDEST_LSN_APPROX	include/srv0mon.h	/^  MONITOR_OVLD_BUF_OLDEST_LSN_APPROX,$/;"	e	enum:monitor_id_t
MONITOR_OVLD_BUF_OLDEST_LSN_LWM	include/srv0mon.h	/^  MONITOR_OVLD_BUF_OLDEST_LSN_LWM,$/;"	e	enum:monitor_id_t
MONITOR_OVLD_BUF_POOL_BYTES_DATA	include/srv0mon.h	/^  MONITOR_OVLD_BUF_POOL_BYTES_DATA,$/;"	e	enum:monitor_id_t
MONITOR_OVLD_BUF_POOL_BYTES_DIRTY	include/srv0mon.h	/^  MONITOR_OVLD_BUF_POOL_BYTES_DIRTY,$/;"	e	enum:monitor_id_t
MONITOR_OVLD_BUF_POOL_PAGES_DATA	include/srv0mon.h	/^  MONITOR_OVLD_BUF_POOL_PAGES_DATA,$/;"	e	enum:monitor_id_t
MONITOR_OVLD_BUF_POOL_PAGES_DIRTY	include/srv0mon.h	/^  MONITOR_OVLD_BUF_POOL_PAGES_DIRTY,$/;"	e	enum:monitor_id_t
MONITOR_OVLD_BUF_POOL_PAGES_FREE	include/srv0mon.h	/^  MONITOR_OVLD_BUF_POOL_PAGES_FREE,$/;"	e	enum:monitor_id_t
MONITOR_OVLD_BUF_POOL_PAGE_MISC	include/srv0mon.h	/^  MONITOR_OVLD_BUF_POOL_PAGE_MISC,$/;"	e	enum:monitor_id_t
MONITOR_OVLD_BUF_POOL_PAGE_TOTAL	include/srv0mon.h	/^  MONITOR_OVLD_BUF_POOL_PAGE_TOTAL,$/;"	e	enum:monitor_id_t
MONITOR_OVLD_BUF_POOL_READS	include/srv0mon.h	/^  MONITOR_OVLD_BUF_POOL_READS,$/;"	e	enum:monitor_id_t
MONITOR_OVLD_BUF_POOL_READ_AHEAD	include/srv0mon.h	/^  MONITOR_OVLD_BUF_POOL_READ_AHEAD,$/;"	e	enum:monitor_id_t
MONITOR_OVLD_BUF_POOL_READ_AHEAD_EVICTED	include/srv0mon.h	/^  MONITOR_OVLD_BUF_POOL_READ_AHEAD_EVICTED,$/;"	e	enum:monitor_id_t
MONITOR_OVLD_BUF_POOL_READ_REQUESTS	include/srv0mon.h	/^  MONITOR_OVLD_BUF_POOL_READ_REQUESTS,$/;"	e	enum:monitor_id_t
MONITOR_OVLD_BUF_POOL_WAIT_FREE	include/srv0mon.h	/^  MONITOR_OVLD_BUF_POOL_WAIT_FREE,$/;"	e	enum:monitor_id_t
MONITOR_OVLD_BUF_POOL_WRITE_REQUEST	include/srv0mon.h	/^  MONITOR_OVLD_BUF_POOL_WRITE_REQUEST,$/;"	e	enum:monitor_id_t
MONITOR_OVLD_BYTE_READ	include/srv0mon.h	/^  MONITOR_OVLD_BYTE_READ,$/;"	e	enum:monitor_id_t
MONITOR_OVLD_BYTE_WRITTEN	include/srv0mon.h	/^  MONITOR_OVLD_BYTE_WRITTEN,$/;"	e	enum:monitor_id_t
MONITOR_OVLD_IBUF_MERGES	include/srv0mon.h	/^  MONITOR_OVLD_IBUF_MERGES,$/;"	e	enum:monitor_id_t
MONITOR_OVLD_IBUF_MERGE_DELETE	include/srv0mon.h	/^  MONITOR_OVLD_IBUF_MERGE_DELETE,$/;"	e	enum:monitor_id_t
MONITOR_OVLD_IBUF_MERGE_DISCARD_DELETE	include/srv0mon.h	/^  MONITOR_OVLD_IBUF_MERGE_DISCARD_DELETE,$/;"	e	enum:monitor_id_t
MONITOR_OVLD_IBUF_MERGE_DISCARD_INSERT	include/srv0mon.h	/^  MONITOR_OVLD_IBUF_MERGE_DISCARD_INSERT,$/;"	e	enum:monitor_id_t
MONITOR_OVLD_IBUF_MERGE_DISCARD_PURGE	include/srv0mon.h	/^  MONITOR_OVLD_IBUF_MERGE_DISCARD_PURGE,$/;"	e	enum:monitor_id_t
MONITOR_OVLD_IBUF_MERGE_INSERT	include/srv0mon.h	/^  MONITOR_OVLD_IBUF_MERGE_INSERT,$/;"	e	enum:monitor_id_t
MONITOR_OVLD_IBUF_MERGE_PURGE	include/srv0mon.h	/^  MONITOR_OVLD_IBUF_MERGE_PURGE,$/;"	e	enum:monitor_id_t
MONITOR_OVLD_IBUF_SIZE	include/srv0mon.h	/^  MONITOR_OVLD_IBUF_SIZE,$/;"	e	enum:monitor_id_t
MONITOR_OVLD_LOCK_AVG_WAIT_TIME	include/srv0mon.h	/^  MONITOR_OVLD_LOCK_AVG_WAIT_TIME,$/;"	e	enum:monitor_id_t
MONITOR_OVLD_LOCK_MAX_WAIT_TIME	include/srv0mon.h	/^  MONITOR_OVLD_LOCK_MAX_WAIT_TIME,$/;"	e	enum:monitor_id_t
MONITOR_OVLD_LOCK_WAIT_TIME	include/srv0mon.h	/^  MONITOR_OVLD_LOCK_WAIT_TIME,$/;"	e	enum:monitor_id_t
MONITOR_OVLD_LOG_WAITS	include/srv0mon.h	/^  MONITOR_OVLD_LOG_WAITS,$/;"	e	enum:monitor_id_t
MONITOR_OVLD_LOG_WRITES	include/srv0mon.h	/^  MONITOR_OVLD_LOG_WRITES,$/;"	e	enum:monitor_id_t
MONITOR_OVLD_LOG_WRITE_REQUEST	include/srv0mon.h	/^  MONITOR_OVLD_LOG_WRITE_REQUEST,$/;"	e	enum:monitor_id_t
MONITOR_OVLD_LSN_ARCHIVED	include/srv0mon.h	/^  MONITOR_OVLD_LSN_ARCHIVED,$/;"	e	enum:monitor_id_t
MONITOR_OVLD_LSN_BUF_DIRTY_PAGES_ADDED	include/srv0mon.h	/^  MONITOR_OVLD_LSN_BUF_DIRTY_PAGES_ADDED,$/;"	e	enum:monitor_id_t
MONITOR_OVLD_LSN_CHECKPOINT	include/srv0mon.h	/^  MONITOR_OVLD_LSN_CHECKPOINT,$/;"	e	enum:monitor_id_t
MONITOR_OVLD_LSN_CHECKPOINT_AGE	include/srv0mon.h	/^  MONITOR_OVLD_LSN_CHECKPOINT_AGE,$/;"	e	enum:monitor_id_t
MONITOR_OVLD_LSN_CURRENT	include/srv0mon.h	/^  MONITOR_OVLD_LSN_CURRENT,$/;"	e	enum:monitor_id_t
MONITOR_OVLD_LSN_FLUSHDISK	include/srv0mon.h	/^  MONITOR_OVLD_LSN_FLUSHDISK,$/;"	e	enum:monitor_id_t
MONITOR_OVLD_MAX_AGE_ASYNC	include/srv0mon.h	/^  MONITOR_OVLD_MAX_AGE_ASYNC,$/;"	e	enum:monitor_id_t
MONITOR_OVLD_MAX_AGE_SYNC	include/srv0mon.h	/^  MONITOR_OVLD_MAX_AGE_SYNC,$/;"	e	enum:monitor_id_t
MONITOR_OVLD_N_FILE_OPENED	include/srv0mon.h	/^  MONITOR_OVLD_N_FILE_OPENED,$/;"	e	enum:monitor_id_t
MONITOR_OVLD_OS_FILE_READ	include/srv0mon.h	/^  MONITOR_OVLD_OS_FILE_READ,$/;"	e	enum:monitor_id_t
MONITOR_OVLD_OS_FILE_WRITE	include/srv0mon.h	/^  MONITOR_OVLD_OS_FILE_WRITE,$/;"	e	enum:monitor_id_t
MONITOR_OVLD_OS_FSYNC	include/srv0mon.h	/^  MONITOR_OVLD_OS_FSYNC,$/;"	e	enum:monitor_id_t
MONITOR_OVLD_OS_LOG_FSYNC	include/srv0mon.h	/^  MONITOR_OVLD_OS_LOG_FSYNC,$/;"	e	enum:monitor_id_t
MONITOR_OVLD_OS_LOG_PENDING_FSYNC	include/srv0mon.h	/^  MONITOR_OVLD_OS_LOG_PENDING_FSYNC,$/;"	e	enum:monitor_id_t
MONITOR_OVLD_OS_LOG_PENDING_WRITES	include/srv0mon.h	/^  MONITOR_OVLD_OS_LOG_PENDING_WRITES,$/;"	e	enum:monitor_id_t
MONITOR_OVLD_OS_LOG_WRITTEN	include/srv0mon.h	/^  MONITOR_OVLD_OS_LOG_WRITTEN,$/;"	e	enum:monitor_id_t
MONITOR_OVLD_PAGES_READ	include/srv0mon.h	/^  MONITOR_OVLD_PAGES_READ,$/;"	e	enum:monitor_id_t
MONITOR_OVLD_PAGES_WRITTEN	include/srv0mon.h	/^  MONITOR_OVLD_PAGES_WRITTEN,$/;"	e	enum:monitor_id_t
MONITOR_OVLD_PAGE_CREATED	include/srv0mon.h	/^  MONITOR_OVLD_PAGE_CREATED,$/;"	e	enum:monitor_id_t
MONITOR_OVLD_ROW_LOCK_CURRENT_WAIT	include/srv0mon.h	/^  MONITOR_OVLD_ROW_LOCK_CURRENT_WAIT,$/;"	e	enum:monitor_id_t
MONITOR_OVLD_ROW_LOCK_WAIT	include/srv0mon.h	/^  MONITOR_OVLD_ROW_LOCK_WAIT,$/;"	e	enum:monitor_id_t
MONITOR_OVLD_RWLOCK_SX_OS_WAITS	include/srv0mon.h	/^  MONITOR_OVLD_RWLOCK_SX_OS_WAITS,$/;"	e	enum:monitor_id_t
MONITOR_OVLD_RWLOCK_SX_SPIN_ROUNDS	include/srv0mon.h	/^  MONITOR_OVLD_RWLOCK_SX_SPIN_ROUNDS,$/;"	e	enum:monitor_id_t
MONITOR_OVLD_RWLOCK_SX_SPIN_WAITS	include/srv0mon.h	/^  MONITOR_OVLD_RWLOCK_SX_SPIN_WAITS,$/;"	e	enum:monitor_id_t
MONITOR_OVLD_RWLOCK_S_OS_WAITS	include/srv0mon.h	/^  MONITOR_OVLD_RWLOCK_S_OS_WAITS,$/;"	e	enum:monitor_id_t
MONITOR_OVLD_RWLOCK_S_SPIN_ROUNDS	include/srv0mon.h	/^  MONITOR_OVLD_RWLOCK_S_SPIN_ROUNDS,$/;"	e	enum:monitor_id_t
MONITOR_OVLD_RWLOCK_S_SPIN_WAITS	include/srv0mon.h	/^  MONITOR_OVLD_RWLOCK_S_SPIN_WAITS,$/;"	e	enum:monitor_id_t
MONITOR_OVLD_RWLOCK_X_OS_WAITS	include/srv0mon.h	/^  MONITOR_OVLD_RWLOCK_X_OS_WAITS,$/;"	e	enum:monitor_id_t
MONITOR_OVLD_RWLOCK_X_SPIN_ROUNDS	include/srv0mon.h	/^  MONITOR_OVLD_RWLOCK_X_SPIN_ROUNDS,$/;"	e	enum:monitor_id_t
MONITOR_OVLD_RWLOCK_X_SPIN_WAITS	include/srv0mon.h	/^  MONITOR_OVLD_RWLOCK_X_SPIN_WAITS,$/;"	e	enum:monitor_id_t
MONITOR_OVLD_SERVER_ACTIVITY	include/srv0mon.h	/^  MONITOR_OVLD_SERVER_ACTIVITY,$/;"	e	enum:monitor_id_t
MONITOR_OVLD_SRV_DBLWR_PAGES_WRITTEN	include/srv0mon.h	/^  MONITOR_OVLD_SRV_DBLWR_PAGES_WRITTEN,$/;"	e	enum:monitor_id_t
MONITOR_OVLD_SRV_DBLWR_WRITES	include/srv0mon.h	/^  MONITOR_OVLD_SRV_DBLWR_WRITES,$/;"	e	enum:monitor_id_t
MONITOR_OVLD_SRV_PAGE_SIZE	include/srv0mon.h	/^  MONITOR_OVLD_SRV_PAGE_SIZE,$/;"	e	enum:monitor_id_t
MONITOR_PAD_DECREMENTS	include/srv0mon.h	/^  MONITOR_PAD_DECREMENTS,$/;"	e	enum:monitor_id_t
MONITOR_PAD_INCREMENTS	include/srv0mon.h	/^  MONITOR_PAD_INCREMENTS,$/;"	e	enum:monitor_id_t
MONITOR_PAGE_COMPRESS	include/srv0mon.h	/^  MONITOR_PAGE_COMPRESS,$/;"	e	enum:monitor_id_t
MONITOR_PAGE_DECOMPRESS	include/srv0mon.h	/^  MONITOR_PAGE_DECOMPRESS,$/;"	e	enum:monitor_id_t
MONITOR_PAGE_TRACK_CHECKPOINT_PARTIAL_FLUSH_REQUEST	include/srv0mon.h	/^  MONITOR_PAGE_TRACK_CHECKPOINT_PARTIAL_FLUSH_REQUEST,$/;"	e	enum:monitor_id_t
MONITOR_PAGE_TRACK_FULL_BLOCK_WRITES	include/srv0mon.h	/^  MONITOR_PAGE_TRACK_FULL_BLOCK_WRITES,$/;"	e	enum:monitor_id_t
MONITOR_PAGE_TRACK_PARTIAL_BLOCK_WRITES	include/srv0mon.h	/^  MONITOR_PAGE_TRACK_PARTIAL_BLOCK_WRITES,$/;"	e	enum:monitor_id_t
MONITOR_PAGE_TRACK_RESETS	include/srv0mon.h	/^  MONITOR_PAGE_TRACK_RESETS,$/;"	e	enum:monitor_id_t
MONITOR_PENDING_ALTER_TABLE	include/srv0mon.h	/^  MONITOR_PENDING_ALTER_TABLE,$/;"	e	enum:monitor_id_t
MONITOR_PURGE_INVOKED	include/srv0mon.h	/^  MONITOR_PURGE_INVOKED,$/;"	e	enum:monitor_id_t
MONITOR_PURGE_N_PAGE_HANDLED	include/srv0mon.h	/^  MONITOR_PURGE_N_PAGE_HANDLED,$/;"	e	enum:monitor_id_t
MONITOR_PURGE_RESUME_COUNT	include/srv0mon.h	/^  MONITOR_PURGE_RESUME_COUNT,$/;"	e	enum:monitor_id_t
MONITOR_PURGE_STOP_COUNT	include/srv0mon.h	/^  MONITOR_PURGE_STOP_COUNT,$/;"	e	enum:monitor_id_t
MONITOR_PURGE_TRUNCATE_HISTORY_COUNT	include/srv0mon.h	/^  MONITOR_PURGE_TRUNCATE_HISTORY_COUNT,$/;"	e	enum:monitor_id_t
MONITOR_PURGE_TRUNCATE_HISTORY_MICROSECOND	include/srv0mon.h	/^  MONITOR_PURGE_TRUNCATE_HISTORY_MICROSECOND,$/;"	e	enum:monitor_id_t
MONITOR_RECLOCK_CREATED	include/srv0mon.h	/^  MONITOR_RECLOCK_CREATED,$/;"	e	enum:monitor_id_t
MONITOR_RECLOCK_GRANT_ATTEMPTS	include/srv0mon.h	/^  MONITOR_RECLOCK_GRANT_ATTEMPTS,$/;"	e	enum:monitor_id_t
MONITOR_RECLOCK_RELEASE_ATTEMPTS	include/srv0mon.h	/^  MONITOR_RECLOCK_RELEASE_ATTEMPTS,$/;"	e	enum:monitor_id_t
MONITOR_RECLOCK_REMOVED	include/srv0mon.h	/^  MONITOR_RECLOCK_REMOVED,$/;"	e	enum:monitor_id_t
MONITOR_RESET_ALL	include/srv0mon.h	844;"	d
MONITOR_RESET_ALL_VALUE	include/srv0mon.h	/^  MONITOR_RESET_ALL_VALUE, \/*!< Reset all values *\/$/;"	e	enum:mon_option_t
MONITOR_RESET_VALUE	include/srv0mon.h	/^  MONITOR_RESET_VALUE,     \/*!< Reset current values *\/$/;"	e	enum:mon_option_t
MONITOR_RSEG_ARRAY_PAGE_READ	include/srv0mon.h	/^  MONITOR_RSEG_ARRAY_PAGE_READ,$/;"	e	enum:monitor_id_t
MONITOR_RSEG_ARRAY_PAGE_WRITTEN	include/srv0mon.h	/^  MONITOR_RSEG_ARRAY_PAGE_WRITTEN,$/;"	e	enum:monitor_id_t
MONITOR_RSEG_CUR_SIZE	include/srv0mon.h	/^  MONITOR_RSEG_CUR_SIZE,$/;"	e	enum:monitor_id_t
MONITOR_RSEG_HISTORY_LEN	include/srv0mon.h	/^  MONITOR_RSEG_HISTORY_LEN,$/;"	e	enum:monitor_id_t
MONITOR_RW_COUNTER	buf/buf0buf.cc	351;"	d	file:
MONITOR_SAMPLED_PAGES_READ	include/srv0mon.h	/^  MONITOR_SAMPLED_PAGES_READ,$/;"	e	enum:monitor_id_t
MONITOR_SAMPLED_PAGES_SKIPPED	include/srv0mon.h	/^  MONITOR_SAMPLED_PAGES_SKIPPED,$/;"	e	enum:monitor_id_t
MONITOR_SAVE_LAST	include/srv0mon.h	874;"	d
MONITOR_SAVE_START	include/srv0mon.h	865;"	d
MONITOR_SCHEDULE_REFRESHES	include/srv0mon.h	/^  MONITOR_SCHEDULE_REFRESHES,$/;"	e	enum:monitor_id_t
MONITOR_SET	include/srv0mon.h	766;"	d
MONITOR_SET_DIFF	include/srv0mon.h	884;"	d
MONITOR_SET_MEMBER	include/srv0mon.h	/^  MONITOR_SET_MEMBER = 128,    \/*!< Being part of a "monitor set" *\/$/;"	e	enum:monitor_type_t
MONITOR_SET_OFF	include/srv0mon.h	634;"	d
MONITOR_SET_OWNER	include/srv0mon.h	/^  MONITOR_SET_OWNER = 64,      \/*!< Owner of "monitor set", a set of$/;"	e	enum:monitor_type_t
MONITOR_SET_SIMPLE	include/srv0mon.h	839;"	d
MONITOR_SET_START	include/srv0mon.h	628;"	d
MONITOR_SET_UPD_MAX_ONLY	include/srv0mon.h	834;"	d
MONITOR_SRV_BACKGROUND_DROP_TABLE_MICROSECOND	include/srv0mon.h	/^  MONITOR_SRV_BACKGROUND_DROP_TABLE_MICROSECOND,$/;"	e	enum:monitor_id_t
MONITOR_SRV_DICT_LRU_EVICT_COUNT	include/srv0mon.h	/^  MONITOR_SRV_DICT_LRU_EVICT_COUNT,$/;"	e	enum:monitor_id_t
MONITOR_SRV_DICT_LRU_MICROSECOND	include/srv0mon.h	/^  MONITOR_SRV_DICT_LRU_MICROSECOND,$/;"	e	enum:monitor_id_t
MONITOR_SRV_IBUF_MERGE_MICROSECOND	include/srv0mon.h	/^  MONITOR_SRV_IBUF_MERGE_MICROSECOND,$/;"	e	enum:monitor_id_t
MONITOR_SRV_MEM_VALIDATE_MICROSECOND	include/srv0mon.h	/^  MONITOR_SRV_MEM_VALIDATE_MICROSECOND,$/;"	e	enum:monitor_id_t
MONITOR_SRV_PURGE_MICROSECOND	include/srv0mon.h	/^  MONITOR_SRV_PURGE_MICROSECOND,$/;"	e	enum:monitor_id_t
MONITOR_STARTED	include/srv0mon.h	/^  MONITOR_STARTED = 1, \/*!< Monitor has been turned on *\/$/;"	e	enum:monitor_running_status
MONITOR_START_VALUE	include/srv0mon.h	621;"	d
MONITOR_STATUS	include/srv0mon.h	626;"	d
MONITOR_STOPPED	include/srv0mon.h	/^  MONITOR_STOPPED = 2  \/*!< Monitor has been turned off *\/$/;"	e	enum:monitor_running_status
MONITOR_SYSTEM_PAGE_READ	include/srv0mon.h	/^  MONITOR_SYSTEM_PAGE_READ,$/;"	e	enum:monitor_id_t
MONITOR_SYSTEM_PAGE_WRITTEN	include/srv0mon.h	/^  MONITOR_SYSTEM_PAGE_WRITTEN,$/;"	e	enum:monitor_id_t
MONITOR_TABLELOCK_CREATED	include/srv0mon.h	/^  MONITOR_TABLELOCK_CREATED,$/;"	e	enum:monitor_id_t
MONITOR_TABLELOCK_REMOVED	include/srv0mon.h	/^  MONITOR_TABLELOCK_REMOVED,$/;"	e	enum:monitor_id_t
MONITOR_TABLELOCK_WAIT	include/srv0mon.h	/^  MONITOR_TABLELOCK_WAIT,$/;"	e	enum:monitor_id_t
MONITOR_TABLE_CLOSE	include/srv0mon.h	/^  MONITOR_TABLE_CLOSE,$/;"	e	enum:monitor_id_t
MONITOR_TABLE_OPEN	include/srv0mon.h	/^  MONITOR_TABLE_OPEN,$/;"	e	enum:monitor_id_t
MONITOR_TABLE_REFERENCE	include/srv0mon.h	/^  MONITOR_TABLE_REFERENCE,$/;"	e	enum:monitor_id_t
MONITOR_TIMEOUT	include/srv0mon.h	/^  MONITOR_TIMEOUT,$/;"	e	enum:monitor_id_t
MONITOR_TRX_ACTIVE	include/srv0mon.h	/^  MONITOR_TRX_ACTIVE,$/;"	e	enum:monitor_id_t
MONITOR_TRX_ALLOCATIONS	include/srv0mon.h	/^  MONITOR_TRX_ALLOCATIONS,$/;"	e	enum:monitor_id_t
MONITOR_TRX_COMMIT_UNDO	include/srv0mon.h	/^  MONITOR_TRX_COMMIT_UNDO,$/;"	e	enum:monitor_id_t
MONITOR_TRX_NL_RO_COMMIT	include/srv0mon.h	/^  MONITOR_TRX_NL_RO_COMMIT,$/;"	e	enum:monitor_id_t
MONITOR_TRX_ON_LOG_NO_WAITS	include/srv0mon.h	/^  MONITOR_TRX_ON_LOG_NO_WAITS,$/;"	e	enum:monitor_id_t
MONITOR_TRX_ON_LOG_WAITS	include/srv0mon.h	/^  MONITOR_TRX_ON_LOG_WAITS,$/;"	e	enum:monitor_id_t
MONITOR_TRX_ON_LOG_WAIT_LOOPS	include/srv0mon.h	/^  MONITOR_TRX_ON_LOG_WAIT_LOOPS,$/;"	e	enum:monitor_id_t
MONITOR_TRX_ROLLBACK	include/srv0mon.h	/^  MONITOR_TRX_ROLLBACK,$/;"	e	enum:monitor_id_t
MONITOR_TRX_ROLLBACK_ACTIVE	include/srv0mon.h	/^  MONITOR_TRX_ROLLBACK_ACTIVE,$/;"	e	enum:monitor_id_t
MONITOR_TRX_ROLLBACK_SAVEPOINT	include/srv0mon.h	/^  MONITOR_TRX_ROLLBACK_SAVEPOINT,$/;"	e	enum:monitor_id_t
MONITOR_TRX_RO_COMMIT	include/srv0mon.h	/^  MONITOR_TRX_RO_COMMIT,$/;"	e	enum:monitor_id_t
MONITOR_TRX_RW_COMMIT	include/srv0mon.h	/^  MONITOR_TRX_RW_COMMIT,$/;"	e	enum:monitor_id_t
MONITOR_TRX_SYSTEM_PAGE_READ	include/srv0mon.h	/^  MONITOR_TRX_SYSTEM_PAGE_READ,$/;"	e	enum:monitor_id_t
MONITOR_TRX_SYSTEM_PAGE_WRITTEN	include/srv0mon.h	/^  MONITOR_TRX_SYSTEM_PAGE_WRITTEN,$/;"	e	enum:monitor_id_t
MONITOR_TURN_OFF	include/srv0mon.h	/^  MONITOR_TURN_OFF,        \/*!< Turn off the counter *\/$/;"	e	enum:mon_option_t
MONITOR_TURN_ON	include/srv0mon.h	/^  MONITOR_TURN_ON = 1,     \/*!< Turn on the counter *\/$/;"	e	enum:mon_option_t
MONITOR_UNDO_LOG_PAGE_READ	include/srv0mon.h	/^  MONITOR_UNDO_LOG_PAGE_READ,$/;"	e	enum:monitor_id_t
MONITOR_UNDO_LOG_PAGE_WRITTEN	include/srv0mon.h	/^  MONITOR_UNDO_LOG_PAGE_WRITTEN,$/;"	e	enum:monitor_id_t
MONITOR_UNDO_TRUNCATE	include/srv0mon.h	/^  MONITOR_UNDO_TRUNCATE,$/;"	e	enum:monitor_id_t
MONITOR_UNDO_TRUNCATE_COUNT	include/srv0mon.h	/^  MONITOR_UNDO_TRUNCATE_COUNT,$/;"	e	enum:monitor_id_t
MONITOR_UNDO_TRUNCATE_DONE_LOGGING_COUNT	include/srv0mon.h	/^  MONITOR_UNDO_TRUNCATE_DONE_LOGGING_COUNT,$/;"	e	enum:monitor_id_t
MONITOR_UNDO_TRUNCATE_MICROSECOND	include/srv0mon.h	/^  MONITOR_UNDO_TRUNCATE_MICROSECOND,$/;"	e	enum:monitor_id_t
MONITOR_UNDO_TRUNCATE_START_LOGGING_COUNT	include/srv0mon.h	/^  MONITOR_UNDO_TRUNCATE_START_LOGGING_COUNT,$/;"	e	enum:monitor_id_t
MONITOR_VALUE	include/srv0mon.h	605;"	d
MONITOR_VALUE_RESET	include/srv0mon.h	611;"	d
MONITOR_VALUE_SINCE_START	include/srv0mon.h	623;"	d
MONITOR_WAIT_STATS	srv/srv0mon.cc	75;"	d	file:
MONITOR_WAIT_STATS_EX	srv/srv0mon.cc	64;"	d	file:
MONITOR_WAIT_STATS_SIMPLE_WRAP	srv/srv0mon.cc	72;"	d	file:
MONITOR_WILDCARD_MATCH	include/srv0mon.h	534;"	d
MONITOR_XDES_PAGE_READ	include/srv0mon.h	/^  MONITOR_XDES_PAGE_READ,$/;"	e	enum:monitor_id_t
MONITOR_XDES_PAGE_WRITTEN	include/srv0mon.h	/^  MONITOR_XDES_PAGE_WRITTEN,$/;"	e	enum:monitor_id_t
MONITOR_ZBLOB2_PAGE_READ	include/srv0mon.h	/^  MONITOR_ZBLOB2_PAGE_READ,$/;"	e	enum:monitor_id_t
MONITOR_ZBLOB2_PAGE_WRITTEN	include/srv0mon.h	/^  MONITOR_ZBLOB2_PAGE_WRITTEN,$/;"	e	enum:monitor_id_t
MONITOR_ZBLOB_PAGE_READ	include/srv0mon.h	/^  MONITOR_ZBLOB_PAGE_READ,$/;"	e	enum:monitor_id_t
MONITOR_ZBLOB_PAGE_WRITTEN	include/srv0mon.h	/^  MONITOR_ZBLOB_PAGE_WRITTEN,$/;"	e	enum:monitor_id_t
MOVED	include/fil0fil.h	/^  MOVED,$/;"	m	class:Fil_state
MOVED_FILES_PRINT_THRESHOLD	handler/ha_innodb.cc	/^static const size_t MOVED_FILES_PRINT_THRESHOLD = 32;$/;"	v	file:
MTR_LOG_ALL	include/mtr0types.h	/^  MTR_LOG_ALL = 0,$/;"	e	enum:mtr_log_t
MTR_LOG_MODE_MAX	include/mtr0types.h	/^  MTR_LOG_MODE_MAX = 4$/;"	e	enum:mtr_log_t
MTR_LOG_NONE	include/mtr0types.h	/^  MTR_LOG_NONE = 1,$/;"	e	enum:mtr_log_t
MTR_LOG_NO_REDO	include/mtr0types.h	/^  MTR_LOG_NO_REDO = 2,$/;"	e	enum:mtr_log_t
MTR_LOG_SHORT_INSERTS	include/mtr0types.h	/^  MTR_LOG_SHORT_INSERTS = 3,$/;"	e	enum:mtr_log_t
MTR_MAGIC_N	include/mtr0types.h	279;"	d
MTR_MEMO_BUF_FIX	include/mtr0types.h	/^  MTR_MEMO_BUF_FIX = RW_NO_LATCH,$/;"	e	enum:mtr_memo_type_t
MTR_MEMO_MODIFY	include/mtr0types.h	/^  MTR_MEMO_MODIFY = 32,$/;"	e	enum:mtr_memo_type_t
MTR_MEMO_PAGE_SX_FIX	include/mtr0types.h	/^  MTR_MEMO_PAGE_SX_FIX = RW_SX_LATCH,$/;"	e	enum:mtr_memo_type_t
MTR_MEMO_PAGE_S_FIX	include/mtr0types.h	/^  MTR_MEMO_PAGE_S_FIX = RW_S_LATCH,$/;"	e	enum:mtr_memo_type_t
MTR_MEMO_PAGE_X_FIX	include/mtr0types.h	/^  MTR_MEMO_PAGE_X_FIX = RW_X_LATCH,$/;"	e	enum:mtr_memo_type_t
MTR_MEMO_SX_LOCK	include/mtr0types.h	/^  MTR_MEMO_SX_LOCK = 256$/;"	e	enum:mtr_memo_type_t
MTR_MEMO_S_LOCK	include/mtr0types.h	/^  MTR_MEMO_S_LOCK = 64,$/;"	e	enum:mtr_memo_type_t
MTR_MEMO_X_LOCK	include/mtr0types.h	/^  MTR_MEMO_X_LOCK = 128,$/;"	e	enum:mtr_memo_type_t
MTR_STATE_ACTIVE	include/mtr0types.h	/^  MTR_STATE_ACTIVE = 12231,$/;"	e	enum:mtr_state_t
MTR_STATE_COMMITTED	include/mtr0types.h	/^  MTR_STATE_COMMITTED = 34676$/;"	e	enum:mtr_state_t
MTR_STATE_COMMITTING	include/mtr0types.h	/^  MTR_STATE_COMMITTING = 56456,$/;"	e	enum:mtr_state_t
MTR_STATE_INIT	include/mtr0types.h	/^  MTR_STATE_INIT = 0,$/;"	e	enum:mtr_state_t
MUTEX_MAGIC_N	include/sync0policy.h	45;"	d
MUTEX_NOWAIT	srv/srv0srv.cc	379;"	d	file:
MUTEX_STATE_LOCKED	include/sync0types.h	/^  MUTEX_STATE_LOCKED = 1,$/;"	e	enum:mutex_state_t
MUTEX_STATE_UNLOCKED	include/sync0types.h	/^  MUTEX_STATE_UNLOCKED = 0,$/;"	e	enum:mutex_state_t
MUTEX_STATE_WAITERS	include/sync0types.h	/^  MUTEX_STATE_WAITERS = 2$/;"	e	enum:mutex_state_t
MUTEX_TYPE	include/ut0mutex.h	92;"	d
MVCC	include/read0read.h	/^class MVCC {$/;"	c
MVCC	read/read0read.cc	/^MVCC::MVCC(ulint size) {$/;"	f	class:MVCC
MYSQL_FETCH_CACHE_SIZE	include/row0mysql.h	542;"	d
MYSQL_FETCH_CACHE_THRESHOLD	include/row0mysql.h	544;"	d
MY_ATTRIBUTE	fil/fil0fil.cc	/^      MY_ATTRIBUTE((warn_unused_result)) {$/;"	f	class:Fil_shard
MY_ATTRIBUTE	fil/fil0fil.cc	/^      MY_ATTRIBUTE((warn_unused_result)) {$/;"	f	class:Fil_system
MY_ATTRIBUTE	fil/fil0fil.cc	/^      MY_ATTRIBUTE((warn_unused_result)) {$/;"	f	class:Tablespace_dirs
MY_ATTRIBUTE	fil/fil0fil.cc	/^      MY_ATTRIBUTE((warn_unused_result)) {$/;"	f	class:Tablespace_files
MY_ATTRIBUTE	fil/fil0fil.cc	/^  Names *find_by_id(space_id_t space_id) MY_ATTRIBUTE((warn_unused_result)) {$/;"	f	class:Tablespace_files
MY_ATTRIBUTE	fil/fil0fil.cc	/^  Result find_by_id(space_id_t space_id) MY_ATTRIBUTE((warn_unused_result)) {$/;"	f	class:Tablespace_dirs
MY_ATTRIBUTE	fil/fil0fil.cc	/^  bool erase_path(space_id_t space_id) MY_ATTRIBUTE((warn_unused_result)) {$/;"	f	class:Fil_system
MY_ATTRIBUTE	fil/fil0fil.cc	/^  bool erase_path(space_id_t space_id) MY_ATTRIBUTE((warn_unused_result)) {$/;"	f	class:Tablespace_dirs
MY_ATTRIBUTE	fil/fil0fil.cc	/^  bool erase_path(space_id_t space_id) MY_ATTRIBUTE((warn_unused_result)) {$/;"	f	class:Tablespace_files
MY_ATTRIBUTE	fil/fil0fil.cc	/^  bool mutex_owned_all() const MY_ATTRIBUTE((warn_unused_result)) {$/;"	f	class:Fil_system
MY_ATTRIBUTE	include/btr0bulk.h	/^  dberr_t insert(dtuple_t *tuple) MY_ATTRIBUTE((warn_unused_result)) {$/;"	f	class:BtrBulk
MY_ATTRIBUTE	include/buf0buf.h	/^  uint16_t get_dblwr_batch_id() const MY_ATTRIBUTE((warn_unused_result)) {$/;"	f	class:Cache_hint::buf_page_t
MY_ATTRIBUTE	include/dyn0buf.h	/^    byte *begin() MY_ATTRIBUTE((warn_unused_result)) { return (m_data); }$/;"	f	class:dyn_buf_t::block_t
MY_ATTRIBUTE	include/dyn0buf.h	/^    byte *end() MY_ATTRIBUTE((warn_unused_result)) {$/;"	f	class:dyn_buf_t::block_t
MY_ATTRIBUTE	include/dyn0buf.h	/^    byte *start() MY_ATTRIBUTE((warn_unused_result)) { return (m_data); }$/;"	f	class:dyn_buf_t::block_t
MY_ATTRIBUTE	include/dyn0buf.h	/^    const byte *begin() const MY_ATTRIBUTE((warn_unused_result)) {$/;"	f	class:dyn_buf_t::block_t
MY_ATTRIBUTE	include/dyn0buf.h	/^    const byte *end() const MY_ATTRIBUTE((warn_unused_result)) {$/;"	f	class:dyn_buf_t::block_t
MY_ATTRIBUTE	include/dyn0buf.h	/^    ulint used() const MY_ATTRIBUTE((warn_unused_result)) {$/;"	f	class:dyn_buf_t::block_t
MY_ATTRIBUTE	include/dyn0buf.h	/^  block_t *front() MY_ATTRIBUTE((warn_unused_result)) {$/;"	f	class:dyn_buf_t
MY_ATTRIBUTE	include/dyn0buf.h	/^  bool is_small() const MY_ATTRIBUTE((warn_unused_result)) {$/;"	f	class:dyn_buf_t
MY_ATTRIBUTE	include/dyn0buf.h	/^  byte *open(ulint size) MY_ATTRIBUTE((warn_unused_result)) {$/;"	f	class:dyn_buf_t
MY_ATTRIBUTE	include/dyn0buf.h	/^  ulint size() const MY_ATTRIBUTE((warn_unused_result)) {$/;"	f	class:dyn_buf_t
MY_ATTRIBUTE	include/fil0fil.h	/^      MY_ATTRIBUTE((warn_unused_result)) {$/;"	f	class:Fil_path
MY_ATTRIBUTE	include/fil0fil.h	/^  bool is_absolute_path() const MY_ATTRIBUTE((warn_unused_result)) {$/;"	f	class:Fil_path
MY_ATTRIBUTE	include/fil0fil.h	/^  const char *operator()() const MY_ATTRIBUTE((warn_unused_result)) {$/;"	f	class:Fil_path
MY_ATTRIBUTE	include/fil0fil.h	/^  const page_size_t &get_page_size() const MY_ATTRIBUTE((warn_unused_result)) {$/;"	f	struct:PageCallback
MY_ATTRIBUTE	include/fil0fil.h	/^  const std::string &path() const MY_ATTRIBUTE((warn_unused_result)) {$/;"	f	class:Fil_path
MY_ATTRIBUTE	include/fil0fil.h	/^  const std::string abs_path() const MY_ATTRIBUTE((warn_unused_result)) {$/;"	f	class:Fil_path
MY_ATTRIBUTE	include/fil0fil.h	/^  operator const char *() const MY_ATTRIBUTE((warn_unused_result)) {$/;"	f	class:Fil_path
MY_ATTRIBUTE	include/fil0fil.h	/^  size_t abs_len() const MY_ATTRIBUTE((warn_unused_result)) {$/;"	f	class:Fil_path
MY_ATTRIBUTE	include/fil0fil.h	/^  size_t len() const MY_ATTRIBUTE((warn_unused_result)) {$/;"	f	class:Fil_path
MY_ATTRIBUTE	include/mtr0mtr.h	/^  FlushObserver *get_flush_observer() const MY_ATTRIBUTE((warn_unused_result)) {$/;"	f	struct:mtr_t
MY_ATTRIBUTE	include/mtr0mtr.h	/^  bool has_committed() const MY_ATTRIBUTE((warn_unused_result)) {$/;"	f	struct:mtr_t
MY_ATTRIBUTE	include/mtr0mtr.h	/^  bool has_modifications() const MY_ATTRIBUTE((warn_unused_result)) {$/;"	f	struct:mtr_t
MY_ATTRIBUTE	include/mtr0mtr.h	/^  bool is_active() const MY_ATTRIBUTE((warn_unused_result)) {$/;"	f	struct:mtr_t
MY_ATTRIBUTE	include/mtr0mtr.h	/^  bool is_dirty() const MY_ATTRIBUTE((warn_unused_result)) {$/;"	f	struct:mtr_t
MY_ATTRIBUTE	include/mtr0mtr.h	/^  bool is_inside_ibuf() const MY_ATTRIBUTE((warn_unused_result)) {$/;"	f	struct:mtr_t
MY_ATTRIBUTE	include/mtr0mtr.h	/^  const mtr_buf_t *get_log() const MY_ATTRIBUTE((warn_unused_result)) {$/;"	f	struct:mtr_t
MY_ATTRIBUTE	include/mtr0mtr.h	/^  const mtr_buf_t *get_memo() const MY_ATTRIBUTE((warn_unused_result)) {$/;"	f	struct:mtr_t
MY_ATTRIBUTE	include/mtr0mtr.h	/^  lsn_t commit_lsn() const MY_ATTRIBUTE((warn_unused_result)) {$/;"	f	struct:mtr_t
MY_ATTRIBUTE	include/mtr0mtr.h	/^  mtr_buf_t *get_log() MY_ATTRIBUTE((warn_unused_result)) {$/;"	f	struct:mtr_t
MY_ATTRIBUTE	include/mtr0mtr.h	/^  mtr_buf_t *get_memo() MY_ATTRIBUTE((warn_unused_result)) {$/;"	f	struct:mtr_t
MY_ATTRIBUTE	include/mtr0mtr.h	/^  ulint get_savepoint() const MY_ATTRIBUTE((warn_unused_result)) {$/;"	f	struct:mtr_t
MY_ATTRIBUTE	include/os0file.h	/^      MY_ATTRIBUTE((warn_unused_result)) {$/;"	f	class:IORequest
MY_ATTRIBUTE	include/os0file.h	/^  Compression compression_algorithm() const MY_ATTRIBUTE((warn_unused_result)) {$/;"	f	class:IORequest
MY_ATTRIBUTE	include/os0file.h	/^  Encryption encryption_algorithm() const MY_ATTRIBUTE((warn_unused_result)) {$/;"	f	class:IORequest
MY_ATTRIBUTE	include/os0file.h	/^  bool ignore_missing() const MY_ATTRIBUTE((warn_unused_result)) {$/;"	f	class:IORequest
MY_ATTRIBUTE	include/os0file.h	/^  bool is_compressed() const MY_ATTRIBUTE((warn_unused_result)) {$/;"	f	class:IORequest
MY_ATTRIBUTE	include/os0file.h	/^  bool is_compression_enabled() const MY_ATTRIBUTE((warn_unused_result)) {$/;"	f	class:IORequest
MY_ATTRIBUTE	include/os0file.h	/^  bool is_dblwr() const MY_ATTRIBUTE((warn_unused_result)) {$/;"	f	class:IORequest
MY_ATTRIBUTE	include/os0file.h	/^  bool is_encrypted() const MY_ATTRIBUTE((warn_unused_result)) {$/;"	f	class:IORequest
MY_ATTRIBUTE	include/os0file.h	/^  bool is_log() const MY_ATTRIBUTE((warn_unused_result)) {$/;"	f	class:IORequest
MY_ATTRIBUTE	include/os0file.h	/^  bool is_read() const MY_ATTRIBUTE((warn_unused_result)) {$/;"	f	class:IORequest
MY_ATTRIBUTE	include/os0file.h	/^  bool is_row_log() const MY_ATTRIBUTE((warn_unused_result)) {$/;"	f	class:IORequest
MY_ATTRIBUTE	include/os0file.h	/^  bool is_wake() const MY_ATTRIBUTE((warn_unused_result)) {$/;"	f	class:IORequest
MY_ATTRIBUTE	include/os0file.h	/^  bool is_write() const MY_ATTRIBUTE((warn_unused_result)) {$/;"	f	class:IORequest
MY_ATTRIBUTE	include/os0file.h	/^  bool punch_hole() const MY_ATTRIBUTE((warn_unused_result)) {$/;"	f	class:IORequest
MY_ATTRIBUTE	include/os0file.h	/^  bool validate() const MY_ATTRIBUTE((warn_unused_result)) {$/;"	f	class:IORequest
MY_ATTRIBUTE	include/os0file.h	/^  static bool ignore_missing(ulint type) MY_ATTRIBUTE((warn_unused_result)) {$/;"	f	class:IORequest
MY_ATTRIBUTE	include/os0file.h	/^  ulint block_size() const MY_ATTRIBUTE((warn_unused_result)) {$/;"	f	class:IORequest
MY_ATTRIBUTE	include/read0types.h	/^      MY_ATTRIBUTE((warn_unused_result)) {$/;"	f	class:ReadView
MY_ATTRIBUTE	include/row0pread-adapter.h	/^      MY_ATTRIBUTE((warn_unused_result)) {$/;"	f	class:Parallel_reader_adapter
MY_ATTRIBUTE	include/row0pread-adapter.h	/^  size_t pending(Thread_ctx *ctx) const MY_ATTRIBUTE((warn_unused_result)) {$/;"	f	class:Parallel_reader_adapter
MY_ATTRIBUTE	include/row0pread-histogram.h	/^  bool is_error_set() const MY_ATTRIBUTE((warn_unused_result)) {$/;"	f	class:Histogram_sampler
MY_ATTRIBUTE	include/row0pread.h	/^  bool is_active() const MY_ATTRIBUTE((warn_unused_result)) {$/;"	f
MY_ATTRIBUTE	include/row0pread.h	/^  bool is_error_set() const MY_ATTRIBUTE((warn_unused_result)) {$/;"	f
MY_ATTRIBUTE	include/row0pread.h	/^  bool is_tree_empty() const MY_ATTRIBUTE((warn_unused_result)) {$/;"	f
MY_ATTRIBUTE	include/row0pread.h	/^  dberr_t get_error_state() const MY_ATTRIBUTE((warn_unused_result)) {$/;"	f
MY_ATTRIBUTE	include/row0pread.h	/^  size_t max_threads() const MY_ATTRIBUTE((warn_unused_result)) {$/;"	f
MY_ATTRIBUTE	include/ut0mpmcbq.h	/^  bool dequeue(T &data) MY_ATTRIBUTE((warn_unused_result)) {$/;"	f	class:mpmc_bq
MY_ATTRIBUTE	include/ut0mpmcbq.h	/^  bool empty() const MY_ATTRIBUTE((warn_unused_result)) {$/;"	f	class:mpmc_bq
MY_ATTRIBUTE	include/ut0mpmcbq.h	/^  bool enqueue(T const &data) MY_ATTRIBUTE((warn_unused_result)) {$/;"	f	class:mpmc_bq
MY_ATTRIBUTE	include/ut0mpmcbq.h	/^  size_t capacity() const MY_ATTRIBUTE((warn_unused_result)) {$/;"	f	class:mpmc_bq
MY_ATTRIBUTE	log/log0meb.cc	/^      MY_ATTRIBUTE((warn_unused_result)) {$/;"	f	class:meb::Block
MY_ATTRIBUTE	log/log0meb.cc	/^  bool full() const MY_ATTRIBUTE((warn_unused_result)) {$/;"	f	class:meb::Block
MY_ATTRIBUTE	log/log0meb.cc	/^  bool get_is_final_block() const MY_ATTRIBUTE((warn_unused_result)) {$/;"	f	class:meb::Block
MY_ATTRIBUTE	log/log0meb.cc	/^  const byte *get_queue_block() const MY_ATTRIBUTE((warn_unused_result)) {$/;"	f	class:meb::Block
MY_ATTRIBUTE	os/os0file.cc	/^  HANDLE *handles(ulint segment) MY_ATTRIBUTE((warn_unused_result)) {$/;"	f	class:AIO
MY_ATTRIBUTE	os/os0file.cc	/^  Slot *at(ulint i) MY_ATTRIBUTE((warn_unused_result)) {$/;"	f	class:AIO
MY_ATTRIBUTE	os/os0file.cc	/^  Slot *first_slot() MY_ATTRIBUTE((warn_unused_result)) {$/;"	f	class:SimulatedAIOHandler
MY_ATTRIBUTE	os/os0file.cc	/^  bool is_empty() const MY_ATTRIBUTE((warn_unused_result)) {$/;"	f	class:AIO
MY_ATTRIBUTE	os/os0file.cc	/^  bool is_mutex_owned() const MY_ATTRIBUTE((warn_unused_result)) {$/;"	f	class:AIO
MY_ATTRIBUTE	os/os0file.cc	/^  const Slot *at(ulint i) const MY_ATTRIBUTE((warn_unused_result)) {$/;"	f	class:AIO
MY_ATTRIBUTE	os/os0file.cc	/^  io_context *io_ctx(ulint segment) MY_ATTRIBUTE((warn_unused_result)) {$/;"	f	class:AIO
MY_ATTRIBUTE	os/os0file.cc	/^  io_event *io_events(ulint index) MY_ATTRIBUTE((warn_unused_result)) {$/;"	f	class:AIO
MY_ATTRIBUTE	os/os0file.cc	/^  static AIO *sync_array() MY_ATTRIBUTE((warn_unused_result)) { return s_sync; }$/;"	f	class:AIO
MY_ATTRIBUTE	os/os0file.cc	/^  static bool is_read(const AIO *aio) MY_ATTRIBUTE((warn_unused_result)) {$/;"	f	class:AIO
MY_ATTRIBUTE	os/os0file.cc	/^  ulint allocate_buffer() MY_ATTRIBUTE((warn_unused_result)) {$/;"	f	class:SimulatedAIOHandler
MY_ATTRIBUTE	os/os0file.cc	/^  ulint get_n_segments() const MY_ATTRIBUTE((warn_unused_result)) {$/;"	f	class:AIO
MY_ATTRIBUTE	os/os0file.cc	/^  ulint slots_per_segment() const MY_ATTRIBUTE((warn_unused_result)) {$/;"	f	class:AIO
Metadata	include/detail/ut0new.h	/^  struct Metadata {$/;"	s	struct:ut::detail::Aligned_alloc
Metadata	include/detail/ut0new.h	/^  struct Metadata {$/;"	s	struct:ut::detail::Aligned_alloc_arr
MetadataRecover	include/log0recv.h	/^class MetadataRecover {$/;"	c
Mlog_record	include/log0recv.h	/^  struct Mlog_record {$/;"	s	struct:recv_sys_t
Mtr_memo_contains	mtr/mtr0mtr.cc	/^  Mtr_memo_contains(const mtr_t *mtr, mtr_memo_type_t type)$/;"	f	struct:Mtr_memo_contains
Mtr_memo_contains	mtr/mtr0mtr.cc	/^struct Mtr_memo_contains {$/;"	s	file:
Multi_value_entry_builder	include/row0row.h	/^  Multi_value_entry_builder(dict_index_t *index, dtuple_t *entry, bool selected)$/;"	f	class:Multi_value_entry_builder
Multi_value_entry_builder	include/row0row.h	/^class Multi_value_entry_builder {$/;"	c
Multi_value_entry_builder_insert	include/row0row.h	/^  Multi_value_entry_builder_insert(dict_index_t *index, dtuple_t *entry)$/;"	f	class:Multi_value_entry_builder_insert
Multi_value_entry_builder_insert	include/row0row.h	/^class Multi_value_entry_builder_insert : public Multi_value_entry_builder {$/;"	c
Multi_value_entry_builder_normal	include/row0row.h	/^  Multi_value_entry_builder_normal(const dtuple_t *row, const row_ext_t *ext,$/;"	f	class:Multi_value_entry_builder_normal
Multi_value_entry_builder_normal	include/row0row.h	/^class Multi_value_entry_builder_normal : public Multi_value_entry_builder {$/;"	c
Multi_value_logger	include/data0data.h	/^  Multi_value_logger(const multi_value_data *mv_data, uint32_t field_len)$/;"	f	class:Multi_value_logger
Multi_value_logger	include/data0data.h	/^class Multi_value_logger {$/;"	c
Mutex	include/sync0types.h	/^  typedef OSMutex Mutex;$/;"	t	class:LatchCounter
Mutex	sync/sync0debug.cc	/^  typedef OSMutex Mutex;$/;"	t	struct:CreateTracker	file:
Mutex	sync/sync0debug.cc	/^  typedef OSMutex Mutex;$/;"	t	struct:LatchDebug	file:
MutexDebug	include/sync0policy.h	/^class MutexDebug {$/;"	c
MutexMonitor	include/ut0mutex.h	/^  MutexMonitor() {}$/;"	f	class:MutexMonitor
MutexMonitor	include/ut0mutex.h	/^class MutexMonitor {$/;"	c
MutexPolicy	include/ib0mutex.h	/^  typedef Policy<OSTrackMutex> MutexPolicy;$/;"	t	struct:OSTrackMutex
MutexPolicy	include/ib0mutex.h	/^  typedef Policy<TTASFutexMutex> MutexPolicy;$/;"	t	struct:TTASFutexMutex
MutexType	include/sync0policy.h	/^  typedef Mutex MutexType;$/;"	t	class:BlockMutexPolicy
MutexType	include/sync0policy.h	/^  typedef Mutex MutexType;$/;"	t	struct:GenericPolicy
MySQL_datadir_path	fil/fil0fil.cc	/^Fil_path MySQL_datadir_path;$/;"	v
MySQL_row	include/row0pread-adapter.h	/^  struct MySQL_row {$/;"	s	class:Parallel_reader_adapter
MySQL_undo_path	fil/fil0fil.cc	/^Fil_path MySQL_undo_path;$/;"	v
MySQL_undo_path_is_unique	fil/fil0fil.cc	/^bool MySQL_undo_path_is_unique;$/;"	v
NANOSECS_IN_A_SECOND	os/os0event.cc	/^static const uint64_t NANOSECS_IN_A_SECOND = 1000 * MICROSECS_IN_A_SECOND;$/;"	v	file:
NEG	include/pars0grm.h	/^  NEG = 349$/;"	e	enum:yytokentype
NEG	pars/pars0grm.cc	/^    NEG = 349$/;"	e	enum:yytokentype	file:
NEVER_DONE	include/os0once.h	/^  static const state_t NEVER_DONE = 0;$/;"	m	class:os_once
NEW_FT_INFO	handler/ha_innodb.h	/^} NEW_FT_INFO;$/;"	t	typeref:struct:new_ft_info
NEW_PATH	fil/fil0fil.cc	/^  NEW_PATH$/;"	e	enum:dd_fil::__anon3	file:
NOLOG_MAX_FLUSH_LOOP	include/mtr0mtr.h	/^    static constexpr uint32_t NOLOG_MAX_FLUSH_LOOP = 5;$/;"	m	class:mtr_t::Logging
NONE	include/fil0fil.h	/^enum encryption_op_type { ENCRYPTION = 1, DECRYPTION = 2, NONE };$/;"	e	enum:encryption_op_type
NONE	include/os0enc.h	/^    NONE = 0,$/;"	e	enum:Encryption::Type
NONE	include/trx0undo.h	/^    NONE,$/;"	m	class:trx_undo_t::Gtid_storage
NORMAL	include/buf0buf.h	/^  NORMAL,$/;"	m	class:Page_fetch
NORMAL	include/os0file.h	/^  NORMAL = 21,$/;"	m	class:AIO_mode
NOT_FOUND	include/ut0lock_free_hash.h	/^  static const int64_t NOT_FOUND = INT64_MAX;$/;"	m	class:ut_hash_interface_t
NOT_IN_USE	include/lock0latches.h	/^    static constexpr size_t NOT_IN_USE = std::numeric_limits<size_t>::max();$/;"	m	class:locksys::Latches::Unique_sharded_rw_lock
NOT_STARTED	include/clone0monitor.h	/^  enum { NOT_STARTED = 0, ESTIMATE_WORK, COMPLETE_WORK } m_cur_phase;$/;"	e	enum:Clone_Monitor::__anon7
NOT_STARTED	include/os0thread.h	/^  enum class State { INVALID, NOT_STARTED, ALLOWED_TO_START, STARTED, STOPPED };$/;"	m	class:IB_thread::State
NOT_STARTED	include/ut0stage.h	/^    NOT_STARTED = 0,$/;"	e	enum:ut_stage_alter_t::__anon13
NOT_STARTED	include/ut0stage.h	/^    NOT_STARTED = 0,$/;"	e	enum:ut_stage_alter_ts::__anon14
NO_COMPRESSION	include/os0file.h	/^    NO_COMPRESSION = 512,$/;"	e	enum:IORequest::__anon5
NO_EXT	include/fil0fil.h	/^  NO_EXT = 0,$/;"	e	enum:ib_file_suffix
NO_LATCH	include/buf0buf.h	/^  NO_LATCH,$/;"	m	class:Page_fetch
NUMA_MEMPOLICY_INTERLEAVE_IN_SCOPE	buf/buf0buf.cc	120;"	d	file:
NUMA_MEMPOLICY_INTERLEAVE_IN_SCOPE	buf/buf0buf.cc	122;"	d	file:
NUM_BITS_ULINT	include/srv0mon.h	570;"	d
NUM_MONITOR	include/srv0mon.h	/^  NUM_MONITOR$/;"	e	enum:monitor_id_t
NUM_RETRIES_ON_PARTIAL_IO	os/os0file.cc	/^static const ulint NUM_RETRIES_ON_PARTIAL_IO = 10;$/;"	v	file:
N_COLS	include/dict0dict.h	/^  static constexpr unsigned N_COLS = N_USER_COLS + DATA_N_SYS_COLS;$/;"	m	class:DDTableBuffer
N_DIFF_REQUIRED	dict/dict0stats.cc	138;"	d	file:
N_FIELDS	include/dict0dict.h	/^  static constexpr unsigned N_FIELDS = METADATA_FIELD_NO + 1;$/;"	m	class:DDTableBuffer
N_PAGES_READ_LIMIT	btr/btr0cur.cc	4924;"	d	file:
N_ROWS_COL_NO	include/dict0stats.h	/^  static constexpr unsigned N_ROWS_COL_NO = 3;$/;"	m	class:TableStatsRecord
N_SAMPLE_PAGES	dict/dict0stats.cc	130;"	d	file:
N_USER_COLS	include/dict0dict.h	/^  static constexpr unsigned N_USER_COLS = METADATA_COL_NO + 1;$/;"	m	class:DDTableBuffer
NoPolicy	include/sync0policy.h	/^  NoPolicy() {}$/;"	f	struct:NoPolicy
NoPolicy	include/sync0policy.h	/^struct NoPolicy {$/;"	s
Non_copyable	include/ut0class_life_cycle.h	/^class Non_copyable {$/;"	c	namespace:ut
NullElement	include/trx0purge.h	/^  static const TrxUndoRsegs NullElement;$/;"	m	struct:TrxUndoRsegsIterator
NullValidate	include/ut0lst.h	/^struct NullValidate {$/;"	s
OBJECT_ID	fil/fil0fil.cc	/^  OBJECT_ID,$/;"	e	enum:dd_fil::__anon3	file:
OFFSET_BIG_FREE_LEN	include/lob0impl.h	/^  static const ulint OFFSET_BIG_FREE_LEN = OFFSET_TOTAL_FREE_LEN + 2;$/;"	m	struct:lob::z_frag_entry_t
OFFSET_DATA	include/lob0impl.h	/^  static const ulint OFFSET_DATA = OFFSET_FRAG_ID + 2;$/;"	m	struct:lob::frag_node_t
OFFSET_DATA_BEGIN	include/lob0impl.h	/^  static const ulint OFFSET_DATA_BEGIN = OFFSET_TRX_ID + 6;$/;"	m	struct:lob::z_data_page_t
OFFSET_DATA_LEN	include/lob0first.h	/^  static const ulint OFFSET_DATA_LEN = OFFSET_LAST_UNDO_NO + 4;$/;"	m	struct:lob::first_page_t
OFFSET_DATA_LEN	include/lob0impl.h	/^  static const ulint OFFSET_DATA_LEN = OFFSET_VERSION + 1;$/;"	m	struct:lob::z_data_page_t
OFFSET_DATA_LEN	include/lob0index.h	/^  static const ulint OFFSET_DATA_LEN = OFFSET_PAGE_NO + 4;$/;"	m	struct:lob::index_entry_t
OFFSET_DATA_LEN	include/lob0pages.h	/^  static const ulint OFFSET_DATA_LEN = OFFSET_VERSION + 1;$/;"	m	struct:lob::data_page_t
OFFSET_DATA_LEN	include/zlob0first.h	/^  static const ulint OFFSET_DATA_LEN = OFFSET_LAST_UNDO_NO + 4;$/;"	m	struct:lob::z_first_page_t
OFFSET_DATA_LEN	include/zlob0index.h	/^  static const ulint OFFSET_DATA_LEN = OFFSET_Z_FRAG_ID + 2;$/;"	m	struct:lob::z_index_entry_t
OFFSET_FIRST	include/lob0impl.h	/^  static const ulint OFFSET_FIRST = 4;$/;"	m	struct:lob::plist_base_node_t
OFFSET_FLAGS	include/lob0first.h	/^  static const ulint OFFSET_FLAGS = FIL_PAGE_DATA + 1;$/;"	m	struct:lob::first_page_t
OFFSET_FLAGS	include/zlob0first.h	/^  static const ulint OFFSET_FLAGS = FIL_PAGE_DATA + 1;$/;"	m	struct:lob::z_first_page_t
OFFSET_FRAGS_BEGIN	include/lob0impl.h	/^  static const ulint OFFSET_FRAGS_BEGIN =$/;"	m	struct:lob::z_frag_page_t
OFFSET_FRAGS_LIST	include/lob0impl.h	/^  static const ulint OFFSET_FRAGS_LIST =$/;"	m	struct:lob::z_frag_page_t
OFFSET_FRAG_ENTRY	include/lob0impl.h	/^  static const ulint OFFSET_FRAG_ENTRY = OFFSET_VERSION + 1;$/;"	m	struct:lob::z_frag_page_t
OFFSET_FRAG_ID	include/lob0impl.h	/^  static const ulint OFFSET_FRAG_ID = OFFSET_LEN + 2;$/;"	m	struct:lob::frag_node_t
OFFSET_FRAG_LIST	include/zlob0first.h	/^  static const ulint OFFSET_FRAG_LIST =$/;"	m	struct:lob::z_first_page_t
OFFSET_FRAG_NODES_PAGE_NO	include/zlob0first.h	/^  static const ulint OFFSET_FRAG_NODES_PAGE_NO = OFFSET_INDEX_PAGE_NO + 4;$/;"	m	struct:lob::z_first_page_t
OFFSET_FREE_FRAG_LIST	include/zlob0first.h	/^  static const ulint OFFSET_FREE_FRAG_LIST =$/;"	m	struct:lob::z_first_page_t
OFFSET_FREE_LIST	include/lob0impl.h	/^  static const ulint OFFSET_FREE_LIST = OFFSET_FRAG_ENTRY + FIL_ADDR_SIZE;$/;"	m	struct:lob::z_frag_page_t
OFFSET_FREE_LIST	include/zlob0first.h	/^  static const ulint OFFSET_FREE_LIST = OFFSET_FRAG_NODES_PAGE_NO + 4;$/;"	m	struct:lob::z_first_page_t
OFFSET_INDEX_BEGIN	include/zlob0first.h	/^  static const ulint OFFSET_INDEX_BEGIN =$/;"	m	struct:lob::z_first_page_t
OFFSET_INDEX_FREE_NODES	include/lob0first.h	/^  static const ulint OFFSET_INDEX_FREE_NODES =$/;"	m	struct:lob::first_page_t
OFFSET_INDEX_LIST	include/lob0first.h	/^  static const ulint OFFSET_INDEX_LIST = OFFSET_TRX_ID + 6;$/;"	m	struct:lob::first_page_t
OFFSET_INDEX_LIST	include/zlob0first.h	/^  static const ulint OFFSET_INDEX_LIST = OFFSET_FREE_LIST + FLST_BASE_NODE_SIZE;$/;"	m	struct:lob::z_first_page_t
OFFSET_INDEX_PAGE_NO	include/zlob0first.h	/^  static const ulint OFFSET_INDEX_PAGE_NO = OFFSET_TRX_ID + 6;$/;"	m	struct:lob::z_first_page_t
OFFSET_LAST	include/lob0impl.h	/^  static const ulint OFFSET_LAST = 6;$/;"	m	struct:lob::plist_base_node_t
OFFSET_LAST_TRX_ID	include/lob0first.h	/^  static const ulint OFFSET_LAST_TRX_ID = OFFSET_LOB_VERSION + 4;$/;"	m	struct:lob::first_page_t
OFFSET_LAST_TRX_ID	include/zlob0first.h	/^  static const ulint OFFSET_LAST_TRX_ID = OFFSET_LOB_VERSION + 4;$/;"	m	struct:lob::z_first_page_t
OFFSET_LAST_UNDO_NO	include/lob0first.h	/^  static const ulint OFFSET_LAST_UNDO_NO = OFFSET_LAST_TRX_ID + 6;$/;"	m	struct:lob::first_page_t
OFFSET_LAST_UNDO_NO	include/zlob0first.h	/^  static const ulint OFFSET_LAST_UNDO_NO = OFFSET_LAST_TRX_ID + 6;$/;"	m	struct:lob::z_first_page_t
OFFSET_LEN	include/lob0impl.h	/^  static const ulint OFFSET_LEN = 0;$/;"	m	struct:lob::plist_base_node_t
OFFSET_LEN	include/lob0impl.h	/^  static const ulint OFFSET_LEN = plist_node_t::SIZE;$/;"	m	struct:lob::frag_node_t
OFFSET_LOB_VERSION	include/lob0first.h	/^  static const uint32_t OFFSET_LOB_VERSION = OFFSET_FLAGS + 1;$/;"	m	struct:lob::first_page_t
OFFSET_LOB_VERSION	include/lob0index.h	/^  static const ulint OFFSET_LOB_VERSION = OFFSET_DATA_LEN + 4;$/;"	m	struct:lob::index_entry_t
OFFSET_LOB_VERSION	include/zlob0first.h	/^  static const uint32_t OFFSET_LOB_VERSION = OFFSET_FLAGS + 1;$/;"	m	struct:lob::z_first_page_t
OFFSET_LOB_VERSION	include/zlob0index.h	/^  static const ulint OFFSET_LOB_VERSION = OFFSET_ZDATA_LEN + 4;$/;"	m	struct:lob::z_index_entry_t
OFFSET_NEXT	include/lob0impl.h	/^  static const uint16_t OFFSET_NEXT = 2;$/;"	m	class:lob::plist_node_t
OFFSET_NEXT	include/lob0impl.h	/^  static const ulint OFFSET_NEXT = OFFSET_PREV + FIL_ADDR_SIZE;$/;"	m	struct:lob::z_frag_entry_t
OFFSET_NEXT	include/lob0index.h	/^  static const ulint OFFSET_NEXT = OFFSET_PREV + FIL_ADDR_SIZE;$/;"	m	struct:lob::index_entry_t
OFFSET_NEXT	include/zlob0index.h	/^  static const ulint OFFSET_NEXT = OFFSET_PREV + FIL_ADDR_SIZE;$/;"	m	struct:lob::z_index_entry_t
OFFSET_N_FRAGS	include/lob0impl.h	/^  static const ulint OFFSET_N_FRAGS = OFFSET_PAGE_NO + 4;$/;"	m	struct:lob::z_frag_entry_t
OFFSET_PAGE_DIR_ENTRY_COUNT	include/lob0impl.h	/^  static const ulint OFFSET_PAGE_DIR_ENTRY_COUNT = FIL_PAGE_DATA_END + 2;$/;"	m	struct:lob::z_frag_page_t
OFFSET_PAGE_DIR_ENTRY_FIRST	include/lob0impl.h	/^  static const ulint OFFSET_PAGE_DIR_ENTRY_FIRST =$/;"	m	struct:lob::z_frag_page_t
OFFSET_PAGE_NO	include/lob0impl.h	/^  static const ulint OFFSET_PAGE_NO = OFFSET_NEXT + FIL_ADDR_SIZE;$/;"	m	struct:lob::z_frag_entry_t
OFFSET_PAGE_NO	include/lob0index.h	/^  static const ulint OFFSET_PAGE_NO = OFFSET_TRX_UNDO_NO_MODIFIER + 4;$/;"	m	struct:lob::index_entry_t
OFFSET_PREV	include/lob0impl.h	/^  static const uint16_t OFFSET_PREV = 0;$/;"	m	class:lob::plist_node_t
OFFSET_PREV	include/lob0impl.h	/^  static const ulint OFFSET_PREV = 0;$/;"	m	struct:lob::z_frag_entry_t
OFFSET_PREV	include/lob0index.h	/^  static const ulint OFFSET_PREV = 0;$/;"	m	struct:lob::index_entry_t
OFFSET_PREV	include/zlob0index.h	/^  static const ulint OFFSET_PREV = 0;$/;"	m	struct:lob::z_index_entry_t
OFFSET_TOTAL_FREE_LEN	include/lob0impl.h	/^  static const ulint OFFSET_TOTAL_FREE_LEN = OFFSET_USED_LEN + 2;$/;"	m	struct:lob::z_frag_entry_t
OFFSET_TRXID	include/lob0index.h	/^  static const ulint OFFSET_TRXID = OFFSET_VERSIONS + FLST_BASE_NODE_SIZE;$/;"	m	struct:lob::index_entry_t
OFFSET_TRXID	include/zlob0index.h	/^  static const ulint OFFSET_TRXID = OFFSET_VERSIONS + FLST_BASE_NODE_SIZE;$/;"	m	struct:lob::z_index_entry_t
OFFSET_TRXID_MODIFIER	include/lob0index.h	/^  static const ulint OFFSET_TRXID_MODIFIER = OFFSET_TRXID + 6;$/;"	m	struct:lob::index_entry_t
OFFSET_TRXID_MODIFIER	include/zlob0index.h	/^  static const ulint OFFSET_TRXID_MODIFIER = OFFSET_TRXID + 6;$/;"	m	struct:lob::z_index_entry_t
OFFSET_TRX_ID	include/lob0first.h	/^  static const ulint OFFSET_TRX_ID = OFFSET_DATA_LEN + 4;$/;"	m	struct:lob::first_page_t
OFFSET_TRX_ID	include/lob0impl.h	/^  static const ulint OFFSET_TRX_ID = OFFSET_DATA_LEN + 4;$/;"	m	struct:lob::z_data_page_t
OFFSET_TRX_ID	include/lob0pages.h	/^  static const ulint OFFSET_TRX_ID = OFFSET_DATA_LEN + 4;$/;"	m	struct:lob::data_page_t
OFFSET_TRX_ID	include/zlob0first.h	/^  static const ulint OFFSET_TRX_ID = OFFSET_DATA_LEN + 4;$/;"	m	struct:lob::z_first_page_t
OFFSET_TRX_UNDO_NO	include/lob0index.h	/^  static const ulint OFFSET_TRX_UNDO_NO = OFFSET_TRXID_MODIFIER + 6;$/;"	m	struct:lob::index_entry_t
OFFSET_TRX_UNDO_NO	include/zlob0index.h	/^  static const ulint OFFSET_TRX_UNDO_NO = OFFSET_TRXID_MODIFIER + 6;$/;"	m	struct:lob::z_index_entry_t
OFFSET_TRX_UNDO_NO_MODIFIER	include/lob0index.h	/^  static const ulint OFFSET_TRX_UNDO_NO_MODIFIER = OFFSET_TRX_UNDO_NO + 4;$/;"	m	struct:lob::index_entry_t
OFFSET_TRX_UNDO_NO_MODIFIER	include/zlob0index.h	/^  static const ulint OFFSET_TRX_UNDO_NO_MODIFIER = OFFSET_TRX_UNDO_NO + 4;$/;"	m	struct:lob::z_index_entry_t
OFFSET_USED_LEN	include/lob0impl.h	/^  static const ulint OFFSET_USED_LEN = OFFSET_N_FRAGS + 2;$/;"	m	struct:lob::z_frag_entry_t
OFFSET_VERSION	include/lob0first.h	/^  static const ulint OFFSET_VERSION = FIL_PAGE_DATA;$/;"	m	struct:lob::first_page_t
OFFSET_VERSION	include/lob0impl.h	/^  static const ulint OFFSET_VERSION = FIL_PAGE_DATA;$/;"	m	struct:lob::node_page_t
OFFSET_VERSION	include/lob0impl.h	/^  static const ulint OFFSET_VERSION = FIL_PAGE_DATA;$/;"	m	struct:lob::z_data_page_t
OFFSET_VERSION	include/lob0impl.h	/^  static const ulint OFFSET_VERSION = FIL_PAGE_DATA;$/;"	m	struct:lob::z_frag_node_page_t
OFFSET_VERSION	include/lob0impl.h	/^  static const ulint OFFSET_VERSION = FIL_PAGE_DATA;$/;"	m	struct:lob::z_frag_page_t
OFFSET_VERSION	include/lob0impl.h	/^  static const ulint OFFSET_VERSION = FIL_PAGE_DATA;$/;"	m	struct:lob::z_index_page_t
OFFSET_VERSION	include/lob0pages.h	/^  static const ulint OFFSET_VERSION = FIL_PAGE_DATA;$/;"	m	struct:lob::data_page_t
OFFSET_VERSION	include/zlob0first.h	/^  static const ulint OFFSET_VERSION = FIL_PAGE_DATA;$/;"	m	struct:lob::z_first_page_t
OFFSET_VERSIONS	include/lob0index.h	/^  static const ulint OFFSET_VERSIONS = OFFSET_NEXT + FIL_ADDR_SIZE;$/;"	m	struct:lob::index_entry_t
OFFSET_VERSIONS	include/zlob0index.h	/^  static const ulint OFFSET_VERSIONS = OFFSET_NEXT + FIL_ADDR_SIZE;$/;"	m	struct:lob::z_index_entry_t
OFFSET_ZDATA_LEN	include/zlob0index.h	/^  static const ulint OFFSET_ZDATA_LEN = OFFSET_DATA_LEN + 4;$/;"	m	struct:lob::z_index_entry_t
OFFSET_Z_FRAG_ID	include/zlob0index.h	/^  static const ulint OFFSET_Z_FRAG_ID = OFFSET_Z_PAGE_NO + 4;$/;"	m	struct:lob::z_index_entry_t
OFFSET_Z_PAGE_NO	include/zlob0index.h	/^  static const ulint OFFSET_Z_PAGE_NO = OFFSET_TRX_UNDO_NO_MODIFIER + 4;$/;"	m	struct:lob::z_index_entry_t
OK	handler/i_s.cc	213;"	d	file:
OK	include/log0types.h	/^  OK,$/;"	m	class:log_state_t
OLD_PATH	fil/fil0fil.cc	/^  OLD_PATH,$/;"	e	enum:dd_fil::__anon3	file:
ONLINE_INDEX_ABORTED	include/dict0mem.h	/^  ONLINE_INDEX_ABORTED,$/;"	e	enum:online_index_status
ONLINE_INDEX_ABORTED_DROPPED	include/dict0mem.h	/^  ONLINE_INDEX_ABORTED_DROPPED$/;"	e	enum:online_index_status
ONLINE_INDEX_COMPLETE	include/dict0mem.h	/^  ONLINE_INDEX_COMPLETE = 0,$/;"	e	enum:online_index_status
ONLINE_INDEX_CREATION	include/dict0mem.h	/^  ONLINE_INDEX_CREATION,$/;"	e	enum:online_index_status
ONLY_FOR_MEMCACHED_SDI	include/api0api.h	913;"	d
ONLY_FOR_MEMCACHED_SDI	include/api0api.h	915;"	d
OPCODE_INSERT	include/lob0lob.h	/^  OPCODE_INSERT = 0,$/;"	e	enum:lob::opcode
OPCODE_INSERT_BULK	include/lob0lob.h	/^  OPCODE_INSERT_BULK,$/;"	e	enum:lob::opcode
OPCODE_INSERT_UPDATE	include/lob0lob.h	/^  OPCODE_INSERT_UPDATE,$/;"	e	enum:lob::opcode
OPCODE_UNKNOWN	include/lob0lob.h	/^  OPCODE_UNKNOWN$/;"	e	enum:lob::opcode
OPCODE_UPDATE	include/lob0lob.h	/^  OPCODE_UPDATE,$/;"	e	enum:lob::opcode
OPERATING_SYSTEM_ERROR_MSG	handler/ha_innodb.cc	/^const char *OPERATING_SYSTEM_ERROR_MSG =$/;"	v
OPERATIONS	handler/handler0alter.cc	/^  static constexpr Alter_inplace_info::HA_ALTER_FLAGS OPERATIONS =$/;"	m	class:alter_parts	file:
OPERATION_INFO_SIZE	include/os0enc.h	/^  static constexpr size_t OPERATION_INFO_SIZE = 1;$/;"	m	class:Encryption
OPT_COMPARISON	pars/pars0opt.cc	49;"	d	file:
OPT_END_COND	pars/pars0opt.cc	52;"	d	file:
OPT_EQUAL	pars/pars0opt.cc	48;"	d	file:
OPT_NOT_COND	pars/pars0opt.cc	51;"	d	file:
OPT_SCROLL_COND	pars/pars0opt.cc	54;"	d	file:
OPT_TEST_COND	pars/pars0opt.cc	53;"	d	file:
OSMutex	include/sync0types.h	/^struct OSMutex {$/;"	s
OSTrackMutex	include/ib0mutex.h	/^struct OSTrackMutex {$/;"	s
OS_AIO_IO_SETUP_RETRY_ATTEMPTS	os/os0file.cc	/^static const int OS_AIO_IO_SETUP_RETRY_ATTEMPTS = 5;$/;"	v	file:
OS_AIO_IO_SETUP_RETRY_SLEEP_MS	os/os0file.cc	/^static constexpr uint64_t OS_AIO_IO_SETUP_RETRY_SLEEP_MS = 500UL;$/;"	v	file:
OS_AIO_MERGE_N_CONSECUTIVE	os/os0file.cc	/^static const ulint OS_AIO_MERGE_N_CONSECUTIVE = 64;$/;"	v	file:
OS_AIO_N_PENDING_IOS_PER_THREAD	include/os0file.h	/^static const ulint OS_AIO_N_PENDING_IOS_PER_THREAD = 32;$/;"	v
OS_AIO_REAP_TIMEOUT	os/os0file.cc	/^static constexpr uint64_t OS_AIO_REAP_TIMEOUT = 500000000UL;$/;"	v	file:
OS_AIO_VALIDATE_SKIP	os/os0file.cc	1488;"	d	file:
OS_BUFFERED_FILE	include/os0file.h	/^static const ulint OS_BUFFERED_FILE = 102;$/;"	v
OS_CLONE_DATA_FILE	include/os0file.h	/^static const ulint OS_CLONE_DATA_FILE = 103;$/;"	v
OS_CLONE_LOG_FILE	include/os0file.h	/^static const ulint OS_CLONE_LOG_FILE = 104;$/;"	v
OS_DATA_FILE	include/os0file.h	/^static const ulint OS_DATA_FILE = 100;$/;"	v
OS_DBLWR_FILE	include/os0file.h	/^static const ulint OS_DBLWR_FILE = 105;$/;"	v
OS_FD_FROM_FILE	include/os0file.h	129;"	d
OS_FILE_ACCESS_VIOLATION	include/os0file.h	/^static const ulint OS_FILE_ACCESS_VIOLATION = 81;$/;"	v
OS_FILE_AIO	include/os0file.h	/^static const ulint OS_FILE_AIO = 61;$/;"	v
OS_FILE_AIO_INTERRUPTED	include/os0file.h	/^static const ulint OS_FILE_AIO_INTERRUPTED = 79;$/;"	v
OS_FILE_AIO_RESOURCES_RESERVED	include/os0file.h	/^static const ulint OS_FILE_AIO_RESOURCES_RESERVED = 75;$/;"	v
OS_FILE_ALREADY_EXISTS	include/os0file.h	/^static const ulint OS_FILE_ALREADY_EXISTS = 73;$/;"	v
OS_FILE_CLOSED	include/os0file.h	/^static const os_file_t OS_FILE_CLOSED = os_file_t(~0);$/;"	v
OS_FILE_CLOSE_FD	include/os0file.h	134;"	d
OS_FILE_CREATE	include/os0file.h	/^  OS_FILE_CREATE,      \/*!< to create new file (if$/;"	e	enum:os_file_create_t
OS_FILE_CREATE_PATH	include/os0file.h	/^  OS_FILE_CREATE_PATH, \/*!< to create the directories *\/$/;"	e	enum:os_file_create_t
OS_FILE_DISK_FULL	include/os0file.h	/^static const ulint OS_FILE_DISK_FULL = 72;$/;"	v
OS_FILE_ERROR_MAX	include/os0file.h	/^static const ulint OS_FILE_ERROR_MAX = 100;$/;"	v
OS_FILE_ERROR_NOT_SPECIFIED	include/os0file.h	/^static const ulint OS_FILE_ERROR_NOT_SPECIFIED = 77;$/;"	v
OS_FILE_FROM_FD	include/os0file.h	124;"	d
OS_FILE_INSUFFICIENT_RESOURCE	include/os0file.h	/^static const ulint OS_FILE_INSUFFICIENT_RESOURCE = 78;$/;"	v
OS_FILE_LOG_BLOCK_SIZE	include/os0file.h	182;"	d
OS_FILE_MAX_PATH	include/os0file.h	711;"	d
OS_FILE_NAME_TOO_LONG	include/os0file.h	/^static const ulint OS_FILE_NAME_TOO_LONG = 82;$/;"	v
OS_FILE_NORMAL	include/os0file.h	/^static const ulint OS_FILE_NORMAL = 62;$/;"	v
OS_FILE_NOT_FOUND	include/os0file.h	/^static const ulint OS_FILE_NOT_FOUND = 71;$/;"	v
OS_FILE_ON_ERROR_NO_EXIT	include/os0file.h	/^  OS_FILE_ON_ERROR_NO_EXIT = 128, \/*!< do not exit on unknown errors *\/$/;"	e	enum:os_file_create_t
OS_FILE_ON_ERROR_SILENT	include/os0file.h	/^  OS_FILE_ON_ERROR_SILENT = 256   \/*!< don't print diagnostic messages to$/;"	e	enum:os_file_create_t
OS_FILE_OPEN	include/os0file.h	/^  OS_FILE_OPEN = 51,   \/*!< to open an existing file (if$/;"	e	enum:os_file_create_t
OS_FILE_OPEN_RAW	include/os0file.h	/^  OS_FILE_OPEN_RAW,    \/*!< to open a raw device or disk$/;"	e	enum:os_file_create_t
OS_FILE_OPEN_RETRY	include/os0file.h	/^  OS_FILE_OPEN_RETRY,  \/*!< open with retry *\/$/;"	e	enum:os_file_create_t
OS_FILE_OPERATION_ABORTED	include/os0file.h	/^static const ulint OS_FILE_OPERATION_ABORTED = 80;$/;"	v
OS_FILE_PATH_ERROR	include/os0file.h	/^static const ulint OS_FILE_PATH_ERROR = 74;$/;"	v
OS_FILE_PERMISSION_ERROR	include/os0file.h	/^  OS_FILE_PERMISSION_ERROR,$/;"	e	enum:AIO_mode::os_file_type_t
OS_FILE_PREFIX	include/os0file.h	67;"	d
OS_FILE_READ_ALLOW_DELETE	include/os0file.h	/^static const ulint OS_FILE_READ_ALLOW_DELETE = 555;$/;"	v
OS_FILE_READ_ONLY	include/os0file.h	/^static const ulint OS_FILE_READ_ONLY = 333;$/;"	v
OS_FILE_READ_WRITE	include/os0file.h	/^static const ulint OS_FILE_READ_WRITE = 444;$/;"	v
OS_FILE_SHARING_VIOLATION	include/os0file.h	/^static const ulint OS_FILE_SHARING_VIOLATION = 76;$/;"	v
OS_FILE_TYPE_BLOCK	include/os0file.h	/^  OS_FILE_TYPE_BLOCK$/;"	e	enum:AIO_mode::os_file_type_t
OS_FILE_TYPE_DIR	include/os0file.h	/^  OS_FILE_TYPE_DIR,$/;"	e	enum:AIO_mode::os_file_type_t
OS_FILE_TYPE_FAILED	include/os0file.h	/^  OS_FILE_TYPE_FAILED,$/;"	e	enum:AIO_mode::os_file_type_t
OS_FILE_TYPE_FILE	include/os0file.h	/^  OS_FILE_TYPE_FILE,$/;"	e	enum:AIO_mode::os_file_type_t
OS_FILE_TYPE_LINK	include/os0file.h	/^  OS_FILE_TYPE_LINK,$/;"	e	enum:AIO_mode::os_file_type_t
OS_FILE_TYPE_MISSING	include/os0file.h	/^  OS_FILE_TYPE_MISSING,$/;"	e	enum:AIO_mode::os_file_type_t
OS_FILE_TYPE_NAME_TOO_LONG	include/os0file.h	/^  OS_FILE_TYPE_NAME_TOO_LONG,$/;"	e	enum:AIO_mode::os_file_type_t
OS_FILE_TYPE_UNKNOWN	include/os0file.h	/^  OS_FILE_TYPE_UNKNOWN,$/;"	e	enum:AIO_mode::os_file_type_t
OS_LOG_FILE	include/os0file.h	/^static const ulint OS_LOG_FILE = 101;$/;"	v
OS_MAP_ANON	os/os0proc.cc	48;"	d	file:
OS_MAP_ANON	os/os0proc.cc	50;"	d	file:
OS_REDO_LOG_ARCHIVE_FILE	include/os0file.h	/^static const ulint OS_REDO_LOG_ARCHIVE_FILE = 105;$/;"	v
OS_SEPARATOR	fil/fil0fil.cc	/^constexpr char Fil_path::OS_SEPARATOR;$/;"	m	class:Fil_path	file:
OS_SEPARATOR	include/fil0fil.h	/^  static constexpr auto OS_SEPARATOR = OS_PATH_SEPARATOR;$/;"	m	class:Fil_path
OS_SYNC_INFINITE_TIME	include/os0event.h	44;"	d
OS_SYNC_TIME_EXCEEDED	include/os0event.h	47;"	d
OUT_OF_MEMORY_MSG	include/ut0new.h	153;"	d
Options	include/log0test.h	/^  enum class Options {$/;"	c	class:Log_test
OrderByWaits	handler/ha_innodb.cc	/^  struct OrderByWaits {$/;"	s	struct:ShowStatus	file:
PAGE_BTR_IBUF_FREE_LIST	include/page0types.h	92;"	d
PAGE_BTR_IBUF_FREE_LIST_NODE	include/page0types.h	93;"	d
PAGE_BTR_SEG_LEAF	include/page0types.h	88;"	d
PAGE_BTR_SEG_TOP	include/page0types.h	99;"	d
PAGE_CLEANER_STATE_FINISHED	buf/buf0flu.cc	/^  PAGE_CLEANER_STATE_FINISHED$/;"	e	enum:page_cleaner_state_t	file:
PAGE_CLEANER_STATE_FLUSHING	buf/buf0flu.cc	/^  PAGE_CLEANER_STATE_FLUSHING,$/;"	e	enum:page_cleaner_state_t	file:
PAGE_CLEANER_STATE_NONE	buf/buf0flu.cc	/^  PAGE_CLEANER_STATE_NONE = 0,$/;"	e	enum:page_cleaner_state_t	file:
PAGE_CLEANER_STATE_REQUESTED	buf/buf0flu.cc	/^  PAGE_CLEANER_STATE_REQUESTED,$/;"	e	enum:page_cleaner_state_t	file:
PAGE_CUR_ADAPT	include/page0cur.h	45;"	d
PAGE_CUR_CONTAIN	include/page0types.h	/^  PAGE_CUR_CONTAIN = 7,$/;"	e	enum:page_cur_mode_t
PAGE_CUR_DISJOINT	include/page0types.h	/^  PAGE_CUR_DISJOINT = 10,$/;"	e	enum:page_cur_mode_t
PAGE_CUR_G	include/page0types.h	/^  PAGE_CUR_G = 1,$/;"	e	enum:page_cur_mode_t
PAGE_CUR_GE	include/page0types.h	/^  PAGE_CUR_GE = 2,$/;"	e	enum:page_cur_mode_t
PAGE_CUR_INTERSECT	include/page0types.h	/^  PAGE_CUR_INTERSECT = 8,$/;"	e	enum:page_cur_mode_t
PAGE_CUR_L	include/page0types.h	/^  PAGE_CUR_L = 3,$/;"	e	enum:page_cur_mode_t
PAGE_CUR_LE	include/page0types.h	/^  PAGE_CUR_LE = 4,$/;"	e	enum:page_cur_mode_t
PAGE_CUR_MBR_EQUAL	include/page0types.h	/^  PAGE_CUR_MBR_EQUAL = 11,$/;"	e	enum:page_cur_mode_t
PAGE_CUR_RTREE_GET_FATHER	include/page0types.h	/^  PAGE_CUR_RTREE_GET_FATHER = 14$/;"	e	enum:page_cur_mode_t
PAGE_CUR_RTREE_INSERT	include/page0types.h	/^  PAGE_CUR_RTREE_INSERT = 12,$/;"	e	enum:page_cur_mode_t
PAGE_CUR_RTREE_LOCATE	include/page0types.h	/^  PAGE_CUR_RTREE_LOCATE = 13,$/;"	e	enum:page_cur_mode_t
PAGE_CUR_UNSUPP	include/page0types.h	/^  PAGE_CUR_UNSUPP = 0,$/;"	e	enum:page_cur_mode_t
PAGE_CUR_WITHIN	include/page0types.h	/^  PAGE_CUR_WITHIN = 9,$/;"	e	enum:page_cur_mode_t
PAGE_DATA	include/page0types.h	105;"	d
PAGE_DIR	include/page0page.h	65;"	d
PAGE_DIRECTION	include/page0types.h	65;"	d
PAGE_DIR_SLOT_MAX_N_OWNED	include/page0page.h	77;"	d
PAGE_DIR_SLOT_MIN_N_OWNED	include/page0page.h	78;"	d
PAGE_DIR_SLOT_SIZE	include/page0page.h	68;"	d
PAGE_EMPTY_DIR_START	include/page0page.h	72;"	d
PAGE_FREE	include/page0types.h	59;"	d
PAGE_GARBAGE	include/page0types.h	60;"	d
PAGE_GROUP_SIZE	fsp/fsp0fsp.cc	85;"	d	file:
PAGE_HEADER	include/page0types.h	50;"	d
PAGE_HEADER_PRIV_END	include/page0types.h	75;"	d
PAGE_HEAP_NO_INFIMUM	include/page0types.h	/^constexpr ulint PAGE_HEAP_NO_INFIMUM = 0;$/;"	v
PAGE_HEAP_NO_SUPREMUM	include/page0types.h	/^constexpr ulint PAGE_HEAP_NO_SUPREMUM = 1;$/;"	v
PAGE_HEAP_NO_USER_LOW	include/page0types.h	/^constexpr ulint PAGE_HEAP_NO_USER_LOW = 2;$/;"	v
PAGE_HEAP_TOP	include/page0types.h	55;"	d
PAGE_INDEX_ID	include/page0types.h	83;"	d
PAGE_LAST_INSERT	include/page0types.h	61;"	d
PAGE_LEFT	include/page0types.h	139;"	d
PAGE_LEVEL	include/page0types.h	79;"	d
PAGE_MAX_TRX_ID	include/page0types.h	70;"	d
PAGE_NEW_INFIMUM	include/page0types.h	117;"	d
PAGE_NEW_SUPREMUM	include/page0types.h	120;"	d
PAGE_NEW_SUPREMUM_END	include/page0types.h	123;"	d
PAGE_NO_DIRECTION	include/page0types.h	143;"	d
PAGE_NO_MAX	include/fil0fil.h	/^constexpr page_no_t PAGE_NO_MAX = std::numeric_limits<page_no_t>::max() - 1;$/;"	v
PAGE_N_DIRECTION	include/page0types.h	66;"	d
PAGE_N_DIR_SLOTS	include/page0types.h	54;"	d
PAGE_N_HEAP	include/page0types.h	56;"	d
PAGE_N_RECS	include/page0types.h	69;"	d
PAGE_OLD_INFIMUM	include/page0types.h	108;"	d
PAGE_OLD_SUPREMUM	include/page0types.h	111;"	d
PAGE_OLD_SUPREMUM_END	include/page0types.h	114;"	d
PAGE_RIGHT	include/page0types.h	140;"	d
PAGE_SAME_PAGE	include/page0types.h	142;"	d
PAGE_SAME_REC	include/page0types.h	141;"	d
PAGE_SIZE_T_SIZE_BITS	include/page0size.h	/^  unsigned m_logical : PAGE_SIZE_T_SIZE_BITS;$/;"	m	class:page_size_t
PAGE_SIZE_T_SIZE_BITS	include/page0size.h	/^  unsigned m_physical : PAGE_SIZE_T_SIZE_BITS;$/;"	m	class:page_size_t
PAGE_SIZE_T_SIZE_BITS	include/page0size.h	/^constexpr size_t PAGE_SIZE_T_SIZE_BITS = 17;$/;"	v
PAGE_TYPE	fil/fil0fil.cc	11957;"	d	file:
PAGE_ZIP_CLUST_LEAF_SLOT_SIZE	include/page0zip.h	69;"	d
PAGE_ZIP_DIR_SLOT_DEL	include/page0zip.h	76;"	d
PAGE_ZIP_DIR_SLOT_MASK	include/page0zip.h	72;"	d
PAGE_ZIP_DIR_SLOT_OWNED	include/page0zip.h	74;"	d
PAGE_ZIP_DIR_SLOT_SIZE	include/page0zip.h	67;"	d
PAGE_ZIP_SSIZE_BITS	include/page0types.h	160;"	d
PAGE_ZIP_SSIZE_MAX	include/page0types.h	163;"	d
PAGE_ZIP_START	include/page0zip.h	65;"	d
PARSER_DEINIT	include/fts0plugin.h	46;"	d
PARSER_INIT	include/fts0plugin.h	42;"	d
PARS_AND_TOKEN	include/pars0grm.h	/^  PARS_AND_TOKEN = 265,$/;"	e	enum:yytokentype
PARS_AND_TOKEN	pars/pars0grm.cc	/^    PARS_AND_TOKEN = 265,$/;"	e	enum:yytokentype	file:
PARS_ASC_TOKEN	include/pars0grm.h	/^  PARS_ASC_TOKEN = 301,$/;"	e	enum:yytokentype
PARS_ASC_TOKEN	pars/pars0grm.cc	/^    PARS_ASC_TOKEN = 301,$/;"	e	enum:yytokentype	file:
PARS_ASSIGN_TOKEN	include/pars0grm.h	/^  PARS_ASSIGN_TOKEN = 318,$/;"	e	enum:yytokentype
PARS_ASSIGN_TOKEN	pars/pars0grm.cc	/^    PARS_ASSIGN_TOKEN = 318,$/;"	e	enum:yytokentype	file:
PARS_BEGIN_TOKEN	include/pars0grm.h	/^  PARS_BEGIN_TOKEN = 281,$/;"	e	enum:yytokentype
PARS_BEGIN_TOKEN	pars/pars0grm.cc	/^    PARS_BEGIN_TOKEN = 281,$/;"	e	enum:yytokentype	file:
PARS_BIGINT_TOKEN	include/pars0grm.h	/^  PARS_BIGINT_TOKEN = 348,$/;"	e	enum:yytokentype
PARS_BIGINT_TOKEN	pars/pars0grm.cc	/^    PARS_BIGINT_TOKEN = 348,$/;"	e	enum:yytokentype	file:
PARS_BINARY_TOKEN	include/pars0grm.h	/^  PARS_BINARY_TOKEN = 274,$/;"	e	enum:yytokentype
PARS_BINARY_TOKEN	pars/pars0grm.cc	/^    PARS_BINARY_TOKEN = 274,$/;"	e	enum:yytokentype	file:
PARS_BLOB_LIT	include/pars0grm.h	/^  PARS_BLOB_LIT = 262,$/;"	e	enum:yytokentype
PARS_BLOB_LIT	pars/pars0grm.cc	/^    PARS_BLOB_LIT = 262,$/;"	e	enum:yytokentype	file:
PARS_BLOB_TOKEN	include/pars0grm.h	/^  PARS_BLOB_TOKEN = 275,$/;"	e	enum:yytokentype
PARS_BLOB_TOKEN	pars/pars0grm.cc	/^    PARS_BLOB_TOKEN = 275,$/;"	e	enum:yytokentype	file:
PARS_BLOCK_SIZE_TOKEN	include/pars0grm.h	/^  PARS_BLOCK_SIZE_TOKEN = 347,$/;"	e	enum:yytokentype
PARS_BLOCK_SIZE_TOKEN	pars/pars0grm.cc	/^    PARS_BLOCK_SIZE_TOKEN = 347,$/;"	e	enum:yytokentype	file:
PARS_BY_TOKEN	include/pars0grm.h	/^  PARS_BY_TOKEN = 300,$/;"	e	enum:yytokentype
PARS_BY_TOKEN	pars/pars0grm.cc	/^    PARS_BY_TOKEN = 300,$/;"	e	enum:yytokentype	file:
PARS_CHAR_TOKEN	include/pars0grm.h	/^  PARS_CHAR_TOKEN = 279,$/;"	e	enum:yytokentype
PARS_CHAR_TOKEN	pars/pars0grm.cc	/^    PARS_CHAR_TOKEN = 279,$/;"	e	enum:yytokentype	file:
PARS_CLOSE_TOKEN	include/pars0grm.h	/^  PARS_CLOSE_TOKEN = 324,$/;"	e	enum:yytokentype
PARS_CLOSE_TOKEN	pars/pars0grm.cc	/^    PARS_CLOSE_TOKEN = 324,$/;"	e	enum:yytokentype	file:
PARS_CLUSTERED_TOKEN	include/pars0grm.h	/^  PARS_CLUSTERED_TOKEN = 315,$/;"	e	enum:yytokentype
PARS_CLUSTERED_TOKEN	pars/pars0grm.cc	/^    PARS_CLUSTERED_TOKEN = 315,$/;"	e	enum:yytokentype	file:
PARS_COMMIT_TOKEN	include/pars0grm.h	/^  PARS_COMMIT_TOKEN = 331,$/;"	e	enum:yytokentype
PARS_COMMIT_TOKEN	pars/pars0grm.cc	/^    PARS_COMMIT_TOKEN = 331,$/;"	e	enum:yytokentype	file:
PARS_COMPACT_TOKEN	include/pars0grm.h	/^  PARS_COMPACT_TOKEN = 346,$/;"	e	enum:yytokentype
PARS_COMPACT_TOKEN	pars/pars0grm.cc	/^    PARS_COMPACT_TOKEN = 346,$/;"	e	enum:yytokentype	file:
PARS_CONCAT_TOKEN	include/pars0grm.h	/^  PARS_CONCAT_TOKEN = 328,$/;"	e	enum:yytokentype
PARS_CONCAT_TOKEN	pars/pars0grm.cc	/^    PARS_CONCAT_TOKEN = 328,$/;"	e	enum:yytokentype	file:
PARS_COUNT_TOKEN	include/pars0grm.h	/^  PARS_COUNT_TOKEN = 292,$/;"	e	enum:yytokentype
PARS_COUNT_TOKEN	pars/pars0grm.cc	/^    PARS_COUNT_TOKEN = 292,$/;"	e	enum:yytokentype	file:
PARS_CREATE_TOKEN	include/pars0grm.h	/^  PARS_CREATE_TOKEN = 311,$/;"	e	enum:yytokentype
PARS_CREATE_TOKEN	pars/pars0grm.cc	/^    PARS_CREATE_TOKEN = 311,$/;"	e	enum:yytokentype	file:
PARS_CURRENT_TOKEN	include/pars0grm.h	/^  PARS_CURRENT_TOKEN = 309,$/;"	e	enum:yytokentype
PARS_CURRENT_TOKEN	pars/pars0grm.cc	/^    PARS_CURRENT_TOKEN = 309,$/;"	e	enum:yytokentype	file:
PARS_CURSOR_TOKEN	include/pars0grm.h	/^  PARS_CURSOR_TOKEN = 320,$/;"	e	enum:yytokentype
PARS_CURSOR_TOKEN	pars/pars0grm.cc	/^    PARS_CURSOR_TOKEN = 320,$/;"	e	enum:yytokentype	file:
PARS_DDOT_TOKEN	include/pars0grm.h	/^  PARS_DDOT_TOKEN = 297,$/;"	e	enum:yytokentype
PARS_DDOT_TOKEN	pars/pars0grm.cc	/^    PARS_DDOT_TOKEN = 297,$/;"	e	enum:yytokentype	file:
PARS_DECLARE_TOKEN	include/pars0grm.h	/^  PARS_DECLARE_TOKEN = 319,$/;"	e	enum:yytokentype
PARS_DECLARE_TOKEN	pars/pars0grm.cc	/^    PARS_DECLARE_TOKEN = 319,$/;"	e	enum:yytokentype	file:
PARS_DELETE_TOKEN	include/pars0grm.h	/^  PARS_DELETE_TOKEN = 308,$/;"	e	enum:yytokentype
PARS_DELETE_TOKEN	pars/pars0grm.cc	/^    PARS_DELETE_TOKEN = 308,$/;"	e	enum:yytokentype	file:
PARS_DESC_TOKEN	include/pars0grm.h	/^  PARS_DESC_TOKEN = 302,$/;"	e	enum:yytokentype
PARS_DESC_TOKEN	pars/pars0grm.cc	/^    PARS_DESC_TOKEN = 302,$/;"	e	enum:yytokentype	file:
PARS_DISTINCT_TOKEN	include/pars0grm.h	/^  PARS_DISTINCT_TOKEN = 293,$/;"	e	enum:yytokentype
PARS_DISTINCT_TOKEN	pars/pars0grm.cc	/^    PARS_DISTINCT_TOKEN = 293,$/;"	e	enum:yytokentype	file:
PARS_DOES_NOT_FIT_IN_MEM_TOKEN	include/pars0grm.h	/^  PARS_DOES_NOT_FIT_IN_MEM_TOKEN = 316,$/;"	e	enum:yytokentype
PARS_DOES_NOT_FIT_IN_MEM_TOKEN	pars/pars0grm.cc	/^    PARS_DOES_NOT_FIT_IN_MEM_TOKEN = 316,$/;"	e	enum:yytokentype	file:
PARS_ELSE_TOKEN	include/pars0grm.h	/^  PARS_ELSE_TOKEN = 285,$/;"	e	enum:yytokentype
PARS_ELSE_TOKEN	pars/pars0grm.cc	/^    PARS_ELSE_TOKEN = 285,$/;"	e	enum:yytokentype	file:
PARS_ELSIF_TOKEN	include/pars0grm.h	/^  PARS_ELSIF_TOKEN = 286,$/;"	e	enum:yytokentype
PARS_ELSIF_TOKEN	pars/pars0grm.cc	/^    PARS_ELSIF_TOKEN = 286,$/;"	e	enum:yytokentype	file:
PARS_END_TOKEN	include/pars0grm.h	/^  PARS_END_TOKEN = 282,$/;"	e	enum:yytokentype
PARS_END_TOKEN	pars/pars0grm.cc	/^    PARS_END_TOKEN = 282,$/;"	e	enum:yytokentype	file:
PARS_EXIT_TOKEN	include/pars0grm.h	/^  PARS_EXIT_TOKEN = 335,$/;"	e	enum:yytokentype
PARS_EXIT_TOKEN	pars/pars0grm.cc	/^    PARS_EXIT_TOKEN = 335,$/;"	e	enum:yytokentype	file:
PARS_FETCH_TOKEN	include/pars0grm.h	/^  PARS_FETCH_TOKEN = 323,$/;"	e	enum:yytokentype
PARS_FETCH_TOKEN	pars/pars0grm.cc	/^    PARS_FETCH_TOKEN = 323,$/;"	e	enum:yytokentype	file:
PARS_FIXBINARY_LIT	include/pars0grm.h	/^  PARS_FIXBINARY_LIT = 261,$/;"	e	enum:yytokentype
PARS_FIXBINARY_LIT	pars/pars0grm.cc	/^    PARS_FIXBINARY_LIT = 261,$/;"	e	enum:yytokentype	file:
PARS_FLOAT_LIT	include/pars0grm.h	/^  PARS_FLOAT_LIT = 259,$/;"	e	enum:yytokentype
PARS_FLOAT_LIT	pars/pars0grm.cc	/^    PARS_FLOAT_LIT = 259,$/;"	e	enum:yytokentype	file:
PARS_FLOAT_TOKEN	include/pars0grm.h	/^  PARS_FLOAT_TOKEN = 278,$/;"	e	enum:yytokentype
PARS_FLOAT_TOKEN	pars/pars0grm.cc	/^    PARS_FLOAT_TOKEN = 278,$/;"	e	enum:yytokentype	file:
PARS_FOR_TOKEN	include/pars0grm.h	/^  PARS_FOR_TOKEN = 296,$/;"	e	enum:yytokentype
PARS_FOR_TOKEN	pars/pars0grm.cc	/^    PARS_FOR_TOKEN = 296,$/;"	e	enum:yytokentype	file:
PARS_FROM_TOKEN	include/pars0grm.h	/^  PARS_FROM_TOKEN = 294,$/;"	e	enum:yytokentype
PARS_FROM_TOKEN	pars/pars0grm.cc	/^    PARS_FROM_TOKEN = 294,$/;"	e	enum:yytokentype	file:
PARS_FUNCTION_TOKEN	include/pars0grm.h	/^  PARS_FUNCTION_TOKEN = 336,$/;"	e	enum:yytokentype
PARS_FUNCTION_TOKEN	pars/pars0grm.cc	/^    PARS_FUNCTION_TOKEN = 336,$/;"	e	enum:yytokentype	file:
PARS_FUNC_AGGREGATE	include/pars0pars.h	596;"	d
PARS_FUNC_ARITH	include/pars0pars.h	592;"	d
PARS_FUNC_CMP	include/pars0pars.h	594;"	d
PARS_FUNC_LOGICAL	include/pars0pars.h	593;"	d
PARS_FUNC_OTHER	include/pars0pars.h	597;"	d
PARS_FUNC_PREDEFINED	include/pars0pars.h	595;"	d
PARS_GE_TOKEN	include/pars0grm.h	/^  PARS_GE_TOKEN = 268,$/;"	e	enum:yytokentype
PARS_GE_TOKEN	pars/pars0grm.cc	/^    PARS_GE_TOKEN = 268,$/;"	e	enum:yytokentype	file:
PARS_ID_TOKEN	include/pars0grm.h	/^  PARS_ID_TOKEN = 264,$/;"	e	enum:yytokentype
PARS_ID_TOKEN	pars/pars0grm.cc	/^    PARS_ID_TOKEN = 264,$/;"	e	enum:yytokentype	file:
PARS_IF_TOKEN	include/pars0grm.h	/^  PARS_IF_TOKEN = 283,$/;"	e	enum:yytokentype
PARS_IF_TOKEN	pars/pars0grm.cc	/^    PARS_IF_TOKEN = 283,$/;"	e	enum:yytokentype	file:
PARS_INDEX_TOKEN	include/pars0grm.h	/^  PARS_INDEX_TOKEN = 313,$/;"	e	enum:yytokentype
PARS_INDEX_TOKEN	pars/pars0grm.cc	/^    PARS_INDEX_TOKEN = 313,$/;"	e	enum:yytokentype	file:
PARS_INPUT	include/pars0pars.h	88;"	d
PARS_INSERT_TOKEN	include/pars0grm.h	/^  PARS_INSERT_TOKEN = 303,$/;"	e	enum:yytokentype
PARS_INSERT_TOKEN	pars/pars0grm.cc	/^    PARS_INSERT_TOKEN = 303,$/;"	e	enum:yytokentype	file:
PARS_INSTR_TOKEN	include/pars0grm.h	/^  PARS_INSTR_TOKEN = 329,$/;"	e	enum:yytokentype
PARS_INSTR_TOKEN	pars/pars0grm.cc	/^    PARS_INSTR_TOKEN = 329,$/;"	e	enum:yytokentype	file:
PARS_INTEGER_TOKEN	include/pars0grm.h	/^  PARS_INTEGER_TOKEN = 277,$/;"	e	enum:yytokentype
PARS_INTEGER_TOKEN	pars/pars0grm.cc	/^    PARS_INTEGER_TOKEN = 277,$/;"	e	enum:yytokentype	file:
PARS_INTO_TOKEN	include/pars0grm.h	/^  PARS_INTO_TOKEN = 304,$/;"	e	enum:yytokentype
PARS_INTO_TOKEN	pars/pars0grm.cc	/^    PARS_INTO_TOKEN = 304,$/;"	e	enum:yytokentype	file:
PARS_INT_LIT	include/pars0grm.h	/^  PARS_INT_LIT = 258,$/;"	e	enum:yytokentype
PARS_INT_LIT	pars/pars0grm.cc	/^    PARS_INT_LIT = 258,$/;"	e	enum:yytokentype	file:
PARS_INT_TOKEN	include/pars0grm.h	/^  PARS_INT_TOKEN = 276,$/;"	e	enum:yytokentype
PARS_INT_TOKEN	pars/pars0grm.cc	/^    PARS_INT_TOKEN = 276,$/;"	e	enum:yytokentype	file:
PARS_IN_TOKEN	include/pars0grm.h	/^  PARS_IN_TOKEN = 272,$/;"	e	enum:yytokentype
PARS_IN_TOKEN	pars/pars0grm.cc	/^    PARS_IN_TOKEN = 272,$/;"	e	enum:yytokentype	file:
PARS_IS_TOKEN	include/pars0grm.h	/^  PARS_IS_TOKEN = 280,$/;"	e	enum:yytokentype
PARS_IS_TOKEN	pars/pars0grm.cc	/^    PARS_IS_TOKEN = 280,$/;"	e	enum:yytokentype	file:
PARS_LENGTH_TOKEN	include/pars0grm.h	/^  PARS_LENGTH_TOKEN = 330,$/;"	e	enum:yytokentype
PARS_LENGTH_TOKEN	pars/pars0grm.cc	/^    PARS_LENGTH_TOKEN = 330,$/;"	e	enum:yytokentype	file:
PARS_LE_TOKEN	include/pars0grm.h	/^  PARS_LE_TOKEN = 269,$/;"	e	enum:yytokentype
PARS_LE_TOKEN	pars/pars0grm.cc	/^    PARS_LE_TOKEN = 269,$/;"	e	enum:yytokentype	file:
PARS_LIKE_TOKEN	include/pars0grm.h	/^  PARS_LIKE_TOKEN = 340,$/;"	e	enum:yytokentype
PARS_LIKE_TOKEN	pars/pars0grm.cc	/^    PARS_LIKE_TOKEN = 340,$/;"	e	enum:yytokentype	file:
PARS_LIKE_TOKEN_EXACT	include/pars0grm.h	/^  PARS_LIKE_TOKEN_EXACT = 341,$/;"	e	enum:yytokentype
PARS_LIKE_TOKEN_EXACT	pars/pars0grm.cc	/^    PARS_LIKE_TOKEN_EXACT = 341,$/;"	e	enum:yytokentype	file:
PARS_LIKE_TOKEN_PREFIX	include/pars0grm.h	/^  PARS_LIKE_TOKEN_PREFIX = 342,$/;"	e	enum:yytokentype
PARS_LIKE_TOKEN_PREFIX	pars/pars0grm.cc	/^    PARS_LIKE_TOKEN_PREFIX = 342,$/;"	e	enum:yytokentype	file:
PARS_LIKE_TOKEN_SUBSTR	include/pars0grm.h	/^  PARS_LIKE_TOKEN_SUBSTR = 344,$/;"	e	enum:yytokentype
PARS_LIKE_TOKEN_SUBSTR	pars/pars0grm.cc	/^    PARS_LIKE_TOKEN_SUBSTR = 344,$/;"	e	enum:yytokentype	file:
PARS_LIKE_TOKEN_SUFFIX	include/pars0grm.h	/^  PARS_LIKE_TOKEN_SUFFIX = 343,$/;"	e	enum:yytokentype
PARS_LIKE_TOKEN_SUFFIX	pars/pars0grm.cc	/^    PARS_LIKE_TOKEN_SUFFIX = 343,$/;"	e	enum:yytokentype	file:
PARS_LOCK_TOKEN	include/pars0grm.h	/^  PARS_LOCK_TOKEN = 337,$/;"	e	enum:yytokentype
PARS_LOCK_TOKEN	pars/pars0grm.cc	/^    PARS_LOCK_TOKEN = 337,$/;"	e	enum:yytokentype	file:
PARS_LOOP_TOKEN	include/pars0grm.h	/^  PARS_LOOP_TOKEN = 287,$/;"	e	enum:yytokentype
PARS_LOOP_TOKEN	pars/pars0grm.cc	/^    PARS_LOOP_TOKEN = 287,$/;"	e	enum:yytokentype	file:
PARS_MODE_TOKEN	include/pars0grm.h	/^  PARS_MODE_TOKEN = 339,$/;"	e	enum:yytokentype
PARS_MODE_TOKEN	pars/pars0grm.cc	/^    PARS_MODE_TOKEN = 339,$/;"	e	enum:yytokentype	file:
PARS_NE_TOKEN	include/pars0grm.h	/^  PARS_NE_TOKEN = 270,$/;"	e	enum:yytokentype
PARS_NE_TOKEN	pars/pars0grm.cc	/^    PARS_NE_TOKEN = 270,$/;"	e	enum:yytokentype	file:
PARS_NOTFOUND_TOKEN	include/pars0grm.h	/^  PARS_NOTFOUND_TOKEN = 325,$/;"	e	enum:yytokentype
PARS_NOTFOUND_TOKEN	pars/pars0grm.cc	/^    PARS_NOTFOUND_TOKEN = 325,$/;"	e	enum:yytokentype	file:
PARS_NOT_PARAM	include/pars0pars.h	90;"	d
PARS_NOT_TOKEN	include/pars0grm.h	/^  PARS_NOT_TOKEN = 267,$/;"	e	enum:yytokentype
PARS_NOT_TOKEN	pars/pars0grm.cc	/^    PARS_NOT_TOKEN = 267,$/;"	e	enum:yytokentype	file:
PARS_NULL_LIT	include/pars0grm.h	/^  PARS_NULL_LIT = 263,$/;"	e	enum:yytokentype
PARS_NULL_LIT	pars/pars0grm.cc	/^    PARS_NULL_LIT = 263,$/;"	e	enum:yytokentype	file:
PARS_OF_TOKEN	include/pars0grm.h	/^  PARS_OF_TOKEN = 310,$/;"	e	enum:yytokentype
PARS_OF_TOKEN	pars/pars0grm.cc	/^    PARS_OF_TOKEN = 310,$/;"	e	enum:yytokentype	file:
PARS_ON_TOKEN	include/pars0grm.h	/^  PARS_ON_TOKEN = 317,$/;"	e	enum:yytokentype
PARS_ON_TOKEN	pars/pars0grm.cc	/^    PARS_ON_TOKEN = 317,$/;"	e	enum:yytokentype	file:
PARS_OPEN_TOKEN	include/pars0grm.h	/^  PARS_OPEN_TOKEN = 322,$/;"	e	enum:yytokentype
PARS_OPEN_TOKEN	pars/pars0grm.cc	/^    PARS_OPEN_TOKEN = 322,$/;"	e	enum:yytokentype	file:
PARS_ORDER_TOKEN	include/pars0grm.h	/^  PARS_ORDER_TOKEN = 299,$/;"	e	enum:yytokentype
PARS_ORDER_TOKEN	pars/pars0grm.cc	/^    PARS_ORDER_TOKEN = 299,$/;"	e	enum:yytokentype	file:
PARS_OR_TOKEN	include/pars0grm.h	/^  PARS_OR_TOKEN = 266,$/;"	e	enum:yytokentype
PARS_OR_TOKEN	pars/pars0grm.cc	/^    PARS_OR_TOKEN = 266,$/;"	e	enum:yytokentype	file:
PARS_OUTPUT	include/pars0pars.h	89;"	d
PARS_OUT_TOKEN	include/pars0grm.h	/^  PARS_OUT_TOKEN = 273,$/;"	e	enum:yytokentype
PARS_OUT_TOKEN	pars/pars0grm.cc	/^    PARS_OUT_TOKEN = 273,$/;"	e	enum:yytokentype	file:
PARS_PROCEDURE_TOKEN	include/pars0grm.h	/^  PARS_PROCEDURE_TOKEN = 271,$/;"	e	enum:yytokentype
PARS_PROCEDURE_TOKEN	pars/pars0grm.cc	/^    PARS_PROCEDURE_TOKEN = 271,$/;"	e	enum:yytokentype	file:
PARS_READ_TOKEN	include/pars0grm.h	/^  PARS_READ_TOKEN = 298,$/;"	e	enum:yytokentype
PARS_READ_TOKEN	pars/pars0grm.cc	/^    PARS_READ_TOKEN = 298,$/;"	e	enum:yytokentype	file:
PARS_RETURN_TOKEN	include/pars0grm.h	/^  PARS_RETURN_TOKEN = 289,$/;"	e	enum:yytokentype
PARS_RETURN_TOKEN	pars/pars0grm.cc	/^    PARS_RETURN_TOKEN = 289,$/;"	e	enum:yytokentype	file:
PARS_ROLLBACK_TOKEN	include/pars0grm.h	/^  PARS_ROLLBACK_TOKEN = 332,$/;"	e	enum:yytokentype
PARS_ROLLBACK_TOKEN	pars/pars0grm.cc	/^    PARS_ROLLBACK_TOKEN = 332,$/;"	e	enum:yytokentype	file:
PARS_SELECT_TOKEN	include/pars0grm.h	/^  PARS_SELECT_TOKEN = 290,$/;"	e	enum:yytokentype
PARS_SELECT_TOKEN	pars/pars0grm.cc	/^    PARS_SELECT_TOKEN = 290,$/;"	e	enum:yytokentype	file:
PARS_SET_TOKEN	include/pars0grm.h	/^  PARS_SET_TOKEN = 307,$/;"	e	enum:yytokentype
PARS_SET_TOKEN	pars/pars0grm.cc	/^    PARS_SET_TOKEN = 307,$/;"	e	enum:yytokentype	file:
PARS_SHARE_TOKEN	include/pars0grm.h	/^  PARS_SHARE_TOKEN = 338,$/;"	e	enum:yytokentype
PARS_SHARE_TOKEN	pars/pars0grm.cc	/^    PARS_SHARE_TOKEN = 338,$/;"	e	enum:yytokentype	file:
PARS_SQL_TOKEN	include/pars0grm.h	/^  PARS_SQL_TOKEN = 321,$/;"	e	enum:yytokentype
PARS_SQL_TOKEN	pars/pars0grm.cc	/^    PARS_SQL_TOKEN = 321,$/;"	e	enum:yytokentype	file:
PARS_STR_LIT	include/pars0grm.h	/^  PARS_STR_LIT = 260,$/;"	e	enum:yytokentype
PARS_STR_LIT	pars/pars0grm.cc	/^    PARS_STR_LIT = 260,$/;"	e	enum:yytokentype	file:
PARS_SUBSTR_TOKEN	include/pars0grm.h	/^  PARS_SUBSTR_TOKEN = 327,$/;"	e	enum:yytokentype
PARS_SUBSTR_TOKEN	pars/pars0grm.cc	/^    PARS_SUBSTR_TOKEN = 327,$/;"	e	enum:yytokentype	file:
PARS_SUM_TOKEN	include/pars0grm.h	/^  PARS_SUM_TOKEN = 291,$/;"	e	enum:yytokentype
PARS_SUM_TOKEN	pars/pars0grm.cc	/^    PARS_SUM_TOKEN = 291,$/;"	e	enum:yytokentype	file:
PARS_TABLE_NAME_TOKEN	include/pars0grm.h	/^  PARS_TABLE_NAME_TOKEN = 345,$/;"	e	enum:yytokentype
PARS_TABLE_NAME_TOKEN	pars/pars0grm.cc	/^    PARS_TABLE_NAME_TOKEN = 345,$/;"	e	enum:yytokentype	file:
PARS_TABLE_TOKEN	include/pars0grm.h	/^  PARS_TABLE_TOKEN = 312,$/;"	e	enum:yytokentype
PARS_TABLE_TOKEN	pars/pars0grm.cc	/^    PARS_TABLE_TOKEN = 312,$/;"	e	enum:yytokentype	file:
PARS_THEN_TOKEN	include/pars0grm.h	/^  PARS_THEN_TOKEN = 284,$/;"	e	enum:yytokentype
PARS_THEN_TOKEN	pars/pars0grm.cc	/^    PARS_THEN_TOKEN = 284,$/;"	e	enum:yytokentype	file:
PARS_TO_BINARY_TOKEN	include/pars0grm.h	/^  PARS_TO_BINARY_TOKEN = 326,$/;"	e	enum:yytokentype
PARS_TO_BINARY_TOKEN	pars/pars0grm.cc	/^    PARS_TO_BINARY_TOKEN = 326,$/;"	e	enum:yytokentype	file:
PARS_UNIQUE_TOKEN	include/pars0grm.h	/^  PARS_UNIQUE_TOKEN = 314,$/;"	e	enum:yytokentype
PARS_UNIQUE_TOKEN	pars/pars0grm.cc	/^    PARS_UNIQUE_TOKEN = 314,$/;"	e	enum:yytokentype	file:
PARS_UNSIGNED_TOKEN	include/pars0grm.h	/^  PARS_UNSIGNED_TOKEN = 334,$/;"	e	enum:yytokentype
PARS_UNSIGNED_TOKEN	pars/pars0grm.cc	/^    PARS_UNSIGNED_TOKEN = 334,$/;"	e	enum:yytokentype	file:
PARS_UPDATE_TOKEN	include/pars0grm.h	/^  PARS_UPDATE_TOKEN = 306,$/;"	e	enum:yytokentype
PARS_UPDATE_TOKEN	pars/pars0grm.cc	/^    PARS_UPDATE_TOKEN = 306,$/;"	e	enum:yytokentype	file:
PARS_VALUES_TOKEN	include/pars0grm.h	/^  PARS_VALUES_TOKEN = 305,$/;"	e	enum:yytokentype
PARS_VALUES_TOKEN	pars/pars0grm.cc	/^    PARS_VALUES_TOKEN = 305,$/;"	e	enum:yytokentype	file:
PARS_WHERE_TOKEN	include/pars0grm.h	/^  PARS_WHERE_TOKEN = 295,$/;"	e	enum:yytokentype
PARS_WHERE_TOKEN	pars/pars0grm.cc	/^    PARS_WHERE_TOKEN = 295,$/;"	e	enum:yytokentype	file:
PARS_WHILE_TOKEN	include/pars0grm.h	/^  PARS_WHILE_TOKEN = 288,$/;"	e	enum:yytokentype
PARS_WHILE_TOKEN	pars/pars0grm.cc	/^    PARS_WHILE_TOKEN = 288,$/;"	e	enum:yytokentype	file:
PARS_WORK_TOKEN	include/pars0grm.h	/^  PARS_WORK_TOKEN = 333,$/;"	e	enum:yytokentype
PARS_WORK_TOKEN	pars/pars0grm.cc	/^    PARS_WORK_TOKEN = 333,$/;"	e	enum:yytokentype	file:
PARTITION_IN_SHARED_TABLESPACE	handler/ha_innopart.h	/^static constexpr auto PARTITION_IN_SHARED_TABLESPACE =$/;"	v
PART_SEPARATOR	include/dict0types.h	/^constexpr char PART_SEPARATOR[] = "#p#";$/;"	m	namespace:dict_name
PART_SEPARATOR_LEN	include/dict0types.h	/^constexpr size_t PART_SEPARATOR_LEN = sizeof(PART_SEPARATOR) - 1;$/;"	m	namespace:dict_name
PCT_IO	include/srv0srv.h	631;"	d
PCursor	row/row0pread.cc	/^  PCursor(btr_pcur_t *pcur, mtr_t *mtr, size_t read_level)$/;"	f	class:PCursor
PCursor	row/row0pread.cc	/^class PCursor {$/;"	c	file:
PEEK_IF_IN_POOL	include/buf0buf.h	/^  PEEK_IF_IN_POOL,$/;"	m	class:Page_fetch
PFS_DATA_CHUNK_SIZE_POW2	include/clone0monitor.h	/^  static const int PFS_DATA_CHUNK_SIZE_POW2 = 20;$/;"	m	class:Clone_Monitor
PFS_GROUP_BUFFER_SYNC	buf/buf0buf.cc	338;"	d	file:
PFS_MAX_BUFFER_MUTEX_LOCK_REGISTER	buf/buf0buf.cc	344;"	d	file:
PFS_SKIP_BUFFER_MUTEX_RWLOCK	include/sync0sync.h	76;"	d
PFS_SKIP_EVENT_MUTEX	include/sync0sync.h	79;"	d
PFX	dict/dict0stats.cc	2580;"	d	file:
PFX_LEN	dict/dict0stats.cc	2581;"	d	file:
PM_BIGGEST_TYPE	include/dict0mem.h	/^  PM_BIGGEST_TYPE = 3$/;"	e	enum:persistent_type_t
PM_INDEX_CORRUPTED	include/dict0mem.h	/^  PM_INDEX_CORRUPTED = 1,$/;"	e	enum:persistent_type_t
PM_SMALLEST_TYPE	include/dict0mem.h	/^  PM_SMALLEST_TYPE = 0,$/;"	e	enum:persistent_type_t
PM_TABLE_AUTO_INC	include/dict0mem.h	/^  PM_TABLE_AUTO_INC = 2,$/;"	e	enum:persistent_type_t
POOL_EXPAND_SIZE	srv/srv0tmp.cc	/^const uint32_t POOL_EXPAND_SIZE = 10;$/;"	m	namespace:ibt	file:
PQMutex	include/trx0types.h	/^typedef ib_mutex_t PQMutex;$/;"	t
PRDT_HEAPNO	include/lock0priv.h	582;"	d
PREBUILT_HEAP_INITIAL_SIZE	row/row0mysql.cc	802;"	d	file:
PREFIX_NAME	srv/srv0tmp.cc	/^static const char PREFIX_NAME[] = "temp_";$/;"	m	namespace:ibt	file:
PRINT_NUM_OF_LOCK_STRUCTS	lock/lock0lock.cc	4498;"	d	file:
PRINT_USED_CELLS	ha/ha0ha.cc	456;"	d	file:
PROGRESS_INFO_SIZE	include/os0enc.h	/^  static constexpr size_t PROGRESS_INFO_SIZE = sizeof(uint);$/;"	m	class:Encryption
PSI_KEY	handler/ha_innodb.cc	627;"	d	file:
PSI_MUTEX_KEY	handler/ha_innodb.cc	629;"	d	file:
PSI_RWLOCK_KEY	handler/ha_innodb.cc	632;"	d	file:
PUNCH_HOLE	include/os0file.h	/^    PUNCH_HOLE = 256,$/;"	e	enum:IORequest::__anon5
PURGE_CHECK_UNDO_TRUNCATE_DELAY_IN_MS	trx/trx0purge.cc	/^static constexpr int64_t PURGE_CHECK_UNDO_TRUNCATE_DELAY_IN_MS = 1000;$/;"	v	file:
PURGE_CHECK_UNDO_TRUNCATE_DELAY_IN_MS	trx/trx0purge.cc	/^static constexpr int64_t PURGE_CHECK_UNDO_TRUNCATE_DELAY_IN_MS = 10;$/;"	v	file:
PURGE_STATE_DISABLED	include/trx0purge.h	/^  PURGE_STATE_DISABLED \/*!< Purge was never started *\/$/;"	e	enum:purge_state_t
PURGE_STATE_EXIT	include/trx0purge.h	/^  PURGE_STATE_EXIT,    \/*!< Purge has been shutdown *\/$/;"	e	enum:purge_state_t
PURGE_STATE_INIT	include/trx0purge.h	/^  PURGE_STATE_INIT,    \/*!< Purge instance created *\/$/;"	e	enum:purge_state_t
PURGE_STATE_RUN	include/trx0purge.h	/^  PURGE_STATE_RUN,     \/*!< Purge should be running *\/$/;"	e	enum:purge_state_t
PURGE_STATE_STOP	include/trx0purge.h	/^  PURGE_STATE_STOP,    \/*!< Purge should be stopped *\/$/;"	e	enum:purge_state_t
Page	buf/buf0dblwr.cc	/^  Page(page_no_t page_no, const byte *page, uint32_t n_bytes)$/;"	f	struct:dblwr::recv::Page
Page	buf/buf0dblwr.cc	/^struct Page {$/;"	s	namespace:dblwr::recv	file:
Page	include/log0test.h	/^  struct Page {$/;"	s	class:Log_test
PageBulk	include/btr0bulk.h	/^  PageBulk(dict_index_t *index, trx_id_t trx_id, page_no_t page_no, ulint level,$/;"	f	class:PageBulk
PageBulk	include/btr0bulk.h	/^class PageBulk : private ut::Non_copyable {$/;"	c
PageCallback	include/fil0fil.h	/^struct PageCallback {$/;"	s
PageConverter	row/row0import.cc	/^class PageConverter : public AbstractCallback {$/;"	c	file:
Page_Arch_Client_Ctx	include/arch0page.h	/^  Page_Arch_Client_Ctx(bool is_durable) : m_is_durable(is_durable) {$/;"	f	class:Page_Arch_Client_Ctx
Page_Arch_Client_Ctx	include/arch0page.h	/^class Page_Arch_Client_Ctx {$/;"	c
Page_fetch	include/buf0buf.h	/^enum class Page_fetch {$/;"	c
Page_shards	include/lock0latches.h	/^  class Page_shards {$/;"	c	class:locksys::Latches
Page_shards	lock/lock0latches.cc	/^Latches::Page_shards::Page_shards() {$/;"	f	class:locksys::Latches::Page_shards
Pages	buf/buf0dblwr.cc	/^  Pages() : m_pages() {}$/;"	f	class:dblwr::recv::Pages
Pages	buf/buf0dblwr.cc	/^class Pages {$/;"	c	namespace:dblwr::recv	file:
Pages	include/log0test.h	/^  typedef std::map<Key, Page> Pages;$/;"	t	class:Log_test
Parallel_reader	include/row0pread.h	/^class Parallel_reader {$/;"	c
Parallel_reader	row/row0pread.cc	/^Parallel_reader::Parallel_reader(size_t max_threads, bool sync)$/;"	f	class:Parallel_reader
Parallel_reader_adapter	include/row0pread-adapter.h	/^class Parallel_reader_adapter {$/;"	c
Parallel_reader_adapter	row/row0pread-adapter.cc	/^Parallel_reader_adapter::Parallel_reader_adapter(size_t max_threads,$/;"	f	class:Parallel_reader_adapter
PersistentTableMetadata	include/dict0mem.h	/^  PersistentTableMetadata(table_id_t id, uint64 version)$/;"	f	class:PersistentTableMetadata
PersistentTableMetadata	include/dict0mem.h	/^class PersistentTableMetadata {$/;"	c
Persister	include/dict0mem.h	/^class Persister {$/;"	c
Persisters	include/dict0mem.h	/^  Persisters() : m_persisters() {}$/;"	f	class:Persisters
Persisters	include/dict0mem.h	/^class Persisters {$/;"	c
Pool	include/ut0pool.h	/^  Pool(size_t size) : m_end(), m_start(), m_size(size), m_last() {$/;"	f	struct:Pool
Pool	include/ut0pool.h	/^struct Pool {$/;"	s
PoolManager	include/ut0pool.h	/^  PoolManager(size_t size) : m_size(size) { create(); }$/;"	f	struct:PoolManager
PoolManager	include/ut0pool.h	/^struct PoolManager {$/;"	s
PoolType	include/ut0pool.h	/^  typedef Pool PoolType;$/;"	t	struct:PoolManager
Pools	include/ut0pool.h	/^  typedef std::vector<PoolType *, ut_allocator<PoolType *>> Pools;$/;"	t	struct:PoolManager
PrintBuffer	ut/ut.h	/^  PrintBuffer(const void *buf, ulint len) : m_buf(buf), m_len(len) {}$/;"	f	struct:PrintBuffer
PrintBuffer	ut/ut.h	/^struct PrintBuffer {$/;"	s
PrintNotStarted	lock/lock0lock.cc	/^  PrintNotStarted(FILE *file) : m_file(file) {}$/;"	f	struct:PrintNotStarted
PrintNotStarted	lock/lock0lock.cc	/^struct PrintNotStarted {$/;"	s	file:
QRY_INS	api/api0api.cc	/^  QRY_INS, \/*!< Insert operation *\/$/;"	e	enum:ib_qry_type_t	file:
QRY_NON	api/api0api.cc	/^  QRY_NON, \/*!< None\/Sentinel *\/$/;"	e	enum:ib_qry_type_t	file:
QRY_SEL	api/api0api.cc	/^  QRY_SEL  \/*!< Select operation *\/$/;"	e	enum:ib_qry_type_t	file:
QRY_UPD	api/api0api.cc	/^  QRY_UPD, \/*!< Update operation *\/$/;"	e	enum:ib_qry_type_t	file:
QUEUE_BLOCK_SIZE	log/log0meb.cc	/^constexpr size_t QUEUE_BLOCK_SIZE = 4096;$/;"	m	namespace:meb	file:
QUEUE_SIZE_MAX	log/log0meb.cc	/^constexpr size_t QUEUE_SIZE_MAX = 16384;$/;"	m	namespace:meb	file:
QUE_CUR_END	include/que0que.h	/^enum que_cur_t { QUE_CUR_NOT_DEFINED, QUE_CUR_START, QUE_CUR_END };$/;"	e	enum:que_cur_t
QUE_CUR_NOT_DEFINED	include/que0que.h	/^enum que_cur_t { QUE_CUR_NOT_DEFINED, QUE_CUR_START, QUE_CUR_END };$/;"	e	enum:que_cur_t
QUE_CUR_START	include/que0que.h	/^enum que_cur_t { QUE_CUR_NOT_DEFINED, QUE_CUR_START, QUE_CUR_END };$/;"	e	enum:que_cur_t
QUE_FORK_ACTIVE	include/que0que.h	370;"	d
QUE_FORK_BEING_FREED	include/que0que.h	373;"	d
QUE_FORK_COMMAND_WAIT	include/que0que.h	371;"	d
QUE_FORK_EXECUTE	include/que0que.h	363;"	d
QUE_FORK_INSERT	include/que0que.h	357;"	d
QUE_FORK_INVALID	include/que0que.h	372;"	d
QUE_FORK_MYSQL_INTERFACE	include/que0que.h	366;"	d
QUE_FORK_PROCEDURE	include/que0que.h	364;"	d
QUE_FORK_PROCEDURE_CALL	include/que0que.h	365;"	d
QUE_FORK_PURGE	include/que0que.h	362;"	d
QUE_FORK_RECOVERY	include/que0que.h	367;"	d
QUE_FORK_ROLLBACK	include/que0que.h	359;"	d
QUE_FORK_SELECT_NON_SCROLL	include/que0que.h	355;"	d
QUE_FORK_SELECT_SCROLL	include/que0que.h	356;"	d
QUE_FORK_UPDATE	include/que0que.h	358;"	d
QUE_NODE_AGGREGATE	include/que0que.h	384;"	d
QUE_NODE_ASSIGNMENT	include/que0que.h	398;"	d
QUE_NODE_CALL	include/que0que.h	405;"	d
QUE_NODE_COL_ASSIGNMENT	include/que0que.h	401;"	d
QUE_NODE_COMMIT	include/que0que.h	388;"	d
QUE_NODE_CONTROL_STAT	include/que0que.h	376;"	d
QUE_NODE_CURSOR	include/que0que.h	382;"	d
QUE_NODE_ELSIF	include/que0que.h	404;"	d
QUE_NODE_EXIT	include/que0que.h	406;"	d
QUE_NODE_FETCH	include/que0que.h	399;"	d
QUE_NODE_FOR	include/que0que.h	402;"	d
QUE_NODE_FORK	include/que0que.h	385;"	d
QUE_NODE_FUNC	include/que0que.h	393;"	d
QUE_NODE_IF	include/que0que.h	396;"	d
QUE_NODE_INSERT	include/que0que.h	380;"	d
QUE_NODE_LOCK	include/que0que.h	379;"	d
QUE_NODE_OPEN	include/que0que.h	400;"	d
QUE_NODE_ORDER	include/que0que.h	394;"	d
QUE_NODE_PROC	include/que0que.h	395;"	d
QUE_NODE_PURGE	include/que0que.h	390;"	d
QUE_NODE_RES_WORD	include/que0que.h	392;"	d
QUE_NODE_RETURN	include/que0que.h	403;"	d
QUE_NODE_ROLLBACK	include/que0que.h	389;"	d
QUE_NODE_SELECT	include/que0que.h	383;"	d
QUE_NODE_SYMBOL	include/que0que.h	391;"	d
QUE_NODE_THR	include/que0que.h	386;"	d
QUE_NODE_UNDO	include/que0que.h	387;"	d
QUE_NODE_UPDATE	include/que0que.h	381;"	d
QUE_NODE_WHILE	include/que0que.h	397;"	d
QUE_THR_COMMAND_WAIT	include/que0que.h	/^  QUE_THR_COMMAND_WAIT,$/;"	e	enum:que_thr_state_t
QUE_THR_COMPLETED	include/que0que.h	/^  QUE_THR_COMPLETED,$/;"	e	enum:que_thr_state_t
QUE_THR_LOCK_NOLOCK	include/que0que.h	/^  QUE_THR_LOCK_NOLOCK,$/;"	e	enum:que_thr_lock_t
QUE_THR_LOCK_ROW	include/que0que.h	/^  QUE_THR_LOCK_ROW,$/;"	e	enum:que_thr_lock_t
QUE_THR_LOCK_TABLE	include/que0que.h	/^  QUE_THR_LOCK_TABLE$/;"	e	enum:que_thr_lock_t
QUE_THR_LOCK_WAIT	include/que0que.h	/^  QUE_THR_LOCK_WAIT,$/;"	e	enum:que_thr_state_t
QUE_THR_MAGIC_FREED	include/que0que.h	307;"	d
QUE_THR_MAGIC_N	include/que0que.h	306;"	d
QUE_THR_PROCEDURE_WAIT	include/que0que.h	/^  QUE_THR_PROCEDURE_WAIT,$/;"	e	enum:que_thr_state_t
QUE_THR_RUNNING	include/que0que.h	/^  QUE_THR_RUNNING,$/;"	e	enum:que_thr_state_t
QUE_THR_SUSPENDED	include/que0que.h	/^  QUE_THR_SUSPENDED$/;"	e	enum:que_thr_state_t
QUIESCE_COMPLETE	include/dict0types.h	/^  QUIESCE_COMPLETE \/*!< All done *\/$/;"	e	enum:ib_quiesce_t
QUIESCE_NONE	include/dict0types.h	/^  QUIESCE_NONE,$/;"	e	enum:ib_quiesce_t
QUIESCE_START	include/dict0types.h	/^  QUIESCE_START,   \/*!< Initialise, prepare to start *\/$/;"	e	enum:ib_quiesce_t
QUIT_ON_FIRST_NON_BORING	dict/dict0stats.cc	/^  QUIT_ON_FIRST_NON_BORING, \/* quit when the first record that differs$/;"	e	enum:page_scan_method_t	file:
Queue	log/log0meb.cc	/^class Queue {$/;"	c	namespace:meb	file:
RANKING_WORDS_INIT_LEN	fts/fts0que.cc	66;"	d	file:
RANK_DOWNGRADE	fts/fts0que.cc	55;"	d	file:
RANK_UPGRADE	fts/fts0que.cc	56;"	d	file:
READ	include/os0file.h	/^    READ = 1,$/;"	e	enum:IORequest::__anon5
READ_COMMITTED	include/trx0trx.h	/^    READ_COMMITTED,$/;"	e	enum:trx_t::isolation_level_t
READ_PK	include/ut0stage.h	/^    READ_PK = 1,$/;"	e	enum:ut_stage_alter_t::__anon13
READ_UNCOMMITTED	include/trx0trx.h	/^    READ_UNCOMMITTED,$/;"	e	enum:trx_t::isolation_level_t
RECALC_POOL_INITIAL_SLOTS	dict/dict0stats_bg.cc	/^static const ulint RECALC_POOL_INITIAL_SLOTS = 128;$/;"	v	file:
RECOVERY_CRASH	include/srv0start.h	49;"	d
RECOVERY_CRASH	include/srv0start.h	53;"	d
RECV_BEING_PROCESSED	include/log0recv.h	/^  RECV_BEING_PROCESSED,$/;"	e	enum:recv_addr_state
RECV_BEING_READ	include/log0recv.h	/^  RECV_BEING_READ,$/;"	e	enum:recv_addr_state
RECV_DATA_BLOCK_SIZE	log/log0recv.cc	85;"	d	file:
RECV_DISCARDED	include/log0recv.h	/^  RECV_DISCARDED$/;"	e	enum:recv_addr_state
RECV_NOT_PROCESSED	include/log0recv.h	/^  RECV_NOT_PROCESSED,$/;"	e	enum:recv_addr_state
RECV_PARSING_BUF_SIZE	include/log0recv.h	688;"	d
RECV_PROCESSED	include/log0recv.h	/^  RECV_PROCESSED,$/;"	e	enum:recv_addr_state
RECV_READ_AHEAD_AREA	log/log0recv.cc	/^static const size_t RECV_READ_AHEAD_AREA = 32;$/;"	v	file:
RECV_SCAN_SIZE	include/log0recv.h	692;"	d
REC_1BYTE_OFFS_LIMIT	include/rem0rec.h	/^constexpr ulint REC_1BYTE_OFFS_LIMIT = 0x7FUL;$/;"	v
REC_1BYTE_SQL_NULL_MASK	rem/rec.h	149;"	d
REC_2BYTE_EXTERN_MASK	rem/rec.h	155;"	d
REC_2BYTE_OFFS_LIMIT	include/rem0rec.h	/^constexpr ulint REC_2BYTE_OFFS_LIMIT = 0x7FFFUL;$/;"	v
REC_2BYTE_SQL_NULL_MASK	rem/rec.h	151;"	d
REC_ANTELOPE_MAX_INDEX_COL_LEN	include/rem0types.h	64;"	d
REC_BUF_SLOT_SIZE	include/api0api.h	/^static const size_t REC_BUF_SLOT_SIZE = 16384;$/;"	v
REC_FORMAT_COMPACT	include/rem0types.h	/^  REC_FORMAT_COMPACT = 1,    \/*!< COMPACT row format *\/$/;"	e	enum:rec_format_enum
REC_FORMAT_COMPRESSED	include/rem0types.h	/^  REC_FORMAT_COMPRESSED = 2, \/*!< COMPRESSED row format *\/$/;"	e	enum:rec_format_enum
REC_FORMAT_DYNAMIC	include/rem0types.h	/^  REC_FORMAT_DYNAMIC = 3     \/*!< DYNAMIC row format *\/$/;"	e	enum:rec_format_enum
REC_FORMAT_REDUNDANT	include/rem0types.h	/^  REC_FORMAT_REDUNDANT = 0,  \/*!< REDUNDANT row format *\/$/;"	e	enum:rec_format_enum
REC_HEAP_NO_MASK	rem/rec.h	80;"	d
REC_HEAP_NO_SHIFT	rem/rec.h	58;"	d
REC_INFO_BITS_MASK	rem/rec.h	94;"	d
REC_INFO_BITS_SHIFT	rem/rec.h	95;"	d
REC_INFO_DELETED_FLAG	rem/rec.h	117;"	d
REC_INFO_INSTANT_FLAG	rem/rec.h	123;"	d
REC_INFO_MIN_REC_FLAG	rem/rec.h	115;"	d
REC_LOCK_CACHE	lock/lock0lock.cc	/^static const ulint REC_LOCK_CACHE = 8;$/;"	v	file:
REC_LOCK_SIZE	lock/lock0lock.cc	/^static const ulint REC_LOCK_SIZE = sizeof(ib_lock_t) + 256;$/;"	v	file:
REC_MAX_DATA_SIZE	include/rem0rec.h	/^constexpr ulint REC_MAX_DATA_SIZE = 16384;$/;"	v
REC_MAX_HEAP_NO	include/rem0types.h	43;"	d
REC_MAX_N_FIELDS	include/rem0types.h	42;"	d
REC_MAX_N_OWNED	include/rem0types.h	44;"	d
REC_MAX_N_USER_FIELDS	include/rem0types.h	53;"	d
REC_NEW_HEAP_NO	rem/rec.h	55;"	d
REC_NEW_INFO_BITS	rem/rec.h	92;"	d
REC_NEW_N_OWNED	rem/rec.h	87;"	d
REC_NEW_STATUS	rem/rec.h	75;"	d
REC_NEW_STATUS_MASK	rem/rec.h	76;"	d
REC_NEW_STATUS_SHIFT	rem/rec.h	77;"	d
REC_NEXT	rem/rec.h	63;"	d
REC_NEXT_MASK	rem/rec.h	64;"	d
REC_NEXT_SHIFT	rem/rec.h	65;"	d
REC_NODE_PTR_SIZE	rem/rec.h	146;"	d
REC_N_FIELDS_ONE_BYTE_MAX	rem/rec.h	/^static const uint8_t REC_N_FIELDS_ONE_BYTE_MAX = 0x7F;$/;"	v
REC_N_FIELDS_TWO_BYTES_FLAG	rem/rec.h	/^static const uint8_t REC_N_FIELDS_TWO_BYTES_FLAG = 0x80;$/;"	v
REC_N_NEW_EXTRA_BYTES	rem/rec.h	130;"	d
REC_N_OLD_EXTRA_BYTES	rem/rec.h	127;"	d
REC_N_OWNED_MASK	rem/rec.h	88;"	d
REC_N_OWNED_SHIFT	rem/rec.h	89;"	d
REC_N_TMP_EXTRA_BYTES	rem/rec.h	134;"	d
REC_OFFS_COMPACT	rem/rec.h	44;"	d
REC_OFFS_DEFAULT	rem/rec.h	50;"	d
REC_OFFS_EXTERNAL	rem/rec.h	48;"	d
REC_OFFS_HEADER_SIZE	rem/rec.h	159;"	d
REC_OFFS_HEADER_SIZE	rem/rec.h	162;"	d
REC_OFFS_MASK	rem/rec.h	52;"	d
REC_OFFS_NORMAL_SIZE	rem/rec.h	167;"	d
REC_OFFS_SMALL_SIZE	rem/rec.h	168;"	d
REC_OFFS_SQL_NULL	rem/rec.h	46;"	d
REC_OLD_HEAP_NO	rem/rec.h	79;"	d
REC_OLD_INFO_BITS	rem/rec.h	91;"	d
REC_OLD_N_FIELDS	rem/rec.h	71;"	d
REC_OLD_N_FIELDS_MASK	rem/rec.h	72;"	d
REC_OLD_N_FIELDS_SHIFT	rem/rec.h	73;"	d
REC_OLD_N_OWNED	rem/rec.h	86;"	d
REC_OLD_SHORT	rem/rec.h	67;"	d
REC_OLD_SHORT_MASK	rem/rec.h	68;"	d
REC_OLD_SHORT_SHIFT	rem/rec.h	69;"	d
REC_STATUS_INFIMUM	rem/rec.h	139;"	d
REC_STATUS_NODE_PTR	rem/rec.h	138;"	d
REC_STATUS_ORDINARY	rem/rec.h	137;"	d
REC_STATUS_SUPREMUM	rem/rec.h	140;"	d
REC_TMP_INFO_BITS	rem/rec.h	93;"	d
REC_VERSION_56_MAX_INDEX_COL_LEN	include/rem0types.h	69;"	d
REDO_SHARD	fil/fil0fil.cc	/^static const size_t REDO_SHARD = 0;$/;"	v	file:
REDO_SHARD	fil/fil0fil.cc	/^static const size_t REDO_SHARD = MAX_SHARDS - 1;$/;"	v	file:
REGULAR	include/lock0lock.h	/^  REGULAR = 0,$/;"	m	class:lock_duration_t
REJECT	fts/fts0blex.cc	486;"	d	file:
REJECT	fts/fts0tlex.cc	481;"	d	file:
REJECT	pars/lexyy.cc	853;"	d	file:
REMOVE_CACHE_LOG	include/log0ddl.h	/^  REMOVE_CACHE_LOG,$/;"	m	class:Log_Type
RENAME_SPACE_LOG	include/log0ddl.h	/^  RENAME_SPACE_LOG,$/;"	m	class:Log_Type
RENAME_TABLE_LOG	include/log0ddl.h	/^  RENAME_TABLE_LOG,$/;"	m	class:Log_Type
REPEATABLE_READ	include/trx0trx.h	/^    REPEATABLE_READ,$/;"	e	enum:trx_t::isolation_level_t
RET_CMD_TBD	include/ut0test.h	/^    RET_CMD_TBD = 2$/;"	e	enum:ib::Tester::Ret_t
RET_FAIL	include/ut0test.h	/^    RET_FAIL = 1,$/;"	e	enum:ib::Tester::Ret_t
RET_PASS	include/ut0test.h	/^    RET_PASS = 0,$/;"	e	enum:ib::Tester::Ret_t
ROLL_NODE_NONE	include/trx0roll.h	/^  ROLL_NODE_NONE = 0, \/*!< Unknown state *\/$/;"	e	enum:roll_node_state
ROLL_NODE_SEND	include/trx0roll.h	/^  ROLL_NODE_SEND,     \/*!< about to send a rollback signal to$/;"	e	enum:roll_node_state
ROLL_NODE_WAIT	include/trx0roll.h	/^  ROLL_NODE_WAIT      \/*!< rollback signal sent to the$/;"	e	enum:roll_node_state
ROOT	ut/ut0rbt.cc	58;"	d	file:
ROW_BUFFERED	include/row0row.h	/^  ROW_BUFFERED,       \/*!< one of BTR_INSERT, BTR_DELETE, or$/;"	e	enum:row_search_result
ROW_BUILD_FOR_INSERT	include/row0row.h	75;"	d
ROW_BUILD_FOR_PURGE	include/row0row.h	73;"	d
ROW_BUILD_FOR_UNDO	include/row0row.h	74;"	d
ROW_BUILD_NORMAL	include/row0row.h	72;"	d
ROW_COPY_DATA	include/row0row.h	320;"	d
ROW_COPY_POINTERS	include/row0row.h	321;"	d
ROW_FOUND	include/row0row.h	/^  ROW_FOUND = 0,      \/*!< the record was found *\/$/;"	e	enum:row_search_result
ROW_LOG	include/os0file.h	/^    ROW_LOG = 1024,$/;"	e	enum:IORequest::__anon5
ROW_LOG_HEADER_SIZE	row/row0log.cc	77;"	d	file:
ROW_MERGE_READ_GET_NEXT	row/row0ftsort.cc	52;"	d	file:
ROW_MERGE_WRITE_GET_NEXT	row/row0merge.cc	2557;"	d	file:
ROW_MERGE_WRITE_GET_NEXT	row/row0merge.cc	2565;"	d	file:
ROW_MERGE_WRITE_GET_NEXT_LOW	row/row0merge.cc	2538;"	d	file:
ROW_MYSQL_DUMMY_TEMPLATE	include/row0mysql.h	995;"	d
ROW_MYSQL_NO_TEMPLATE	include/row0mysql.h	994;"	d
ROW_MYSQL_REC_FIELDS	include/row0mysql.h	993;"	d
ROW_MYSQL_WHOLE_ROW	include/row0mysql.h	992;"	d
ROW_NOT_DELETED_REF	include/row0row.h	/^  ROW_NOT_DELETED_REF \/*!< BTR_DELETE was specified, and$/;"	e	enum:row_search_result
ROW_NOT_FOUND	include/row0row.h	/^  ROW_NOT_FOUND,      \/*!< record not found *\/$/;"	e	enum:row_search_result
ROW_OP_DELETE	row/row0log.cc	/^  ROW_OP_DELETE$/;"	e	enum:row_op	file:
ROW_OP_INSERT	row/row0log.cc	/^  ROW_OP_INSERT = 0x61,$/;"	e	enum:row_op	file:
ROW_PREBUILT_ALLOCATED	include/row0mysql.h	546;"	d
ROW_PREBUILT_FETCH_MAGIC_N	include/row0mysql.h	990;"	d
ROW_PREBUILT_FREED	include/row0mysql.h	547;"	d
ROW_READ_DID_SEMI_CONSISTENT	include/row0mysql.h	1006;"	d
ROW_READ_TRY_SEMI_CONSISTENT	include/row0mysql.h	1005;"	d
ROW_READ_WITH_LOCKS	include/row0mysql.h	1004;"	d
ROW_RETRIEVE_ALL_COLS	include/row0mysql.h	1001;"	d
ROW_RETRIEVE_PRIMARY_KEY	include/row0mysql.h	1000;"	d
ROW_SEL_CLOSE_CURSOR	include/row0sel.h	/^  ROW_SEL_CLOSE_CURSOR \/*!< close cursor *\/$/;"	e	enum:open_node_op
ROW_SEL_EXACT	include/row0sel.h	/^  ROW_SEL_EXACT = 1,   \/*!< search using a complete key value *\/$/;"	e	enum:row_sel_match_mode
ROW_SEL_EXACT_PREFIX	include/row0sel.h	/^  ROW_SEL_EXACT_PREFIX \/*!< search using a key prefix which$/;"	e	enum:row_sel_match_mode
ROW_SEL_NEXT	include/row0sel.h	/^  ROW_SEL_NEXT = 1, \/*!< ascending direction *\/$/;"	e	enum:row_sel_direction
ROW_SEL_OPEN_CURSOR	include/row0sel.h	/^  ROW_SEL_OPEN_CURSOR, \/*!< open cursor *\/$/;"	e	enum:open_node_op
ROW_SEL_PREV	include/row0sel.h	/^  ROW_SEL_PREV = 2  \/*!< descending direction *\/$/;"	e	enum:row_sel_direction
ROW_T_DELETE	row/row0log.cc	/^  ROW_T_DELETE$/;"	e	enum:row_tab_op	file:
ROW_T_INSERT	row/row0log.cc	/^  ROW_T_INSERT = 0x41,$/;"	e	enum:row_tab_op	file:
ROW_T_UPDATE	row/row0log.cc	/^  ROW_T_UPDATE,$/;"	e	enum:row_tab_op	file:
RSEG_ARRAY_FSEG_HEADER_OFFSET	include/trx0rseg.h	248;"	d
RSEG_ARRAY_HEADER	include/trx0rseg.h	231;"	d
RSEG_ARRAY_PAGES_OFFSET	include/trx0rseg.h	254;"	d
RSEG_ARRAY_RESERVED_BYTES	include/trx0rseg.h	257;"	d
RSEG_ARRAY_SIZE_OFFSET	include/trx0rseg.h	244;"	d
RSEG_ARRAY_SLOT_SIZE	include/trx0rseg.h	260;"	d
RSEG_ARRAY_VERSION	include/trx0rseg.h	238;"	d
RSEG_ARRAY_VERSION_OFFSET	include/trx0rseg.h	241;"	d
RTREE_SEARCH_MODE	include/gis0rtree.h	56;"	d
RTR_LEAF_LATCH_NUM	include/gis0type.h	105;"	d
RTR_MAX_LEVELS	include/gis0type.h	100;"	d
RW_LOCK_FLAG_S	include/sync0types.h	/^  RW_LOCK_FLAG_S = 1 << 0,$/;"	e	enum:rw_lock_flag_t
RW_LOCK_FLAG_SX	include/sync0types.h	/^  RW_LOCK_FLAG_SX = 1 << 2$/;"	e	enum:rw_lock_flag_t
RW_LOCK_FLAG_X	include/sync0types.h	/^  RW_LOCK_FLAG_X = 1 << 1,$/;"	e	enum:rw_lock_flag_t
RW_LOCK_NOT_LOCKED	include/sync0types.h	/^  RW_LOCK_NOT_LOCKED,$/;"	e	enum:latch_level_t
RW_LOCK_S	include/sync0types.h	/^  RW_LOCK_S,$/;"	e	enum:latch_level_t
RW_LOCK_SX	include/sync0types.h	/^  RW_LOCK_SX,$/;"	e	enum:latch_level_t
RW_LOCK_X	include/sync0types.h	/^  RW_LOCK_X,$/;"	e	enum:latch_level_t
RW_LOCK_X_WAIT	include/sync0types.h	/^  RW_LOCK_X_WAIT,$/;"	e	enum:latch_level_t
RW_NO_LATCH	include/sync0rw.h	/^  RW_NO_LATCH = 8$/;"	e	enum:rw_lock_type_t
RW_SX_LATCH	include/sync0rw.h	/^  RW_SX_LATCH = 4,$/;"	e	enum:rw_lock_type_t
RW_S_LATCH	include/sync0rw.h	/^  RW_S_LATCH = 1,$/;"	e	enum:rw_lock_type_t
RW_X_LATCH	include/sync0rw.h	/^  RW_X_LATCH = 2,$/;"	e	enum:rw_lock_type_t
ReadContext	include/lob0lob.h	/^  ReadContext(const page_size_t &page_size, const byte *data, ulint prefix_len,$/;"	f	struct:lob::ReadContext
ReadContext	include/lob0lob.h	/^struct ReadContext {$/;"	s	namespace:lob
ReadView	include/read0types.h	/^class ReadView {$/;"	c
ReadView	read/read0read.cc	/^ReadView::ReadView()$/;"	f	class:ReadView
Reader	include/lob0lob.h	/^  Reader(const ReadContext &ctx)$/;"	f	struct:lob::Reader
Reader	include/lob0lob.h	/^struct Reader {$/;"	s	namespace:lob
RecID	include/lock0priv.h	/^  RecID(const buf_block_t *block, ulint heap_no)$/;"	f	struct:RecID
RecID	include/lock0priv.h	/^  RecID(const lock_t *lock, ulint heap_no)$/;"	f	struct:RecID
RecID	include/lock0priv.h	/^  RecID(page_id_t page_id, uint32_t heap_no)$/;"	f	struct:RecID
RecID	include/lock0priv.h	/^struct RecID {$/;"	s
RecIterator	row/row0import.cc	/^class RecIterator {$/;"	c	file:
RecLock	include/lock0priv.h	/^  RecLock(dict_index_t *index, const RecID &rec_id, ulint mode)$/;"	f	class:RecLock
RecLock	include/lock0priv.h	/^  RecLock(dict_index_t *index, const buf_block_t *block, ulint heap_no,$/;"	f	class:RecLock
RecLock	include/lock0priv.h	/^  RecLock(que_thr_t *thr, dict_index_t *index, const RecID &rec_id, ulint mode)$/;"	f	class:RecLock
RecLock	include/lock0priv.h	/^  RecLock(que_thr_t *thr, dict_index_t *index, const buf_block_t *block,$/;"	f	class:RecLock
RecLock	include/lock0priv.h	/^class RecLock {$/;"	c
Rec_offsets	include/rem0rec.h	/^  Rec_offsets() { rec_offs_init(m_preallocated_buffer); }$/;"	f	class:Rec_offsets
Rec_offsets	include/rem0rec.h	/^class Rec_offsets : private ut::Non_copyable {$/;"	c
Recv	include/arch0recv.h	/^  Recv(const char *dir_name) : m_arch_dir_name(dir_name) {}$/;"	f	class:Arch_Page_Sys::Recv
Recv	include/arch0recv.h	/^class Arch_Page_Sys::Recv {$/;"	c	class:Arch_Page_Sys
Release_all	mtr/mtr0mtr.cc	/^struct Release_all {$/;"	s	file:
Ret_t	include/ut0test.h	/^  enum Ret_t {$/;"	g	struct:ib::Tester
Ret_t	ut/ut0test.cc	/^typedef Tester::Ret_t Ret_t;$/;"	t	namespace:ib	file:
Row_sel_get_clust_rec_for_mysql	row/row0sel.cc	/^  Row_sel_get_clust_rec_for_mysql()$/;"	f	class:Row_sel_get_clust_rec_for_mysql
Row_sel_get_clust_rec_for_mysql	row/row0sel.cc	/^class Row_sel_get_clust_rec_for_mysql {$/;"	c	file:
RsegMutex	include/trx0types.h	/^typedef ib_mutex_t RsegMutex;$/;"	t
Rsegs	include/trx0types.h	/^  Rsegs() : m_rsegs(), m_latch(), m_state(INIT) {$/;"	f	class:Rsegs
Rsegs	include/trx0types.h	/^class Rsegs {$/;"	c
Runnable	include/os0thread-create.h	/^  explicit Runnable(mysql_pfs_key_t pfs_key) : m_pfs_key(pfs_key) { init(); }$/;"	f	class:Runnable
Runnable	include/os0thread-create.h	/^class Runnable {$/;"	c
SCAN	include/buf0buf.h	/^  SCAN,$/;"	m	class:Page_fetch
SCANNING_MYSQL_TRX_LIST	handler/p_s.cc	/^  SCANNING_MYSQL_TRX_LIST,$/;"	e	enum:scan_pass	file:
SCANNING_RW_TRX_LIST	handler/p_s.cc	/^  SCANNING_RW_TRX_LIST,$/;"	e	enum:scan_pass	file:
SCAN_RANGE	handler/p_s.cc	/^  const trx_id_t SCAN_RANGE = 256;$/;"	m	class:Innodb_trx_scan_state	file:
SCHEMA_SEPARATOR	include/dict0types.h	/^constexpr char SCHEMA_SEPARATOR[] = "\/";$/;"	m	namespace:dict_name
SCHEMA_SEPARATOR_LEN	include/dict0types.h	/^constexpr size_t SCHEMA_SEPARATOR_LEN = sizeof(SCHEMA_SEPARATOR) - 1;$/;"	m	namespace:dict_name
SDI_KEY_LEN	include/dict0sdi.h	/^constexpr const uint32_t SDI_KEY_LEN = 8;$/;"	v
SDI_TYPE_LEN	include/dict0sdi.h	/^constexpr const uint32_t SDI_TYPE_LEN = 4;$/;"	v
SDI_VERSION	include/dict0dict.h	/^const uint32_t SDI_VERSION = 1;$/;"	v
SELECT_NOWAIT	include/lock0types.h	/^  SELECT_NOWAIT       \/* return immediately if row is locked *\/$/;"	e	enum:select_mode
SELECT_ORDINARY	include/lock0types.h	/^  SELECT_ORDINARY,    \/* default behaviour *\/$/;"	e	enum:select_mode
SELECT_SKIP_LOCKED	include/lock0types.h	/^  SELECT_SKIP_LOCKED, \/* skip the row if row is locked *\/$/;"	e	enum:select_mode
SEL_COST_LIMIT	row/row0sel.cc	87;"	d	file:
SEL_EXHAUSTED	row/row0sel.cc	91;"	d	file:
SEL_FOUND	row/row0sel.cc	90;"	d	file:
SEL_MAX_N_PREFETCH	row/row0sel.cc	78;"	d	file:
SEL_NODE_CLOSED	include/row0sel.h	/^  SEL_NODE_CLOSED,      \/*!< it is a declared cursor which is not$/;"	e	enum:sel_node_state
SEL_NODE_FETCH	include/row0sel.h	/^  SEL_NODE_FETCH,       \/*!< intention locks have been set *\/$/;"	e	enum:sel_node_state
SEL_NODE_NO_MORE_ROWS	include/row0sel.h	/^  SEL_NODE_NO_MORE_ROWS \/*!< cursor has reached the result set end *\/$/;"	e	enum:sel_node_state
SEL_NODE_OPEN	include/row0sel.h	/^  SEL_NODE_OPEN,        \/*!< intention locks not yet set on tables *\/$/;"	e	enum:sel_node_state
SEL_PREFETCH_LIMIT	row/row0sel.cc	82;"	d	file:
SEL_RETRY	row/row0sel.cc	92;"	d	file:
SEPARATOR	fil/fil0fil.cc	/^constexpr const char *Fil_path::SEPARATOR;$/;"	m	class:Fil_path	file:
SEPARATOR	include/fil0fil.h	/^  static constexpr auto SEPARATOR = "\\\\\/";$/;"	m	class:Fil_path
SERIALIZABLE	include/trx0trx.h	/^    SERIALIZABLE$/;"	e	enum:trx_t::isolation_level_t
SERVER_UUID_LEN	include/os0enc.h	/^  static constexpr size_t SERVER_UUID_LEN = 36;$/;"	m	class:Encryption
SESS_ACTIVE	include/usr0sess.h	63;"	d
SESS_ERROR	include/usr0sess.h	64;"	d
SHARDS_COUNT	include/lock0latches.h	/^  static constexpr size_t SHARDS_COUNT = 512;$/;"	m	class:locksys::Latches
SHOULD_QUIT	buf/buf0dump.cc	226;"	d	file:
SHUTDOWN_SLEEP_ROUNDS	srv/srv0start.cc	/^static constexpr uint32_t SHUTDOWN_SLEEP_ROUNDS =$/;"	v	file:
SHUTDOWN_SLEEP_TIME_US	srv/srv0start.cc	/^static constexpr uint32_t SHUTDOWN_SLEEP_TIME_US = 100;$/;"	v	file:
SHUTTING_DOWN	buf/buf0dump.cc	58;"	d	file:
SHUTTING_DOWN	dict/dict0stats_bg.cc	52;"	d	file:
SIZE	include/lob0impl.h	/^  static const uint8_t SIZE = 4;$/;"	m	class:lob::plist_node_t
SIZE	include/lob0impl.h	/^  static const ulint SIZE = 8;$/;"	m	struct:lob::plist_base_node_t
SIZE	include/lob0impl.h	/^  static const ulint SIZE = OFFSET_BIG_FREE_LEN + 2;$/;"	m	struct:lob::z_frag_entry_t
SIZE	include/lob0index.h	/^  static const ulint SIZE = OFFSET_LOB_VERSION + 4;$/;"	m	struct:lob::index_entry_t
SIZE	include/lob0lob.h	/^  static const uint SIZE = BTR_EXTERN_FIELD_REF_SIZE;$/;"	m	struct:lob::ref_t
SIZE	include/zlob0index.h	/^  static const ulint SIZE = OFFSET_LOB_VERSION + 4;$/;"	m	struct:lob::z_index_entry_t
SIZEOF_NODE	ut/ut0rbt.cc	59;"	d	file:
SIZEOF_RBT_CREATE	fts/fts0que.cc	62;"	d	file:
SIZEOF_RBT_NODE_ADD	fts/fts0que.cc	63;"	d	file:
SIZE_MB	handler/ha_innodb.h	787;"	d
SIZE_OF_PAGE_DIR_ENTRY	include/lob0impl.h	/^  static const ulint SIZE_OF_PAGE_DIR_ENTRY = 2; \/* bytes *\/$/;"	m	struct:lob::z_frag_page_t
SIZE_OF_PAGE_DIR_ENTRY	include/lob0impl.h	/^  static const ulint SIZE_OF_PAGE_DIR_ENTRY = 2;$/;"	m	struct:lob::frag_node_t
SLASH_DOT_DOT_SLASH	fil/fil0fil.cc	/^constexpr const char *Fil_path::SLASH_DOT_DOT_SLASH;$/;"	m	class:Fil_path	file:
SLASH_DOT_DOT_SLASH	include/fil0fil.h	/^  static constexpr auto SLASH_DOT_DOT_SLASH = "\/..\/";$/;"	m	class:Fil_path
SLASH_DOT_DOT_SLASH	include/fil0fil.h	/^  static constexpr auto SLASH_DOT_DOT_SLASH = "\\\\..\\\\";$/;"	m	class:Fil_path
SLAVE_THREAD_ID	srv/srv0tmp.cc	/^const uint32_t SLAVE_THREAD_ID = UINT32_MAX;$/;"	m	namespace:ibt	file:
SMALLEST_LOG	include/log0ddl.h	/^  SMALLEST_LOG = 1,$/;"	m	class:Log_Type
SNAPSHOT_ARR_SIZE	include/clone0clone.h	/^const int SNAPSHOT_ARR_SIZE = 2 * MAX_SNAPSHOTS;$/;"	v
SNAPSHOT_DEF_BLOCK_SIZE_POW2	include/clone0snapshot.h	/^const uint SNAPSHOT_DEF_BLOCK_SIZE_POW2 = 6;$/;"	v
SNAPSHOT_DEF_CHUNK_SIZE_POW2	include/clone0snapshot.h	/^const uint SNAPSHOT_DEF_CHUNK_SIZE_POW2 = 12;$/;"	v
SNAPSHOT_MAX_BLOCK_SIZE_POW2	include/clone0snapshot.h	/^const uint SNAPSHOT_MAX_BLOCK_SIZE_POW2 = 12;$/;"	v
SNAPSHOT_MEM_INITIAL_SIZE	clone/clone0snapshot.cc	/^const uint SNAPSHOT_MEM_INITIAL_SIZE = 16 * 1024;$/;"	v
SNAPSHOT_STATE_CHANGE_SLEEP	include/clone0snapshot.h	/^const uint SNAPSHOT_STATE_CHANGE_SLEEP = 100 * 1000;$/;"	v
SN_LOCKED	include/log0log.h	/^constexpr sn_t SN_LOCKED = 1ULL << 63;$/;"	v
SN_MAX	include/log0log.h	/^constexpr sn_t SN_MAX = (1ULL << 62) - 1;$/;"	v
SORT	include/ut0stage.h	/^    SORT = 2,$/;"	e	enum:ut_stage_alter_t::__anon13
SPACE_ID	fil/fil0fil.cc	/^  SPACE_ID,$/;"	e	enum:dd_fil::__anon3	file:
SPACE_NAME	fil/fil0fil.cc	/^  SPACE_NAME,$/;"	e	enum:dd_fil::__anon3	file:
SPACE_UNKNOWN	include/fil0fil.h	/^constexpr space_id_t SPACE_UNKNOWN = std::numeric_limits<space_id_t>::max();$/;"	v
SPATIAL_MIXED	include/dict0types.h	/^  SPATIAL_MIXED = 2,$/;"	e	enum:spatial_status_t
SPATIAL_NONE	include/dict0types.h	/^  SPATIAL_NONE = 1,$/;"	e	enum:spatial_status_t
SPATIAL_ONLY	include/dict0types.h	/^  SPATIAL_ONLY = 3$/;"	e	enum:spatial_status_t
SPATIAL_STATUS_MASK	include/dict0types.h	321;"	d
SPATIAL_STATUS_SHIFT	include/dict0types.h	318;"	d
SPATIAL_UNKNOWN	include/dict0types.h	/^  SPATIAL_UNKNOWN = 0,$/;"	e	enum:spatial_status_t
SPLEN	include/gis0geo.h	36;"	d
SPTYPE	include/gis0geo.h	35;"	d
SRV_AUTO_EXTEND_INCREMENT	include/srv0srv.h	337;"	d
SRV_BUF_DUMP_FILENAME_DEFAULT	include/srv0srv.h	318;"	d
SRV_CHECKSUM_ALGORITHM_CRC32	include/buf0types.h	/^  SRV_CHECKSUM_ALGORITHM_CRC32,         \/*!< Write crc32, allow crc32,$/;"	e	enum:srv_checksum_algorithm_t
SRV_CHECKSUM_ALGORITHM_INNODB	include/buf0types.h	/^  SRV_CHECKSUM_ALGORITHM_INNODB,        \/*!< Write innodb, allow crc32,$/;"	e	enum:srv_checksum_algorithm_t
SRV_CHECKSUM_ALGORITHM_NONE	include/buf0types.h	/^  SRV_CHECKSUM_ALGORITHM_NONE,          \/*!< Write none, allow crc32,$/;"	e	enum:srv_checksum_algorithm_t
SRV_CHECKSUM_ALGORITHM_STRICT_CRC32	include/buf0types.h	/^  SRV_CHECKSUM_ALGORITHM_STRICT_CRC32,  \/*!< Write crc32, allow crc32$/;"	e	enum:srv_checksum_algorithm_t
SRV_CHECKSUM_ALGORITHM_STRICT_INNODB	include/buf0types.h	/^  SRV_CHECKSUM_ALGORITHM_STRICT_INNODB, \/*!< Write innodb, allow$/;"	e	enum:srv_checksum_algorithm_t
SRV_CHECKSUM_ALGORITHM_STRICT_NONE	include/buf0types.h	/^  SRV_CHECKSUM_ALGORITHM_STRICT_NONE    \/*!< Write none, allow none$/;"	e	enum:srv_checksum_algorithm_t
SRV_FORCE_IGNORE_CORRUPT	include/srv0srv.h	/^  SRV_FORCE_IGNORE_CORRUPT = 1,   \/*!< let the server run even if it$/;"	e	enum:__anon10
SRV_FORCE_NO_BACKGROUND	include/srv0srv.h	/^  SRV_FORCE_NO_BACKGROUND = 2,    \/*!< prevent the main thread from$/;"	e	enum:__anon10
SRV_FORCE_NO_IBUF_MERGE	include/srv0srv.h	/^  SRV_FORCE_NO_IBUF_MERGE = 4,    \/*!< prevent also ibuf operations:$/;"	e	enum:__anon10
SRV_FORCE_NO_LOG_REDO	include/srv0srv.h	/^  SRV_FORCE_NO_LOG_REDO = 6       \/*!< do not do the log roll-forward$/;"	e	enum:__anon10
SRV_FORCE_NO_TRX_UNDO	include/srv0srv.h	/^  SRV_FORCE_NO_TRX_UNDO = 3,      \/*!< do not run trx rollback after$/;"	e	enum:__anon10
SRV_FORCE_NO_UNDO_LOG_SCAN	include/srv0srv.h	/^  SRV_FORCE_NO_UNDO_LOG_SCAN = 5, \/*!< do not look at undo logs when$/;"	e	enum:__anon10
SRV_MASTER	include/srv0srv.h	/^  SRV_MASTER  \/*!< the master thread, (whose type$/;"	e	enum:srv_thread_type
SRV_MASTER_DICT_LRU_INTERVAL	srv/srv0srv.cc	621;"	d	file:
SRV_MASTER_SLOT	srv/srv0srv.cc	/^static const ulint SRV_MASTER_SLOT = 0;$/;"	v	file:
SRV_MAX_IO_CAPACITY_DUMMY_DEFAULT	include/srv0srv.h	625;"	d
SRV_MAX_IO_CAPACITY_LIMIT	include/srv0srv.h	626;"	d
SRV_MAX_N_IO_THREADS	include/srv0srv.h	716;"	d
SRV_MAX_N_IO_THREADS	include/srv0srv.h	718;"	d
SRV_MAX_N_PENDING_SYNC_IOS	srv/srv0start.cc	175;"	d	file:
SRV_NEW_RAW	include/fsp0file.h	/^  SRV_NEW_RAW,$/;"	e	enum:device_t
SRV_NONE	include/srv0srv.h	/^  SRV_NONE,   \/*!< None *\/$/;"	e	enum:srv_thread_type
SRV_NOT_RAW	include/fsp0file.h	/^  SRV_NOT_RAW = 0,$/;"	e	enum:device_t
SRV_N_LOG_FILES_CLONE_MAX	include/srv0srv.h	427;"	d
SRV_N_LOG_FILES_MAX	include/srv0srv.h	430;"	d
SRV_N_PENDING_IOS_PER_THREAD	os/os0file.cc	208;"	d	file:
SRV_OLD_RAW	include/fsp0file.h	/^  SRV_OLD_RAW$/;"	e	enum:device_t
SRV_PURGE	include/srv0srv.h	/^  SRV_PURGE,  \/*!< Purge coordinator thread *\/$/;"	e	enum:srv_thread_type
SRV_PURGE_SLOT	srv/srv0srv.cc	/^static const ulint SRV_PURGE_SLOT = 1;$/;"	v	file:
SRV_SHUTDOWN_CLEANUP	include/srv0shutdown.h	/^  SRV_SHUTDOWN_CLEANUP,$/;"	e	enum:srv_shutdown_t
SRV_SHUTDOWN_DD	include/srv0shutdown.h	/^  SRV_SHUTDOWN_DD,$/;"	e	enum:srv_shutdown_t
SRV_SHUTDOWN_EXIT_THREADS	include/srv0shutdown.h	/^  SRV_SHUTDOWN_EXIT_THREADS$/;"	e	enum:srv_shutdown_t
SRV_SHUTDOWN_FLUSH_PHASE	include/srv0shutdown.h	/^  SRV_SHUTDOWN_FLUSH_PHASE,$/;"	e	enum:srv_shutdown_t
SRV_SHUTDOWN_LAST_PHASE	include/srv0shutdown.h	/^  SRV_SHUTDOWN_LAST_PHASE,$/;"	e	enum:srv_shutdown_t
SRV_SHUTDOWN_MASTER_STOP	include/srv0shutdown.h	/^  SRV_SHUTDOWN_MASTER_STOP,$/;"	e	enum:srv_shutdown_t
SRV_SHUTDOWN_NONE	include/srv0shutdown.h	/^  SRV_SHUTDOWN_NONE = 0,$/;"	e	enum:srv_shutdown_t
SRV_SHUTDOWN_PRE_DD_AND_SYSTEM_TRANSACTIONS	include/srv0shutdown.h	/^  SRV_SHUTDOWN_PRE_DD_AND_SYSTEM_TRANSACTIONS,$/;"	e	enum:srv_shutdown_t
SRV_SHUTDOWN_PURGE	include/srv0shutdown.h	/^  SRV_SHUTDOWN_PURGE,$/;"	e	enum:srv_shutdown_t
SRV_SHUTDOWN_RECOVERY_ROLLBACK	include/srv0shutdown.h	/^  SRV_SHUTDOWN_RECOVERY_ROLLBACK,$/;"	e	enum:srv_shutdown_t
SRV_START_STATE_IO	srv/srv0start.cc	/^  SRV_START_STATE_IO = 2,       \/*!< Started IO threads *\/$/;"	e	enum:srv_start_state_t	file:
SRV_START_STATE_LOCK_SYS	srv/srv0start.cc	/^  SRV_START_STATE_LOCK_SYS = 1, \/*!< Started lock-timeout$/;"	e	enum:srv_start_state_t	file:
SRV_START_STATE_MASTER	srv/srv0start.cc	/^  SRV_START_STATE_MASTER = 8,   \/*!< Started master threadd. *\/$/;"	e	enum:srv_start_state_t	file:
SRV_START_STATE_MONITOR	srv/srv0start.cc	/^  SRV_START_STATE_MONITOR = 4,  \/*!< Started montior thread *\/$/;"	e	enum:srv_start_state_t	file:
SRV_START_STATE_NONE	srv/srv0start.cc	/^  SRV_START_STATE_NONE = 0,     \/*!< No thread started *\/$/;"	e	enum:srv_start_state_t	file:
SRV_START_STATE_PURGE	srv/srv0start.cc	/^  SRV_START_STATE_PURGE = 16,   \/*!< Started purge thread(s) *\/$/;"	e	enum:srv_start_state_t	file:
SRV_START_STATE_STAT	srv/srv0start.cc	/^  SRV_START_STATE_STAT = 32     \/*!< Started bufdump + dict stat$/;"	e	enum:srv_start_state_t	file:
SRV_STATS_NULLS_EQUAL	include/srv0srv.h	/^  SRV_STATS_NULLS_EQUAL,   \/* All NULL values are treated as$/;"	e	enum:srv_stats_method_name_enum
SRV_STATS_NULLS_IGNORED	include/srv0srv.h	/^  SRV_STATS_NULLS_IGNORED  \/* NULL values are ignored *\/$/;"	e	enum:srv_stats_method_name_enum
SRV_STATS_NULLS_UNEQUAL	include/srv0srv.h	/^  SRV_STATS_NULLS_UNEQUAL, \/* All NULL values are treated as$/;"	e	enum:srv_stats_method_name_enum
SRV_UNIX_FSYNC	include/srv0srv.h	/^  SRV_UNIX_FSYNC = 0,  \/*!< fsync, the default *\/$/;"	e	enum:srv_unix_flush_t
SRV_UNIX_LITTLESYNC	include/srv0srv.h	/^  SRV_UNIX_LITTLESYNC, \/*!< do not call os_file_flush()$/;"	e	enum:srv_unix_flush_t
SRV_UNIX_NOSYNC	include/srv0srv.h	/^  SRV_UNIX_NOSYNC,     \/*!< do not flush after writing *\/$/;"	e	enum:srv_unix_flush_t
SRV_UNIX_O_DIRECT	include/srv0srv.h	/^  SRV_UNIX_O_DIRECT,   \/*!< invoke os_file_set_nocache() on$/;"	e	enum:srv_unix_flush_t
SRV_UNIX_O_DIRECT_NO_FSYNC	include/srv0srv.h	/^  SRV_UNIX_O_DIRECT_NO_FSYNC$/;"	e	enum:srv_unix_flush_t
SRV_UNIX_O_DSYNC	include/srv0srv.h	/^  SRV_UNIX_O_DSYNC,    \/*!< open log files in O_SYNC mode *\/$/;"	e	enum:srv_unix_flush_t
SRV_WIN_IO_NORMAL	include/srv0srv.h	/^  SRV_WIN_IO_NORMAL,$/;"	e	enum:srv_win_flush_t
SRV_WIN_IO_UNBUFFERED	include/srv0srv.h	/^  SRV_WIN_IO_UNBUFFERED = 0,$/;"	e	enum:srv_win_flush_t
SRV_WORKER	include/srv0srv.h	/^  SRV_WORKER, \/*!< threads serving parallelized$/;"	e	enum:srv_thread_type
STARTED	include/os0thread.h	/^  enum class State { INVALID, NOT_STARTED, ALLOWED_TO_START, STARTED, STOPPED };$/;"	m	class:IB_thread::State
STATUS_ERR	buf/buf0dump.cc	/^enum status_severity { STATUS_VERBOSE, STATUS_INFO, STATUS_ERR };$/;"	e	enum:status_severity	file:
STATUS_INFO	buf/buf0dump.cc	/^enum status_severity { STATUS_VERBOSE, STATUS_INFO, STATUS_ERR };$/;"	e	enum:status_severity	file:
STATUS_VERBOSE	buf/buf0dump.cc	/^enum status_severity { STATUS_VERBOSE, STATUS_INFO, STATUS_ERR };$/;"	e	enum:status_severity	file:
STOPWORD_FROM_DEFAULT	include/fts0fts.h	408;"	d
STOPWORD_NOT_INIT	include/fts0fts.h	406;"	d
STOPWORD_OFF	include/fts0fts.h	407;"	d
STOPWORD_USER_TABLE	include/fts0fts.h	409;"	d
STRUCT_FLD	handler/i_s.cc	219;"	d	file:
SUB_PART_SEPARATOR	include/dict0types.h	/^constexpr char SUB_PART_SEPARATOR[] = "#sp#";$/;"	m	namespace:dict_name
SUB_PART_SEPARATOR_LEN	include/dict0types.h	/^constexpr size_t SUB_PART_SEPARATOR_LEN = sizeof(SUB_PART_SEPARATOR) - 1;$/;"	m	namespace:dict_name
SUM_OF_OTHER_INDEX_SIZE_COL_NO	include/dict0stats.h	/^  static constexpr unsigned SUM_OF_OTHER_INDEX_SIZE_COL_NO = 5;$/;"	m	class:TableStatsRecord
SYM_CLUST_FIELD_NO	include/pars0sym.h	89;"	d
SYM_COLUMN	include/pars0sym.h	/^  SYM_COLUMN,            \/*!< database table name *\/$/;"	e	enum:sym_tab_entry
SYM_CURSOR	include/pars0sym.h	/^  SYM_CURSOR,            \/*!< named cursor *\/$/;"	e	enum:sym_tab_entry
SYM_FUNCTION	include/pars0sym.h	/^  SYM_FUNCTION           \/*!< user function name *\/$/;"	e	enum:sym_tab_entry
SYM_IMPLICIT_VAR	include/pars0sym.h	/^  SYM_IMPLICIT_VAR,      \/*!< storage for a intermediate result$/;"	e	enum:sym_tab_entry
SYM_INDEX	include/pars0sym.h	/^  SYM_INDEX,             \/*!< database index name *\/$/;"	e	enum:sym_tab_entry
SYM_LIT	include/pars0sym.h	/^  SYM_LIT,               \/*!< literal *\/$/;"	e	enum:sym_tab_entry
SYM_PROCEDURE_NAME	include/pars0sym.h	/^  SYM_PROCEDURE_NAME,    \/*!< stored procedure name *\/$/;"	e	enum:sym_tab_entry
SYM_SEC_FIELD_NO	include/pars0sym.h	91;"	d
SYM_TABLE	include/pars0sym.h	/^  SYM_TABLE,             \/*!< database table name *\/$/;"	e	enum:sym_tab_entry
SYM_TABLE_REF_COUNTED	include/pars0sym.h	/^  SYM_TABLE_REF_COUNTED, \/*!< database table name, ref counted. Must$/;"	e	enum:sym_tab_entry
SYM_UNSET	include/pars0sym.h	/^  SYM_UNSET,             \/*!< Unset entry. *\/$/;"	e	enum:sym_tab_entry
SYM_VAR	include/pars0sym.h	/^  SYM_VAR = 91,          \/*!< declared parameter or local$/;"	e	enum:sym_tab_entry
SYNC	include/os0file.h	/^  SYNC = 24$/;"	m	class:AIO_mode
SYNC_ANY_LATCH	include/sync0types.h	/^  SYNC_ANY_LATCH,$/;"	e	enum:latch_level_t
SYNC_ARRAY_TIMEOUT	sync/sync0arr.cc	881;"	d	file:
SYNC_ARRAY_TIMEOUT	sync/sync0arr.cc	926;"	d	file:
SYNC_BUF_BLOCK	include/sync0types.h	/^  SYNC_BUF_BLOCK,$/;"	e	enum:latch_level_t
SYNC_BUF_CHUNKS	include/sync0types.h	/^  SYNC_BUF_CHUNKS,$/;"	e	enum:latch_level_t
SYNC_BUF_FLUSH_LIST	include/sync0types.h	/^  SYNC_BUF_FLUSH_LIST,$/;"	e	enum:latch_level_t
SYNC_BUF_FLUSH_STATE	include/sync0types.h	/^  SYNC_BUF_FLUSH_STATE,$/;"	e	enum:latch_level_t
SYNC_BUF_FREE_LIST	include/sync0types.h	/^  SYNC_BUF_FREE_LIST,$/;"	e	enum:latch_level_t
SYNC_BUF_LRU_LIST	include/sync0types.h	/^  SYNC_BUF_LRU_LIST,$/;"	e	enum:latch_level_t
SYNC_BUF_PAGE_HASH	include/sync0types.h	/^  SYNC_BUF_PAGE_HASH,$/;"	e	enum:latch_level_t
SYNC_BUF_ZIP_FREE	include/sync0types.h	/^  SYNC_BUF_ZIP_FREE,$/;"	e	enum:latch_level_t
SYNC_BUF_ZIP_HASH	include/sync0types.h	/^  SYNC_BUF_ZIP_HASH,$/;"	e	enum:latch_level_t
SYNC_DBLWR	include/sync0types.h	/^  SYNC_DBLWR,$/;"	e	enum:latch_level_t
SYNC_DICT	include/sync0types.h	/^  SYNC_DICT,$/;"	e	enum:latch_level_t
SYNC_DICT_AUTOINC_MUTEX	include/sync0types.h	/^  SYNC_DICT_AUTOINC_MUTEX,$/;"	e	enum:latch_level_t
SYNC_DICT_HEADER	include/sync0types.h	/^  SYNC_DICT_HEADER,$/;"	e	enum:latch_level_t
SYNC_DICT_OPERATION	include/sync0types.h	/^  SYNC_DICT_OPERATION,$/;"	e	enum:latch_level_t
SYNC_EXTERN_STORAGE	include/sync0types.h	/^  SYNC_EXTERN_STORAGE,$/;"	e	enum:latch_level_t
SYNC_FIL_SHARD	include/sync0types.h	/^  SYNC_FIL_SHARD,$/;"	e	enum:latch_level_t
SYNC_FSP	include/sync0types.h	/^  SYNC_FSP,$/;"	e	enum:latch_level_t
SYNC_FSP_PAGE	include/sync0types.h	/^  SYNC_FSP_PAGE,$/;"	e	enum:latch_level_t
SYNC_FTS_BG_THREADS	include/sync0types.h	/^  SYNC_FTS_BG_THREADS,$/;"	e	enum:latch_level_t
SYNC_FTS_CACHE	include/sync0types.h	/^  SYNC_FTS_CACHE,$/;"	e	enum:latch_level_t
SYNC_FTS_CACHE_INIT	include/sync0types.h	/^  SYNC_FTS_CACHE_INIT,$/;"	e	enum:latch_level_t
SYNC_FTS_OPTIMIZE	include/sync0types.h	/^  SYNC_FTS_OPTIMIZE,$/;"	e	enum:latch_level_t
SYNC_FTS_TOKENIZE	include/sync0types.h	/^  SYNC_FTS_TOKENIZE,$/;"	e	enum:latch_level_t
SYNC_IBUF_BITMAP	include/sync0types.h	/^  SYNC_IBUF_BITMAP,$/;"	e	enum:latch_level_t
SYNC_IBUF_BITMAP_MUTEX	include/sync0types.h	/^  SYNC_IBUF_BITMAP_MUTEX,$/;"	e	enum:latch_level_t
SYNC_IBUF_HEADER	include/sync0types.h	/^  SYNC_IBUF_HEADER,$/;"	e	enum:latch_level_t
SYNC_IBUF_INDEX_TREE	include/sync0types.h	/^  SYNC_IBUF_INDEX_TREE,$/;"	e	enum:latch_level_t
SYNC_IBUF_MUTEX	include/sync0types.h	/^  SYNC_IBUF_MUTEX,$/;"	e	enum:latch_level_t
SYNC_IBUF_PESS_INSERT_MUTEX	include/sync0types.h	/^  SYNC_IBUF_PESS_INSERT_MUTEX,$/;"	e	enum:latch_level_t
SYNC_IBUF_TREE_NODE	include/sync0types.h	/^  SYNC_IBUF_TREE_NODE,$/;"	e	enum:latch_level_t
SYNC_IBUF_TREE_NODE_NEW	include/sync0types.h	/^  SYNC_IBUF_TREE_NODE_NEW,$/;"	e	enum:latch_level_t
SYNC_INDEX_ONLINE_LOG	include/sync0types.h	/^  SYNC_INDEX_ONLINE_LOG,$/;"	e	enum:latch_level_t
SYNC_INDEX_TREE	include/sync0types.h	/^  SYNC_INDEX_TREE,$/;"	e	enum:latch_level_t
SYNC_LEVEL_MAX	include/sync0types.h	/^  SYNC_LEVEL_MAX = SYNC_NO_ORDER_CHECK$/;"	e	enum:latch_level_t
SYNC_LEVEL_VARYING	include/sync0types.h	/^  SYNC_LEVEL_VARYING,$/;"	e	enum:latch_level_t
SYNC_LOCK_FREE_HASH	include/sync0types.h	/^  SYNC_LOCK_FREE_HASH,$/;"	e	enum:latch_level_t
SYNC_LOCK_SYS_GLOBAL	include/sync0types.h	/^  SYNC_LOCK_SYS_GLOBAL,$/;"	e	enum:latch_level_t
SYNC_LOCK_SYS_SHARDED	include/sync0types.h	/^  SYNC_LOCK_SYS_SHARDED,$/;"	e	enum:latch_level_t
SYNC_LOCK_WAIT_SYS	include/sync0types.h	/^  SYNC_LOCK_WAIT_SYS,$/;"	e	enum:latch_level_t
SYNC_LOG_ARCH	include/sync0types.h	/^  SYNC_LOG_ARCH,$/;"	e	enum:latch_level_t
SYNC_LOG_CHECKPOINTER	include/sync0types.h	/^  SYNC_LOG_CHECKPOINTER,$/;"	e	enum:latch_level_t
SYNC_LOG_CLOSER	include/sync0types.h	/^  SYNC_LOG_CLOSER,$/;"	e	enum:latch_level_t
SYNC_LOG_FLUSHER	include/sync0types.h	/^  SYNC_LOG_FLUSHER,$/;"	e	enum:latch_level_t
SYNC_LOG_FLUSH_NOTIFIER	include/sync0types.h	/^  SYNC_LOG_FLUSH_NOTIFIER,$/;"	e	enum:latch_level_t
SYNC_LOG_LIMITS	include/sync0types.h	/^  SYNC_LOG_LIMITS,$/;"	e	enum:latch_level_t
SYNC_LOG_SN	include/sync0types.h	/^  SYNC_LOG_SN,$/;"	e	enum:latch_level_t
SYNC_LOG_SN_MUTEX	include/sync0types.h	/^  SYNC_LOG_SN_MUTEX,$/;"	e	enum:latch_level_t
SYNC_LOG_WRITER	include/sync0types.h	/^  SYNC_LOG_WRITER,$/;"	e	enum:latch_level_t
SYNC_LOG_WRITE_NOTIFIER	include/sync0types.h	/^  SYNC_LOG_WRITE_NOTIFIER,$/;"	e	enum:latch_level_t
SYNC_MONITOR_MUTEX	include/sync0types.h	/^  SYNC_MONITOR_MUTEX,$/;"	e	enum:latch_level_t
SYNC_MUTEX	include/sync0types.h	/^  SYNC_MUTEX = 1,$/;"	e	enum:latch_level_t
SYNC_NO_ORDER_CHECK	include/sync0types.h	/^  SYNC_NO_ORDER_CHECK,$/;"	e	enum:latch_level_t
SYNC_PAGE_ARCH	include/sync0types.h	/^  SYNC_PAGE_ARCH,$/;"	e	enum:latch_level_t
SYNC_PAGE_ARCH_CLIENT	include/sync0types.h	/^  SYNC_PAGE_ARCH_CLIENT,$/;"	e	enum:latch_level_t
SYNC_PAGE_ARCH_OPER	include/sync0types.h	/^  SYNC_PAGE_ARCH_OPER,$/;"	e	enum:latch_level_t
SYNC_PAGE_CLEANER	include/sync0types.h	/^  SYNC_PAGE_CLEANER,$/;"	e	enum:latch_level_t
SYNC_PAGE_FLUSH_SLOTS	buf/buf0dblwr.cc	/^constexpr uint32_t SYNC_PAGE_FLUSH_SLOTS = 512;$/;"	v
SYNC_PARSER	include/sync0types.h	/^  SYNC_PARSER,$/;"	e	enum:latch_level_t
SYNC_PERSIST_AUTOINC	include/sync0types.h	/^  SYNC_PERSIST_AUTOINC,$/;"	e	enum:latch_level_t
SYNC_PERSIST_DIRTY_TABLES	include/sync0types.h	/^  SYNC_PERSIST_DIRTY_TABLES,$/;"	e	enum:latch_level_t
SYNC_POOL	include/sync0types.h	/^  SYNC_POOL,$/;"	e	enum:latch_level_t
SYNC_POOL_MANAGER	include/sync0types.h	/^  SYNC_POOL_MANAGER,$/;"	e	enum:latch_level_t
SYNC_PURGE_LATCH	include/sync0types.h	/^  SYNC_PURGE_LATCH,$/;"	e	enum:latch_level_t
SYNC_PURGE_QUEUE	include/sync0types.h	/^  SYNC_PURGE_QUEUE,$/;"	e	enum:latch_level_t
SYNC_RECV	include/sync0types.h	/^  SYNC_RECV,$/;"	e	enum:latch_level_t
SYNC_RECV_WRITER	include/sync0types.h	/^  SYNC_RECV_WRITER,$/;"	e	enum:latch_level_t
SYNC_RSEGS	include/sync0types.h	/^  SYNC_RSEGS,$/;"	e	enum:latch_level_t
SYNC_RSEG_ARRAY_HEADER	include/sync0types.h	/^  SYNC_RSEG_ARRAY_HEADER,$/;"	e	enum:latch_level_t
SYNC_RSEG_HEADER	include/sync0types.h	/^  SYNC_RSEG_HEADER,$/;"	e	enum:latch_level_t
SYNC_RSEG_HEADER_NEW	include/sync0types.h	/^  SYNC_RSEG_HEADER_NEW,$/;"	e	enum:latch_level_t
SYNC_SEARCH_SYS	include/sync0types.h	/^  SYNC_SEARCH_SYS,$/;"	e	enum:latch_level_t
SYNC_STATS_AUTO_RECALC	include/sync0types.h	/^  SYNC_STATS_AUTO_RECALC,$/;"	e	enum:latch_level_t
SYNC_TABLE	include/sync0types.h	/^  SYNC_TABLE,$/;"	e	enum:latch_level_t
SYNC_TEMP_POOL_MANAGER	include/sync0types.h	/^  SYNC_TEMP_POOL_MANAGER,$/;"	e	enum:latch_level_t
SYNC_TEMP_SPACE_RSEG	include/sync0types.h	/^  SYNC_TEMP_SPACE_RSEG,$/;"	e	enum:latch_level_t
SYNC_THREADS	include/sync0types.h	/^  SYNC_THREADS,$/;"	e	enum:latch_level_t
SYNC_TREE_NODE	include/sync0types.h	/^  SYNC_TREE_NODE,$/;"	e	enum:latch_level_t
SYNC_TREE_NODE_FROM_HASH	include/sync0types.h	/^  SYNC_TREE_NODE_FROM_HASH,$/;"	e	enum:latch_level_t
SYNC_TREE_NODE_NEW	include/sync0types.h	/^  SYNC_TREE_NODE_NEW,$/;"	e	enum:latch_level_t
SYNC_TRX	include/sync0types.h	/^  SYNC_TRX,$/;"	e	enum:latch_level_t
SYNC_TRX_I_S_LAST_READ	include/sync0types.h	/^  SYNC_TRX_I_S_LAST_READ,$/;"	e	enum:latch_level_t
SYNC_TRX_I_S_RWLOCK	include/sync0types.h	/^  SYNC_TRX_I_S_RWLOCK,$/;"	e	enum:latch_level_t
SYNC_TRX_SYS	include/sync0types.h	/^  SYNC_TRX_SYS,$/;"	e	enum:latch_level_t
SYNC_TRX_SYS_HEADER	include/sync0types.h	/^  SYNC_TRX_SYS_HEADER,$/;"	e	enum:latch_level_t
SYNC_TRX_SYS_RSEG	include/sync0types.h	/^  SYNC_TRX_SYS_RSEG,$/;"	e	enum:latch_level_t
SYNC_TRX_UNDO	include/sync0types.h	/^  SYNC_TRX_UNDO,$/;"	e	enum:latch_level_t
SYNC_TRX_UNDO_PAGE	include/sync0types.h	/^  SYNC_TRX_UNDO_PAGE,$/;"	e	enum:latch_level_t
SYNC_UNDO_DDL	include/sync0types.h	/^  SYNC_UNDO_DDL,$/;"	e	enum:latch_level_t
SYNC_UNDO_SPACES	include/sync0types.h	/^  SYNC_UNDO_SPACES,$/;"	e	enum:latch_level_t
SYNC_UNDO_SPACE_RSEG	include/sync0types.h	/^  SYNC_UNDO_SPACE_RSEG,$/;"	e	enum:latch_level_t
SYNC_UNKNOWN	include/sync0types.h	/^  SYNC_UNKNOWN = 0,$/;"	e	enum:latch_level_t
SYNC_WORK_QUEUE	include/sync0types.h	/^  SYNC_WORK_QUEUE,$/;"	e	enum:latch_level_t
SYSTEM_TABLE_NAME	dict/dict0load.cc	/^const char *SYSTEM_TABLE_NAME[] = {$/;"	v
SYSTEM_TABLE_SPACE	include/dict0dict.h	/^const space_id_t SYSTEM_TABLE_SPACE = TRX_SYS_SPACE;$/;"	v
SYS_COLUMNS	include/dict0load.h	/^  SYS_COLUMNS,$/;"	e	enum:dict_system_id_t
SYS_DATAFILES	include/dict0load.h	/^  SYS_DATAFILES,$/;"	e	enum:dict_system_id_t
SYS_FIELDS	include/dict0load.h	/^  SYS_FIELDS,$/;"	e	enum:dict_system_id_t
SYS_FOREIGN	include/dict0load.h	/^  SYS_FOREIGN,$/;"	e	enum:dict_system_id_t
SYS_FOREIGN_COLS	include/dict0load.h	/^  SYS_FOREIGN_COLS,$/;"	e	enum:dict_system_id_t
SYS_INDEXES	include/dict0load.h	/^  SYS_INDEXES,$/;"	e	enum:dict_system_id_t
SYS_NUM_SYSTEM_TABLES	include/dict0load.h	/^  SYS_NUM_SYSTEM_TABLES$/;"	e	enum:dict_system_id_t
SYS_TABLES	include/dict0load.h	/^  SYS_TABLES = 0,$/;"	e	enum:dict_system_id_t
SYS_TABLESPACES	include/dict0load.h	/^  SYS_TABLESPACES,$/;"	e	enum:dict_system_id_t
SYS_VIRTUAL	include/dict0load.h	/^  SYS_VIRTUAL,$/;"	e	enum:dict_system_id_t
S_NUM_CONFIG_TABLES	clone/clone0api.cc	/^  static const size_t S_NUM_CONFIG_TABLES = 0;$/;"	m	class:__anon2::Fixup_data	file:
Scan_ctx	row/row0pread.cc	/^Parallel_reader::Scan_ctx::Scan_ctx(Parallel_reader *reader, size_t id,$/;"	f	class:Parallel_reader::Scan_ctx
Scan_range	include/row0pread.h	/^    Scan_range() : m_start(), m_end() {}$/;"	f	struct:Parallel_reader::Scan_range
Scan_range	include/row0pread.h	/^    Scan_range(const Scan_range &scan_range)$/;"	f	struct:Parallel_reader::Scan_range
Scan_range	include/row0pread.h	/^    Scan_range(const dtuple_t *start, const dtuple_t *end)$/;"	f	struct:Parallel_reader::Scan_range
Scan_range	include/row0pread.h	/^  struct Scan_range {$/;"	s	class:Parallel_reader
Sdi_Compressor	include/dict0sdi.h	/^  Sdi_Compressor(uint32_t src_len, const void *sdi)$/;"	f	class:Sdi_Compressor
Sdi_Compressor	include/dict0sdi.h	/^class Sdi_Compressor {$/;"	c
Sdi_Decompressor	include/dict0sdi-decompress.h	/^  Sdi_Decompressor(byte *uncomp_sdi, uint32_t uncomp_len, byte *comp_sdi,$/;"	f	class:Sdi_Decompressor
Sdi_Decompressor	include/dict0sdi-decompress.h	/^class Sdi_Decompressor {$/;"	c
Segment	buf/buf0dblwr.cc	/^  Segment(dblwr::File &file, page_no_t start, uint32_t n_pages)$/;"	f	class:Segment
Segment	buf/buf0dblwr.cc	/^class Segment {$/;"	c	file:
Shard	include/ut0counter.h	/^struct Shard {$/;"	s	namespace:Counter
Shard_latch_guard	include/lock0guards.h	/^  explicit Shard_latch_guard(ut::Location location, const dict_table_t &table)$/;"	f	class:locksys::Shard_latch_guard
Shard_latch_guard	include/lock0guards.h	/^  explicit Shard_latch_guard(ut::Location location, const page_id_t &page_id)$/;"	f	class:locksys::Shard_latch_guard
Shard_latch_guard	include/lock0guards.h	/^class Shard_latch_guard {$/;"	c	namespace:locksys
Shard_latches_guard	include/lock0guards.h	/^  explicit Shard_latches_guard(ut::Location location,$/;"	f	class:locksys::Shard_latches_guard
Shard_latches_guard	include/lock0guards.h	/^class Shard_latches_guard {$/;"	c	namespace:locksys
Shard_naked_latch_guard	include/lock0guards.h	/^class Shard_naked_latch_guard : private ut::Non_copyable {$/;"	c	namespace:locksys
Shard_naked_latch_guard	lock/lock0guards.cc	/^Shard_naked_latch_guard::Shard_naked_latch_guard(ut::Location location,$/;"	f	class:locksys::Shard_naked_latch_guard
Shard_naked_latches_guard	include/lock0guards.h	/^class Shard_naked_latches_guard {$/;"	c	namespace:locksys
Shard_naked_latches_guard	lock/lock0guards.cc	/^Shard_naked_latches_guard::Shard_naked_latches_guard(Lock_mutex &shard_mutex_a,$/;"	f	class:locksys::Shard_naked_latches_guard
Shard_naked_latches_guard	lock/lock0guards.cc	/^Shard_naked_latches_guard::Shard_naked_latches_guard(const buf_block_t &block_a,$/;"	f	class:locksys::Shard_naked_latches_guard
Sharded_rw_lock	include/sync0sharded_rw.h	/^class Sharded_rw_lock {$/;"	c
Shards	include/ut0counter.h	/^struct Shards {$/;"	s	namespace:Counter
ShowStatus	handler/ha_innodb.cc	/^  ShowStatus() {}$/;"	f	struct:ShowStatus
ShowStatus	handler/ha_innodb.cc	/^struct ShowStatus {$/;"	s	file:
SimulatedAIOHandler	os/os0file.cc	/^  SimulatedAIOHandler(AIO *array, ulint segment)$/;"	f	class:SimulatedAIOHandler
SimulatedAIOHandler	os/os0file.cc	/^class SimulatedAIOHandler {$/;"	c	file:
Slot	os/os0file.cc	/^  Slot() {$/;"	f	struct:Slot
Slot	os/os0file.cc	/^struct Slot {$/;"	s	file:
Slots	os/os0file.cc	/^  typedef std::vector<Slot> Slots;$/;"	t	class:AIO	file:
Snapshot_State	include/clone0desc.h	/^enum Snapshot_State {$/;"	g
Space	include/log0recv.h	/^    Space() : m_heap(), m_pages() {}$/;"	f	struct:recv_sys_t::Space
Space	include/log0recv.h	/^    explicit Space(mem_heap_t *heap) : m_heap(heap), m_pages() {}$/;"	f	struct:recv_sys_t::Space
Space	include/log0recv.h	/^  struct Space {$/;"	s	struct:recv_sys_t
Space_Ids	include/trx0sys.h	/^class Space_Ids : public std::vector<space_id_t, ut_allocator<space_id_t>> {$/;"	c
SplitPoint	include/btr0bulk.h	/^  struct SplitPoint {$/;"	s	class:PageBulk
Sql_stat_start_parts	handler/ha_innopart.h	/^typedef Bitset Sql_stat_start_parts;$/;"	t
Srv_cpu_usage	include/srv0srv.h	/^struct Srv_cpu_usage {$/;"	s
Srv_threads	include/srv0srv.h	/^struct Srv_threads {$/;"	s
State	include/os0thread.h	/^  enum class State { INVALID, NOT_STARTED, ALLOWED_TO_START, STARTED, STOPPED };$/;"	c	class:IB_thread
Stateful_latching_rules	include/ut0stateful_latching_rules.h	/^  Stateful_latching_rules(nodes_set_t all_states,$/;"	f	class:ut::Stateful_latching_rules
Stateful_latching_rules	include/ut0stateful_latching_rules.h	/^class Stateful_latching_rules {$/;"	c	namespace:ut
SyncFileIO	os/os0file.cc	/^  SyncFileIO(os_file_t fh, void *buf, ulint n, os_offset_t offset)$/;"	f	class:SyncFileIO
SyncFileIO	os/os0file.cc	/^class SyncFileIO {$/;"	c	file:
Sync_point	include/log0test.h	/^  class Sync_point {$/;"	c	class:Log_test
Sync_points	include/log0test.h	/^  typedef std::map<std::string, std::unique_ptr<Sync_point>> Sync_points;$/;"	t	class:Log_test::Options
SysIndexCallback	include/row0mysql.h	/^struct SysIndexCallback {$/;"	s
SysMutex	include/ut0mutex.h	/^typedef OSMutex SysMutex;$/;"	t
SysTablespace	include/fsp0sysspace.h	/^  SysTablespace()$/;"	f	class:SysTablespace
SysTablespace	include/fsp0sysspace.h	/^class SysTablespace : public Tablespace {$/;"	c
TABLE_CACHE_INITIAL_ROWSNUM	trx/trx0i_s.cc	83;"	d	file:
TABLE_ID_COL_NO	include/dict0dict.h	/^  static constexpr unsigned TABLE_ID_COL_NO = 0;$/;"	m	class:DDTableBuffer
TABLE_ID_FIELD_NO	include/dict0dict.h	/^  static constexpr unsigned TABLE_ID_FIELD_NO = TABLE_ID_COL_NO;$/;"	m	class:DDTableBuffer
TABLE_LOCK_CACHE	lock/lock0lock.cc	/^static const ulint TABLE_LOCK_CACHE = 8;$/;"	v	file:
TABLE_LOCK_SIZE	lock/lock0lock.cc	/^static const ulint TABLE_LOCK_SIZE = sizeof(ib_lock_t);$/;"	v	file:
TABLE_NAME_COL_NO	include/dict0stats.h	/^  static constexpr unsigned TABLE_NAME_COL_NO = 1;$/;"	m	class:TableStatsRecord
TABLE_STATS_NAME	dict/dict0stats.cc	118;"	d	file:
TABLE_STATS_NAME_PRINT	dict/dict0stats.cc	119;"	d	file:
TBSP_INTRINSIC	include/srv0tmp.h	/^  TBSP_INTRINSIC, \/*!< Tablespace is used for intrinsic$/;"	e	enum:ibt::tbsp_purpose
TBSP_NONE	include/srv0tmp.h	/^  TBSP_NONE = 0,  \/*!< Tablespace is not being used for any$/;"	e	enum:ibt::tbsp_purpose
TBSP_SLAVE	include/srv0tmp.h	/^  TBSP_SLAVE      \/*!< Tablespace is used by the slave node$/;"	e	enum:ibt::tbsp_purpose
TBSP_USER	include/srv0tmp.h	/^  TBSP_USER,      \/*!< Tablespace is used for user temporary$/;"	e	enum:ibt::tbsp_purpose
TEMP_FILE_PREFIX	include/dict0types.h	305;"	d
TEMP_FILE_PREFIX_INNODB	include/dict0types.h	307;"	d
TEMP_FILE_PREFIX_LENGTH	include/dict0types.h	306;"	d
TEMP_INDEX_PREFIX_STR	include/ut0ut.h	77;"	d
TEMP_TABLE_PATH_PREFIX	include/dict0types.h	310;"	d
TEMP_TABLE_PREFIX	include/dict0types.h	309;"	d
TEST_CLUSTERED_INDEX_SIZE	dict/dict0stats.cc	3595;"	d	file:
TEST_DATABASE_NAME	dict/dict0stats.cc	3591;"	d	file:
TEST_IDX1_COL1_NAME	dict/dict0stats.cc	3599;"	d	file:
TEST_IDX1_INDEX_SIZE	dict/dict0stats.cc	3600;"	d	file:
TEST_IDX1_NAME	dict/dict0stats.cc	3598;"	d	file:
TEST_IDX1_N_DIFF1	dict/dict0stats.cc	3602;"	d	file:
TEST_IDX1_N_DIFF1_SAMPLE_SIZE	dict/dict0stats.cc	3603;"	d	file:
TEST_IDX1_N_LEAF_PAGES	dict/dict0stats.cc	3601;"	d	file:
TEST_IDX2_COL1_NAME	dict/dict0stats.cc	3606;"	d	file:
TEST_IDX2_COL2_NAME	dict/dict0stats.cc	3607;"	d	file:
TEST_IDX2_COL3_NAME	dict/dict0stats.cc	3608;"	d	file:
TEST_IDX2_COL4_NAME	dict/dict0stats.cc	3609;"	d	file:
TEST_IDX2_INDEX_SIZE	dict/dict0stats.cc	3610;"	d	file:
TEST_IDX2_NAME	dict/dict0stats.cc	3605;"	d	file:
TEST_IDX2_N_DIFF1	dict/dict0stats.cc	3612;"	d	file:
TEST_IDX2_N_DIFF1_SAMPLE_SIZE	dict/dict0stats.cc	3613;"	d	file:
TEST_IDX2_N_DIFF2	dict/dict0stats.cc	3614;"	d	file:
TEST_IDX2_N_DIFF2_SAMPLE_SIZE	dict/dict0stats.cc	3615;"	d	file:
TEST_IDX2_N_DIFF3	dict/dict0stats.cc	3616;"	d	file:
TEST_IDX2_N_DIFF3_SAMPLE_SIZE	dict/dict0stats.cc	3617;"	d	file:
TEST_IDX2_N_DIFF4	dict/dict0stats.cc	3618;"	d	file:
TEST_IDX2_N_DIFF4_SAMPLE_SIZE	dict/dict0stats.cc	3619;"	d	file:
TEST_IDX2_N_LEAF_PAGES	dict/dict0stats.cc	3611;"	d	file:
TEST_N_ROWS	dict/dict0stats.cc	3594;"	d	file:
TEST_SUM_OF_OTHER_INDEX_SIZES	dict/dict0stats.cc	3596;"	d	file:
TEST_TABLE_NAME	dict/dict0stats.cc	3592;"	d	file:
TLOG	include/ut0test.h	132;"	d
TMP_POSTFIX	include/dict0types.h	/^constexpr char TMP_POSTFIX[] = "#tmp";$/;"	m	namespace:dict_name
TMP_POSTFIX_LEN	include/dict0types.h	/^constexpr size_t TMP_POSTFIX_LEN = sizeof(TMP_POSTFIX) - 1;$/;"	m	namespace:dict_name
TPL_TYPE_KEY	api/api0api.cc	/^  TPL_TYPE_KEY  \/*!< Index key tuple *\/$/;"	e	enum:ib_tuple_type_t	file:
TPL_TYPE_ROW	api/api0api.cc	/^  TPL_TYPE_ROW, \/*!< Data row tuple *\/$/;"	e	enum:ib_tuple_type_t	file:
TPREFIX	include/ut0test.h	130;"	d
TROUBLESHOOTING_MSG	handler/ha_innodb.cc	/^const char *TROUBLESHOOTING_MSG = "Please refer to " REFMAN$/;"	v
TROUBLESHOOT_DATADICT_MSG	handler/ha_innodb.cc	/^const char *TROUBLESHOOT_DATADICT_MSG = "Please refer to " REFMAN$/;"	v
TRUE	include/ut0rbt.h	50;"	d
TRUNCATE_FREQUENCY	include/trx0purge.h	/^constexpr ulint TRUNCATE_FREQUENCY = 128;$/;"	m	namespace:undo
TRX_DICT_OP_INDEX	include/trx0types.h	/^  TRX_DICT_OP_INDEX = 2$/;"	e	enum:trx_dict_op_t
TRX_DICT_OP_NONE	include/trx0types.h	/^  TRX_DICT_OP_NONE = 0,$/;"	e	enum:trx_dict_op_t
TRX_DICT_OP_TABLE	include/trx0types.h	/^  TRX_DICT_OP_TABLE = 1,$/;"	e	enum:trx_dict_op_t
TRX_FORCE_ROLLBACK	include/trx0types.h	/^static const ib_uint32_t TRX_FORCE_ROLLBACK = 1 << 31;$/;"	v
TRX_FORCE_ROLLBACK_ASYNC	include/trx0types.h	/^static const ib_uint32_t TRX_FORCE_ROLLBACK_ASYNC = 1 << 30;$/;"	v
TRX_FORCE_ROLLBACK_DISABLE	include/trx0types.h	/^static const ib_uint32_t TRX_FORCE_ROLLBACK_DISABLE = 1 << 29;$/;"	v
TRX_FORCE_ROLLBACK_MASK	include/trx0types.h	/^static const ib_uint32_t TRX_FORCE_ROLLBACK_MASK = 0x1FFFFFFF;$/;"	v
TRX_ID_FMT	include/trx0types.h	50;"	d
TRX_ID_MAX	include/trx0types.h	151;"	d
TRX_ISO_READ_COMMITTED	include/trx0trx.h	1274;"	d
TRX_ISO_READ_UNCOMMITTED	include/trx0trx.h	1273;"	d
TRX_ISO_REPEATABLE_READ	include/trx0trx.h	1275;"	d
TRX_ISO_SERIALIZABLE	include/trx0trx.h	1276;"	d
TRX_I_S_LOCK_DATA_MAX_LEN	include/trx0i_s.h	50;"	d
TRX_I_S_LOCK_ID_MAX_LEN	include/trx0i_s.h	243;"	d
TRX_I_S_MEM_LIMIT	include/trx0i_s.h	46;"	d
TRX_I_S_STRING_COPY	include/trx0i_s.h	70;"	d
TRX_I_S_TRX_FK_ERROR_MAX_LEN	include/trx0i_s.h	62;"	d
TRX_I_S_TRX_ISOLATION_LEVEL_MAX_LEN	include/trx0i_s.h	66;"	d
TRX_I_S_TRX_OP_STATE_MAX_LEN	include/trx0i_s.h	58;"	d
TRX_I_S_TRX_QUERY_MAX_LEN	include/trx0i_s.h	54;"	d
TRX_MAGIC_N	include/trx0types.h	/^static const ulint TRX_MAGIC_N = 91118598;$/;"	v
TRX_QUE_COMMITTING	include/trx0types.h	/^  TRX_QUE_COMMITTING    \/*!< transaction is committing *\/$/;"	e	enum:trx_que_t
TRX_QUE_LOCK_WAIT	include/trx0types.h	/^  TRX_QUE_LOCK_WAIT,    \/*!< transaction is waiting for$/;"	e	enum:trx_que_t
TRX_QUE_ROLLING_BACK	include/trx0types.h	/^  TRX_QUE_ROLLING_BACK, \/*!< transaction is rolling back *\/$/;"	e	enum:trx_que_t
TRX_QUE_RUNNING	include/trx0types.h	/^  TRX_QUE_RUNNING,      \/*!< transaction is running *\/$/;"	e	enum:trx_que_t
TRX_QUE_STATE_STR_MAX_LEN	include/trx0trx.h	345;"	d
TRX_ROLL_TRUNC_THRESHOLD	trx/trx0roll.cc	/^static const ulint TRX_ROLL_TRUNC_THRESHOLD = 1;$/;"	v	file:
TRX_RSEG	include/trx0rseg.h	200;"	d
TRX_RSEG_FSEG_HEADER	include/trx0rseg.h	215;"	d
TRX_RSEG_HISTORY	include/trx0rseg.h	210;"	d
TRX_RSEG_HISTORY_SIZE	include/trx0rseg.h	207;"	d
TRX_RSEG_MAX_N_TRXS	include/trx0rseg.h	188;"	d
TRX_RSEG_MAX_SIZE	include/trx0rseg.h	204;"	d
TRX_RSEG_MAX_TRX_NO	include/trx0rseg.h	226;"	d
TRX_RSEG_N_SLOTS	include/trx0rseg.h	185;"	d
TRX_RSEG_SLOT_END	include/trx0rseg.h	220;"	d
TRX_RSEG_SLOT_PAGE_NO	include/trx0rseg.h	192;"	d
TRX_RSEG_SLOT_SIZE	include/trx0rseg.h	197;"	d
TRX_RSEG_TYPE_NONE	include/trx0trx.h	/^  TRX_RSEG_TYPE_NONE = 0, \/*!< void rollback segment type. *\/$/;"	e	enum:trx_rseg_type_t
TRX_RSEG_TYPE_NOREDO	include/trx0trx.h	/^  TRX_RSEG_TYPE_NOREDO    \/*!< non-redo rollback segment. *\/$/;"	e	enum:trx_rseg_type_t
TRX_RSEG_TYPE_REDO	include/trx0trx.h	/^  TRX_RSEG_TYPE_REDO,     \/*!< redo rollback segment. *\/$/;"	e	enum:trx_rseg_type_t
TRX_RSEG_UNDO_SLOTS	include/trx0rseg.h	217;"	d
TRX_STATE_ACTIVE	include/trx0types.h	/^  TRX_STATE_ACTIVE,$/;"	e	enum:trx_state_t
TRX_STATE_COMMITTED_IN_MEMORY	include/trx0types.h	/^  TRX_STATE_COMMITTED_IN_MEMORY$/;"	e	enum:trx_state_t
TRX_STATE_FORCED_ROLLBACK	include/trx0types.h	/^  TRX_STATE_FORCED_ROLLBACK,$/;"	e	enum:trx_state_t
TRX_STATE_NOT_STARTED	include/trx0types.h	/^  TRX_STATE_NOT_STARTED,$/;"	e	enum:trx_state_t
TRX_STATE_PREPARED	include/trx0types.h	/^  TRX_STATE_PREPARED,$/;"	e	enum:trx_state_t
TRX_SYS	include/trx0sys.h	298;"	d
TRX_SYS_DBLWR_V1	include/buf0dblwr.h	45;"	d
TRX_SYS_DOUBLEWRITE	include/trx0sys.h	370;"	d
TRX_SYS_DOUBLEWRITE_BLOCK1	include/trx0sys.h	381;"	d
TRX_SYS_DOUBLEWRITE_BLOCK2	include/trx0sys.h	388;"	d
TRX_SYS_DOUBLEWRITE_BLOCK_SIZE	include/trx0sys.h	417;"	d
TRX_SYS_DOUBLEWRITE_FSEG	include/trx0sys.h	372;"	d
TRX_SYS_DOUBLEWRITE_MAGIC	include/trx0sys.h	376;"	d
TRX_SYS_DOUBLEWRITE_MAGIC_N	include/trx0sys.h	412;"	d
TRX_SYS_DOUBLEWRITE_REPEAT	include/trx0sys.h	394;"	d
TRX_SYS_DOUBLEWRITE_SPACE_ID_STORED	include/trx0sys.h	408;"	d
TRX_SYS_DOUBLEWRITE_SPACE_ID_STORED_N	include/trx0sys.h	414;"	d
TRX_SYS_FSEG_HEADER	include/trx0sys.h	315;"	d
TRX_SYS_MYSQL_LOG_INFO	include/trx0sys.h	347;"	d
TRX_SYS_MYSQL_LOG_MAGIC_N	include/trx0sys.h	341;"	d
TRX_SYS_MYSQL_LOG_MAGIC_N_FLD	include/trx0sys.h	348;"	d
TRX_SYS_MYSQL_LOG_NAME	include/trx0sys.h	359;"	d
TRX_SYS_MYSQL_LOG_NAME_LEN	include/trx0sys.h	339;"	d
TRX_SYS_MYSQL_LOG_OFFSET_HIGH	include/trx0sys.h	353;"	d
TRX_SYS_MYSQL_LOG_OFFSET_LOW	include/trx0sys.h	356;"	d
TRX_SYS_N_RSEGS	include/fsp0types.h	/^constexpr size_t TRX_SYS_N_RSEGS = 128;$/;"	v
TRX_SYS_OLD_N_RSEGS	include/trx0sys.h	/^constexpr size_t TRX_SYS_OLD_N_RSEGS = 256;$/;"	v
TRX_SYS_OLD_TMP_RSEGS	include/trx0sys.h	/^constexpr size_t TRX_SYS_OLD_TMP_RSEGS = 32;$/;"	v
TRX_SYS_PAGE_NO	include/trx0types.h	56;"	d
TRX_SYS_RSEGS	include/trx0sys.h	319;"	d
TRX_SYS_SPACE	include/trx0types.h	/^static const space_id_t TRX_SYS_SPACE = 0;$/;"	v
TRX_SYS_SYSTEM_RSEG_ID	include/trx0sys.h	295;"	d
TRX_SYS_TRX_ID_STORE	include/trx0sys.h	302;"	d
TRX_SYS_TRX_ID_WRITE_MARGIN	include/trx0sys.h	533;"	d
TRX_SYS_TRX_NUM_END	include/trx0sys.h	365;"	d
TRX_SYS_TRX_NUM_GTID	include/trx0sys.h	363;"	d
TRX_UNDO_ACTIVE	include/trx0undo.h	328;"	d
TRX_UNDO_CACHED	include/trx0undo.h	331;"	d
TRX_UNDO_CMPL_INFO_MULT	include/trx0rec.h	318;"	d
TRX_UNDO_DEL_MARKS	include/trx0undo.h	533;"	d
TRX_UNDO_DEL_MARK_REC	include/trx0rec.h	315;"	d
TRX_UNDO_DICT_TRANS	include/trx0undo.h	559;"	d
TRX_UNDO_FLAGS	include/trx0undo.h	545;"	d
TRX_UNDO_FLAG_GTID	include/trx0undo.h	553;"	d
TRX_UNDO_FLAG_XA_PREPARE_GTID	include/trx0undo.h	556;"	d
TRX_UNDO_FLAG_XID	include/trx0undo.h	549;"	d
TRX_UNDO_FSEG_HEADER	include/trx0undo.h	512;"	d
TRX_UNDO_GET_OLD_V_VALUE	include/trx0rec.h	202;"	d
TRX_UNDO_HISTORY_NODE	include/trx0undo.h	576;"	d
TRX_UNDO_INSERT	include/trx0undo.h	321;"	d
TRX_UNDO_INSERT_OP	include/trx0rec.h	337;"	d
TRX_UNDO_INSERT_REC	include/trx0rec.h	307;"	d
TRX_UNDO_LAST_LOG	include/trx0undo.h	508;"	d
TRX_UNDO_LOG_GTID	include/trx0undo.h	617;"	d
TRX_UNDO_LOG_GTID_HDR_SIZE	include/trx0undo.h	623;"	d
TRX_UNDO_LOG_GTID_LEN	include/trx0undo.h	620;"	d
TRX_UNDO_LOG_GTID_VERSION	include/trx0undo.h	614;"	d
TRX_UNDO_LOG_GTID_XA	include/trx0undo.h	626;"	d
TRX_UNDO_LOG_GTID_XA_HDR_SIZE	include/trx0undo.h	630;"	d
TRX_UNDO_LOG_OLD_HDR_SIZE	include/trx0undo.h	581;"	d
TRX_UNDO_LOG_START	include/trx0undo.h	538;"	d
TRX_UNDO_LOG_XA_HDR_SIZE	include/trx0undo.h	603;"	d
TRX_UNDO_MODIFY_BLOB	include/trx0rec.h	322;"	d
TRX_UNDO_MODIFY_OP	include/trx0rec.h	338;"	d
TRX_UNDO_NEXT_LOG	include/trx0undo.h	570;"	d
TRX_UNDO_PAGE_FREE	include/trx0undo.h	471;"	d
TRX_UNDO_PAGE_HDR	include/trx0undo.h	458;"	d
TRX_UNDO_PAGE_HDR_SIZE	include/trx0undo.h	479;"	d
TRX_UNDO_PAGE_LIST	include/trx0undo.h	515;"	d
TRX_UNDO_PAGE_NODE	include/trx0undo.h	475;"	d
TRX_UNDO_PAGE_REUSE_LIMIT	include/trx0undo.h	488;"	d
TRX_UNDO_PAGE_START	include/trx0undo.h	465;"	d
TRX_UNDO_PAGE_TYPE	include/trx0undo.h	462;"	d
TRX_UNDO_PREPARED	include/trx0undo.h	337;"	d
TRX_UNDO_PREV_IN_PURGE	include/trx0rec.h	198;"	d
TRX_UNDO_PREV_LOG	include/trx0undo.h	573;"	d
TRX_UNDO_SEG_HDR	include/trx0undo.h	502;"	d
TRX_UNDO_SEG_HDR_SIZE	include/trx0undo.h	521;"	d
TRX_UNDO_STATE	include/trx0undo.h	506;"	d
TRX_UNDO_TABLE_ID	include/trx0undo.h	567;"	d
TRX_UNDO_TO_FREE	include/trx0undo.h	332;"	d
TRX_UNDO_TO_PURGE	include/trx0undo.h	333;"	d
TRX_UNDO_TRX_ID	include/trx0undo.h	528;"	d
TRX_UNDO_TRX_NO	include/trx0undo.h	529;"	d
TRX_UNDO_UPDATE	include/trx0undo.h	322;"	d
TRX_UNDO_UPD_DEL_REC	include/trx0rec.h	311;"	d
TRX_UNDO_UPD_EXIST_REC	include/trx0rec.h	308;"	d
TRX_UNDO_UPD_EXTERN	include/trx0rec.h	330;"	d
TRX_UNDO_XA_BQUAL_LEN	include/trx0undo.h	599;"	d
TRX_UNDO_XA_FORMAT	include/trx0undo.h	595;"	d
TRX_UNDO_XA_TRID_LEN	include/trx0undo.h	597;"	d
TRX_UNDO_XA_XID	include/trx0undo.h	601;"	d
TRX_WEIGHT	include/trx0trx.h	335;"	d
TTASFutexMutex	include/ib0mutex.h	/^struct TTASFutexMutex {$/;"	s
TableLockGetNode	lock/lock0lock.cc	/^struct TableLockGetNode {$/;"	s	file:
TableStatsRecord	dict/dict0stats.cc	/^TableStatsRecord::TableStatsRecord() { m_heap = nullptr; }$/;"	f	class:TableStatsRecord
TableStatsRecord	include/dict0stats.h	/^class TableStatsRecord {$/;"	c
Table_shards	include/lock0latches.h	/^  class Table_shards {$/;"	c	class:locksys::Latches
Table_shards	lock/lock0latches.cc	/^Latches::Table_shards::Table_shards() {$/;"	f	class:locksys::Latches::Table_shards
Tablespace	include/fsp0space.h	/^  Tablespace()$/;"	f	class:Tablespace
Tablespace	include/fsp0space.h	/^class Tablespace {$/;"	c
Tablespace	include/srv0tmp.h	/^class Tablespace {$/;"	c	namespace:ibt
Tablespace	include/trx0purge.h	/^  Tablespace(Tablespace &other)$/;"	f	struct:undo::Tablespace
Tablespace	include/trx0purge.h	/^  explicit Tablespace(space_id_t id)$/;"	f	struct:undo::Tablespace
Tablespace	include/trx0purge.h	/^struct Tablespace {$/;"	s	namespace:undo
Tablespace	srv/srv0tmp.cc	/^Tablespace::Tablespace()$/;"	f	class:ibt::Tablespace
Tablespace_dirs	fil/fil0fil.cc	/^  Tablespace_dirs()$/;"	f	class:Tablespace_dirs
Tablespace_dirs	fil/fil0fil.cc	/^class Tablespace_dirs {$/;"	c	file:
Tablespace_files	fil/fil0fil.cc	/^Tablespace_files::Tablespace_files(const std::string &dir)$/;"	f	class:Tablespace_files
Tablespace_files	fil/fil0fil.cc	/^class Tablespace_files {$/;"	c	file:
Tablespace_pool	include/srv0tmp.h	/^class Tablespace_pool {$/;"	c	namespace:ibt
Tablespace_pool	srv/srv0tmp.cc	/^Tablespace_pool::Tablespace_pool(size_t init_size)$/;"	f	class:ibt::Tablespace_pool
Tablespaces	include/trx0purge.h	/^  Tablespaces() { init(); }$/;"	f	class:undo::Tablespaces
Tablespaces	include/trx0purge.h	/^class Tablespaces {$/;"	c	namespace:undo
Tester	include/ut0test.h	/^struct Tester {$/;"	s	namespace:ib
ThreadMap	sync/sync0debug.cc	/^      ThreadMap;$/;"	t	struct:LatchDebug	file:
Thread_ctx	include/row0pread-adapter.h	/^  struct Thread_ctx {$/;"	s	class:Parallel_reader_adapter
Thread_ctx	include/row0pread.h	/^  struct Thread_ctx {$/;"	s	class:Parallel_reader
Thread_ctx	row/row0pread-adapter.cc	/^Parallel_reader_adapter::Thread_ctx::Thread_ctx() {$/;"	f	class:Parallel_reader_adapter::Thread_ctx
Timer	include/ut0ut.h	/^class Timer {$/;"	c	namespace:ib
Truncate	include/trx0purge.h	/^  Truncate() : m_space_id_marked(SPACE_UNKNOWN), m_timer() {}$/;"	f	class:undo::Truncate
Truncate	include/trx0purge.h	/^class Truncate {$/;"	c	namespace:undo
TrxFactory	trx/trx0trx.cc	/^struct TrxFactory {$/;"	s	file:
TrxIdSet	include/trx0types.h	/^typedef std::set<TrxTrack, TrxTrackCmp, ut_allocator<TrxTrack>> TrxIdSet;$/;"	t
TrxInInnoDB	include/trx0trx.h	/^  TrxInInnoDB(trx_t *trx, bool disable = false) : m_trx(trx) {$/;"	f	class:TrxInInnoDB
TrxInInnoDB	include/trx0trx.h	/^class TrxInInnoDB {$/;"	c
TrxListIterator	lock/lock0lock.cc	/^  TrxListIterator() : m_index() {$/;"	f	class:TrxListIterator
TrxListIterator	lock/lock0lock.cc	/^class TrxListIterator {$/;"	c	file:
TrxLockIterator	lock/lock0lock.cc	/^  TrxLockIterator() { rewind(); }$/;"	f	class:TrxLockIterator
TrxLockIterator	lock/lock0lock.cc	/^class TrxLockIterator {$/;"	c	file:
TrxMutex	include/trx0types.h	/^typedef ib_mutex_t TrxMutex;$/;"	t
TrxPoolLock	trx/trx0trx.cc	/^  TrxPoolLock() {}$/;"	f	struct:TrxPoolLock
TrxPoolLock	trx/trx0trx.cc	/^struct TrxPoolLock {$/;"	s	file:
TrxPoolManagerLock	trx/trx0trx.cc	/^  TrxPoolManagerLock() {}$/;"	f	struct:TrxPoolManagerLock
TrxPoolManagerLock	trx/trx0trx.cc	/^struct TrxPoolManagerLock {$/;"	s	file:
TrxSysMutex	include/trx0types.h	/^typedef ib_mutex_t TrxSysMutex;$/;"	t
TrxTrack	include/trx0types.h	/^  explicit TrxTrack(trx_id_t id, trx_t *trx = nullptr) : m_id(id), m_trx(trx) {$/;"	f	struct:TrxTrack
TrxTrack	include/trx0types.h	/^struct TrxTrack {$/;"	s
TrxTrackCmp	include/trx0types.h	/^struct TrxTrackCmp {$/;"	s
TrxTrackHash	include/trx0types.h	/^struct TrxTrackHash {$/;"	s
TrxTrackHashCmp	include/trx0types.h	/^struct TrxTrackHashCmp {$/;"	s
TrxUndoRsegs	include/trx0types.h	/^  TrxUndoRsegs() : m_trx_no() {}$/;"	f	class:TrxUndoRsegs
TrxUndoRsegs	include/trx0types.h	/^  explicit TrxUndoRsegs(trx_id_t trx_no) : m_trx_no(trx_no) {$/;"	f	class:TrxUndoRsegs
TrxUndoRsegs	include/trx0types.h	/^class TrxUndoRsegs {$/;"	c
TrxUndoRsegsIterator	include/trx0purge.h	/^struct TrxUndoRsegsIterator {$/;"	s
TrxUndoRsegsIterator	trx/trx0purge.cc	/^TrxUndoRsegsIterator::TrxUndoRsegsIterator(trx_purge_t *purge_sys)$/;"	f	class:TrxUndoRsegsIterator
TrxVersion	include/trx0types.h	/^struct TrxVersion {$/;"	s
TrxVersion	trx/trx0trx.cc	/^TrxVersion::TrxVersion(trx_t *trx) : m_trx(trx), m_version(trx->version) {$/;"	f	class:TrxVersion
Type	include/os0enc.h	/^  enum Type {$/;"	g	class:Encryption
UINT16_MAX	fts/fts0blex.cc	120;"	d	file:
UINT16_MAX	fts/fts0tlex.cc	119;"	d	file:
UINT16_MAX	include/fts0blex.h	122;"	d
UINT16_MAX	include/fts0tlex.h	121;"	d
UINT16_MAX	pars/lexyy.cc	83;"	d	file:
UINT32_MAX	fts/fts0blex.cc	123;"	d	file:
UINT32_MAX	fts/fts0tlex.cc	122;"	d	file:
UINT32_MAX	include/fts0blex.h	125;"	d
UINT32_MAX	include/fts0tlex.h	124;"	d
UINT32_MAX	pars/lexyy.cc	86;"	d	file:
UINT8_MAX	fts/fts0blex.cc	117;"	d	file:
UINT8_MAX	fts/fts0tlex.cc	116;"	d	file:
UINT8_MAX	include/fts0blex.h	119;"	d
UINT8_MAX	include/fts0tlex.h	118;"	d
UINT8_MAX	pars/lexyy.cc	80;"	d	file:
UNDO_INITIAL_SIZE	include/fil0fil.h	97;"	d
UNDO_INITIAL_SIZE_IN_PAGES	include/fil0fil.h	98;"	d
UNDO_NODE_FETCH_NEXT	include/row0undo.h	/^  UNDO_NODE_FETCH_NEXT = 1, \/*!< we should fetch the next$/;"	e	enum:undo_exec
UNDO_NODE_INSERT	include/row0undo.h	/^  UNDO_NODE_INSERT,         \/*!< undo a fresh insert of a$/;"	e	enum:undo_exec
UNDO_NODE_MODIFY	include/row0undo.h	/^  UNDO_NODE_MODIFY          \/*!< undo a modify operation$/;"	e	enum:undo_exec
UNDO_SHARDS	fil/fil0fil.cc	/^static const size_t UNDO_SHARDS = 4;$/;"	v	file:
UNDO_SHARDS_START	fil/fil0fil.cc	/^static const size_t UNDO_SHARDS_START = 0;$/;"	v	file:
UNDO_SHARDS_START	fil/fil0fil.cc	/^static const size_t UNDO_SHARDS_START = REDO_SHARD - UNDO_SHARDS;$/;"	v	file:
UNIV_INLINE	include/buf0buddy.h	37;"	d
UNIV_INLINE	include/buf0buddy.h	38;"	d
UNIV_INLINE	include/page0page.h	51;"	d
UNIV_INLINE	include/page0page.h	52;"	d
UNIV_INLINE	include/page0page.h	845;"	d
UNIV_INLINE	include/page0page.h	846;"	d
UNIV_INLINE	include/page0zip.h	384;"	d
UNIV_INLINE	include/page0zip.h	385;"	d
UNIV_INLINE	include/page0zip.h	38;"	d
UNIV_INLINE	include/page0zip.h	39;"	d
UNIV_MEMCACHED_SDI	include/api0api.h	53;"	d
UNIV_NON_BUFFERED_IO	include/os0file.h	116;"	d
UNIV_NOTHROW	handler/ha_innodb.cc	/^                 stat_print_fn *stat_print) UNIV_NOTHROW;$/;"	m	struct:ShowStatus	file:
UNIV_NOTHROW	handler/ha_innodb.cc	/^    GetCount(const char *name, Values *values) UNIV_NOTHROW : m_name(name),$/;"	m	struct:ShowStatus::GetCount	file:
UNIV_NOTHROW	include/fil0fil.h	/^      MY_ATTRIBUTE((warn_unused_result)) UNIV_NOTHROW = 0;$/;"	m	struct:PageCallback
UNIV_NOTHROW	include/fil0fil.h	/^  void set_page_size(const buf_frame_t *page) UNIV_NOTHROW;$/;"	m	struct:PageCallback
UNIV_NOTHROW	include/handler0alter.h	/^  ulonglong operator++(int) UNIV_NOTHROW;$/;"	m	struct:ib_sequence_t
UNIV_NOTHROW	include/ib0mutex.h	/^  TTASFutexMutex() UNIV_NOTHROW : m_lock_word(MUTEX_STATE_UNLOCKED) {$/;"	m	struct:TTASFutexMutex
UNIV_NOTHROW	include/sync0arr_impl.h	/^  sync_array_t(ulint num_cells) UNIV_NOTHROW;$/;"	m	struct:sync_array_t
UNIV_NOTHROW	include/sync0arr_impl.h	/^  ~sync_array_t() UNIV_NOTHROW;$/;"	m	struct:sync_array_t
UNIV_NOTHROW	include/sync0policy.h	/^              ulint line) UNIV_NOTHROW;$/;"	m	class:MutexDebug
UNIV_NOTHROW	include/sync0policy.h	/^  GenericPolicy() UNIV_NOTHROW :$/;"	m	struct:GenericPolicy
UNIV_NOTHROW	include/sync0policy.h	/^  std::string print() const UNIV_NOTHROW;$/;"	m	class:BlockMutexPolicy
UNIV_NOTHROW	include/sync0policy.h	/^  std::string print() const UNIV_NOTHROW;$/;"	m	struct:GenericPolicy
UNIV_NOTHROW	include/sync0policy.h	/^  void enter(const Mutex *mutex, const char *filename, ulint line) UNIV_NOTHROW;$/;"	m	class:MutexDebug
UNIV_NOTHROW	include/sync0policy.h	/^  void init(latch_id_t id) UNIV_NOTHROW;$/;"	m	class:MutexDebug
UNIV_NOTHROW	include/sync0policy.h	/^  void release(const Mutex *mutex) UNIV_NOTHROW;$/;"	m	class:MutexDebug
UNIV_NOTHROW	include/sync0types.h	/^    Count() UNIV_NOTHROW : m_spins(), m_waits(), m_calls(), m_enabled() {$/;"	m	struct:LatchCounter::Count
UNIV_NOTHROW	include/sync0types.h	/^  explicit latch_t(latch_id_t id = LATCH_ID_NONE) UNIV_NOTHROW : m_id(id),$/;"	m	struct:latch_t
UNIV_NOTHROW	os/os0event.cc	/^  os_event() UNIV_NOTHROW;$/;"	m	struct:os_event	file:
UNIV_NOTHROW	os/os0event.cc	/^  ulint wait_time_low(ulint time_in_usec, int64_t reset_sig_count) UNIV_NOTHROW;$/;"	m	struct:os_event	file:
UNIV_NOTHROW	os/os0event.cc	/^  void wait_low(int64_t reset_sig_count) UNIV_NOTHROW;$/;"	m	struct:os_event	file:
UNIV_NOTHROW	os/os0event.cc	/^  ~os_event() UNIV_NOTHROW;$/;"	m	struct:os_event	file:
UNIV_NOTHROW	row/row0import.cc	/^                                            const ulint *offsets) UNIV_NOTHROW;$/;"	m	class:PageConverter	file:
UNIV_NOTHROW	row/row0import.cc	/^                                           ulint i) UNIV_NOTHROW;$/;"	m	class:PageConverter	file:
UNIV_NOTHROW	row/row0import.cc	/^                                        const dd::Table *dd_table) UNIV_NOTHROW;$/;"	m	struct:row_import	file:
UNIV_NOTHROW	row/row0import.cc	/^                                        const ulint *offsets) UNIV_NOTHROW;$/;"	m	class:PageConverter	file:
UNIV_NOTHROW	row/row0import.cc	/^                                   const dd::Table *dd_table) UNIV_NOTHROW;$/;"	m	struct:row_import	file:
UNIV_NOTHROW	row/row0import.cc	/^                                bool deleted) UNIV_NOTHROW;$/;"	m	class:PageConverter	file:
UNIV_NOTHROW	row/row0import.cc	/^                                buf_block_t *block) UNIV_NOTHROW;$/;"	m	class:PageConverter	file:
UNIV_NOTHROW	row/row0import.cc	/^                     buf_block_t *block) override UNIV_NOTHROW;$/;"	m	class:PageConverter	file:
UNIV_NOTHROW	row/row0import.cc	/^                     buf_block_t *block) override UNIV_NOTHROW;$/;"	m	struct:FetchIndexRootPages	file:
UNIV_NOTHROW	row/row0import.cc	/^               const buf_block_t *block) override UNIV_NOTHROW;$/;"	m	class:AbstractCallback	file:
UNIV_NOTHROW	row/row0import.cc	/^  PageConverter(row_import *cfg, trx_t *trx) UNIV_NOTHROW;$/;"	m	class:PageConverter	file:
UNIV_NOTHROW	row/row0import.cc	/^  bool purge(const ulint *offsets) UNIV_NOTHROW;$/;"	m	class:PageConverter	file:
UNIV_NOTHROW	row/row0import.cc	/^  dberr_t build_row_import(row_import *cfg) const UNIV_NOTHROW;$/;"	m	struct:FetchIndexRootPages	file:
UNIV_NOTHROW	row/row0import.cc	/^  dberr_t garbage_collect() UNIV_NOTHROW;$/;"	m	class:IndexPurge	file:
UNIV_NOTHROW	row/row0import.cc	/^  dberr_t match_index_columns(THD *thd, const dict_index_t *index) UNIV_NOTHROW;$/;"	m	struct:row_import	file:
UNIV_NOTHROW	row/row0import.cc	/^  dberr_t match_schema(THD *thd, const dd::Table *dd_table) UNIV_NOTHROW;$/;"	m	struct:row_import	file:
UNIV_NOTHROW	row/row0import.cc	/^  dberr_t match_table_columns(THD *thd) UNIV_NOTHROW;$/;"	m	struct:row_import	file:
UNIV_NOTHROW	row/row0import.cc	/^  dberr_t next() UNIV_NOTHROW;$/;"	m	class:IndexPurge	file:
UNIV_NOTHROW	row/row0import.cc	/^  dberr_t set_instant_info(THD *thd) UNIV_NOTHROW;$/;"	m	struct:row_import	file:
UNIV_NOTHROW	row/row0import.cc	/^  dberr_t set_root_by_heuristic() UNIV_NOTHROW;$/;"	m	struct:row_import	file:
UNIV_NOTHROW	row/row0import.cc	/^  dberr_t update_header(buf_block_t *block) UNIV_NOTHROW;$/;"	m	class:PageConverter	file:
UNIV_NOTHROW	row/row0import.cc	/^  dberr_t update_index_page(buf_block_t *block) UNIV_NOTHROW;$/;"	m	class:PageConverter	file:
UNIV_NOTHROW	row/row0import.cc	/^  dberr_t update_page(buf_block_t *block, ulint &page_type) UNIV_NOTHROW;$/;"	m	class:PageConverter	file:
UNIV_NOTHROW	row/row0import.cc	/^  dberr_t update_records(buf_block_t *block) UNIV_NOTHROW;$/;"	m	class:PageConverter	file:
UNIV_NOTHROW	row/row0import.cc	/^  row_import() UNIV_NOTHROW : m_table(),$/;"	m	struct:row_import	file:
UNIV_NOTHROW	row/row0import.cc	/^  row_index_t *get_index(const char *name) const UNIV_NOTHROW;$/;"	m	struct:row_import	file:
UNIV_NOTHROW	row/row0import.cc	/^  ulint find_col(const char *name) const UNIV_NOTHROW;$/;"	m	struct:row_import	file:
UNIV_NOTHROW	row/row0import.cc	/^  ulint get_n_purge_failed(const char *name) const UNIV_NOTHROW;$/;"	m	struct:row_import	file:
UNIV_NOTHROW	row/row0import.cc	/^  ulint get_n_rows(const char *name) const UNIV_NOTHROW;$/;"	m	struct:row_import	file:
UNIV_NOTHROW	row/row0import.cc	/^  void close() UNIV_NOTHROW;$/;"	m	class:IndexPurge	file:
UNIV_NOTHROW	row/row0import.cc	/^  void open() UNIV_NOTHROW;$/;"	m	class:IndexPurge	file:
UNIV_NOTHROW	row/row0import.cc	/^  void purge() UNIV_NOTHROW;$/;"	m	class:IndexPurge	file:
UNIV_NOTHROW	row/row0import.cc	/^  void purge_pessimistic_delete() UNIV_NOTHROW;$/;"	m	class:IndexPurge	file:
UNIV_NOTHROW	row/row0import.cc	/^  void set_root_by_name() UNIV_NOTHROW;$/;"	m	struct:row_import	file:
UNIV_NOTHROW	row/row0import.cc	/^  ~row_import() UNIV_NOTHROW;$/;"	m	struct:row_import	file:
UNIV_NOTHROW	sync/sync0debug.cc	/^                      latch_level_t level) const UNIV_NOTHROW;$/;"	m	struct:LatchDebug	file:
UNIV_NOTHROW	sync/sync0debug.cc	/^                      latch_level_t limit) const UNIV_NOTHROW;$/;"	m	struct:LatchDebug	file:
UNIV_NOTHROW	sync/sync0debug.cc	/^                   ulint in_level) const UNIV_NOTHROW;$/;"	m	struct:LatchDebug	file:
UNIV_NOTHROW	sync/sync0debug.cc	/^             latch_level_t level) const UNIV_NOTHROW;$/;"	m	struct:LatchDebug	file:
UNIV_NOTHROW	sync/sync0debug.cc	/^    File() UNIV_NOTHROW : m_name(), m_line() {}$/;"	m	struct:CreateTracker::File	file:
UNIV_NOTHROW	sync/sync0debug.cc	/^    File(const char *name, uint16_t line) UNIV_NOTHROW$/;"	m	struct:CreateTracker::File	file:
UNIV_NOTHROW	sync/sync0debug.cc	/^  LatchDebug() UNIV_NOTHROW;$/;"	m	struct:LatchDebug	file:
UNIV_NOTHROW	sync/sync0debug.cc	/^  Latches *check_order(const latch_t *latch, latch_level_t level) UNIV_NOTHROW;$/;"	m	struct:LatchDebug	file:
UNIV_NOTHROW	sync/sync0debug.cc	/^  Latches *thread_latches(bool add = false) UNIV_NOTHROW;$/;"	m	struct:LatchDebug	file:
UNIV_NOTHROW	sync/sync0debug.cc	/^  const latch_t *find(latch_level_t level) UNIV_NOTHROW;$/;"	m	struct:LatchDebug	file:
UNIV_NOTHROW	sync/sync0debug.cc	/^  static void init() UNIV_NOTHROW;$/;"	m	struct:LatchDebug	file:
UNIV_NOTHROW	sync/sync0debug.cc	/^  static void shutdown() UNIV_NOTHROW;$/;"	m	struct:LatchDebug	file:
UNIV_NOTHROW	sync/sync0debug.cc	/^  void print_latches(const Latches *latches) const UNIV_NOTHROW;$/;"	m	struct:LatchDebug	file:
UNIV_NOTHROW	sync/sync0debug.cc	/^  void unlock(const latch_t *latch) UNIV_NOTHROW;$/;"	m	struct:LatchDebug	file:
UNIV_NO_IGNORE	include/api0api.h	65;"	d
UNIV_NO_IGNORE	include/api0api.h	67;"	d
UNSET	include/os0file.h	/^    UNSET = 0,$/;"	e	enum:IORequest::__anon5
UNUSED	include/ut0lock_free_hash.h	/^  static const uint64_t UNUSED = UINT64_MAX;$/;"	m	class:ut_lock_free_hash_t
UPD_NODE_INSERT_CLUSTERED	include/row0upd.h	772;"	d
UPD_NODE_MAGIC_N	include/row0upd.h	760;"	d
UPD_NODE_NO_ORD_CHANGE	include/row0upd.h	787;"	d
UPD_NODE_NO_SIZE_CHANGE	include/row0upd.h	791;"	d
UPD_NODE_SET_IX_LOCK	include/row0upd.h	763;"	d
UPD_NODE_UPDATE_ALL_SEC	include/row0upd.h	776;"	d
UPD_NODE_UPDATE_CLUSTERED	include/row0upd.h	769;"	d
UPD_NODE_UPDATE_SOME_SEC	include/row0upd.h	781;"	d
USE_FILE_LOCK	os/os0file.cc	1510;"	d	file:
USE_FILE_LOCK	os/os0file.cc	1511;"	d	file:
USE_FILE_LOCK	os/os0file.cc	1516;"	d	file:
UT_BITS_IN_BYTES	include/ut0ut.h	244;"	d
UT_DELETE	include/ut0new.h	1025;"	d
UT_DELETE	include/ut0new.h	1135;"	d
UT_DELETE_ARRAY	include/ut0new.h	1064;"	d
UT_DELETE_ARRAY	include/ut0new.h	1143;"	d
UT_END_OF_FIELD	include/ut0rnd.h	41;"	d
UT_LIST_ADD_FIRST	include/ut0lst.h	168;"	d
UT_LIST_ADD_LAST	include/ut0lst.h	213;"	d
UT_LIST_BASE_NODE_T	include/ut0lst.h	96;"	d
UT_LIST_CHECK	include/ut0lst.h	393;"	d
UT_LIST_GET_FIRST	include/ut0lst.h	330;"	d
UT_LIST_GET_LAST	include/ut0lst.h	335;"	d
UT_LIST_GET_LEN	include/ut0lst.h	325;"	d
UT_LIST_GET_NEXT	include/ut0lst.h	313;"	d
UT_LIST_GET_PREV	include/ut0lst.h	319;"	d
UT_LIST_INIT	include/ut0lst.h	112;"	d
UT_LIST_INITIALISE	include/ut0lst.h	100;"	d
UT_LIST_INITIALISE	include/ut0lst.h	103;"	d
UT_LIST_INITIALISED	include/ut0lst.h	99;"	d
UT_LIST_INSERT_AFTER	include/ut0lst.h	250;"	d
UT_LIST_IS_INITIALISED	include/ut0lst.h	101;"	d
UT_LIST_IS_INITIALISED	include/ut0lst.h	104;"	d
UT_LIST_MOVE_TO_FRONT	include/ut0lst.h	431;"	d
UT_LIST_NODE_T	include/ut0lst.h	62;"	d
UT_LIST_REMOVE	include/ut0lst.h	307;"	d
UT_LIST_REVERSE	include/ut0lst.h	370;"	d
UT_LOCATION_HERE	include/ut0ut.h	165;"	d
UT_LOW_PRIORITY_CPU	include/ut0ut.h	131;"	d
UT_LOW_PRIORITY_CPU	include/ut0ut.h	134;"	d
UT_MUTEX_TYPE	include/ut0mutex.h	72;"	d
UT_NEW	include/ut0new.h	1000;"	d
UT_NEW	include/ut0new.h	1133;"	d
UT_NEW_ARRAY	include/ut0new.h	1048;"	d
UT_NEW_ARRAY	include/ut0new.h	1137;"	d
UT_NEW_ARRAY_NOKEY	include/ut0new.h	1057;"	d
UT_NEW_ARRAY_NOKEY	include/ut0new.h	1140;"	d
UT_NEW_NOKEY	include/ut0new.h	1019;"	d
UT_NEW_NOKEY	include/ut0new.h	1134;"	d
UT_NEW_THIS_FILE_PSI_INDEX	include/ut0new.h	515;"	d
UT_NEW_THIS_FILE_PSI_KEY	include/ut0new.h	455;"	d
UT_NEW_THIS_FILE_PSI_KEY	include/ut0new.h	518;"	d
UT_NOT_USED	include/ut0dbg.h	102;"	d
UT_RANDOM_1	ut/ut0rnd.cc	37;"	d	file:
UT_RANDOM_2	ut/ut0rnd.cc	38;"	d	file:
UT_RANDOM_3	ut/ut0rnd.cc	39;"	d	file:
UT_RELAX_CPU	include/ut0ut.h	106;"	d
UT_RELAX_CPU	include/ut0ut.h	108;"	d
UT_RELAX_CPU	include/ut0ut.h	112;"	d
UT_RELAX_CPU	include/ut0ut.h	117;"	d
UT_RELAX_CPU	include/ut0ut.h	125;"	d
UT_RELAX_CPU	include/ut0ut.h	127;"	d
UT_RELAX_CPU	include/ut0ut.h	155;"	d
UT_RESUME_PRIORITY_CPU	include/ut0ut.h	132;"	d
UT_RESUME_PRIORITY_CPU	include/ut0ut.h	135;"	d
UT_SORT_FUNCTION_BODY	include/ut0sort.h	58;"	d
UT_WAIT_FOR	include/ut0ut.h	142;"	d
UndoMutex	include/trx0types.h	/^typedef ib_mutex_t UndoMutex;$/;"	t
Unique_sharded_rw_lock	include/lock0latches.h	/^  class Unique_sharded_rw_lock {$/;"	c	class:locksys::Latches
Unique_sharded_rw_lock	lock/lock0latches.cc	/^Latches::Unique_sharded_rw_lock::Unique_sharded_rw_lock() {$/;"	f	class:locksys::Latches::Unique_sharded_rw_lock
Unsafe_global_latch_manipulator	include/lock0priv.h	/^class Unsafe_global_latch_manipulator {$/;"	c	namespace:locksys
VALIDATE_RECENT_CLOSED	include/log0test.h	/^    VALIDATE_RECENT_CLOSED = 1,$/;"	m	class:Log_test::Options
VALIDATE_RECENT_WRITTEN	include/log0test.h	/^    VALIDATE_RECENT_WRITTEN = 2$/;"	m	class:Log_test::Options
VERSION_1	include/os0enc.h	/^    VERSION_1 = 0,$/;"	e	enum:Encryption::Version
VERSION_2	include/os0enc.h	/^    VERSION_2 = 1,$/;"	e	enum:Encryption::Version
VERSION_3	include/os0enc.h	/^    VERSION_3 = 2,$/;"	e	enum:Encryption::Version
VERSION_COL_NO	include/dict0dict.h	/^  static constexpr unsigned VERSION_COL_NO = 1;$/;"	m	class:DDTableBuffer
VERSION_FIELD_NO	include/dict0dict.h	/^  static constexpr unsigned VERSION_FIELD_NO = VERSION_COL_NO + 2;$/;"	m	class:DDTableBuffer
VIRTUAL_COL_UNDO_FORMAT_1	trx/trx0rec.cc	/^static const ulint VIRTUAL_COL_UNDO_FORMAT_1 = 0xF1;$/;"	v	file:
Validate_files	handler/ha_innodb.cc	/^  Validate_files()$/;"	f	class:Validate_files
Validate_files	handler/ha_innodb.cc	/^class Validate_files {$/;"	c	file:
Value	handler/ha_innodb.cc	/^    Value(const char *name, ulint spins, uint64_t waits, uint64_t calls)$/;"	f	struct:ShowStatus::Value
Value	handler/ha_innodb.cc	/^  struct Value {$/;"	s	struct:ShowStatus	file:
Value	include/log0test.h	/^  typedef int64_t Value;$/;"	t	class:Log_test
Values	handler/ha_innodb.cc	/^  typedef std::vector<Value, ut_allocator<Value>> Values;$/;"	t	struct:ShowStatus	file:
Version	include/os0enc.h	/^  enum Version {$/;"	g	class:Encryption
ViewCheck	read/read0read.cc	/^  ViewCheck() : m_prev_view() {}$/;"	f	struct:ViewCheck
ViewCheck	read/read0read.cc	/^struct ViewCheck {$/;"	s	file:
WAIT_FOR_READ_US	buf/buf0buf.cc	/^static const int WAIT_FOR_READ_US = 100;$/;"	v	file:
WAIT_FOR_WRITE_US	buf/buf0buf.cc	/^static const int WAIT_FOR_WRITE_US = 100;$/;"	v	file:
WIN_ASYNC_IO	include/os0file.h	113;"	d
WORK_COMPLETED	include/ut0stage.h	/^    WORK_COMPLETED = 3,$/;"	e	enum:ut_stage_alter_ts::__anon14
WORK_ESTIMATED	include/ut0stage.h	/^    WORK_ESTIMATED = 2,$/;"	e	enum:ut_stage_alter_ts::__anon14
WRITE	include/os0file.h	/^    WRITE = 2,$/;"	e	enum:IORequest::__anon5
WaitMutex	include/sync0arr_impl.h	/^typedef SyncArrayMutex::MutexType WaitMutex;$/;"	t
Wait_stats	include/ut0ut.h	/^  explicit Wait_stats(uint64_t wait_loops = 0) : wait_loops(wait_loops) {}$/;"	f	struct:Wait_stats
Wait_stats	include/ut0ut.h	/^struct Wait_stats {$/;"	s
XA_H	include/trx0xa.h	33;"	d
XDES_ARR_OFFSET	include/fsp0fsp.h	341;"	d
XDES_BITMAP	include/fsp0fsp.h	292;"	d
XDES_BITS_PER_PAGE	include/fsp0fsp.h	297;"	d
XDES_CLEAN_BIT	include/fsp0fsp.h	301;"	d
XDES_FLST_NODE	include/fsp0fsp.h	286;"	d
XDES_FRAG_N_USED	include/fsp0fsp.h	/^const ulint XDES_FRAG_N_USED = 2;$/;"	v
XDES_FREE	include/fsp0fsp.h	/^  XDES_FREE = 1,$/;"	e	enum:xdes_state_t
XDES_FREE_BIT	include/fsp0fsp.h	298;"	d
XDES_FREE_FRAG	include/fsp0fsp.h	/^  XDES_FREE_FRAG = 2,$/;"	e	enum:xdes_state_t
XDES_FSEG	include/fsp0fsp.h	/^  XDES_FSEG = 4,$/;"	e	enum:xdes_state_t
XDES_FSEG_FRAG	include/fsp0fsp.h	/^  XDES_FSEG_FRAG = 5$/;"	e	enum:xdes_state_t
XDES_FULL_FRAG	include/fsp0fsp.h	/^  XDES_FULL_FRAG = 3,$/;"	e	enum:xdes_state_t
XDES_ID	include/fsp0fsp.h	283;"	d
XDES_NOT_INITED	include/fsp0fsp.h	/^  XDES_NOT_INITED = 0,$/;"	e	enum:xdes_state_t
XDES_SIZE	include/fsp0fsp.h	329;"	d
XDES_SIZE_MAX	include/fsp0fsp.h	333;"	d
XDES_SIZE_MIN	include/fsp0fsp.h	337;"	d
XDES_STATE	include/fsp0fsp.h	289;"	d
XIDDATASIZE	include/trx0xa.h	43;"	d
XLOG	include/ut0test.h	142;"	d
X_LOCK_DECR	include/sync0rw.h	106;"	d
X_LOCK_HALF_DECR	include/sync0rw.h	107;"	d
YYABORT	fts/fts0pars.cc	594;"	d	file:
YYABORT	pars/pars0grm.cc	977;"	d	file:
YYACCEPT	fts/fts0pars.cc	593;"	d	file:
YYACCEPT	pars/pars0grm.cc	976;"	d	file:
YYBACKUP	fts/fts0pars.cc	615;"	d	file:
YYBACKUP	pars/pars0grm.cc	983;"	d	file:
YYBISON	fts/fts0pars.cc	44;"	d	file:
YYBISON	pars/pars0grm.cc	44;"	d	file:
YYBISON_VERSION	fts/fts0pars.cc	47;"	d	file:
YYBISON_VERSION	pars/pars0grm.cc	47;"	d	file:
YYCASE_	fts/fts0pars.cc	1060;"	d	file:
YYCASE_	fts/fts0pars.cc	1070;"	d	file:
YYCASE_	pars/pars0grm.cc	1324;"	d	file:
YYCASE_	pars/pars0grm.cc	1334;"	d	file:
YYCOPY	fts/fts0pars.cc	378;"	d	file:
YYCOPY	fts/fts0pars.cc	381;"	d	file:
YYCOPY	pars/pars0grm.cc	455;"	d	file:
YYCOPY	pars/pars0grm.cc	458;"	d	file:
YYCOPY_NEEDED	fts/fts0pars.cc	353;"	d	file:
YYCOPY_NEEDED	pars/pars0grm.cc	430;"	d	file:
YYDEBUG	fts/fts0pars.cc	121;"	d	file:
YYDEBUG	include/pars0grm.h	37;"	d
YYDEBUG	pars/pars0grm.cc	109;"	d	file:
YYDPRINTF	fts/fts0pars.cc	698;"	d	file:
YYDPRINTF	fts/fts0pars.cc	847;"	d	file:
YYDPRINTF	pars/pars0grm.cc	1014;"	d	file:
YYDPRINTF	pars/pars0grm.cc	1129;"	d	file:
YYEMPTY	fts/fts0pars.cc	590;"	d	file:
YYEMPTY	pars/pars0grm.cc	973;"	d	file:
YYEOF	fts/fts0pars.cc	591;"	d	file:
YYEOF	pars/pars0grm.cc	974;"	d	file:
YYERRCLEANUP	fts/fts0pars.cc	635;"	d	file:
YYERRCODE	fts/fts0pars.cc	633;"	d	file:
YYERRCODE	pars/pars0grm.cc	1002;"	d	file:
YYERROR	fts/fts0pars.cc	595;"	d	file:
YYERROR	pars/pars0grm.cc	978;"	d	file:
YYERROR_VERBOSE	fts/fts0pars.cc	126;"	d	file:
YYERROR_VERBOSE	fts/fts0pars.cc	127;"	d	file:
YYERROR_VERBOSE	fts/fts0pars.cc	129;"	d	file:
YYERROR_VERBOSE	fts/fts0pars.cc	98;"	d	file:
YYERROR_VERBOSE	pars/pars0grm.cc	100;"	d	file:
YYERROR_VERBOSE	pars/pars0grm.cc	97;"	d	file:
YYERROR_VERBOSE	pars/pars0grm.cc	98;"	d	file:
YYFAIL	fts/fts0pars.cc	605;"	d	file:
YYFINAL	fts/fts0pars.cc	394;"	d	file:
YYFINAL	pars/pars0grm.cc	471;"	d	file:
YYFPRINTF	fts/fts0pars.cc	695;"	d	file:
YYFPRINTF	pars/pars0grm.cc	1011;"	d	file:
YYFREE	fts/fts0pars.cc	323;"	d	file:
YYFREE	pars/pars0grm.cc	401;"	d	file:
YYID	fts/fts0pars.cc	/^YYID (int yyi)$/;"	f	file:
YYID	fts/fts0pars.cc	249;"	d	file:
YYINITDEPTH	fts/fts0pars.cc	856;"	d	file:
YYINITDEPTH	pars/pars0grm.cc	1138;"	d	file:
YYLAST	fts/fts0pars.cc	396;"	d	file:
YYLAST	pars/pars0grm.cc	473;"	d	file:
YYLEX	fts/fts0pars.cc	685;"	d	file:
YYLEX	fts/fts0pars.cc	687;"	d	file:
YYLEX_PARAM	fts/fts0pars.cc	102;"	d	file:
YYLLOC_DEFAULT	fts/fts0pars.cc	655;"	d	file:
YYLSP_NEEDED	fts/fts0pars.cc	62;"	d	file:
YYMALLOC	fts/fts0pars.cc	316;"	d	file:
YYMALLOC	pars/pars0grm.cc	395;"	d	file:
YYMAXDEPTH	fts/fts0pars.cc	867;"	d	file:
YYMAXDEPTH	pars/pars0grm.cc	1149;"	d	file:
YYMAXUTOK	fts/fts0pars.cc	409;"	d	file:
YYMAXUTOK	pars/pars0grm.cc	487;"	d	file:
YYNNTS	fts/fts0pars.cc	401;"	d	file:
YYNNTS	pars/pars0grm.cc	478;"	d	file:
YYNRULES	fts/fts0pars.cc	403;"	d	file:
YYNRULES	pars/pars0grm.cc	480;"	d	file:
YYNSTATES	fts/fts0pars.cc	405;"	d	file:
YYNSTATES	pars/pars0grm.cc	482;"	d	file:
YYNTOKENS	fts/fts0pars.cc	399;"	d	file:
YYNTOKENS	pars/pars0grm.cc	476;"	d	file:
YYPACT_NINF	fts/fts0pars.cc	533;"	d	file:
YYPACT_NINF	pars/pars0grm.cc	637;"	d	file:
YYPARSE_PARAM	fts/fts0pars.cc	101;"	d	file:
YYPOPSTACK	fts/fts0pars.cc	1232;"	d	file:
YYPOPSTACK	pars/pars0grm.cc	1449;"	d	file:
YYPULL	fts/fts0pars.cc	59;"	d	file:
YYPULL	pars/pars0grm.cc	59;"	d	file:
YYPURE	fts/fts0pars.cc	53;"	d	file:
YYPURE	pars/pars0grm.cc	53;"	d	file:
YYPUSH	fts/fts0pars.cc	56;"	d	file:
YYPUSH	pars/pars0grm.cc	56;"	d	file:
YYRECOVERING	fts/fts0pars.cc	613;"	d	file:
YYRECOVERING	pars/pars0grm.cc	981;"	d	file:
YYRHSLOC	fts/fts0pars.cc	653;"	d	file:
YYSIZE_MAXIMUM	fts/fts0pars.cc	226;"	d	file:
YYSIZE_MAXIMUM	pars/pars0grm.cc	274;"	d	file:
YYSIZE_T	fts/fts0pars.cc	214;"	d	file:
YYSIZE_T	fts/fts0pars.cc	216;"	d	file:
YYSIZE_T	fts/fts0pars.cc	220;"	d	file:
YYSIZE_T	fts/fts0pars.cc	222;"	d	file:
YYSIZE_T	pars/pars0grm.cc	263;"	d	file:
YYSIZE_T	pars/pars0grm.cc	265;"	d	file:
YYSIZE_T	pars/pars0grm.cc	268;"	d	file:
YYSIZE_T	pars/pars0grm.cc	270;"	d	file:
YYSKELETON_NAME	fts/fts0pars.cc	50;"	d	file:
YYSKELETON_NAME	pars/pars0grm.cc	50;"	d	file:
YYSTACK_ALLOC	fts/fts0pars.cc	272;"	d	file:
YYSTACK_ALLOC	fts/fts0pars.cc	279;"	d	file:
YYSTACK_ALLOC	fts/fts0pars.cc	302;"	d	file:
YYSTACK_ALLOC	pars/pars0grm.cc	349;"	d	file:
YYSTACK_ALLOC	pars/pars0grm.cc	353;"	d	file:
YYSTACK_ALLOC	pars/pars0grm.cc	358;"	d	file:
YYSTACK_ALLOC	pars/pars0grm.cc	381;"	d	file:
YYSTACK_ALLOC_MAXIMUM	fts/fts0pars.cc	299;"	d	file:
YYSTACK_ALLOC_MAXIMUM	fts/fts0pars.cc	305;"	d	file:
YYSTACK_ALLOC_MAXIMUM	pars/pars0grm.cc	378;"	d	file:
YYSTACK_ALLOC_MAXIMUM	pars/pars0grm.cc	384;"	d	file:
YYSTACK_BYTES	fts/fts0pars.cc	349;"	d	file:
YYSTACK_BYTES	pars/pars0grm.cc	426;"	d	file:
YYSTACK_FREE	fts/fts0pars.cc	293;"	d	file:
YYSTACK_FREE	fts/fts0pars.cc	303;"	d	file:
YYSTACK_FREE	pars/pars0grm.cc	372;"	d	file:
YYSTACK_FREE	pars/pars0grm.cc	382;"	d	file:
YYSTACK_GAP_MAXIMUM	fts/fts0pars.cc	345;"	d	file:
YYSTACK_GAP_MAXIMUM	pars/pars0grm.cc	422;"	d	file:
YYSTACK_RELOCATE	fts/fts0pars.cc	360;"	d	file:
YYSTACK_RELOCATE	pars/pars0grm.cc	437;"	d	file:
YYSTATE	fts/fts0blex.cc	189;"	d	file:
YYSTATE	fts/fts0tlex.cc	188;"	d	file:
YYSTATE	pars/lexyy.cc	135;"	d	file:
YYSTYPE	fts/fts0pars.cc	/^typedef union YYSTYPE$/;"	u	file:
YYSTYPE	fts/fts0pars.cc	/^} YYSTYPE;$/;"	t	typeref:union:YYSTYPE	file:
YYSTYPE	include/fts0pars.h	/^typedef union YYSTYPE$/;"	u
YYSTYPE	include/fts0pars.h	/^} YYSTYPE;$/;"	t	typeref:union:YYSTYPE
YYSTYPE	include/pars0grm.h	/^typedef int YYSTYPE;$/;"	t
YYSTYPE	pars/lexyy.cc	905;"	d	file:
YYSTYPE	pars/pars0grm.cc	/^typedef int YYSTYPE;$/;"	t	file:
YYSTYPE	pars/pars0grm.cc	79;"	d	file:
YYSTYPE_IS_DECLARED	fts/fts0pars.cc	171;"	d	file:
YYSTYPE_IS_DECLARED	include/fts0pars.h	67;"	d
YYSTYPE_IS_DECLARED	include/pars0grm.h	146;"	d
YYSTYPE_IS_DECLARED	pars/pars0grm.cc	219;"	d	file:
YYSTYPE_IS_TRIVIAL	fts/fts0pars.cc	169;"	d	file:
YYSTYPE_IS_TRIVIAL	include/fts0pars.h	65;"	d
YYSTYPE_IS_TRIVIAL	include/pars0grm.h	145;"	d
YYSTYPE_IS_TRIVIAL	pars/pars0grm.cc	218;"	d	file:
YYTABLES_NAME	fts/fts0blex.cc	1976;"	d	file:
YYTABLES_NAME	fts/fts0tlex.cc	1968;"	d	file:
YYTABLES_NAME	pars/lexyy.cc	2990;"	d	file:
YYTABLE_NINF	fts/fts0pars.cc	551;"	d	file:
YYTABLE_NINF	pars/pars0grm.cc	642;"	d	file:
YYTERROR	fts/fts0pars.cc	632;"	d	file:
YYTERROR	pars/pars0grm.cc	1001;"	d	file:
YYTOKENFREE	fts/fts0pars.cc	104;"	d	file:
YYTOKENTYPE	fts/fts0pars.cc	140;"	d	file:
YYTOKENTYPE	include/fts0pars.h	36;"	d
YYTOKENTYPE	include/pars0grm.h	45;"	d
YYTOKENTYPE	pars/pars0grm.cc	117;"	d	file:
YYTOKEN_TABLE	fts/fts0pars.cc	134;"	d	file:
YYTRANSLATE	fts/fts0pars.cc	411;"	d	file:
YYTRANSLATE	pars/pars0grm.cc	489;"	d	file:
YYUNDEFTOK	fts/fts0pars.cc	408;"	d	file:
YYUNDEFTOK	pars/pars0grm.cc	486;"	d	file:
YYUSE	fts/fts0pars.cc	242;"	d	file:
YYUSE	fts/fts0pars.cc	244;"	d	file:
YYUSE	pars/pars0grm.cc	317;"	d	file:
YYUSE	pars/pars0grm.cc	319;"	d	file:
YY_	fts/fts0pars.cc	232;"	d	file:
YY_	fts/fts0pars.cc	236;"	d	file:
YY_	pars/pars0grm.cc	280;"	d	file:
YY_	pars/pars0grm.cc	284;"	d	file:
YY_ATTRIBUTE	pars/pars0grm.cc	292;"	d	file:
YY_ATTRIBUTE	pars/pars0grm.cc	294;"	d	file:
YY_ATTRIBUTE_PURE	pars/pars0grm.cc	299;"	d	file:
YY_ATTRIBUTE_UNUSED	pars/pars0grm.cc	303;"	d	file:
YY_AT_BOL	fts/fts0blex.cc	373;"	d	file:
YY_AT_BOL	fts/fts0tlex.cc	372;"	d	file:
YY_AT_BOL	pars/lexyy.cc	343;"	d	file:
YY_BREAK	fts/fts0blex.cc	714;"	d	file:
YY_BREAK	fts/fts0tlex.cc	710;"	d	file:
YY_BREAK	pars/lexyy.cc	1130;"	d	file:
YY_BUFFER_EOF_PENDING	fts/fts0blex.cc	309;"	d	file:
YY_BUFFER_EOF_PENDING	fts/fts0tlex.cc	308;"	d	file:
YY_BUFFER_EOF_PENDING	pars/lexyy.cc	259;"	d	file:
YY_BUFFER_NEW	fts/fts0blex.cc	297;"	d	file:
YY_BUFFER_NEW	fts/fts0tlex.cc	296;"	d	file:
YY_BUFFER_NEW	pars/lexyy.cc	247;"	d	file:
YY_BUFFER_NORMAL	fts/fts0blex.cc	298;"	d	file:
YY_BUFFER_NORMAL	fts/fts0tlex.cc	297;"	d	file:
YY_BUFFER_NORMAL	pars/lexyy.cc	248;"	d	file:
YY_BUFFER_STATE	fts/fts0blex.cc	/^typedef struct yy_buffer_state *YY_BUFFER_STATE;$/;"	t	typeref:struct:yy_buffer_state	file:
YY_BUFFER_STATE	fts/fts0tlex.cc	/^typedef struct yy_buffer_state *YY_BUFFER_STATE;$/;"	t	typeref:struct:yy_buffer_state	file:
YY_BUFFER_STATE	include/fts0blex.h	/^typedef struct yy_buffer_state *YY_BUFFER_STATE;$/;"	t	typeref:struct:yy_buffer_state
YY_BUFFER_STATE	include/fts0tlex.h	/^typedef struct yy_buffer_state *YY_BUFFER_STATE;$/;"	t	typeref:struct:yy_buffer_state
YY_BUFFER_STATE	pars/lexyy.cc	/^typedef struct yy_buffer_state *YY_BUFFER_STATE;$/;"	t	typeref:struct:yy_buffer_state	file:
YY_BUF_SIZE	fts/fts0blex.cc	206;"	d	file:
YY_BUF_SIZE	fts/fts0blex.cc	208;"	d	file:
YY_BUF_SIZE	fts/fts0tlex.cc	205;"	d	file:
YY_BUF_SIZE	fts/fts0tlex.cc	207;"	d	file:
YY_BUF_SIZE	include/fts0blex.h	177;"	d
YY_BUF_SIZE	include/fts0blex.h	179;"	d
YY_BUF_SIZE	include/fts0tlex.h	176;"	d
YY_BUF_SIZE	include/fts0tlex.h	178;"	d
YY_BUF_SIZE	pars/lexyy.cc	152;"	d	file:
YY_BUF_SIZE	pars/lexyy.cc	154;"	d	file:
YY_CHAR	fts/fts0blex.cc	/^typedef unsigned char YY_CHAR;$/;"	t	file:
YY_CHAR	fts/fts0tlex.cc	/^typedef unsigned char YY_CHAR;$/;"	t	file:
YY_CHAR	pars/lexyy.cc	/^typedef unsigned char YY_CHAR;$/;"	t	file:
YY_CURRENT_BUFFER	fts/fts0blex.cc	320;"	d	file:
YY_CURRENT_BUFFER	fts/fts0tlex.cc	319;"	d	file:
YY_CURRENT_BUFFER	pars/lexyy.cc	275;"	d	file:
YY_CURRENT_BUFFER_LVALUE	fts/fts0blex.cc	327;"	d	file:
YY_CURRENT_BUFFER_LVALUE	fts/fts0tlex.cc	326;"	d	file:
YY_CURRENT_BUFFER_LVALUE	pars/lexyy.cc	282;"	d	file:
YY_DECL	fts/fts0blex.cc	497;"	d	file:
YY_DECL	fts/fts0blex.cc	702;"	d	file:
YY_DECL	fts/fts0tlex.cc	493;"	d	file:
YY_DECL	fts/fts0tlex.cc	698;"	d	file:
YY_DECL	include/fts0blex.h	368;"	d
YY_DECL	include/fts0blex.h	382;"	d
YY_DECL	include/fts0tlex.h	367;"	d
YY_DECL	include/fts0tlex.h	381;"	d
YY_DECL	pars/lexyy.cc	1118;"	d	file:
YY_DECL_IS_OURS	fts/fts0blex.cc	698;"	d	file:
YY_DECL_IS_OURS	fts/fts0tlex.cc	694;"	d	file:
YY_DECL_IS_OURS	include/fts0blex.h	364;"	d
YY_DECL_IS_OURS	include/fts0blex.h	381;"	d
YY_DECL_IS_OURS	include/fts0tlex.h	363;"	d
YY_DECL_IS_OURS	include/fts0tlex.h	380;"	d
YY_DECL_IS_OURS	pars/lexyy.cc	1114;"	d	file:
YY_DO_BEFORE_ACTION	fts/fts0blex.cc	394;"	d	file:
YY_DO_BEFORE_ACTION	fts/fts0tlex.cc	393;"	d	file:
YY_DO_BEFORE_ACTION	include/fts0blex.h	378;"	d
YY_DO_BEFORE_ACTION	include/fts0tlex.h	377;"	d
YY_DO_BEFORE_ACTION	pars/lexyy.cc	371;"	d	file:
YY_END_OF_BUFFER	fts/fts0blex.cc	402;"	d	file:
YY_END_OF_BUFFER	fts/fts0tlex.cc	401;"	d	file:
YY_END_OF_BUFFER	pars/lexyy.cc	379;"	d	file:
YY_END_OF_BUFFER_CHAR	fts/fts0blex.cc	197;"	d	file:
YY_END_OF_BUFFER_CHAR	fts/fts0tlex.cc	196;"	d	file:
YY_END_OF_BUFFER_CHAR	pars/lexyy.cc	143;"	d	file:
YY_EXIT_FAILURE	fts/fts0blex.cc	1631;"	d	file:
YY_EXIT_FAILURE	fts/fts0tlex.cc	1623;"	d	file:
YY_EXIT_FAILURE	pars/lexyy.cc	2788;"	d	file:
YY_EXTRA_TYPE	fts/fts0blex.cc	514;"	d	file:
YY_EXTRA_TYPE	fts/fts0tlex.cc	510;"	d	file:
YY_EXTRA_TYPE	include/fts0blex.h	281;"	d
YY_EXTRA_TYPE	include/fts0tlex.h	280;"	d
YY_EXTRA_TYPE	pars/lexyy.cc	972;"	d	file:
YY_FATAL_ERROR	fts/fts0blex.cc	689;"	d	file:
YY_FATAL_ERROR	fts/fts0tlex.cc	685;"	d	file:
YY_FATAL_ERROR	pars/lexyy.cc	1105;"	d	file:
YY_FLEX_MAJOR_VERSION	fts/fts0blex.cc	48;"	d	file:
YY_FLEX_MAJOR_VERSION	fts/fts0tlex.cc	47;"	d	file:
YY_FLEX_MAJOR_VERSION	include/fts0blex.h	51;"	d
YY_FLEX_MAJOR_VERSION	include/fts0tlex.h	50;"	d
YY_FLEX_MAJOR_VERSION	pars/lexyy.cc	12;"	d	file:
YY_FLEX_MINOR_VERSION	fts/fts0blex.cc	49;"	d	file:
YY_FLEX_MINOR_VERSION	fts/fts0tlex.cc	48;"	d	file:
YY_FLEX_MINOR_VERSION	include/fts0blex.h	52;"	d
YY_FLEX_MINOR_VERSION	include/fts0tlex.h	51;"	d
YY_FLEX_MINOR_VERSION	pars/lexyy.cc	13;"	d	file:
YY_FLEX_SUBMINOR_VERSION	fts/fts0blex.cc	50;"	d	file:
YY_FLEX_SUBMINOR_VERSION	fts/fts0tlex.cc	49;"	d	file:
YY_FLEX_SUBMINOR_VERSION	include/fts0blex.h	53;"	d
YY_FLEX_SUBMINOR_VERSION	include/fts0tlex.h	52;"	d
YY_FLEX_SUBMINOR_VERSION	pars/lexyy.cc	14;"	d	file:
YY_FLUSH_BUFFER	fts/fts0blex.cc	341;"	d	file:
YY_FLUSH_BUFFER	fts/fts0tlex.cc	340;"	d	file:
YY_FLUSH_BUFFER	include/fts0blex.h	374;"	d
YY_FLUSH_BUFFER	include/fts0tlex.h	373;"	d
YY_FLUSH_BUFFER	pars/lexyy.cc	311;"	d	file:
YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN	pars/pars0grm.cc	324;"	d	file:
YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN	pars/pars0grm.cc	334;"	d	file:
YY_IGNORE_MAYBE_UNINITIALIZED_END	pars/pars0grm.cc	328;"	d	file:
YY_IGNORE_MAYBE_UNINITIALIZED_END	pars/pars0grm.cc	335;"	d	file:
YY_INITIAL_VALUE	pars/pars0grm.cc	331;"	d	file:
YY_INITIAL_VALUE	pars/pars0grm.cc	338;"	d	file:
YY_INPUT	fts/fts0blex.cc	642;"	d	file:
YY_INPUT	fts/fts0tlex.cc	638;"	d	file:
YY_INPUT	pars/lexyy.cc	1058;"	d	file:
YY_INPUT	pars/lexyy.cc	920;"	d	file:
YY_INT_ALIGNED	fts/fts0blex.cc	43;"	d	file:
YY_INT_ALIGNED	fts/fts0tlex.cc	42;"	d	file:
YY_INT_ALIGNED	include/fts0blex.h	46;"	d
YY_INT_ALIGNED	include/fts0tlex.h	45;"	d
YY_INT_ALIGNED	pars/lexyy.cc	7;"	d	file:
YY_LESS_LINENO	fts/fts0blex.cc	230;"	d	file:
YY_LESS_LINENO	fts/fts0tlex.cc	229;"	d	file:
YY_LESS_LINENO	pars/lexyy.cc	180;"	d	file:
YY_LINENO_REWIND_TO	fts/fts0blex.cc	231;"	d	file:
YY_LINENO_REWIND_TO	fts/fts0tlex.cc	230;"	d	file:
YY_LINENO_REWIND_TO	pars/lexyy.cc	181;"	d	file:
YY_LOCATION_PRINT	fts/fts0pars.cc	678;"	d	file:
YY_LOCATION_PRINT	pars/pars0grm.cc	1022;"	d	file:
YY_MORE_ADJ	fts/fts0blex.cc	488;"	d	file:
YY_MORE_ADJ	fts/fts0tlex.cc	483;"	d	file:
YY_MORE_ADJ	pars/lexyy.cc	855;"	d	file:
YY_NEW_FILE	fts/fts0blex.cc	195;"	d	file:
YY_NEW_FILE	fts/fts0tlex.cc	194;"	d	file:
YY_NEW_FILE	include/fts0blex.h	373;"	d
YY_NEW_FILE	include/fts0tlex.h	372;"	d
YY_NEW_FILE	pars/lexyy.cc	141;"	d	file:
YY_NO_INPUT	fts/fts0blex.cc	500;"	d	file:
YY_NO_INPUT	fts/fts0tlex.cc	496;"	d	file:
YY_NO_INPUT	pars/lexyy.cc	902;"	d	file:
YY_NO_UNISTD_H	pars/lexyy.cc	903;"	d	file:
YY_NULL	fts/fts0blex.cc	152;"	d	file:
YY_NULL	fts/fts0tlex.cc	151;"	d	file:
YY_NULL	pars/lexyy.cc	115;"	d	file:
YY_NULLPTR	pars/pars0grm.cc	89;"	d	file:
YY_NULLPTR	pars/pars0grm.cc	91;"	d	file:
YY_NUM_RULES	fts/fts0blex.cc	401;"	d	file:
YY_NUM_RULES	fts/fts0tlex.cc	400;"	d	file:
YY_NUM_RULES	pars/lexyy.cc	378;"	d	file:
YY_READ_BUF_SIZE	fts/fts0blex.cc	624;"	d	file:
YY_READ_BUF_SIZE	fts/fts0blex.cc	626;"	d	file:
YY_READ_BUF_SIZE	fts/fts0tlex.cc	620;"	d	file:
YY_READ_BUF_SIZE	fts/fts0tlex.cc	622;"	d	file:
YY_READ_BUF_SIZE	include/fts0blex.h	349;"	d
YY_READ_BUF_SIZE	include/fts0blex.h	351;"	d
YY_READ_BUF_SIZE	include/fts0tlex.h	348;"	d
YY_READ_BUF_SIZE	include/fts0tlex.h	350;"	d
YY_READ_BUF_SIZE	pars/lexyy.cc	1040;"	d	file:
YY_READ_BUF_SIZE	pars/lexyy.cc	1042;"	d	file:
YY_REDUCE_PRINT	fts/fts0pars.cc	837;"	d	file:
YY_REDUCE_PRINT	fts/fts0pars.cc	850;"	d	file:
YY_REDUCE_PRINT	pars/pars0grm.cc	1119;"	d	file:
YY_REDUCE_PRINT	pars/pars0grm.cc	1132;"	d	file:
YY_RESTORE_YY_MORE_OFFSET	fts/fts0blex.cc	489;"	d	file:
YY_RESTORE_YY_MORE_OFFSET	fts/fts0tlex.cc	484;"	d	file:
YY_RESTORE_YY_MORE_OFFSET	pars/lexyy.cc	856;"	d	file:
YY_RULE_SETUP	fts/fts0blex.cc	717;"	d	file:
YY_RULE_SETUP	fts/fts0tlex.cc	713;"	d	file:
YY_RULE_SETUP	pars/lexyy.cc	1133;"	d	file:
YY_SC_TO_UI	fts/fts0blex.cc	159;"	d	file:
YY_SC_TO_UI	fts/fts0tlex.cc	158;"	d	file:
YY_SC_TO_UI	pars/lexyy.cc	122;"	d	file:
YY_SKIP_YYWRAP	fts/fts0blex.cc	378;"	d	file:
YY_SKIP_YYWRAP	fts/fts0tlex.cc	377;"	d	file:
YY_SKIP_YYWRAP	include/fts0blex.h	263;"	d
YY_SKIP_YYWRAP	include/fts0tlex.h	262;"	d
YY_SKIP_YYWRAP	pars/lexyy.cc	348;"	d	file:
YY_STACK_PRINT	fts/fts0pars.cc	799;"	d	file:
YY_STACK_PRINT	fts/fts0pars.cc	849;"	d	file:
YY_STACK_PRINT	pars/pars0grm.cc	1088;"	d	file:
YY_STACK_PRINT	pars/pars0grm.cc	1131;"	d	file:
YY_START	fts/fts0blex.cc	188;"	d	file:
YY_START	fts/fts0tlex.cc	187;"	d	file:
YY_START	pars/lexyy.cc	134;"	d	file:
YY_START_STACK_INCR	fts/fts0blex.cc	684;"	d	file:
YY_START_STACK_INCR	fts/fts0tlex.cc	680;"	d	file:
YY_START_STACK_INCR	include/fts0blex.h	357;"	d
YY_START_STACK_INCR	include/fts0tlex.h	356;"	d
YY_START_STACK_INCR	pars/lexyy.cc	1100;"	d	file:
YY_STATE_BUF_SIZE	fts/fts0blex.cc	214;"	d	file:
YY_STATE_BUF_SIZE	fts/fts0tlex.cc	213;"	d	file:
YY_STATE_BUF_SIZE	pars/lexyy.cc	160;"	d	file:
YY_STATE_EOF	fts/fts0blex.cc	192;"	d	file:
YY_STATE_EOF	fts/fts0tlex.cc	191;"	d	file:
YY_STATE_EOF	pars/lexyy.cc	138;"	d	file:
YY_STRUCT_YY_BUFFER_STATE	fts/fts0blex.cc	250;"	d	file:
YY_STRUCT_YY_BUFFER_STATE	fts/fts0tlex.cc	249;"	d	file:
YY_STRUCT_YY_BUFFER_STATE	include/fts0blex.h	194;"	d
YY_STRUCT_YY_BUFFER_STATE	include/fts0tlex.h	193;"	d
YY_STRUCT_YY_BUFFER_STATE	pars/lexyy.cc	200;"	d	file:
YY_SYMBOL_PRINT	fts/fts0pars.cc	704;"	d	file:
YY_SYMBOL_PRINT	fts/fts0pars.cc	848;"	d	file:
YY_SYMBOL_PRINT	pars/pars0grm.cc	1026;"	d	file:
YY_SYMBOL_PRINT	pars/pars0grm.cc	1130;"	d	file:
YY_TYPEDEF_YY_BUFFER_STATE	fts/fts0blex.cc	217;"	d	file:
YY_TYPEDEF_YY_BUFFER_STATE	fts/fts0tlex.cc	216;"	d	file:
YY_TYPEDEF_YY_BUFFER_STATE	include/fts0blex.h	184;"	d
YY_TYPEDEF_YY_BUFFER_STATE	include/fts0tlex.h	183;"	d
YY_TYPEDEF_YY_BUFFER_STATE	pars/lexyy.cc	163;"	d	file:
YY_TYPEDEF_YY_SCANNER_T	fts/fts0blex.cc	163;"	d	file:
YY_TYPEDEF_YY_SCANNER_T	fts/fts0tlex.cc	162;"	d	file:
YY_TYPEDEF_YY_SCANNER_T	include/fts0blex.h	155;"	d
YY_TYPEDEF_YY_SCANNER_T	include/fts0tlex.h	154;"	d
YY_TYPEDEF_YY_SIZE_T	fts/fts0blex.cc	222;"	d	file:
YY_TYPEDEF_YY_SIZE_T	fts/fts0tlex.cc	221;"	d	file:
YY_TYPEDEF_YY_SIZE_T	include/fts0blex.h	189;"	d
YY_TYPEDEF_YY_SIZE_T	include/fts0tlex.h	188;"	d
YY_TYPEDEF_YY_SIZE_T	pars/lexyy.cc	168;"	d	file:
YY_USER_ACTION	fts/fts0blex.cc	709;"	d	file:
YY_USER_ACTION	fts/fts0tlex.cc	705;"	d	file:
YY_USER_ACTION	pars/lexyy.cc	1125;"	d	file:
YY_USE_CONST	fts/fts0blex.cc	133;"	d	file:
YY_USE_CONST	fts/fts0blex.cc	140;"	d	file:
YY_USE_CONST	fts/fts0tlex.cc	132;"	d	file:
YY_USE_CONST	fts/fts0tlex.cc	139;"	d	file:
YY_USE_CONST	include/fts0blex.h	135;"	d
YY_USE_CONST	include/fts0blex.h	142;"	d
YY_USE_CONST	include/fts0tlex.h	134;"	d
YY_USE_CONST	include/fts0tlex.h	141;"	d
YY_USE_CONST	pars/lexyy.cc	103;"	d	file:
YY_USE_CONST	pars/lexyy.cc	96;"	d	file:
YY_YY_PARS0GRM_TAB_H_INCLUDED	include/pars0grm.h	34;"	d
YY_YY_PARS0GRM_TAB_H_INCLUDED	pars/pars0grm.cc	106;"	d	file:
ZIP_PAD_INCR	include/dict0mem.h	767;"	d
ZIP_PAD_ROUND_LEN	include/dict0mem.h	761;"	d
ZIP_PAD_SUCCESSFUL_ROUND_LIMIT	include/dict0mem.h	764;"	d
ZLIB	os/file.h	/^    ZLIB = 1,$/;"	m	struct:Compression	typeref:enum:Compression::
ZLOB_PAGE_DATA	include/lob0lob.h	/^const uint ZLOB_PAGE_DATA = FIL_PAGE_DATA;$/;"	m	namespace:lob
Z_CHUNK_SIZE	include/lob0lob.h	90;"	d
_Noreturn	pars/pars0grm.cc	309;"	d	file:
_Noreturn	pars/pars0grm.cc	311;"	d	file:
_WIN32_WINNT	include/os0numa.h	58;"	d
__STDC_LIMIT_MACROS	fts/fts0blex.cc	78;"	d	file:
__STDC_LIMIT_MACROS	fts/fts0tlex.cc	77;"	d	file:
__STDC_LIMIT_MACROS	include/fts0blex.h	81;"	d
__STDC_LIMIT_MACROS	include/fts0tlex.h	80;"	d
__STDC_LIMIT_MACROS	include/srv0mon.h	41;"	d
__STDC_LIMIT_MACROS	pars/lexyy.cc	42;"	d	file:
_gis0geo_h	include/gis0geo.h	30;"	d
_mm_crc32_u64	ut/crc32.cc	/^ALWAYS_INLINE uint64_t _mm_crc32_u64(uint64_t __C, uint64_t __V) {$/;"	f
_mm_crc32_u8	ut/crc32.cc	/^ALWAYS_INLINE uint32_t _mm_crc32_u8(uint32_t __C, uint32_t __V) {$/;"	f
abort	include/trx0trx.h	/^  bool abort; \/*!< if this flag is set then$/;"	m	struct:trx_t
absolute	include/fil0fil.h	/^  enum path_type { absolute, relative, file_name_only, invalid };$/;"	e	enum:Fil_path::path_type
acc	include/os0thread.h	/^  std::array<std::atomic<T_digit>, digits_count> acc;$/;"	m	class:Atomic_xor_of_things
access_time	include/buf0buf.h	/^  uint32_t access_time;$/;"	m	class:Cache_hint::buf_page_t
ack_state	clone/clone0clone.cc	/^void Clone_Task_Manager::ack_state(const Clone_Desc_State *state_desc) {$/;"	f	class:Clone_Task_Manager
ack_state_metadata	clone/clone0apply.cc	/^int Clone_Handle::ack_state_metadata(Clone_Task *task, Ha_clone_cbk *callback,$/;"	f	class:Clone_Handle
acquire	fil/fil0fil.cc	/^  void acquire(int line) const {$/;"	f	class:Fil_shard
acquire	include/srv0tmp.h	/^  void acquire() { mutex_enter(&m_mutex); }$/;"	f	class:ibt::Tablespace_pool
acquire	os/os0file.cc	/^  void acquire() const { mutex_enter(&m_mutex); }$/;"	f	class:AIO
acquire_plugin_services	handler/ha_innodb.cc	/^static void acquire_plugin_services() {$/;"	f	file:
acquire_uncached_table	dict/dict0dd.cc	/^int acquire_uncached_table(THD *thd, dd::cache::Dictionary_client *client,$/;"	f
activity_count	srv/srv0srv.cc	/^  srv_stats_t::ulint_ctr_1_t activity_count; \/*!< For tracking server$/;"	m	struct:srv_sys_t	file:
adaptive	include/hash0hash.h	/^  ibool adaptive;     \/* TRUE if this is the hash$/;"	m	struct:hash_table_t
add	clone/clone0repl.cc	/^void Clone_persist_gtid::add(const Gtid_desc &gtid_desc) {$/;"	f	class:Clone_persist_gtid
add	dict/dict0dict.cc	/^Persister *Persisters::add(persistent_type_t type) {$/;"	f	class:Persisters
add	fil/fil0fil.cc	/^size_t Tablespace_files::add(space_id_t space_id, const std::string &name) {$/;"	f	class:Tablespace_files
add	include/lob0lob.h	/^  dberr_t add(const blob_page_info_t &page) {$/;"	f	struct:lob::blob_dir_t
add	include/ut0counter.h	/^inline Type add(Shards<COUNT> &shards, size_t id, size_t n) {$/;"	f	namespace:Counter
add	trx/trx0purge.cc	/^void undo::Tablespaces::add(Tablespace &ref_undo_space) {$/;"	f	class:undo::Tablespaces
add_autoinc	handler/handler0alter.cc	/^  const ulint add_autoinc;$/;"	m	struct:ha_innobase_inplace_ctx	file:
add_block	include/dyn0buf.h	/^  block_t *add_block() {$/;"	f	class:dyn_buf_t
add_buf_pool_file	clone/clone0copy.cc	/^int Clone_Snapshot::add_buf_pool_file() {$/;"	f	class:Clone_Snapshot
add_clone	clone/clone0clone.cc	/^int Clone_Sys::add_clone(const byte *loc, Clone_Handle_Type hdl_type,$/;"	f	class:Clone_Sys
add_cols	handler/handler0alter.cc	/^  const dtuple_t *add_cols;$/;"	m	struct:ha_innobase_inplace_ctx	file:
add_cols	row/row0log.cc	/^  const dtuple_t *add_cols;$/;"	m	struct:row_log_t	file:
add_corrupted_index	include/dict0mem.h	/^  void add_corrupted_index(const index_id_t id) {$/;"	f	class:PersistentTableMetadata
add_datafile	fsp/fsp0space.cc	/^dberr_t Tablespace::add_datafile(const char *datafile_added) {$/;"	f	class:Tablespace
add_dirty_blocks_to_flush_list	mtr/mtr0mtr.cc	/^void mtr_t::Command::add_dirty_blocks_to_flush_list(lsn_t start_lsn,$/;"	f	class:mtr_t::Command
add_dirty_page	log/log0test.cc	/^void Log_test::add_dirty_page(const Page &page) {$/;"	f	class:Log_test
add_dirty_page_to_flush_list	mtr/mtr0mtr.cc	/^  void add_dirty_page_to_flush_list(mtr_memo_slot_t *slot) const {$/;"	f	struct:Add_dirty_blocks_to_flush_list
add_estimate	include/clone0monitor.h	/^  void add_estimate(uint64_t size) {$/;"	f	class:Clone_Monitor
add_field	include/dict0mem.h	/^  void add_field(const char *name_arg, ulint prefix_len, bool is_ascending) {$/;"	f	struct:dict_index_t
add_file	clone/clone0copy.cc	/^int Clone_Snapshot::add_file(const char *name, uint64_t size_bytes,$/;"	f	class:Clone_Snapshot
add_file_from_desc	clone/clone0apply.cc	/^bool Clone_Snapshot::add_file_from_desc(Clone_File_Meta *&file_desc) {$/;"	f	class:Clone_Snapshot
add_fk	handler/handler0alter.cc	/^  dict_foreign_t **add_fk;$/;"	m	struct:ha_innobase_inplace_ctx	file:
add_incomplete_chunk	clone/clone0clone.cc	/^void Clone_Task_Manager::add_incomplete_chunk(Clone_Task *task) {$/;"	f	class:Clone_Task_Manager
add_index	handler/handler0alter.cc	/^  dict_index_t **add_index;$/;"	m	struct:ha_innobase_inplace_ctx	file:
add_key_numbers	handler/handler0alter.cc	/^  const ulint *add_key_numbers;$/;"	m	struct:ha_innobase_inplace_ctx	file:
add_link	include/ut0link_buf.h	/^inline void Link_buf<Position>::add_link(Position from, Position to) {$/;"	f	class:Link_buf
add_link_advance_tail	include/ut0link_buf.h	/^inline void Link_buf<Position>::add_link_advance_tail(Position from,$/;"	f	class:Link_buf
add_lock_to_cache	trx/trx0i_s.cc	/^static i_s_locks_row_t *add_lock_to_cache($/;"	f	file:
add_node	clone/clone0copy.cc	/^dberr_t Clone_Snapshot::add_node(fil_node_t *node) {$/;"	f	class:Clone_Snapshot
add_old_file	fil/fil0fil.cc	/^  void add_old_file(const std::string &file_path) {$/;"	f	class:Fil_system
add_page	arch/arch0page.cc	/^bool Arch_Block::add_page(buf_page_t *page, Arch_Page_Pos *pos) {$/;"	f	class:Arch_Block
add_page	clone/clone0copy.cc	/^int Clone_Snapshot::add_page(space_id_t space_id, ib_uint32_t page_num) {$/;"	f	class:Clone_Snapshot
add_page_callback	clone/clone0copy.cc	/^static int add_page_callback(void *context, byte *buff, uint num_pages) {$/;"	f	file:
add_path	fil/fil0fil.cc	/^void Tablespace_dirs::add_path(const std::string &path_in, bool is_undo_dir) {$/;"	f	class:Tablespace_dirs
add_paths	fil/fil0fil.cc	/^void Tablespace_dirs::add_paths(const std::string &str,$/;"	f	class:Tablespace_dirs
add_pool	include/ut0pool.h	/^  bool add_pool(size_t n_pools) {$/;"	f	struct:PoolManager
add_pos	fts/fts0fts.cc	/^  ulint add_pos;         \/*!< Added position for tokens *\/$/;"	m	struct:fts_tokenize_param_t	file:
add_redo_file	clone/clone0copy.cc	/^int Clone_Snapshot::add_redo_file(char *file_name, uint64_t file_size,$/;"	f	class:Clone_Snapshot
add_redo_file_callback	clone/clone0copy.cc	/^static int add_redo_file_callback(char *file_name, ib_uint64_t file_size,$/;"	f	file:
add_reset	arch/arch0page.cc	/^void Arch_Block::add_reset(lsn_t reset_lsn, Arch_Page_Pos reset_pos) {$/;"	f	class:Arch_Block
add_scan	row/row0pread-adapter.cc	/^dberr_t Parallel_reader_adapter::add_scan(trx_t *trx,$/;"	f	class:Parallel_reader_adapter
add_scan	row/row0pread.cc	/^dberr_t Parallel_reader::add_scan(trx_t *trx,$/;"	f	class:Parallel_reader
add_space_to_construction_list	trx/trx0purge.cc	/^void add_space_to_construction_list(space_id_t space_id) {$/;"	f	namespace:undo
add_table_to_thread_cache	handler/ha_innodb.cc	/^static inline void add_table_to_thread_cache(dict_table_t *table,$/;"	f	file:
add_task	clone/clone0clone.cc	/^int Clone_Task_Manager::add_task(THD *thd, const byte *ref_loc, uint loc_len,$/;"	f	class:Clone_Task_Manager
add_task	include/clone0clone.h	/^  int add_task(THD *thd, const byte *ref_loc, uint ref_len, uint &task_id) {$/;"	f	class:Clone_Handle
add_to_blob_dir	include/lob0zip.h	/^  void add_to_blob_dir(const blob_page_info_t &page_info) {$/;"	f	class:lob::zInserter
add_to_empty	include/lob0impl.h	/^  void add_to_empty(plist_node_t &node) {$/;"	f	struct:lob::plist_base_node_t
add_to_trx_locks	lock/lock0lock.cc	/^static void add_to_trx_locks(lock_t *lock) {$/;"	f	namespace:locksys
add_to_unflushed_list	fil/fil0fil.cc	/^void Fil_shard::add_to_unflushed_list(fil_space_t *space) {$/;"	f	class:Fil_shard
add_to_waitq	lock/lock0lock.cc	/^dberr_t RecLock::add_to_waitq(const lock_t *wait_for, const lock_prdt_t *prdt) {$/;"	f	class:RecLock
add_trx_relevant_locks_to_cache	trx/trx0i_s.cc	/^static ibool add_trx_relevant_locks_to_cache($/;"	f	file:
add_v	include/dict0crea.h	/^  const dict_add_v_col_t *add_v; \/*!< new virtual columns that being$/;"	m	struct:ind_node_t
add_vcol	handler/handler0alter.cc	/^  dict_v_col_t *add_vcol;$/;"	m	struct:ha_innobase_inplace_ctx	file:
add_vcol_name	handler/handler0alter.cc	/^  const char **add_vcol_name;$/;"	m	struct:ha_innobase_inplace_ctx	file:
add_version	include/lob0index.h	/^  void add_version(index_entry_t &entry) const {$/;"	f	struct:lob::index_entry_t
add_wq	include/fts0fts.h	/^  ib_wqueue_t *add_wq;$/;"	m	class:fts_t
added	fts/fts0opt.cc	/^  ulint added; \/*!< Number of doc ids added since the$/;"	m	struct:fts_slot_t	file:
added	include/fts0types.h	/^  ulint added; \/*!< Number of doc ids added since last$/;"	m	struct:fts_cache_t
added_doc_ids	include/fts0fts.h	/^  fts_doc_ids_t *added_doc_ids; \/*!< list of added doc ids (NULL until$/;"	m	struct:fts_trx_table_t
added_rec	include/mtr0mtr.h	/^  void added_rec() { ++m_impl.m_n_log_recs; }$/;"	f	struct:mtr_t
addr	include/lob0impl.h	/^  paddr_t addr() const { return (m_base - m_frame); }$/;"	f	struct:lob::plist_base_node_t
addr	include/lob0impl.h	/^  paddr_t addr() const { return (m_node.addr()); }$/;"	f	struct:lob::frag_node_t
addr	include/lob0impl.h	/^  paddr_t addr() const {$/;"	f	class:lob::plist_node_t
addr2ptr	include/lob0first.h	/^  flst_node_t *addr2ptr(const fil_addr_t &addr) {$/;"	f	struct:lob::first_page_t
addr2ptr_s	include/lob0first.h	/^  flst_node_t *addr2ptr_s(fil_addr_t &addr) {$/;"	f	struct:lob::first_page_t
addr2ptr_s	include/lob0impl.h	/^  flst_node_t *addr2ptr_s(fil_addr_t &addr) {$/;"	f	struct:lob::z_frag_page_t
addr2ptr_s	include/zlob0first.h	/^  flst_node_t *addr2ptr_s(fil_addr_t &addr) {$/;"	f	struct:lob::z_first_page_t
addr2ptr_s_cache	include/lob0first.h	/^  flst_node_t *addr2ptr_s_cache(std::map<page_no_t, buf_block_t *> &cache,$/;"	f	struct:lob::first_page_t
addr2ptr_x	include/lob0first.h	/^  flst_node_t *addr2ptr_x(fil_addr_t &addr) const {$/;"	f	struct:lob::first_page_t
addr2ptr_x	include/lob0first.h	/^  flst_node_t *addr2ptr_x(fil_addr_t &addr, mtr_t *mtr) const {$/;"	f	struct:lob::first_page_t
addr2ptr_x	include/lob0impl.h	/^  flst_node_t *addr2ptr_x(fil_addr_t &addr) {$/;"	f	struct:lob::z_frag_page_t
addr2ptr_x	include/zlob0first.h	/^  flst_node_t *addr2ptr_x(fil_addr_t &addr) const {$/;"	f	struct:lob::z_first_page_t
addr2ptr_x	include/zlob0first.h	/^  flst_node_t *addr2ptr_x(fil_addr_t &addr, mtr_t *mtr) const {$/;"	f	struct:lob::z_first_page_t
address	include/mem0mem.h	/^  const_pointer address(const_reference r) const { return (&r); }$/;"	f	class:mem_heap_allocator
address	include/mem0mem.h	/^  pointer address(reference r) const { return (&r); }$/;"	f	class:mem_heap_allocator
address	include/pars0pars.h	/^  const void *address; \/*!< address *\/$/;"	m	struct:pars_bound_lit_t
address	include/ut0new.h	/^  const_pointer address(const_reference x) const { return (&x); }$/;"	f	class:ut_allocator
address	include/ut0new.h	/^  pointer address(reference x) const { return (&x); }$/;"	f	class:ut_allocator
adjacent	os/os0file.cc	/^  bool adjacent(const Slot *s1, const Slot *s2) const {$/;"	f	class:SimulatedAIOHandler	file:
adjust	buf/buf0buf.cc	/^void FlushHp::adjust(const buf_page_t *bpage) {$/;"	f	class:FlushHp
adjust	buf/buf0buf.cc	/^void LRUHp::adjust(const buf_page_t *bpage) {$/;"	f	class:LRUHp
adjust_end_lsn	arch/arch0log.cc	/^void Arch_Group::adjust_end_lsn(lsn_t &stop_lsn, uint32_t &blk_len) {$/;"	f	class:Arch_Group
adjust_row_format	handler/handler0alter.cc	/^void static adjust_row_format(TABLE *old_table, TABLE *altered_table,$/;"	f	file:
adjust_space_name	fil/fil0fil.cc	/^bool Fil_shard::adjust_space_name(fil_space_t *space,$/;"	f	class:Fil_shard
adjust_undo_extend	fsp/fsp0fsp.cc	/^static UNIV_COLD void adjust_undo_extend(fil_space_t *space) {$/;"	f	file:
adjust_v_data_mysql	data/data0data.cc	/^void dfield_t::adjust_v_data_mysql(const dict_v_col_t *vcol, bool comp,$/;"	f	class:dfield_t
advance	include/lock0priv.h	/^  static lock_t *advance(const RecID &rec_id, lock_t *lock) {$/;"	f	struct:Lock_iter
advance	os/os0file.cc	/^  void advance(ssize_t n_bytes) {$/;"	f	class:SyncFileIO
advance_tail	include/ut0link_buf.h	/^inline bool Link_buf<Position>::advance_tail() {$/;"	f	class:Link_buf
advance_tail_until	include/ut0link_buf.h	/^bool Link_buf<Position>::advance_tail_until(Stop_condition stop_condition,$/;"	f	class:Link_buf
aggregate_already_fetched	include/row0sel.h	/^  ibool aggregate_already_fetched;$/;"	m	struct:sel_node_t
alias	include/pars0sym.h	/^  sym_node_t *alias;       \/*!< pointer to$/;"	m	struct:sym_node_t
aligned_array_pointer	include/ut0new.h	/^class aligned_array_pointer : public aligned_memory<T_Type, T_Align_to> {$/;"	c
aligned_array_pointer	include/ut0new.h	/^class aligned_array_pointer {$/;"	c	namespace:ut
aligned_memory	include/ut0new.h	/^class aligned_memory {$/;"	c
aligned_new	include/ut0new.h	/^inline T *aligned_new(std::size_t alignment, Args &&... args) {$/;"	f	namespace:ut
aligned_new_arr	include/ut0new.h	/^inline T *aligned_new_arr(std::size_t alignment, Args &&... args) {$/;"	f	namespace:ut
aligned_new_arr	include/ut0new.h	/^inline T *aligned_new_arr(std::size_t alignment, size_t count) {$/;"	f	namespace:ut
aligned_pointer	include/ut0new.h	/^class aligned_pointer : public aligned_memory<T_Type, T_Align_to> {$/;"	c
aligned_pointer	include/ut0new.h	/^class aligned_pointer {$/;"	c	namespace:ut
all_info	include/row0ftsort.h	/^  fts_psort_t *all_info;   \/*!< all parallel sort info *\/$/;"	m	struct:fts_psort_common_t
all_innodb_conds	handler/ha_innodb.cc	/^static PSI_cond_info all_innodb_conds[] = {$/;"	v	file:
all_innodb_files	handler/ha_innodb.cc	/^static PSI_file_info all_innodb_files[] = {$/;"	v	file:
all_innodb_mutexes	handler/ha_innodb.cc	/^static PSI_mutex_info all_innodb_mutexes[] = {$/;"	v	file:
all_innodb_rwlocks	handler/ha_innodb.cc	/^static PSI_rwlock_info all_innodb_rwlocks[] = {$/;"	v	file:
all_innodb_threads	handler/ha_innodb.cc	/^static PSI_thread_info all_innodb_threads[] = {$/;"	v	file:
all_pthread_mutexes	handler/ha_innodb.cc	/^static PSI_mutex_info all_pthread_mutexes[] = {$/;"	v	file:
alloc	data/data0data.cc	/^big_rec_t *big_rec_t::alloc(mem_heap_t *heap, ulint n_fld) {$/;"	f	class:big_rec_t
alloc	data/data0data.cc	/^void multi_value_data::alloc(uint32_t num, bool alc_bitset, mem_heap_t *heap) {$/;"	f	class:multi_value_data
alloc	include/detail/ut0new.h	/^  static inline void *alloc(std::size_t size, std::size_t alignment) {$/;"	f	struct:ut::detail::Aligned_alloc
alloc	include/ut0new.h	/^  void alloc(Args &&... args) {$/;"	f	class:ut::aligned_array_pointer
alloc	include/ut0new.h	/^  void alloc(Args &&... args) {$/;"	f	class:ut::aligned_pointer
alloc	include/ut0new.h	/^  void alloc(size_t size) {$/;"	f	class:ut::aligned_array_pointer
alloc	lob/lob0first.cc	/^buf_block_t *first_page_t::alloc(mtr_t *alloc_mtr, bool is_bulk) {$/;"	f	class:lob::first_page_t
alloc	lob/lob0impl.cc	/^buf_block_t *node_page_t::alloc(first_page_t &first_page, bool bulk) {$/;"	f	class:lob::node_page_t
alloc	lob/lob0impl.cc	/^buf_block_t *z_data_page_t::alloc(page_no_t hint, bool bulk) {$/;"	f	class:lob::z_data_page_t
alloc	lob/lob0impl.cc	/^buf_block_t *z_frag_node_page_t::alloc(z_first_page_t &first, bool bulk) {$/;"	f	class:lob::z_frag_node_page_t
alloc	lob/lob0impl.cc	/^buf_block_t *z_frag_page_t::alloc(z_first_page_t &first, page_no_t hint,$/;"	f	class:lob::z_frag_page_t
alloc	lob/lob0impl.cc	/^buf_block_t *z_index_page_t::alloc(z_first_page_t &first, bool bulk) {$/;"	f	class:lob::z_index_page_t
alloc	lob/lob0pages.cc	/^buf_block_t *data_page_t::alloc(mtr_t *alloc_mtr, bool is_bulk) {$/;"	f	class:lob::data_page_t
alloc	lob/zlob0first.cc	/^buf_block_t *z_first_page_t::alloc(bool bulk) {$/;"	f	class:lob::z_first_page_t
alloc_bitset	data/data0data.cc	/^void multi_value_data::alloc_bitset(mem_heap_t *heap, uint32_t size) {$/;"	f	class:multi_value_data
alloc_blob_heap_array	handler/ha_innopart.cc	/^mem_heap_t **ha_innopart::alloc_blob_heap_array() {$/;"	f	class:ha_innopart
alloc_blob_page	lob/lob0ins.cc	/^buf_block_t *BaseInserter::alloc_blob_page() {$/;"	f	class:lob::BaseInserter
alloc_buffer	clone/clone0clone.cc	/^int Clone_Task_Manager::alloc_buffer(Clone_Task *task) {$/;"	f	class:Clone_Task_Manager
alloc_dir_entry	lob/lob0impl.cc	/^ulint z_frag_page_t::alloc_dir_entry() {$/;"	f	class:lob::z_frag_page_t
alloc_frag_entry	lob/zlob0first.cc	/^z_frag_entry_t z_first_page_t::alloc_frag_entry(bool bulk) {$/;"	f	class:lob::z_first_page_t
alloc_frag_id	include/lob0impl.h	/^  ulint alloc_frag_id() {$/;"	f	struct:lob::z_frag_page_t
alloc_fragment	lob/lob0impl.cc	/^frag_id_t z_frag_page_t::alloc_fragment(ulint size, z_frag_entry_t &entry) {$/;"	f	class:lob::z_frag_page_t
alloc_fragment	lob/zlob0first.cc	/^frag_id_t z_first_page_t::alloc_fragment(bool bulk, ulint len,$/;"	f	class:lob::z_first_page_t
alloc_identifier	handler/p_s.cc	/^const char *alloc_identifier(PSI_server_data_lock_container *container,$/;"	f
alloc_index_entry	lob/lob0first.cc	/^flst_node_t *first_page_t::alloc_index_entry(bool bulk) {$/;"	f	class:lob::first_page_t
alloc_index_entry	lob/zlob0first.cc	/^z_index_entry_t z_first_page_t::alloc_index_entry(bool bulk) {$/;"	f	class:lob::z_first_page_t
alloc_lob_page	lob/lob0util.cc	/^buf_block_t *alloc_lob_page(dict_index_t *index, mtr_t *lob_mtr, page_no_t hint,$/;"	f	namespace:lob
alloc_max_retries	ut/ut0new.cc	/^const size_t alloc_max_retries = 60;$/;"	v
alloc_size	include/os0file.h	/^  os_offset_t alloc_size;      \/*!< Allocated size for$/;"	m	struct:AIO_mode::os_file_stat_t
alloca	fts/fts0pars.cc	277;"	d	file:
alloca	pars/pars0grm.cc	356;"	d	file:
allocate	include/mem0mem.h	/^  pointer allocate(size_type n, const_pointer hint = nullptr) {$/;"	f	class:mem_heap_allocator
allocate	include/ut0new.h	/^  T_Type *allocate(size_t size) {$/;"	f	class:aligned_memory
allocate	include/ut0new.h	/^  pointer allocate(size_type n_elements, const_pointer hint = nullptr,$/;"	f	class:ut_allocator
allocate_chunk	buf/buf0buf.cc	/^bool buf_pool_t::allocate_chunk(ulonglong mem_size, buf_chunk_t *chunk) {$/;"	f	class:buf_pool_t
allocate_large	include/ut0new.h	/^  pointer allocate_large(size_type n_elements, ut_new_pfx_t *pfx) {$/;"	f	class:ut_allocator
allocate_trace	include/ut0new.h	/^  void allocate_trace(size_t size, PSI_memory_key key, ut_new_pfx_t *pfx) {$/;"	f	class:ut_allocator
allocated	include/gis0type.h	/^  bool allocated; \/*!< whether this structure is allocate or$/;"	m	struct:rtr_info
allocator	include/buf0buf.h	/^  ut_allocator<unsigned char> allocator;$/;"	m	struct:Cache_hint::buf_pool_t
allocator	include/ut0vec.h	/^  ib_alloc_t *allocator; \/* Allocator, because one size$/;"	m	struct:ib_vector_t
allow_concurrent	clone/clone0api.cc	/^  bool allow_concurrent() const { return (m_concurrent); }$/;"	f	class:__anon2::Fixup_data	file:
allow_duplicates	include/dict0mem.h	/^  unsigned allow_duplicates : 1;$/;"	m	struct:dict_index_t
allow_duplicates	include/row0mysql.h	/^  bool allow_duplicates() { return (replace || on_duplicate_key_update); }$/;"	f	struct:row_prebuilt_t
allow_semi_consistent	include/trx0trx.h	/^  bool allow_semi_consistent() const { return (skip_gap_locks()); }$/;"	f	struct:trx_t
alter_active	trx/trx0purge.cc	/^void Tablespace::alter_active() {$/;"	f	class:undo::Tablespace
alter_fill_stored_column	handler/handler0alter.cc	/^static void alter_fill_stored_column(const TABLE *altered_table,$/;"	f	file:
alter_part	handler/handler0alter.cc	/^  alter_part(trx_t *trx, uint part_id, partition_state state,$/;"	f	class:alter_part
alter_part	handler/handler0alter.cc	/^class alter_part {$/;"	c	file:
alter_part_add	handler/handler0alter.cc	/^  alter_part_add(uint part_id, partition_state state, const char *table_name,$/;"	f	class:alter_part_add
alter_part_add	handler/handler0alter.cc	/^class alter_part_add : public alter_part {$/;"	c	file:
alter_part_array	handler/handler0alter.cc	/^typedef std::vector<alter_part *, ut_allocator<alter_part *>> alter_part_array;$/;"	t	file:
alter_part_change	handler/handler0alter.cc	/^  alter_part_change(uint part_id, partition_state state, const char *table_name,$/;"	f	class:alter_part_change
alter_part_change	handler/handler0alter.cc	/^class alter_part_change : public alter_part {$/;"	c	file:
alter_part_drop	handler/handler0alter.cc	/^  alter_part_drop(uint part_id, partition_state state, const char *table_name,$/;"	f	class:alter_part_drop
alter_part_drop	handler/handler0alter.cc	/^class alter_part_drop : public alter_part {$/;"	c	file:
alter_part_factory	handler/handler0alter.cc	/^  alter_part_factory(trx_t *trx, const Alter_inplace_info *ha_alter_info,$/;"	f	class:alter_part_factory
alter_part_factory	handler/handler0alter.cc	/^class alter_part_factory {$/;"	c	file:
alter_part_normal	handler/handler0alter.cc	/^  alter_part_normal(uint part_id, partition_state state, dict_table_t **old)$/;"	f	class:alter_part_normal
alter_part_normal	handler/handler0alter.cc	/^class alter_part_normal : public alter_part {$/;"	c	file:
alter_parts	handler/handler0alter.cc	/^  alter_parts(trx_t *trx, Ha_innopart_share *part_share,$/;"	f	class:alter_parts
alter_parts	handler/handler0alter.cc	/^class alter_parts : public inplace_alter_handler_ctx {$/;"	c	file:
alter_stats_norebuild	handler/handler0alter.cc	/^static void alter_stats_norebuild(Alter_inplace_info *ha_alter_info,$/;"	f	file:
alter_stats_rebuild	handler/handler0alter.cc	/^static void alter_stats_rebuild(dict_table_t *table, const char *table_name,$/;"	f	file:
alter_table_flags	handler/ha_innopart.cc	/^uint ha_innopart::alter_table_flags(uint flags) {$/;"	f	class:ha_innopart
alter_table_old_info_t	handler/handler0alter.cc	/^  alter_table_old_info_t() : m_discarded(), m_fts_doc_id(), m_rebuild() {}$/;"	f	struct:alter_table_old_info_t
alter_table_old_info_t	handler/handler0alter.cc	/^struct alter_table_old_info_t {$/;"	s	file:
alter_templ_needs_rebuild	handler/handler0alter.cc	/^static bool alter_templ_needs_rebuild(TABLE *altered_table,$/;"	f	file:
analyze	handler/ha_innodb.cc	/^int ha_innobase::analyze(THD *thd, \/*!< in: connection thread handle *\/$/;"	f	class:ha_innobase
any_waits	include/ut0ut.h	/^  bool any_waits() const { return (wait_loops != 0); }$/;"	f	struct:Wait_stats
api0api_h	include/api0api.h	35;"	d
api0misc_h	include/api0misc.h	35;"	d
api_auto_commit	include/trx0trx.h	/^  bool api_auto_commit;        \/*!< automatic commit *\/$/;"	m	struct:trx_t
api_trx	include/trx0trx.h	/^  bool api_trx;                \/*!< trx started by InnoDB API *\/$/;"	m	struct:trx_t
append	include/data0data.h	/^  void append(const big_rec_field_t &field) {$/;"	f	struct:big_rec_t
append	include/row0upd.h	/^  void append(const upd_field_t &field) { fields[n_fields++] = field; }$/;"	f	struct:upd_t
append	include/trx0types.h	/^  void append(const TrxUndoRsegs &append_from) {$/;"	f	class:TrxUndoRsegs
append	lob/lob0pages.cc	/^ulint data_page_t::append(trx_id_t trxid, byte *&data, ulint &len) {$/;"	f	class:lob::data_page_t
append_path	log/log0meb.cc	/^static void append_path(const char *variable_name, const char *path_name,$/;"	f	namespace:meb
append_separator	include/fil0fil.h	/^  static void append_separator(std::string &path) {$/;"	f	class:Fil_path
apply	clone/clone0apply.cc	/^int Clone_Handle::apply(THD *thd, uint task_id, Ha_clone_cbk *callback) {$/;"	f	class:Clone_Handle
apply	include/lob0undo.h	/^  void apply(dict_index_t *clust_index, ulint field_no, byte *lob, size_t len,$/;"	f	struct:lob::undo_vers_t
apply	include/lob0undo.h	/^  void apply(dict_index_t *index, byte *lob, size_t len, size_t lob_version,$/;"	f	struct:lob::undo_seq_t
apply	lob/lob0undo.cc	/^void undo_data_t::apply(dict_index_t *index, byte *lob_mem, size_t len,$/;"	f	class:lob::undo_data_t
apply	log/log0recv.cc	/^void MetadataRecover::apply() {$/;"	f	class:MetadataRecover
apply_batch_on	include/log0recv.h	/^  bool apply_batch_on;$/;"	m	struct:recv_sys_t
apply_data	clone/clone0apply.cc	/^int Clone_Handle::apply_data(Clone_Task *task, Ha_clone_cbk *callback) {$/;"	f	class:Clone_Handle
apply_dd_undo_state	handler/ha_innodb.cc	/^bool apply_dd_undo_state(space_id_t space_id, const dd::Tablespace *dd_space) {$/;"	f
apply_delete_multi_value	row/row0log.cc	/^    apply_delete_multi_value(const dtuple_t *row, row_ext_t *ext,$/;"	f
apply_dynamic_metadata	srv/srv0start.cc	/^static void apply_dynamic_metadata() {$/;"	f	file:
apply_file_metadata	clone/clone0apply.cc	/^int Clone_Handle::apply_file_metadata(Clone_Task *task,$/;"	f	class:Clone_Handle
apply_file_operations	include/log0recv.h	/^  bool apply_file_operations;$/;"	m	struct:recv_sys_t
apply_insert_multi_value	row/row0log.cc	/^    apply_insert_multi_value(uint32_t flags, dict_index_t *index,$/;"	f
apply_log_mutex	log/log0recv.cc	/^meb::Mutex apply_log_mutex;$/;"	v
apply_log_recs	include/log0recv.h	/^  bool apply_log_recs;$/;"	m	struct:recv_sys_t
apply_state_metadata	clone/clone0apply.cc	/^int Clone_Handle::apply_state_metadata(Clone_Task *task,$/;"	f	class:Clone_Handle
apply_task_metadata	clone/clone0apply.cc	/^int Clone_Handle::apply_task_metadata(Clone_Task *task,$/;"	f	class:Clone_Handle
apply_to	handler/handler0alter.cc	/^  static inline bool apply_to(const Alter_inplace_info *ha_alter_info) {$/;"	f	class:alter_parts
apply_undolog	lob/lob0update.cc	/^dberr_t apply_undolog(mtr_t *mtr, trx_t *trx, dict_index_t *index, ref_t ref,$/;"	f	namespace:lob
apply_update_multi_value	row/row0log.cc	/^    apply_update_multi_value(dict_index_t *index, uint32_t n_index,$/;"	f
arch_client_mutex_enter	include/arch0page.h	/^  void arch_client_mutex_enter() { mutex_enter(&m_mutex); }$/;"	f	class:Page_Arch_Client_Ctx
arch_client_mutex_exit	include/arch0page.h	/^  void arch_client_mutex_exit() { mutex_exit(&m_mutex); }$/;"	f	class:Page_Arch_Client_Ctx
arch_free	arch/arch0arch.cc	/^void arch_free() {$/;"	f
arch_init	arch/arch0arch.cc	/^dberr_t arch_init() {$/;"	f
arch_log_sys	arch/arch0arch.cc	/^Arch_Log_Sys *arch_log_sys = nullptr;$/;"	v
arch_mutex_enter	include/arch0arch.h	/^  void arch_mutex_enter() { mutex_enter(&m_mutex); }$/;"	f	class:Arch_Log_Sys
arch_mutex_enter	include/arch0arch.h	/^  void arch_mutex_enter() { mutex_enter(&m_mutex); }$/;"	f	class:Arch_Page_Sys
arch_mutex_exit	include/arch0arch.h	/^  void arch_mutex_exit() { mutex_exit(&m_mutex); }$/;"	f	class:Arch_Log_Sys
arch_mutex_exit	include/arch0arch.h	/^  void arch_mutex_exit() { mutex_exit(&m_mutex); }$/;"	f	class:Arch_Page_Sys
arch_oper_mutex_enter	include/arch0arch.h	/^  void arch_oper_mutex_enter() { mutex_enter(&m_oper_mutex); }$/;"	f	class:Arch_Page_Sys
arch_oper_mutex_exit	include/arch0arch.h	/^  void arch_oper_mutex_exit() { mutex_exit(&m_oper_mutex); }$/;"	f	class:Arch_Page_Sys
arch_page_sys	arch/arch0arch.cc	/^Arch_Page_Sys *arch_page_sys = nullptr;$/;"	v
arch_remove_dir	arch/arch0arch.cc	/^void arch_remove_dir(const char *dir_path, const char *dir_name) {$/;"	f
arch_remove_file	arch/arch0arch.cc	/^void arch_remove_file(const char *file_path, const char *file_name) {$/;"	f
arch_wake_threads	arch/arch0arch.cc	/^bool arch_wake_threads() {$/;"	f
archive	arch/arch0log.cc	/^bool Arch_Log_Sys::archive(bool init, Arch_File_Ctx *curr_ctx, lsn_t *arch_lsn,$/;"	f	class:Arch_Log_Sys
archive	arch/arch0page.cc	/^bool Arch_Page_Sys::archive(bool *wait) {$/;"	f	class:Arch_Page_Sys
are_all_blobrefs_valid	include/lob0lob.h	/^  bool are_all_blobrefs_valid() const {$/;"	f	class:lob::BtrContext
arg	include/pars0pars.h	/^  void *arg;                \/*!< user-supplied argument *\/$/;"	m	struct:pars_user_func_t
arg	include/ut0vec.h	/^  void *arg;                  \/* Currently if not NULL then it$/;"	m	struct:ib_alloc_t
args	include/pars0pars.h	/^  que_node_t *args;    \/*!< argument(s) of the function *\/$/;"	m	struct:func_node_t
args	log/log0meb.cc	/^                                        UDF_ARGS *args, char *message) {$/;"	m	namespace:meb	file:
args	log/log0meb.cc	/^                                       UDF_ARGS *args, char *message) {$/;"	m	namespace:meb	file:
args	log/log0meb.cc	/^    UDF_INIT *initid MY_ATTRIBUTE((unused)), UDF_ARGS *args,$/;"	m	namespace:meb	file:
arr_node_t	include/ut0lock_free_hash.h	/^  typedef ut_lock_free_list_node_t<key_val_t> arr_node_t;$/;"	t	class:ut_lock_free_hash_t
array_size	handler/ha_innodb.h	/^  ulint array_size; \/*!< array size of index_mapping *\/$/;"	m	struct:innodb_idx_translate_t
asc	include/pars0pars.h	/^  ibool asc;           \/*!< TRUE if ascending, FALSE if descending *\/$/;"	m	struct:order_node_t
asc	include/row0sel.h	/^  ibool asc;                 \/*!< TRUE if the rows should be fetched$/;"	m	struct:sel_node_t
asc	include/row0sel.h	/^  ibool asc;           \/*!< TRUE if cursor traveling upwards *\/$/;"	m	struct:plan_t
assert_block_ahi_empty	include/buf0buf.h	1823;"	d
assert_block_ahi_empty	include/buf0buf.h	1833;"	d
assert_block_ahi_empty_on_init	include/buf0buf.h	1824;"	d
assert_block_ahi_empty_on_init	include/buf0buf.h	1834;"	d
assert_block_ahi_valid	include/buf0buf.h	1830;"	d
assert_block_ahi_valid	include/buf0buf.h	1835;"	d
assert_callback	ut/ut0dbg.cc	/^static std::function<void()> assert_callback;$/;"	v	file:
assert_empty_local_prefix	lob/lob0lob.cc	/^bool zReader::assert_empty_local_prefix() {$/;"	f	class:lob::zReader
assert_equal	include/dict0mem.h	/^  bool assert_equal(const dtype_t *type) const {$/;"	f	struct:dict_col_t
assert_latches_let_distinguish	buf/buf0buf.cc	/^  static void assert_latches_let_distinguish($/;"	f	class:buf_page_t::Latching_rules_helpers
assert_latches_let_distinguish	include/ut0stateful_latching_rules.h	/^  void assert_latches_let_distinguish(const latches_set_t &owned_latches,$/;"	f	class:ut::Stateful_latching_rules
assert_read_uncommitted	lob/lob0lob.cc	/^bool ReadContext::assert_read_uncommitted() const {$/;"	f	class:lob::ReadContext
assert_trx_in_rw_list	include/trx0trx.h	463;"	d
assert_trx_is_free	include/trx0trx.h	491;"	d
assert_trx_is_inactive	include/trx0trx.h	505;"	d
assert_trx_nonlocking_or_in_list	include/trx0trx.h	515;"	d
assert_trx_nonlocking_or_in_list	include/trx0trx.h	534;"	d
assign	read/read0read.cc	/^void ReadView::ids_t::assign(const value_type *start, const value_type *end) {$/;"	f	class:ReadView::ids_t
assign_new_space_id	fil/fil0fil.cc	/^bool Fil_system::assign_new_space_id(space_id_t *space_id) {$/;"	f	class:Fil_system
assign_node_t	include/pars0pars.h	/^struct assign_node_t {$/;"	s
assign_step	eval/eval0proc.cc	/^que_thr_t *assign_step(que_thr_t *thr) \/*!< in: query thread *\/$/;"	f
assignment_statement	pars/pars0grm.y	/^assignment_statement:$/;"	l
at	include/dyn0buf.h	/^  Type at(ulint pos) {$/;"	f	class:dyn_buf_t
at	include/dyn0buf.h	/^  const Type at(ulint pos) const {$/;"	f	class:dyn_buf_t
at	include/trx0purge.h	/^  Tablespace *at(size_t pos) { return (m_spaces.at(pos)); }$/;"	f	class:undo::Tablespaces
at	include/trx0types.h	/^  trx_rseg_t *at(ulint slot) { return (m_rsegs.at(slot)); }$/;"	f	class:Rsegs
atime	include/os0file.h	/^  time_t atime;                \/*!< access time *\/$/;"	m	struct:AIO_mode::os_file_stat_t
atomic_write	include/fil0fil.h	/^  bool atomic_write;$/;"	m	struct:fil_node_t
attach	clone/clone0snapshot.cc	/^bool Clone_Snapshot::attach(Clone_Handle_Type hdl_type, bool pfs_monitor) {$/;"	f	class:Clone_Snapshot
attach	include/arch0arch.h	/^  void attach(bool is_durable) {$/;"	f	class:Arch_Group
attach	include/clone0clone.h	/^  void attach() { ++m_ref_count; }$/;"	f	class:Clone_Handle
attach_during_recovery	include/arch0arch.h	/^  void attach_during_recovery() { ++m_dur_ref_count; }$/;"	f	class:Arch_Group
attach_snapshot	clone/clone0clone.cc	/^int Clone_Sys::attach_snapshot(Clone_Handle_Type hdl_type,$/;"	f	class:Clone_Sys
attr	include/api0api.h	/^  ib_col_attr_t attr; \/*!< Column attributes *\/$/;"	m	struct:__anon26
auto_commit	include/trx0trx.h	/^  bool auto_commit;      \/*!< true if it is an autocommit *\/$/;"	m	struct:trx_t
auto_event_keys	ut/ut0new.cc	/^PSI_memory_key auto_event_keys[n_auto];$/;"	v
auto_event_names	include/ut0new.h	/^static constexpr const char *auto_event_names[] = {$/;"	v
autoextend_size_str	include/dict0dd.h	/^static constexpr char autoextend_size_str[] = "autoextend_size";$/;"	v
autoinc	include/dict0mem.h	/^  ib_uint64_t autoinc;$/;"	m	struct:dict_table_t
autoinc_error	include/row0mysql.h	/^  dberr_t autoinc_error;       \/*!< The actual error code encountered$/;"	m	struct:row_prebuilt_t
autoinc_field_no	include/dict0mem.h	/^  ulint autoinc_field_no;$/;"	m	struct:dict_table_t
autoinc_increment	include/row0mysql.h	/^  ulonglong autoinc_increment; \/*!< The increment step of the auto$/;"	m	struct:row_prebuilt_t
autoinc_last_value	include/row0mysql.h	/^  ulonglong autoinc_last_value;$/;"	m	struct:row_prebuilt_t
autoinc_lock	include/dict0mem.h	/^  lock_t *autoinc_lock;$/;"	m	struct:dict_table_t
autoinc_locks	include/trx0trx.h	/^  ib_vector_t *autoinc_locks;$/;"	m	struct:trx_lock_t
autoinc_mutex	include/dict0mem.h	/^  ib_mutex_t *autoinc_mutex;$/;"	m	struct:dict_table_t
autoinc_mutex_created	include/dict0mem.h	/^  std::atomic<os_once::state_t> autoinc_mutex_created;$/;"	m	struct:dict_table_t
autoinc_mutex_key	sync/sync0sync.cc	/^mysql_pfs_key_t autoinc_mutex_key;$/;"	v
autoinc_offset	include/row0mysql.h	/^  ulonglong autoinc_offset;    \/*!< The offset passed to$/;"	m	struct:row_prebuilt_t
autoinc_persisted	include/dict0mem.h	/^  ib_uint64_t autoinc_persisted;$/;"	m	struct:dict_table_t
autoinc_persisted_mutex	include/dict0mem.h	/^  ib_mutex_t *autoinc_persisted_mutex;$/;"	m	struct:dict_table_t
autoinc_persisted_mutex_key	sync/sync0sync.cc	/^mysql_pfs_key_t autoinc_persisted_mutex_key;$/;"	v
autoinc_trx	include/dict0mem.h	/^  std::atomic<const trx_t *> autoinc_trx;$/;"	m	struct:dict_table_t
aux_index_id	include/row0ftsort.h	/^  ulint aux_index_id; \/*!< Auxiliary index id *\/$/;"	m	struct:fts_psort_insert
aux_name	include/fts0fts.h	/^  std::vector<char *> aux_name;$/;"	m	struct:aux_name_vec_t
aux_name_vec_t	include/fts0fts.h	/^struct aux_name_vec_t {$/;"	s
available_threads	row/row0pread.cc	/^size_t Parallel_reader::available_threads(size_t n_required,$/;"	f	class:Parallel_reader
back	include/dyn0buf.h	/^  block_t *back() { return (UT_LIST_GET_LAST(m_list)); }$/;"	f	class:dyn_buf_t
back	include/read0types.h	/^    value_type back() const {$/;"	f	class:ReadView::ids_t
backup_redo_log_flushed_lsn	log/log0recv.cc	/^volatile lsn_t backup_redo_log_flushed_lsn;$/;"	v
base	include/mem0mem.h	/^  base; \/* In the first block in the$/;"	m	struct:mem_block_info_t
base	trx/trx0i_s.cc	/^  void *base;        \/*!< start of the chunk *\/$/;"	m	struct:i_s_mem_chunk_t	file:
base_col	include/dict0mem.h	/^  dict_col_t **base_col;$/;"	m	struct:dict_s_col_t
base_col	include/dict0mem.h	/^  dict_col_t **base_col;$/;"	m	struct:dict_v_col_t
base_col_no	include/dict0crea.h	/^  ulint base_col_no; \/*!< next base column to insert *\/$/;"	m	struct:tab_node_t
basic_page_t	include/lob0util.h	/^  basic_page_t() : m_block(nullptr), m_mtr(nullptr), m_index(nullptr) {}$/;"	f	struct:lob::basic_page_t
basic_page_t	include/lob0util.h	/^  basic_page_t(buf_block_t *block, mtr_t *mtr)$/;"	f	struct:lob::basic_page_t
basic_page_t	include/lob0util.h	/^  basic_page_t(buf_block_t *block, mtr_t *mtr, dict_index_t *index)$/;"	f	struct:lob::basic_page_t
basic_page_t	include/lob0util.h	/^struct basic_page_t {$/;"	s	namespace:lob
begin	include/row0row.h	/^  dtuple_t *begin(uint32_t pos = 0) {$/;"	f	class:Multi_value_entry_builder
begin	include/trx0types.h	/^  Rseg_Iterator begin() { return (m_rsegs.begin()); }$/;"	f	class:Rsegs
begin	include/trx0types.h	/^  Rseg_Iterator begin() { return (m_rsegs.begin()); }$/;"	f	class:TrxUndoRsegs
begin_access	include/ut0lock_free_hash.h	/^  bool begin_access() {$/;"	f	class:ut_lock_free_list_node_t
begin_data	include/zlob0first.h	/^  ulint begin_data() const {$/;"	f	struct:lob::z_first_page_t
begin_data_ptr	include/lob0impl.h	/^  byte *begin_data_ptr() const { return (frame() + OFFSET_DATA_BEGIN); }$/;"	f	struct:lob::z_data_page_t
begin_data_ptr	include/zlob0first.h	/^  byte *begin_data_ptr() const { return (frame() + begin_data()); }$/;"	f	struct:lob::z_first_page_t
begin_frag_entries	include/zlob0first.h	/^  ulint begin_frag_entries() const {$/;"	f	struct:lob::z_first_page_t
begin_leaf	include/btr0pcur.h	/^  void begin_leaf(dict_index_t *index, ulint latch_mode, mtr_t *mtr) {$/;"	f	struct:btr_pcur_t
begin_phase_end	include/ut0stage.h	/^  void begin_phase_end() {}$/;"	f	class:ut_stage_alter_t
begin_phase_end	include/ut0stage.h	/^inline void ut_stage_alter_t::begin_phase_end() {$/;"	f	class:ut_stage_alter_t
begin_phase_flush	include/ut0stage.h	/^  void begin_phase_flush(ulint n_flush_pages) {}$/;"	f	class:ut_stage_alter_t
begin_phase_flush	include/ut0stage.h	/^inline void ut_stage_alter_t::begin_phase_flush(ulint n_flush_pages) {$/;"	f	class:ut_stage_alter_t
begin_phase_insert	include/ut0stage.h	/^  void begin_phase_insert() {}$/;"	f	class:ut_stage_alter_t
begin_phase_insert	include/ut0stage.h	/^inline void ut_stage_alter_t::begin_phase_insert() {$/;"	f	class:ut_stage_alter_t
begin_phase_log_index	include/ut0stage.h	/^  void begin_phase_log_index() {}$/;"	f	class:ut_stage_alter_t
begin_phase_log_index	include/ut0stage.h	/^inline void ut_stage_alter_t::begin_phase_log_index() {$/;"	f	class:ut_stage_alter_t
begin_phase_log_table	include/ut0stage.h	/^  void begin_phase_log_table() {}$/;"	f	class:ut_stage_alter_t
begin_phase_log_table	include/ut0stage.h	/^inline void ut_stage_alter_t::begin_phase_log_table() {$/;"	f	class:ut_stage_alter_t
begin_phase_read_pk	include/ut0stage.h	/^  void begin_phase_read_pk(ulint n_sort_indexes) {}$/;"	f	class:ut_stage_alter_t
begin_phase_read_pk	include/ut0stage.h	/^inline void ut_stage_alter_t::begin_phase_read_pk(ulint n_sort_indexes) {$/;"	f	class:ut_stage_alter_t
begin_phase_sort	include/ut0stage.h	/^  void begin_phase_sort(double sort_multi_factor) {}$/;"	f	class:ut_stage_alter_t
begin_phase_sort	include/ut0stage.h	/^inline void ut_stage_alter_t::begin_phase_sort(double sort_multi_factor) {$/;"	f	class:ut_stage_alter_t
begin_stmt	include/trx0trx.h	/^  static void begin_stmt(trx_t *trx) { enter(trx, false); }$/;"	f	class:TrxInInnoDB
begin_write	arch/arch0page.cc	/^void Arch_Block::begin_write(Arch_Page_Pos pos) {$/;"	f	class:Arch_Block
bg_threads	include/fts0fts.h	/^  ulint bg_threads;$/;"	m	class:fts_t
bg_threads_mutex	include/fts0fts.h	/^  ib_mutex_t bg_threads_mutex;$/;"	m	class:fts_t
big_rec_field_t	include/data0data.h	/^  big_rec_field_t(ulint field_no_, ulint len_, void *data_)$/;"	f	struct:big_rec_field_t
big_rec_field_t	include/data0data.h	/^struct big_rec_field_t {$/;"	s
big_rec_t	include/data0data.h	/^  explicit big_rec_t(const ulint max)$/;"	f	struct:big_rec_t
big_rec_t	include/data0data.h	/^struct big_rec_t {$/;"	s
big_rows	include/dict0mem.h	/^  unsigned big_rows : 1;$/;"	m	struct:dict_table_t
binlog_position_changed	trx/trx0sys.cc	/^static bool binlog_position_changed(const char *file_name, uint64_t offset,$/;"	f	file:
bit_no	include/lock0iter.h	/^  ulint bit_no;$/;"	m	struct:lock_queue_iterator_t
bitset	include/data0data.h	/^  Bitset *bitset;$/;"	m	struct:multi_value_data
bitset	include/ut0bitset.h	/^  const byte *bitset() const { return (m_bitset); }$/;"	f	class:Bitset
blob_alloc	row/row0log.cc	/^  void blob_alloc(ulonglong offset_arg) {$/;"	f	class:row_log_table_blob_t
blob_dir_t	include/lob0lob.h	/^struct blob_dir_t {$/;"	s	namespace:lob
blob_free	lob/lob0lob.cc	/^void blob_free(dict_index_t *index, buf_block_t *block, bool all, mtr_t *mtr) {$/;"	f	namespace:lob
blob_free	row/row0log.cc	/^  void blob_free(ulonglong offset_arg)$/;"	f	class:row_log_table_blob_t
blob_heap	include/row0mysql.h	/^  mem_heap_t *blob_heap;              \/*!< in SELECTS BLOB fields are copied$/;"	m	struct:row_prebuilt_t
blob_page_info_t	include/lob0lob.h	/^  blob_page_info_t(page_no_t page_no, uint bytes, uint zbytes)$/;"	f	struct:lob::blob_page_info_t
blob_page_info_t	include/lob0lob.h	/^struct blob_page_info_t {$/;"	s	namespace:lob
blobref	data/data0data.cc	/^byte *dfield_t::blobref() const {$/;"	f	class:dfield_t
blobs	row/row0log.cc	/^  page_no_map *blobs;  \/*!< map of page numbers of off-page columns$/;"	m	struct:row_log_t	file:
block	include/dict0mem.h	/^  buf_block_t *block;$/;"	m	class:last_ops_cur_t
block	include/gis0type.h	/^  buf_block_t block;            \/*!< the shadow buffer block *\/$/;"	m	struct:matched_rec
block	include/ha0ha.h	/^  buf_block_t *block; \/*!< buffer block containing the data, or NULL *\/$/;"	m	struct:ha_node_t
block	include/lob0lob.h	/^  buf_block_t *block() const { return (m_block); }$/;"	f	class:lob::BtrContext
block	row/row0log.cc	/^  byte *block;            \/*!< file block buffer *\/$/;"	m	struct:row_log_buf_t	file:
block_alloc	include/row0ftsort.h	/^  row_merge_block_t *block_alloc[FTS_NUM_AUX_INDEX];$/;"	m	struct:fts_psort_t
block_cache	os/os0file.cc	/^static Blocks *block_cache;$/;"	v	file:
block_get_s_latched	row/row0pread.cc	/^buf_block_t *Parallel_reader::Scan_ctx::block_get_s_latched($/;"	f	class:Parallel_reader::Scan_ctx
block_list_t	include/dyn0buf.h	/^  typedef UT_LIST_BASE_NODE_T(block_t) block_list_t;$/;"	t	class:dyn_buf_t
block_node_t	include/dyn0buf.h	/^  typedef UT_LIST_NODE_T(block_t) block_node_t;$/;"	t	class:dyn_buf_t
block_pfx	row/row0log.cc	/^  ut_new_pfx_t block_pfx; \/*!< opaque descriptor of "block". Set$/;"	m	struct:row_log_buf_t	file:
block_size	fil/fil0fil.cc	/^  size_t block_size;$/;"	m	struct:Fil_page_iterator	file:
block_size	include/clone0snapshot.h	/^  uint block_size() {$/;"	f	class:Clone_Snapshot
block_size	include/fil0fil.h	/^  size_t block_size;$/;"	m	struct:fil_node_t
block_size	include/os0file.h	/^  uint32_t block_size;         \/*!< Block size to use for IO$/;"	m	struct:AIO_mode::os_file_stat_t
block_size	include/os0file.h	/^  void block_size(ulint block_size) {$/;"	f	class:IORequest
block_size	pars/pars0grm.y	/^block_size:$/;"	l
block_sz	fts/fts0opt.cc	/^  ulint block_sz; \/*!< Size of a block in bytes *\/$/;"	m	struct:fts_zip_t	file:
block_t	include/dyn0buf.h	/^    block_t() {$/;"	f	class:dyn_buf_t::block_t
block_t	include/dyn0buf.h	/^  class block_t {$/;"	c	class:dyn_buf_t
blocking_trx	include/trx0trx.h	/^  std::atomic<trx_t *> blocking_trx;$/;"	m	struct:trx_lock_t
blocks	fts/fts0opt.cc	/^  ib_vector_t *blocks; \/*!< Vector of compressed blocks *\/$/;"	m	struct:fts_zip_t	file:
blocks	include/btr0cur.h	/^  buf_block_t *blocks[3];$/;"	m	struct:btr_latch_leaves_t
blocks	row/row0log.cc	/^  ulint blocks;           \/*!< current position in blocks *\/$/;"	m	struct:row_log_buf_t	file:
blocks_per_chunk	include/clone0snapshot.h	/^  uint blocks_per_chunk() {$/;"	f	class:Clone_Snapshot
body	include/log0recv.h	/^    const byte *body;$/;"	m	struct:recv_sys_t::Mlog_record
boffset	include/fil0fil.h	/^  uint32_t boffset;$/;"	m	struct:fil_addr_t
bool_scope_guard_t	include/ut0bool_scope_guard.h	/^  bool_scope_guard_t(bool_scope_guard_t &&old) {$/;"	f	class:ut::bool_scope_guard_t
bool_scope_guard_t	include/ut0bool_scope_guard.h	/^  explicit bool_scope_guard_t(bool &active) : m_active(&active) {$/;"	f	class:ut::bool_scope_guard_t
bool_scope_guard_t	include/ut0bool_scope_guard.h	/^class bool_scope_guard_t {$/;"	c	namespace:ut
boolean_mode	fts/fts0que.cc	/^  bool boolean_mode; \/*!< TRUE if boolean mode query *\/$/;"	m	struct:fts_query_t	file:
boot_tablespaces	handler/ha_innodb.cc	/^static MY_ATTRIBUTE((warn_unused_result)) bool boot_tablespaces(THD *thd) {$/;"	f
bound_ids	include/pars0pars.h	/^  ib_vector_t *bound_ids;  \/*!< bound ids, or NULL$/;"	m	struct:pars_info_t
bound_lits	include/pars0pars.h	/^  ib_vector_t *bound_lits; \/*!< bound literals, or NULL$/;"	m	struct:pars_info_t
boundaries_t	dict/dict0stats.cc	/^typedef std::vector<ib_uint64_t, ut_allocator<ib_uint64_t>> boundaries_t;$/;"	t	file:
bpage	include/buf0buf.h	/^  buf_page_t bpage; \/*!< Embedded bpage descriptor *\/$/;"	m	struct:Cache_hint::buf_buddy_free_t
bpmutex	include/sync0arr_impl.h	/^  BlockWaitMutex *bpmutex;$/;"	m	union:sync_object_t
brother	include/que0types.h	/^  que_node_t *brother; \/* pointer to a possible brother node *\/$/;"	m	struct:que_common_t
btr0btr_h	include/btr0btr.h	35;"	d
btr0bulk_h	include/btr0bulk.h	34;"	d
btr0cur_h	include/btr0cur.h	37;"	d
btr0pcur_h	include/btr0pcur.h	34;"	d
btr0sea_h	include/btr0sea.h	34;"	d
btr0types_h	include/btr0types.h	34;"	d
btr_ahi_parts	btr/btr0sea.cc	/^ulong btr_ahi_parts = 8;$/;"	v
btr_assert_not_corrupted	include/btr0btr.h	149;"	d
btr_attach_half_pages	btr/btr0btr.cc	/^static void btr_attach_half_pages($/;"	f	file:
btr_blob_get_next_page_no	lob/lob0del.cc	/^static inline page_no_t btr_blob_get_next_page_no(const byte *blob_header) {$/;"	f	namespace:lob
btr_blob_get_next_page_no	lob/lob0lob.cc	/^static inline page_no_t btr_blob_get_next_page_no(const byte *blob_header) {$/;"	f	namespace:lob
btr_blob_get_part_len	lob/lob0lob.cc	/^static inline ulint btr_blob_get_part_len(const byte *blob_header) {$/;"	f	namespace:lob
btr_block_get	include/btr0btr.h	206;"	d
btr_block_get	include/btr0btr.h	216;"	d
btr_bulk	include/row0ftsort.h	/^  BtrBulk *btr_bulk;     \/*!< Bulk load instance *\/$/;"	m	struct:fts_psort_insert
btr_can_merge_with_page	btr/btr0btr.cc	/^static bool btr_can_merge_with_page($/;"	f	file:
btr_check_blob_fil_page_type	lob/lob0lob.cc	/^static void btr_check_blob_fil_page_type(space_id_t space_id, page_no_t page_no,$/;"	f	namespace:lob
btr_check_node_ptr	btr/btr0btr.cc	/^ibool btr_check_node_ptr(dict_index_t *index, \/*!< in: index tree *\/$/;"	f
btr_compress	btr/btr0btr.cc	/^ibool btr_compress($/;"	f
btr_copy_externally_stored_field	include/lob0lob.h	1486;"	d
btr_copy_externally_stored_field	include/lob0lob.h	1497;"	d
btr_copy_externally_stored_field_func	lob/lob0lob.cc	/^byte *btr_copy_externally_stored_field_func($/;"	f	namespace:lob
btr_copy_externally_stored_field_prefix	include/lob0lob.h	1481;"	d
btr_copy_externally_stored_field_prefix	include/lob0lob.h	1492;"	d
btr_copy_externally_stored_field_prefix_func	lob/lob0lob.cc	/^ulint btr_copy_externally_stored_field_prefix_func(trx_t *trx,$/;"	f	namespace:lob
btr_corruption_report	btr/btr0btr.cc	/^void btr_corruption_report(const buf_block_t *block, \/*!< in: corrupted block *\/$/;"	f
btr_create	btr/btr0btr.cc	/^ulint btr_create(ulint type, space_id_t space, const page_size_t &page_size,$/;"	f
btr_cur_add_path_info	btr/btr0cur.cc	/^static void btr_cur_add_path_info(btr_cur_t *cursor, ulint height,$/;"	f	file:
btr_cur_compress_if_useful	btr/btr0cur.cc	/^ibool btr_cur_compress_if_useful($/;"	f
btr_cur_del_mark_set_clust_rec	btr/btr0cur.cc	/^dberr_t btr_cur_del_mark_set_clust_rec($/;"	f
btr_cur_del_mark_set_clust_rec_log	btr/btr0cur.cc	/^void btr_cur_del_mark_set_clust_rec_log($/;"	f
btr_cur_del_mark_set_sec_rec	btr/btr0cur.cc	/^dberr_t btr_cur_del_mark_set_sec_rec($/;"	f
btr_cur_del_mark_set_sec_rec_log	btr/btr0cur.cc	/^void btr_cur_del_mark_set_sec_rec_log(rec_t *rec, \/*!< in: record *\/$/;"	f
btr_cur_get_and_clear_intention	btr/btr0cur.cc	/^static btr_intention_t btr_cur_get_and_clear_intention(ulint *latch_mode) {$/;"	f	file:
btr_cur_get_block	include/btr0cur.h	95;"	d
btr_cur_get_index	include/btr0cur.h	109;"	d
btr_cur_get_page_cur	include/btr0cur.h	94;"	d
btr_cur_get_rec	include/btr0cur.h	96;"	d
btr_cur_ins_lock_and_undo	btr/btr0cur.cc	/^    btr_cur_ins_lock_and_undo($/;"	f
btr_cur_insert_if_possible	btr/btr0cur.cc	/^static MY_ATTRIBUTE((warn_unused_result)) rec_t *btr_cur_insert_if_possible($/;"	f
btr_cur_latch_for_root_leaf	btr/btr0cur.cc	/^static rw_lock_type_t btr_cur_latch_for_root_leaf(ulint latch_mode) {$/;"	f	file:
btr_cur_latch_leaves	btr/btr0cur.cc	/^btr_latch_leaves_t btr_cur_latch_leaves(buf_block_t *block,$/;"	f
btr_cur_limit_optimistic_insert_debug	btr/btr0cur.cc	/^uint btr_cur_limit_optimistic_insert_debug = 0;$/;"	v
btr_cur_method	include/btr0cur.h	/^enum btr_cur_method {$/;"	g
btr_cur_n_non_sea	btr/btr0cur.cc	/^ulint btr_cur_n_non_sea = 0;$/;"	v
btr_cur_n_non_sea_old	btr/btr0cur.cc	/^ulint btr_cur_n_non_sea_old = 0;$/;"	v
btr_cur_n_sea	btr/btr0cur.cc	/^ulint btr_cur_n_sea = 0;$/;"	v
btr_cur_n_sea_old	btr/btr0cur.cc	/^ulint btr_cur_n_sea_old = 0;$/;"	v
btr_cur_need_opposite_intention	btr/btr0cur.cc	/^static bool btr_cur_need_opposite_intention(const page_t *page,$/;"	f	file:
btr_cur_open_at_index_side	include/btr0cur.h	210;"	d
btr_cur_open_at_index_side_func	btr/btr0cur.cc	/^void btr_cur_open_at_index_side_func(bool from_left, dict_index_t *index,$/;"	f
btr_cur_open_at_index_side_with_no_latch	include/btr0cur.h	228;"	d
btr_cur_open_at_index_side_with_no_latch_func	btr/btr0cur.cc	/^void btr_cur_open_at_index_side_with_no_latch_func($/;"	f
btr_cur_open_at_rnd_pos	include/btr0cur.h	242;"	d
btr_cur_open_at_rnd_pos_func	btr/btr0cur.cc	/^bool btr_cur_open_at_rnd_pos_func($/;"	f
btr_cur_optimistic_delete	include/btr0cur.h	491;"	d
btr_cur_optimistic_delete	include/btr0cur.h	494;"	d
btr_cur_optimistic_delete_func	btr/btr0cur.cc	/^ibool btr_cur_optimistic_delete_func($/;"	f
btr_cur_optimistic_insert	btr/btr0cur.cc	/^dberr_t btr_cur_optimistic_insert($/;"	f
btr_cur_optimistic_latch_leaves	btr/btr0cur.cc	/^bool btr_cur_optimistic_latch_leaves(buf_block_t *block,$/;"	f
btr_cur_optimistic_update	btr/btr0cur.cc	/^dberr_t btr_cur_optimistic_update($/;"	f
btr_cur_parse_del_mark_set_clust_rec	btr/btr0cur.cc	/^byte *btr_cur_parse_del_mark_set_clust_rec($/;"	f
btr_cur_parse_del_mark_set_sec_rec	btr/btr0cur.cc	/^byte *btr_cur_parse_del_mark_set_sec_rec($/;"	f
btr_cur_parse_update_in_place	btr/btr0cur.cc	/^byte *btr_cur_parse_update_in_place($/;"	f
btr_cur_pess_upd_restore_supremum	btr/btr0cur.cc	/^static void btr_cur_pess_upd_restore_supremum($/;"	f	file:
btr_cur_pessimistic_delete	btr/btr0cur.cc	/^ibool btr_cur_pessimistic_delete(dberr_t *err, ibool has_reserved_extents,$/;"	f
btr_cur_pessimistic_insert	btr/btr0cur.cc	/^dberr_t btr_cur_pessimistic_insert($/;"	f
btr_cur_pessimistic_update	btr/btr0cur.cc	/^dberr_t btr_cur_pessimistic_update(ulint flags, btr_cur_t *cursor,$/;"	f
btr_cur_prefetch_siblings	btr/btr0cur.cc	/^static void btr_cur_prefetch_siblings(buf_block_t *block) {$/;"	f	file:
btr_cur_search_to_nth_level	btr/btr0cur.cc	/^void btr_cur_search_to_nth_level($/;"	f
btr_cur_search_to_nth_level_with_no_latch	btr/btr0cur.cc	/^void btr_cur_search_to_nth_level_with_no_latch(dict_index_t *index, ulint level,$/;"	f
btr_cur_set_deleted_flag_for_ibuf	btr/btr0cur.cc	/^void btr_cur_set_deleted_flag_for_ibuf($/;"	f
btr_cur_t	include/btr0cur.h	/^struct btr_cur_t {$/;"	s
btr_cur_upd_lock_and_undo	btr/btr0cur.cc	/^    btr_cur_upd_lock_and_undo($/;"	f
btr_cur_update_alloc_zip	include/btr0cur.h	322;"	d
btr_cur_update_alloc_zip	include/btr0cur.h	326;"	d
btr_cur_update_alloc_zip_func	btr/btr0cur.cc	/^bool btr_cur_update_alloc_zip_func($/;"	f
btr_cur_update_in_place	btr/btr0cur.cc	/^dberr_t btr_cur_update_in_place(ulint flags, btr_cur_t *cursor, ulint *offsets,$/;"	f
btr_cur_update_in_place_log	btr/btr0cur.cc	/^void btr_cur_update_in_place_log(ulint flags, const rec_t *rec,$/;"	f
btr_cur_will_modify_tree	btr/btr0cur.cc	/^static bool btr_cur_will_modify_tree(dict_index_t *index, const page_t *page,$/;"	f	file:
btr_discard_only_page_on_level	btr/btr0btr.cc	/^static void btr_discard_only_page_on_level($/;"	f	file:
btr_discard_page	btr/btr0btr.cc	/^void btr_discard_page(btr_cur_t *cursor, \/*!< in: cursor on the page to discard:$/;"	f
btr_drop_ahi_for_index	btr/btr0sea.cc	/^void btr_drop_ahi_for_index(const dict_index_t *index) {$/;"	f
btr_drop_ahi_for_table	btr/btr0sea.cc	/^void btr_drop_ahi_for_table(dict_table_t *table) {$/;"	f
btr_drop_next_batch	btr/btr0sea.cc	/^static void btr_drop_next_batch(const page_size_t &page_size,$/;"	f	file:
btr_estimate_n_rows_in_range	btr/btr0cur.cc	/^int64_t btr_estimate_n_rows_in_range(dict_index_t *index,$/;"	f
btr_estimate_n_rows_in_range_low	btr/btr0cur.cc	/^static int64_t btr_estimate_n_rows_in_range_low($/;"	f	file:
btr_estimate_n_rows_in_range_on_level	btr/btr0cur.cc	/^static int64_t btr_estimate_n_rows_in_range_on_level($/;"	f	file:
btr_estimate_number_of_different_key_vals	btr/btr0cur.cc	/^bool btr_estimate_number_of_different_key_vals($/;"	f
btr_free	btr/btr0btr.cc	/^void btr_free(const page_id_t &page_id, const page_size_t &page_size) {$/;"	f
btr_free_but_not_root	btr/btr0btr.cc	/^static void btr_free_but_not_root(buf_block_t *block, mtr_log_t log_mode) {$/;"	f	file:
btr_free_if_exists	btr/btr0btr.cc	/^void btr_free_if_exists(const page_id_t &page_id, const page_size_t &page_size,$/;"	f
btr_free_root	btr/btr0btr.cc	/^static void btr_free_root(buf_block_t *block, mtr_t *mtr) {$/;"	f	file:
btr_free_root_check	btr/btr0btr.cc	/^static MY_ATTRIBUTE((warn_unused_result)) buf_block_t *btr_free_root_check($/;"	f
btr_free_root_invalidate	btr/btr0btr.cc	/^static void btr_free_root_invalidate(buf_block_t *block, mtr_t *mtr) {$/;"	f	file:
btr_get_size	btr/btr0btr.cc	/^ulint btr_get_size(dict_index_t *index, \/*!< in: index *\/$/;"	f
btr_height_get	btr/btr0btr.cc	/^ulint btr_height_get(dict_index_t *index, \/*!< in: index tree *\/$/;"	f
btr_index_page_validate	btr/btr0btr.cc	/^static ibool btr_index_page_validate(buf_block_t *block,  \/*!< in: index page *\/$/;"	f	file:
btr_index_rec_validate	btr/btr0btr.cc	/^ibool btr_index_rec_validate(const rec_t *rec,          \/*!< in: index record *\/$/;"	f
btr_index_rec_validate_report	btr/btr0btr.cc	/^static void btr_index_rec_validate_report($/;"	f	file:
btr_insert_into_right_sibling	btr/btr0btr.cc	/^static rec_t *btr_insert_into_right_sibling(uint32_t flags, btr_cur_t *cursor,$/;"	f	file:
btr_insert_on_non_leaf_level	include/btr0btr.h	424;"	d
btr_insert_on_non_leaf_level_func	btr/btr0btr.cc	/^void btr_insert_on_non_leaf_level_func($/;"	f
btr_intention_t	btr/btr0cur.cc	/^enum btr_intention_t {$/;"	g	file:
btr_latch_leaves_t	include/btr0cur.h	/^struct btr_latch_leaves_t {$/;"	s
btr_level_list_remove	btr/btr0btr.cc	2694;"	d	file:
btr_level_list_remove_func	btr/btr0btr.cc	/^static void btr_level_list_remove_func(space_id_t space,$/;"	f	file:
btr_lift_page_up	btr/btr0btr.cc	/^static buf_block_t *btr_lift_page_up($/;"	f	file:
btr_lob_op_is_update	include/lob0lob.h	/^inline bool btr_lob_op_is_update(opcode op) {$/;"	f	namespace:lob
btr_node_ptr_delete	btr/btr0btr.cc	/^void btr_node_ptr_delete(dict_index_t *index, buf_block_t *block, mtr_t *mtr) {$/;"	f
btr_node_ptr_get_child	btr/btr0btr.cc	/^buf_block_t *btr_node_ptr_get_child(const rec_t *node_ptr, dict_index_t *index,$/;"	f
btr_node_ptr_set_child_page_no	btr/btr0btr.cc	/^void btr_node_ptr_set_child_page_no($/;"	f
btr_op_t	btr/btr0cur.cc	/^enum btr_op_t {$/;"	g	file:
btr_page_alloc	btr/btr0btr.cc	/^buf_block_t *btr_page_alloc(dict_index_t *index, page_no_t hint_page_no,$/;"	f
btr_page_alloc_for_ibuf	btr/btr0btr.cc	/^static buf_block_t *btr_page_alloc_for_ibuf($/;"	f	file:
btr_page_alloc_low	btr/btr0btr.cc	/^static MY_ATTRIBUTE((warn_unused_result)) buf_block_t *btr_page_alloc_low($/;"	f
btr_page_create	btr/btr0btr.cc	/^void btr_page_create($/;"	f
btr_page_empty	btr/btr0btr.cc	/^static void btr_page_empty($/;"	f	file:
btr_page_free	btr/btr0btr.cc	/^void btr_page_free(dict_index_t *index, \/*!< in: index tree *\/$/;"	f
btr_page_free_for_ibuf	btr/btr0btr.cc	/^static void btr_page_free_for_ibuf($/;"	f	file:
btr_page_free_low	btr/btr0btr.cc	/^void btr_page_free_low($/;"	f
btr_page_get	include/btr0btr.h	226;"	d
btr_page_get_father	btr/btr0btr.cc	/^static void btr_page_get_father($/;"	f	file:
btr_page_get_father_block	btr/btr0btr.cc	/^static ulint *btr_page_get_father_block($/;"	f	file:
btr_page_get_father_node_ptr	btr/btr0btr.cc	726;"	d	file:
btr_page_get_father_node_ptr_for_validate	btr/btr0btr.cc	730;"	d	file:
btr_page_get_father_node_ptr_func	btr/btr0btr.cc	/^static ulint *btr_page_get_father_node_ptr_func($/;"	f	file:
btr_page_get_level	include/btr0btr.h	238;"	d
btr_page_get_split_rec	btr/btr0btr.cc	/^static rec_t *btr_page_get_split_rec($/;"	f	file:
btr_page_get_split_rec_to_left	btr/btr0btr.cc	/^ibool btr_page_get_split_rec_to_left($/;"	f
btr_page_get_split_rec_to_right	btr/btr0btr.cc	/^ibool btr_page_get_split_rec_to_right($/;"	f
btr_page_insert_fits	btr/btr0btr.cc	/^static MY_ATTRIBUTE((warn_unused_result)) bool btr_page_insert_fits($/;"	f
btr_page_reorganize	btr/btr0btr.cc	/^bool btr_page_reorganize(page_cur_t *cursor, dict_index_t *index, mtr_t *mtr) {$/;"	f
btr_page_reorganize_block	btr/btr0btr.cc	/^static bool btr_page_reorganize_block($/;"	f	file:
btr_page_reorganize_low	btr/btr0btr.cc	/^bool btr_page_reorganize_low($/;"	f
btr_page_split_and_insert	btr/btr0btr.cc	/^rec_t *btr_page_split_and_insert($/;"	f
btr_page_tuple_smaller	btr/btr0btr.cc	/^static MY_ATTRIBUTE((warn_unused_result)) bool btr_page_tuple_smaller($/;"	f
btr_parse_page_reorganize	btr/btr0btr.cc	/^byte *btr_parse_page_reorganize($/;"	f
btr_parse_set_min_rec_mark	btr/btr0btr.cc	/^byte *btr_parse_set_min_rec_mark($/;"	f
btr_path_t	include/btr0cur.h	/^struct btr_path_t {$/;"	s
btr_pcur_close	include/btr0pcur.h	77;"	d
btr_pcur_commit_specify_mtr	include/btr0pcur.h	101;"	d
btr_pcur_copy_stored_position	include/btr0pcur.h	68;"	d
btr_pcur_create_for_mysql	include/btr0pcur.h	63;"	d
btr_pcur_free	include/btr0pcur.h	71;"	d
btr_pcur_free_for_mysql	include/btr0pcur.h	64;"	d
btr_pcur_get_block	include/btr0pcur.h	119;"	d
btr_pcur_get_btr_cur	include/btr0pcur.h	113;"	d
btr_pcur_get_low_match	include/btr0pcur.h	139;"	d
btr_pcur_get_page	include/btr0pcur.h	117;"	d
btr_pcur_get_page_cur	include/btr0pcur.h	115;"	d
btr_pcur_get_rec	include/btr0pcur.h	121;"	d
btr_pcur_get_rel_pos	include/btr0pcur.h	99;"	d
btr_pcur_get_up_match	include/btr0pcur.h	141;"	d
btr_pcur_init	include/btr0pcur.h	76;"	d
btr_pcur_is_after_last_in_tree	include/btr0pcur.h	131;"	d
btr_pcur_is_after_last_on_page	include/btr0pcur.h	125;"	d
btr_pcur_is_before_first_in_tree	include/btr0pcur.h	129;"	d
btr_pcur_is_before_first_on_page	include/btr0pcur.h	127;"	d
btr_pcur_is_on_user_rec	include/btr0pcur.h	123;"	d
btr_pcur_move_before_first_on_page	include/btr0pcur.h	137;"	d
btr_pcur_move_to_last_on_page	include/btr0pcur.h	106;"	d
btr_pcur_move_to_next	include/btr0pcur.h	103;"	d
btr_pcur_move_to_next_on_page	include/btr0pcur.h	133;"	d
btr_pcur_move_to_next_page	include/btr0pcur.h	111;"	d
btr_pcur_move_to_next_user_rec	include/btr0pcur.h	108;"	d
btr_pcur_move_to_prev	include/btr0pcur.h	104;"	d
btr_pcur_move_to_prev_on_page	include/btr0pcur.h	135;"	d
btr_pcur_open	include/btr0pcur.h	73;"	d
btr_pcur_open_at_index_side	include/btr0pcur.h	85;"	d
btr_pcur_open_at_rnd_pos	include/btr0pcur.h	79;"	d
btr_pcur_open_low	include/btr0pcur.h	82;"	d
btr_pcur_open_on_user_rec	include/btr0pcur.h	88;"	d
btr_pcur_open_with_no_init	include/btr0pcur.h	91;"	d
btr_pcur_pos_t	include/btr0pcur.h	/^enum btr_pcur_pos_t {$/;"	g
btr_pcur_reset	include/btr0pcur.h	66;"	d
btr_pcur_restore_position	include/btr0pcur.h	94;"	d
btr_pcur_store_position	include/btr0pcur.h	97;"	d
btr_pcur_t	include/btr0pcur.h	/^struct btr_pcur_t {$/;"	s
btr_print_index	btr/btr0btr.cc	/^void btr_print_index(dict_index_t *index, \/*!< in: index *\/$/;"	f
btr_print_recursive	btr/btr0btr.cc	/^static void btr_print_recursive($/;"	f	file:
btr_print_size	btr/btr0btr.cc	/^void btr_print_size(dict_index_t *index) \/*!< in: index tree *\/$/;"	f
btr_rec_copy_externally_stored_field	include/lob0lob.h	625;"	d
btr_rec_copy_externally_stored_field	include/lob0lob.h	630;"	d
btr_rec_copy_externally_stored_field_func	lob/lob0lob.cc	/^byte *btr_rec_copy_externally_stored_field_func($/;"	f	namespace:lob
btr_rec_get_externally_stored_len	lob/lob0lob.cc	/^ulint btr_rec_get_externally_stored_len(const rec_t *rec,$/;"	f	namespace:lob
btr_rec_get_field_ref	include/lob0lob.h	647;"	d
btr_rec_get_field_ref_offs	lob/lob0lob.cc	/^ulint btr_rec_get_field_ref_offs(const ulint *offsets, ulint n) {$/;"	f	namespace:lob
btr_record_not_null_field_in_rec	btr/btr0cur.cc	/^static void btr_record_not_null_field_in_rec($/;"	f	file:
btr_root_adjust_on_import	btr/btr0btr.cc	/^dberr_t btr_root_adjust_on_import($/;"	f
btr_root_block_get	btr/btr0btr.cc	/^buf_block_t *btr_root_block_get($/;"	f
btr_root_fseg_adjust_on_import	btr/btr0btr.cc	/^static bool btr_root_fseg_adjust_on_import($/;"	f	file:
btr_root_fseg_validate	btr/btr0btr.cc	/^static ibool btr_root_fseg_validate($/;"	f	file:
btr_root_get	btr/btr0btr.cc	/^page_t *btr_root_get(const dict_index_t *index, \/*!< in: index tree *\/$/;"	f
btr_root_raise_and_insert	btr/btr0btr.cc	/^rec_t *btr_root_raise_and_insert($/;"	f
btr_sdi_create	btr/btr0btr.cc	/^static page_no_t btr_sdi_create(space_id_t space_id,$/;"	f	file:
btr_sdi_create_index	btr/btr0btr.cc	/^dberr_t btr_sdi_create_index(space_id_t space_id, bool dict_locked) {$/;"	f
btr_sea_pad1	btr/btr0sea.cc	/^byte btr_sea_pad1[64];$/;"	v
btr_sea_pad2	btr/btr0sea.cc	/^byte btr_sea_pad2[64];$/;"	v
btr_search_build_page_hash_index	btr/btr0sea.cc	/^static void btr_search_build_page_hash_index(dict_index_t *index,$/;"	f	file:
btr_search_check_free_space_in_heap	btr/btr0sea.cc	/^static void btr_search_check_free_space_in_heap(dict_index_t *index) {$/;"	f	file:
btr_search_check_guess	btr/btr0sea.cc	/^static ibool btr_search_check_guess(btr_cur_t *cursor,$/;"	f	file:
btr_search_disable	btr/btr0sea.cc	/^void btr_search_disable(bool need_mutex) {$/;"	f
btr_search_disable_ref_count	btr/btr0sea.cc	/^static void btr_search_disable_ref_count(dict_table_t *table) {$/;"	f	file:
btr_search_drop_page_hash_index	btr/btr0sea.cc	/^void btr_search_drop_page_hash_index(buf_block_t *block) {$/;"	f
btr_search_drop_page_hash_when_freed	btr/btr0sea.cc	/^void btr_search_drop_page_hash_when_freed(const page_id_t &page_id,$/;"	f
btr_search_enable	btr/btr0sea.cc	/^void btr_search_enable() {$/;"	f
btr_search_enabled	btr/btr0sea.cc	/^bool btr_search_enabled = true;$/;"	v
btr_search_failure	btr/btr0sea.cc	/^static void btr_search_failure(btr_search_t *info, btr_cur_t *cursor) {$/;"	f	file:
btr_search_fold_index_id	btr/btr0sea.cc	/^static ulint btr_search_fold_index_id(const index_id_t &id) {$/;"	f	file:
btr_search_fold_index_id	btr/btr0sea.cc	/^static ulint btr_search_fold_index_id(uint32_t space_id,$/;"	f	file:
btr_search_get_n_fields	btr/btr0sea.cc	/^    btr_search_get_n_fields(const btr_cur_t *cursor) {$/;"	f
btr_search_get_n_fields	btr/btr0sea.cc	/^    btr_search_get_n_fields(ulint n_fields, ulint n_bytes) {$/;"	f
btr_search_guess_on_hash	btr/btr0sea.cc	/^ibool btr_search_guess_on_hash(dict_index_t *index, btr_search_t *info,$/;"	f
btr_search_hash_table_validate	btr/btr0sea.cc	/^static ibool btr_search_hash_table_validate(ulint hash_table_id) {$/;"	f	file:
btr_search_info_create	btr/btr0sea.cc	/^btr_search_t *btr_search_info_create(mem_heap_t *heap) {$/;"	f
btr_search_info_get_ref_count	btr/btr0sea.cc	/^ulint btr_search_info_get_ref_count(const btr_search_t *info,$/;"	f
btr_search_info_update_hash	btr/btr0sea.cc	/^static void btr_search_info_update_hash(btr_search_t *info, btr_cur_t *cursor) {$/;"	f	file:
btr_search_info_update_slow	btr/btr0sea.cc	/^void btr_search_info_update_slow(btr_search_t *info, btr_cur_t *cursor) {$/;"	f
btr_search_latch_key	sync/sync0sync.cc	/^mysql_pfs_key_t btr_search_latch_key;$/;"	v
btr_search_latches	btr/btr0sea.cc	/^rw_lock_t **btr_search_latches;$/;"	v
btr_search_move_or_delete_hash_entries	btr/btr0sea.cc	/^void btr_search_move_or_delete_hash_entries(buf_block_t *new_block,$/;"	f
btr_search_n_hash_fail	btr/btr0sea.cc	/^ulint btr_search_n_hash_fail = 0;$/;"	v
btr_search_n_succ	btr/btr0sea.cc	/^ulint btr_search_n_succ = 0;$/;"	v
btr_search_sys	btr/btr0sea.cc	/^btr_search_sys_t *btr_search_sys;$/;"	v
btr_search_sys_create	btr/btr0sea.cc	/^void btr_search_sys_create(ulint hash_size) {$/;"	f
btr_search_sys_free	btr/btr0sea.cc	/^void btr_search_sys_free() {$/;"	f
btr_search_sys_resize	btr/btr0sea.cc	/^void btr_search_sys_resize(ulint hash_size) {$/;"	f
btr_search_sys_t	include/btr0sea.h	/^struct btr_search_sys_t {$/;"	s
btr_search_t	include/btr0sea.h	/^struct btr_search_t {$/;"	s
btr_search_update_block_hash_info	btr/btr0sea.cc	/^static ibool btr_search_update_block_hash_info(btr_search_t *info,$/;"	f	file:
btr_search_update_hash_node_on_insert	btr/btr0sea.cc	/^void btr_search_update_hash_node_on_insert(btr_cur_t *cursor) {$/;"	f
btr_search_update_hash_on_delete	btr/btr0sea.cc	/^void btr_search_update_hash_on_delete(btr_cur_t *cursor) {$/;"	f
btr_search_update_hash_on_insert	btr/btr0sea.cc	/^void btr_search_update_hash_on_insert(btr_cur_t *cursor) {$/;"	f
btr_search_update_hash_ref	btr/btr0sea.cc	/^static void btr_search_update_hash_ref(const btr_search_t *info,$/;"	f	file:
btr_search_validate	btr/btr0sea.cc	/^bool btr_search_validate() {$/;"	f
btr_set_min_rec_mark	btr/btr0btr.cc	/^void btr_set_min_rec_mark(rec_t *rec, mtr_t *mtr) {$/;"	f
btr_set_min_rec_mark_log	btr/btr0btr.cc	/^void btr_set_min_rec_mark_log(rec_t *rec,     \/*!< in: record *\/$/;"	f
btr_set_min_rec_mark_log	btr/btr0btr.cc	2761;"	d	file:
btr_store_big_rec_extern_fields	lob/lob0lob.cc	/^dberr_t btr_store_big_rec_extern_fields(trx_t *trx, btr_pcur_t *pcur,$/;"	f	namespace:lob
btr_truncate	btr/btr0btr.cc	/^void btr_truncate(const dict_index_t *index) {$/;"	f
btr_truncate_recover	btr/btr0btr.cc	/^void btr_truncate_recover(const dict_index_t *index) {$/;"	f
btr_validate_index	btr/btr0btr.cc	/^bool btr_validate_index($/;"	f
btr_validate_level	btr/btr0btr.cc	/^static bool btr_validate_level($/;"	f	file:
btr_validate_report1	btr/btr0btr.cc	/^static void btr_validate_report1($/;"	f	file:
btr_validate_report2	btr/btr0btr.cc	/^static void btr_validate_report2($/;"	f	file:
btr_validate_spatial_index	btr/btr0btr.cc	/^static bool btr_validate_spatial_index($/;"	f	file:
btrsea_sync_check	include/sync0types.h	/^  explicit btrsea_sync_check(bool has_search_latch)$/;"	f	struct:btrsea_sync_check
btrsea_sync_check	include/sync0types.h	/^struct btrsea_sync_check : public sync_check_functor_t {$/;"	s
buddy_n_frames	include/buf0buf.h	/^  ulint buddy_n_frames;$/;"	m	struct:Cache_hint::buf_pool_t
buddy_stat	include/buf0buf.h	/^  buf_buddy_stat_t buddy_stat[BUF_BUDDY_SIZES_MAX + 1];$/;"	m	struct:Cache_hint::buf_pool_t
buf	buf/buf0block_hint.cc	/^namespace buf {$/;"	n	file:
buf	include/buf0block_hint.h	/^namespace buf {$/;"	n
buf	include/log0recv.h	/^  byte *buf;$/;"	m	struct:recv_sys_t
buf	include/row0ext.h	/^  byte *buf;        \/*!< backing store of the column prefix cache *\/$/;"	m	struct:row_ext_t
buf	row/row0log.cc	/^  mrec_buf_t buf;         \/*!< buffer for accessing a record$/;"	m	struct:row_log_buf_t	file:
buf0block_hint_h	include/buf0block_hint.h	27;"	d
buf0buddy_h	include/buf0buddy.h	34;"	d
buf0buf_h	include/buf0buf.h	34;"	d
buf0checksum_h	include/buf0checksum.h	34;"	d
buf0dblwr_h	include/buf0dblwr.h	34;"	d
buf0dump_h	include/buf0dump.h	34;"	d
buf0flu_h	include/buf0flu.h	34;"	d
buf0lru_h	include/buf0lru.h	36;"	d
buf0rea_h	include/buf0rea.h	34;"	d
buf0stats_h	include/buf0stats.h	34;"	d
buf0types_h	include/buf0types.h	34;"	d
buf_LRU_add_block	buf/buf0lru.cc	/^void buf_LRU_add_block(buf_page_t *bpage, \/*!< in: control block *\/$/;"	f
buf_LRU_add_block_low	buf/buf0lru.cc	/^void buf_LRU_add_block_low(buf_page_t *bpage, ibool old) {$/;"	f
buf_LRU_adjust_hp	buf/buf0lru.cc	/^void buf_LRU_adjust_hp(buf_pool_t *buf_pool, const buf_page_t *bpage) {$/;"	f
buf_LRU_block_free_non_file_page	buf/buf0lru.cc	/^void buf_LRU_block_free_non_file_page(buf_block_t *block) {$/;"	f
buf_LRU_block_remove_hashed	buf/buf0lru.cc	/^static bool buf_LRU_block_remove_hashed(buf_page_t *bpage, bool zip,$/;"	f	file:
buf_LRU_buf_pool_running_out	buf/buf0lru.cc	/^ibool buf_LRU_buf_pool_running_out(void) {$/;"	f
buf_LRU_check_size_of_non_data_objects	buf/buf0lru.cc	/^static void buf_LRU_check_size_of_non_data_objects($/;"	f	file:
buf_LRU_count_space_references	buf/buf0lru.cc	/^Space_References buf_LRU_count_space_references() {$/;"	f
buf_LRU_drop_page_hash_batch	buf/buf0lru.cc	/^static void buf_LRU_drop_page_hash_batch(space_id_t space_id,$/;"	f	file:
buf_LRU_drop_page_hash_for_tablespace	buf/buf0lru.cc	/^static void buf_LRU_drop_page_hash_for_tablespace(buf_pool_t *buf_pool,$/;"	f	file:
buf_LRU_evict_from_unzip_LRU	buf/buf0lru.cc	/^ibool buf_LRU_evict_from_unzip_LRU(buf_pool_t *buf_pool) {$/;"	f
buf_LRU_flush_or_remove_pages	buf/buf0lru.cc	/^void buf_LRU_flush_or_remove_pages(space_id_t id, buf_remove_t buf_remove,$/;"	f
buf_LRU_free_from_common_LRU_list	buf/buf0lru.cc	/^static bool buf_LRU_free_from_common_LRU_list(buf_pool_t *buf_pool,$/;"	f	file:
buf_LRU_free_from_unzip_LRU_list	buf/buf0lru.cc	/^static bool buf_LRU_free_from_unzip_LRU_list(buf_pool_t *buf_pool,$/;"	f	file:
buf_LRU_free_one_page	buf/buf0lru.cc	/^void buf_LRU_free_one_page(buf_page_t *bpage, bool zip, bool ignore_content) {$/;"	f
buf_LRU_free_page	buf/buf0lru.cc	/^bool buf_LRU_free_page(buf_page_t *bpage, bool zip) {$/;"	f
buf_LRU_get_free_block	buf/buf0lru.cc	/^buf_block_t *buf_LRU_get_free_block(buf_pool_t *buf_pool) {$/;"	f
buf_LRU_get_free_only	buf/buf0lru.cc	/^buf_block_t *buf_LRU_get_free_only(buf_pool_t *buf_pool) {$/;"	f
buf_LRU_insert_zip_clean	buf/buf0lru.cc	/^void buf_LRU_insert_zip_clean(buf_page_t *bpage) {$/;"	f
buf_LRU_make_block_old	buf/buf0lru.cc	/^void buf_LRU_make_block_old(buf_page_t *bpage) {$/;"	f
buf_LRU_make_block_young	buf/buf0lru.cc	/^void buf_LRU_make_block_young(buf_page_t *bpage) {$/;"	f
buf_LRU_old_adjust_len	buf/buf0lru.cc	/^void buf_LRU_old_adjust_len(buf_pool_t *buf_pool) {$/;"	f
buf_LRU_old_init	buf/buf0lru.cc	/^static void buf_LRU_old_init(buf_pool_t *buf_pool) {$/;"	f	file:
buf_LRU_old_ratio_update	buf/buf0lru.cc	/^uint buf_LRU_old_ratio_update($/;"	f
buf_LRU_old_ratio_update_instance	buf/buf0lru.cc	/^static uint buf_LRU_old_ratio_update_instance(buf_pool_t *buf_pool,$/;"	f	file:
buf_LRU_old_threshold_ms	buf/buf0lru.cc	/^uint buf_LRU_old_threshold_ms;$/;"	v
buf_LRU_print	buf/buf0lru.cc	/^void buf_LRU_print(void) {$/;"	f
buf_LRU_print_instance	buf/buf0lru.cc	/^static void buf_LRU_print_instance(buf_pool_t *buf_pool) {$/;"	f	file:
buf_LRU_remove_all_pages	buf/buf0lru.cc	/^static void buf_LRU_remove_all_pages(buf_pool_t *buf_pool, ulint id) {$/;"	f	file:
buf_LRU_remove_block	buf/buf0lru.cc	/^void buf_LRU_remove_block(buf_page_t *bpage) {$/;"	f
buf_LRU_remove_pages	buf/buf0lru.cc	/^static void buf_LRU_remove_pages($/;"	f	file:
buf_LRU_scan_and_free_block	buf/buf0lru.cc	/^bool buf_LRU_scan_and_free_block(buf_pool_t *buf_pool, bool scan_all) {$/;"	f
buf_LRU_stat_arr	buf/buf0lru.cc	/^static buf_LRU_stat_t buf_LRU_stat_arr[BUF_LRU_STAT_N_INTERVAL];$/;"	v	file:
buf_LRU_stat_arr_ind	buf/buf0lru.cc	/^static ulint buf_LRU_stat_arr_ind;$/;"	v	file:
buf_LRU_stat_cur	buf/buf0lru.cc	/^buf_LRU_stat_t buf_LRU_stat_cur;$/;"	v
buf_LRU_stat_inc_io	include/buf0lru.h	259;"	d
buf_LRU_stat_inc_unzip	include/buf0lru.h	261;"	d
buf_LRU_stat_inc_unzip	page/page0zip.cc	67;"	d	file:
buf_LRU_stat_sum	buf/buf0lru.cc	/^buf_LRU_stat_t buf_LRU_stat_sum;$/;"	v
buf_LRU_stat_t	include/buf0lru.h	/^struct buf_LRU_stat_t {$/;"	s
buf_LRU_stat_update	buf/buf0lru.cc	/^void buf_LRU_stat_update(void) {$/;"	f
buf_LRU_validate	buf/buf0lru.cc	/^ibool buf_LRU_validate(void) {$/;"	f
buf_LRU_validate_instance	buf/buf0lru.cc	/^static void buf_LRU_validate_instance(buf_pool_t *buf_pool) {$/;"	f	file:
buf_are_flush_lists_empty_validate	buf/buf0flu.cc	/^bool buf_are_flush_lists_empty_validate(void) {$/;"	f
buf_block	include/mem0mem.h	/^  void *buf_block;$/;"	m	struct:mem_block_info_t
buf_block_alloc	buf/buf0buf.cc	/^buf_block_t *buf_block_alloc($/;"	f
buf_block_buf_fix_inc	include/buf0buf.h	627;"	d
buf_block_buf_fix_inc	include/buf0buf.h	633;"	d
buf_block_dbg_add_level	include/buf0buf.h	754;"	d
buf_block_debug_latch_key	sync/sync0sync.cc	/^mysql_pfs_key_t buf_block_debug_latch_key;$/;"	v
buf_block_from_ahi	buf/buf0buf.cc	/^buf_block_t *buf_block_from_ahi(const byte *ptr) {$/;"	f
buf_block_get_frame	include/buf0buf.h	909;"	d
buf_block_get_frame	include/buf0buf.h	912;"	d
buf_block_get_page_zip	include/buf0buf.h	916;"	d
buf_block_hash_get	include/buf0buf.h	1090;"	d
buf_block_hash_get_s_locked	include/buf0buf.h	1086;"	d
buf_block_hash_get_x_locked	include/buf0buf.h	1088;"	d
buf_block_hash_lock_held_s	include/buf0buf.h	2515;"	d
buf_block_hash_lock_held_s	include/buf0buf.h	2527;"	d
buf_block_hash_lock_held_s_or_x	include/buf0buf.h	2521;"	d
buf_block_hash_lock_held_s_or_x	include/buf0buf.h	2529;"	d
buf_block_hash_lock_held_x	include/buf0buf.h	2518;"	d
buf_block_hash_lock_held_x	include/buf0buf.h	2528;"	d
buf_block_init	buf/buf0buf.cc	/^static void buf_block_init($/;"	f	file:
buf_block_init_low	buf/buf0buf.cc	/^void buf_block_init_low(buf_block_t *block) \/*!< in: block to init *\/$/;"	f
buf_block_lock_key	sync/sync0sync.cc	/^mysql_pfs_key_t buf_block_lock_key;$/;"	v
buf_block_modify_clock_inc	include/buf0buf.h	636;"	d
buf_block_set_next_page_no	lob/lob0impl.cc	/^static void buf_block_set_next_page_no(buf_block_t *block,$/;"	f	namespace:lob
buf_block_state_valid	include/buf0buf.h	1923;"	d
buf_block_t	include/buf0buf.h	/^struct buf_block_t {$/;"	s	class:Cache_hint
buf_block_try_discard_uncompressed	buf/buf0buf.cc	/^static void buf_block_try_discard_uncompressed(const page_id_t &page_id) {$/;"	f	file:
buf_block_will_withdrawn	buf/buf0buf.cc	/^bool buf_block_will_withdrawn(buf_pool_t *buf_pool, const buf_block_t *block) {$/;"	f
buf_buddy_add_to_free	buf/buf0buddy.cc	/^void buf_buddy_add_to_free(buf_pool_t *buf_pool, buf_buddy_free_t *buf,$/;"	f
buf_buddy_alloc_from	buf/buf0buddy.cc	/^static void *buf_buddy_alloc_from(buf_pool_t *buf_pool, void *buf, ulint i,$/;"	f	file:
buf_buddy_alloc_low	buf/buf0buddy.cc	/^void *buf_buddy_alloc_low(buf_pool_t *buf_pool, ulint i) {$/;"	f
buf_buddy_alloc_zip	buf/buf0buddy.cc	/^static buf_buddy_free_t *buf_buddy_alloc_zip(buf_pool_t *buf_pool, ulint i) {$/;"	f	file:
buf_buddy_block_free	buf/buf0buddy.cc	/^static void buf_buddy_block_free(buf_pool_t *buf_pool, void *buf) {$/;"	f	file:
buf_buddy_block_register	buf/buf0buddy.cc	/^static void buf_buddy_block_register(buf_block_t *block) {$/;"	f	file:
buf_buddy_check_free	buf/buf0buddy.cc	/^bool buf_buddy_check_free(buf_pool_t *buf_pool, const buf_buddy_free_t *buf,$/;"	f
buf_buddy_condense_free	buf/buf0buddy.cc	/^void buf_buddy_condense_free(buf_pool_t *buf_pool) {$/;"	f
buf_buddy_free_low	buf/buf0buddy.cc	/^void buf_buddy_free_low(buf_pool_t *buf_pool, void *buf, ulint i,$/;"	f
buf_buddy_free_t	include/buf0buf.h	/^struct buf_buddy_free_t {$/;"	s	class:Cache_hint
buf_buddy_get	buf/buf0buddy.cc	/^void *buf_buddy_get(byte *page, \/*!< in: compressed page *\/$/;"	f
buf_buddy_is_free	buf/buf0buddy.cc	/^    buf_buddy_is_free(buf_buddy_free_t *buf, \/*!< in: block to check *\/$/;"	f
buf_buddy_list_validate	buf/buf0buddy.cc	/^static void buf_buddy_list_validate(const buf_pool_t *buf_pool, ulint i) {$/;"	f	file:
buf_buddy_mem_invalid	buf/buf0buddy.cc	/^void buf_buddy_mem_invalid(buf_buddy_free_t *buf, \/*!< in: block to check *\/$/;"	f
buf_buddy_mem_invalid	buf/buf0buddy.cc	105;"	d	file:
buf_buddy_realloc	buf/buf0buddy.cc	/^bool buf_buddy_realloc(buf_pool_t *buf_pool, void *buf, ulint size) {$/;"	f
buf_buddy_relocate	buf/buf0buddy.cc	/^static bool buf_buddy_relocate(buf_pool_t *buf_pool, void *src, void *dst,$/;"	f	file:
buf_buddy_remove_from_free	buf/buf0buddy.cc	/^void buf_buddy_remove_from_free(buf_pool_t *buf_pool, buf_buddy_free_t *buf,$/;"	f
buf_buddy_stamp_free	buf/buf0buddy.cc	/^void buf_buddy_stamp_free(buf_buddy_free_t *buf, \/*!< in\/out: block to stamp *\/$/;"	f
buf_buddy_stamp_is_free	buf/buf0buddy.cc	/^UNIV_INLINE MY_ATTRIBUTE((warn_unused_result)) bool buf_buddy_stamp_is_free($/;"	f
buf_buddy_stamp_nonfree	buf/buf0buddy.cc	132;"	d	file:
buf_buddy_stat_t	include/buf0buf.h	/^struct buf_buddy_stat_t {$/;"	s	class:Cache_hint
buf_buddy_state_t	buf/buf0buddy.cc	/^enum buf_buddy_state_t {$/;"	g	file:
buf_calc_page_crc32	buf/checksum.cc	/^uint32_t buf_calc_page_crc32(const byte *page,$/;"	f
buf_calc_page_new_checksum	buf/checksum.cc	/^ulint buf_calc_page_new_checksum(const byte *page) \/*!< in: buffer page *\/$/;"	f
buf_calc_page_old_checksum	buf/checksum.cc	/^ulint buf_calc_page_old_checksum(const byte *page) \/*!< in: buffer page *\/$/;"	f
buf_checksum_algorithm_name	buf/checksum.cc	/^const char *buf_checksum_algorithm_name($/;"	f
buf_chunk_contains_zip	buf/buf0buf.cc	/^static buf_block_t *buf_chunk_contains_zip($/;"	f	file:
buf_chunk_init	buf/buf0buf.cc	/^static buf_chunk_t *buf_chunk_init($/;"	f	file:
buf_chunk_map_reg	buf/buf0buf.cc	/^static buf_pool_chunk_map_t *buf_chunk_map_reg;$/;"	v	file:
buf_chunk_not_freed	buf/buf0buf.cc	/^static const buf_block_t *buf_chunk_not_freed($/;"	f	file:
buf_dbg_counter	buf/buf0buf.cc	/^static ulint buf_dbg_counter = 0;$/;"	v	file:
buf_debug_execute_is_force_flush	buf/buf0buf.cc	/^static bool buf_debug_execute_is_force_flush() {$/;"	f	file:
buf_do_LRU_batch	buf/buf0flu.cc	/^static ulint buf_do_LRU_batch(buf_pool_t *buf_pool, ulint max) {$/;"	f	file:
buf_do_flush_list_batch	buf/buf0flu.cc	/^static ulint buf_do_flush_list_batch(buf_pool_t *buf_pool, ulint min_n,$/;"	f	file:
buf_dump	buf/buf0dump.cc	/^static void buf_dump(ibool obey_shutdown) {$/;"	f	file:
buf_dump_generate_path	buf/buf0dump.cc	/^void buf_dump_generate_path(char *path, size_t path_size) {$/;"	f
buf_dump_should_start	buf/buf0dump.cc	/^static ibool buf_dump_should_start = FALSE;$/;"	v	file:
buf_dump_start	buf/buf0dump.cc	/^void buf_dump_start() {$/;"	f
buf_dump_status	buf/buf0dump.cc	/^static MY_ATTRIBUTE((format(printf, 2, 3))) void buf_dump_status($/;"	f
buf_dump_t	buf/buf0dump.cc	/^typedef ib_uint64_t buf_dump_t;$/;"	t	file:
buf_dump_thread	buf/buf0dump.cc	/^void buf_dump_thread() {$/;"	f
buf_dump_thread_key	srv/srv0start.cc	/^mysql_pfs_key_t buf_dump_thread_key;$/;"	v
buf_fix_count	include/buf0buf.h	/^  buf_fix_count_atomic_t buf_fix_count;$/;"	m	class:Cache_hint::buf_page_t
buf_flush_LRU_list	buf/buf0flu.cc	/^static ulint buf_flush_LRU_list(buf_pool_t *buf_pool) {$/;"	f	file:
buf_flush_LRU_list_batch	buf/buf0flu.cc	/^static ulint buf_flush_LRU_list_batch(buf_pool_t *buf_pool, ulint max) {$/;"	f	file:
buf_flush_batch	buf/buf0flu.cc	/^static ulint buf_flush_batch(buf_pool_t *buf_pool, buf_flush_t flush_type,$/;"	f	file:
buf_flush_block_cmp	buf/buf0flu.cc	/^static int buf_flush_block_cmp(const void *p1, \/*!< in: block1 *\/$/;"	f	file:
buf_flush_borrow_lsn	buf/buf0flu.cc	/^static inline lsn_t buf_flush_borrow_lsn(const buf_pool_t *buf_pool) {$/;"	f	file:
buf_flush_check_neighbor	buf/buf0flu.cc	/^static bool buf_flush_check_neighbor(const page_id_t &page_id,$/;"	f	file:
buf_flush_delete_from_flush_rbt	buf/buf0flu.cc	/^static void buf_flush_delete_from_flush_rbt($/;"	f	file:
buf_flush_dirty_pages	buf/buf0lru.cc	/^static void buf_flush_dirty_pages(buf_pool_t *buf_pool, space_id_t id,$/;"	f	file:
buf_flush_do_batch	buf/buf0flu.cc	/^bool buf_flush_do_batch(buf_pool_t *buf_pool, buf_flush_t type, ulint min_n,$/;"	f
buf_flush_end	buf/buf0flu.cc	/^static void buf_flush_end(buf_pool_t *buf_pool, buf_flush_t flush_type) {$/;"	f	file:
buf_flush_event	buf/buf0flu.cc	/^os_event_t buf_flush_event;$/;"	v
buf_flush_free_flush_rbt	buf/buf0flu.cc	/^void buf_flush_free_flush_rbt(void) {$/;"	f
buf_flush_get_dirty_pages_count	buf/buf0flu.cc	/^static ulint buf_flush_get_dirty_pages_count($/;"	f	file:
buf_flush_init_flush_rbt	buf/buf0flu.cc	/^void buf_flush_init_flush_rbt(void) {$/;"	f
buf_flush_init_for_writing	buf/buf0flu.cc	/^void buf_flush_init_for_writing(const buf_block_t *block, byte *page,$/;"	f
buf_flush_insert_in_flush_rbt	buf/buf0flu.cc	/^static buf_page_t *buf_flush_insert_in_flush_rbt($/;"	f	file:
buf_flush_insert_into_flush_list	buf/buf0flu.cc	/^void buf_flush_insert_into_flush_list($/;"	f
buf_flush_insert_sorted_into_flush_list	buf/buf0flu.cc	/^void buf_flush_insert_sorted_into_flush_list($/;"	f
buf_flush_list_mutex_enter	include/buf0buf.h	2467;"	d
buf_flush_list_mutex_exit	include/buf0buf.h	2472;"	d
buf_flush_list_mutex_own	include/buf0buf.h	2464;"	d
buf_flush_list_order_validate	buf/buf0flu.cc	/^static inline bool buf_flush_list_order_validate(lsn_t earlier_added_lsn,$/;"	f	file:
buf_flush_lists	buf/buf0flu.cc	/^bool buf_flush_lists(ulint min_n, lsn_t lsn_limit, ulint *n_processed) {$/;"	f
buf_flush_lsn_scan_factor	buf/buf0flu.cc	/^static uint buf_flush_lsn_scan_factor = 3;$/;"	v	file:
buf_flush_or_remove_page	buf/buf0lru.cc	/^static MY_ATTRIBUTE((warn_unused_result)) bool buf_flush_or_remove_page($/;"	f
buf_flush_or_remove_pages	buf/buf0lru.cc	/^    buf_flush_or_remove_pages(buf_pool_t *buf_pool, space_id_t id,$/;"	f
buf_flush_page	buf/buf0flu.cc	/^ibool buf_flush_page(buf_pool_t *buf_pool, buf_page_t *bpage,$/;"	f
buf_flush_page_and_try_neighbors	buf/buf0flu.cc	/^static bool buf_flush_page_and_try_neighbors(buf_page_t *bpage,$/;"	f	file:
buf_flush_page_cleaner_close	buf/buf0flu.cc	/^static void buf_flush_page_cleaner_close(void) {$/;"	f	file:
buf_flush_page_cleaner_disabled_debug_update	buf/buf0flu.cc	/^void buf_flush_page_cleaner_disabled_debug_update(THD *thd, SYS_VAR *var,$/;"	f
buf_flush_page_cleaner_disabled_loop	buf/buf0flu.cc	/^static void buf_flush_page_cleaner_disabled_loop(void) {$/;"	f	file:
buf_flush_page_cleaner_init	buf/buf0flu.cc	/^void buf_flush_page_cleaner_init(size_t n_page_cleaners) {$/;"	f
buf_flush_page_cleaner_is_active	buf/buf0flu.cc	/^bool buf_flush_page_cleaner_is_active() { return (false); }$/;"	f
buf_flush_page_cleaner_is_active	buf/buf0flu.cc	/^bool buf_flush_page_cleaner_is_active() {$/;"	f
buf_flush_page_cleaner_priority	buf/buf0flu.cc	/^static const int buf_flush_page_cleaner_priority = -20;$/;"	v	file:
buf_flush_page_cleaner_set_priority	buf/buf0flu.cc	/^static bool buf_flush_page_cleaner_set_priority(int priority) {$/;"	f	file:
buf_flush_page_cleaner_thread	buf/buf0flu.cc	/^static void buf_flush_page_cleaner_thread() {$/;"	f	file:
buf_flush_page_coordinator_thread	buf/buf0flu.cc	/^static void buf_flush_page_coordinator_thread(size_t n_page_cleaners) {$/;"	f	file:
buf_flush_page_try	buf/buf0flu.cc	/^bool buf_flush_page_try(buf_pool_t *buf_pool, buf_block_t *block) {$/;"	f
buf_flush_ready_for_flush	buf/buf0flu.cc	/^bool buf_flush_ready_for_flush(buf_page_t *bpage, buf_flush_t flush_type) {$/;"	f
buf_flush_ready_for_flush_gen	buf/buf0flu.cc	/^static bool buf_flush_ready_for_flush_gen(buf_page_t *bpage,$/;"	f	file:
buf_flush_ready_for_replace	buf/buf0flu.cc	/^bool buf_flush_ready_for_replace(buf_page_t *bpage) {$/;"	f
buf_flush_relocate_on_flush_list	buf/buf0flu.cc	/^void buf_flush_relocate_on_flush_list($/;"	f
buf_flush_remove	buf/buf0flu.cc	/^void buf_flush_remove(buf_page_t *bpage) {$/;"	f
buf_flush_single_page_from_LRU	buf/buf0flu.cc	/^bool buf_flush_single_page_from_LRU(buf_pool_t *buf_pool) {$/;"	f
buf_flush_start	buf/buf0flu.cc	/^static ibool buf_flush_start(buf_pool_t *buf_pool, buf_flush_t flush_type) {$/;"	f	file:
buf_flush_stats	buf/buf0flu.cc	/^static void buf_flush_stats(ulint page_count_flush, ulint page_count_LRU) {$/;"	f	file:
buf_flush_sync_all_buf_pools	buf/buf0flu.cc	/^void buf_flush_sync_all_buf_pools(void) {$/;"	f
buf_flush_sync_datafiles	buf/buf0flu.cc	/^static void buf_flush_sync_datafiles() {$/;"	f	file:
buf_flush_sync_lsn	buf/buf0flu.cc	/^static lsn_t buf_flush_sync_lsn = 0;$/;"	v	file:
buf_flush_tick_event	buf/buf0flu.cc	/^os_event_t buf_flush_tick_event;$/;"	v
buf_flush_try_neighbors	buf/buf0flu.cc	/^static ulint buf_flush_try_neighbors(const page_id_t &page_id,$/;"	f	file:
buf_flush_try_yield	buf/buf0lru.cc	/^static MY_ATTRIBUTE((warn_unused_result)) bool buf_flush_try_yield($/;"	f
buf_flush_update_zip_checksum	buf/buf0flu.cc	/^void buf_flush_update_zip_checksum(buf_frame_t *page, ulint size, lsn_t lsn,$/;"	f
buf_flush_validate	buf/buf0flu.cc	/^bool buf_flush_validate(buf_pool_t *buf_pool) {$/;"	f
buf_flush_validate_low	buf/buf0flu.cc	/^static bool buf_flush_validate_low(const buf_pool_t *buf_pool) {$/;"	f	file:
buf_flush_validate_skip	buf/buf0flu.cc	/^static ibool buf_flush_validate_skip($/;"	f	file:
buf_flush_wait_LRU_batch_end	buf/buf0flu.cc	/^void buf_flush_wait_LRU_batch_end(void) {$/;"	f
buf_flush_wait_batch_end	buf/buf0flu.cc	/^void buf_flush_wait_batch_end(buf_pool_t *buf_pool, buf_flush_t flush_type) {$/;"	f
buf_flush_was_ready_for_flush	buf/buf0flu.cc	/^static bool buf_flush_was_ready_for_flush(buf_page_t *bpage,$/;"	f	file:
buf_flush_write_block_low	buf/buf0flu.cc	/^static void buf_flush_write_block_low(buf_page_t *bpage, buf_flush_t flush_type,$/;"	f	file:
buf_flush_write_complete	buf/buf0flu.cc	/^void buf_flush_write_complete(buf_page_t *bpage) {$/;"	f
buf_flush_yield	buf/buf0lru.cc	/^static void buf_flush_yield(buf_pool_t *buf_pool, buf_page_t *bpage) {$/;"	f	file:
buf_frame_t	include/buf0types.h	/^typedef byte buf_frame_t;$/;"	t
buf_frame_will_withdrawn	buf/buf0buf.cc	/^bool buf_frame_will_withdrawn(buf_pool_t *buf_pool, const byte *ptr) {$/;"	f
buf_free_from_unzip_LRU_list_batch	buf/buf0flu.cc	/^static ulint buf_free_from_unzip_LRU_list_batch(buf_pool_t *buf_pool,$/;"	f	file:
buf_get_latched_pages_number	buf/buf0buf.cc	/^ulint buf_get_latched_pages_number(void) {$/;"	f
buf_get_latched_pages_number_instance	buf/buf0buf.cc	/^static ulint buf_get_latched_pages_number_instance(buf_pool_t *buf_pool) {$/;"	f	file:
buf_get_modified_ratio_pct	buf/buf0buf.cc	/^double buf_get_modified_ratio_pct(void) {$/;"	f
buf_get_n_pending_read_ios	buf/buf0buf.cc	/^ulint buf_get_n_pending_read_ios(void) {$/;"	f
buf_get_total_list_len	buf/buf0buf.cc	/^void buf_get_total_list_len(ulint *LRU_len, ulint *free_len,$/;"	f
buf_get_total_list_size_in_bytes	buf/buf0buf.cc	/^void buf_get_total_list_size_in_bytes($/;"	f
buf_get_total_stat	buf/buf0buf.cc	/^void buf_get_total_stat($/;"	f
buf_h	buf/buf.h	34;"	d
buf_is_block_in_instance	buf/buf0buf.cc	/^bool buf_is_block_in_instance(const buf_pool_t *buf_pool,$/;"	f
buf_len	include/log0recv.h	/^  size_t buf_len;$/;"	m	struct:recv_sys_t
buf_load	buf/buf0dump.cc	/^static void buf_load() {$/;"	f	file:
buf_load_abort	buf/buf0dump.cc	/^void buf_load_abort() { buf_load_abort_flag = TRUE; }$/;"	f
buf_load_abort_flag	buf/buf0dump.cc	/^static ibool buf_load_abort_flag = FALSE;$/;"	v	file:
buf_load_should_start	buf/buf0dump.cc	/^static ibool buf_load_should_start = FALSE;$/;"	v	file:
buf_load_start	buf/buf0dump.cc	/^void buf_load_start() {$/;"	f
buf_load_status	buf/buf0dump.cc	/^static MY_ATTRIBUTE((format(printf, 2, 3))) void buf_load_status($/;"	f
buf_load_throttle_if_needed	buf/buf0dump.cc	/^void buf_load_throttle_if_needed(ib_time_monotonic_ms_t *last_check_time,$/;"	f
buf_lru_flush_page_count	buf/buf0flu.cc	/^static ulint buf_lru_flush_page_count = 0;$/;"	v	file:
buf_lru_switched_on_innodb_mon	buf/buf0lru.cc	/^static bool buf_lru_switched_on_innodb_mon = false;$/;"	v	file:
buf_must_be_all_freed	buf/buf0buf.cc	/^void buf_must_be_all_freed(void) {$/;"	f
buf_must_be_all_freed_instance	buf/buf0buf.cc	/^static void buf_must_be_all_freed_instance(buf_pool_t *buf_pool) {$/;"	f	file:
buf_page_create	buf/buf0buf.cc	/^buf_block_t *buf_page_create(const page_id_t &page_id,$/;"	f
buf_page_desc_t	handler/i_s.cc	/^struct buf_page_desc_t {$/;"	s	file:
buf_page_free_descriptor	buf/buf0buf.cc	/^void buf_page_free_descriptor(buf_page_t *bpage) {$/;"	f
buf_page_get	include/buf0buf.h	363;"	d
buf_page_get_also_watch	include/buf0buf.h	1083;"	d
buf_page_get_gen	buf/buf0buf.cc	/^buf_block_t *buf_page_get_gen(const page_id_t &page_id,$/;"	f
buf_page_get_known_nowait	buf/buf0buf.cc	/^bool buf_page_get_known_nowait(ulint rw_latch, buf_block_t *block,$/;"	f
buf_page_get_with_no_latch	include/buf0buf.h	371;"	d
buf_page_get_zip	buf/buf0buf.cc	/^buf_page_t *buf_page_get_zip(const page_id_t &page_id,$/;"	f
buf_page_hash_get	include/buf0buf.h	1081;"	d
buf_page_hash_get_s_locked	include/buf0buf.h	1077;"	d
buf_page_hash_get_x_locked	include/buf0buf.h	1079;"	d
buf_page_hash_lock_get	include/buf0buf.h	2490;"	d
buf_page_hash_lock_held_s	include/buf0buf.h	2503;"	d
buf_page_hash_lock_held_s	include/buf0buf.h	2524;"	d
buf_page_hash_lock_held_s_or_x	include/buf0buf.h	2511;"	d
buf_page_hash_lock_held_s_or_x	include/buf0buf.h	2526;"	d
buf_page_hash_lock_held_x	include/buf0buf.h	2507;"	d
buf_page_hash_lock_held_x	include/buf0buf.h	2525;"	d
buf_page_hash_lock_s_confirm	include/buf0buf.h	2494;"	d
buf_page_hash_lock_x_confirm	include/buf0buf.h	2497;"	d
buf_page_init	buf/buf0buf.cc	/^static void buf_page_init(buf_pool_t *buf_pool, const page_id_t &page_id,$/;"	f	file:
buf_page_init_for_read	buf/buf0buf.cc	/^buf_page_t *buf_page_init_for_read(dberr_t *err, ulint mode,$/;"	f
buf_page_io_complete	buf/buf0buf.cc	/^bool buf_page_io_complete(buf_page_t *bpage, bool evict) {$/;"	f
buf_page_is_zeroes	buf/buf.cc	/^bool buf_page_is_zeroes(const byte *read_buf, const page_size_t &page_size) {$/;"	f
buf_page_lsn_check	buf/checksum.cc	/^inline void buf_page_lsn_check(bool check_lsn, const byte *read_buf) {$/;"	f
buf_page_make_old	buf/buf0buf.cc	/^void buf_page_make_old(buf_page_t *bpage) {$/;"	f
buf_page_make_young	buf/buf0buf.cc	/^void buf_page_make_young(buf_page_t *bpage) {$/;"	f
buf_page_make_young_if_needed	buf/buf0buf.cc	/^static void buf_page_make_young_if_needed(buf_page_t *bpage) {$/;"	f	file:
buf_page_monitor	buf/buf0buf.cc	/^static void buf_page_monitor($/;"	f	file:
buf_page_mutex_enter	include/buf0buf.h	2478;"	d
buf_page_mutex_exit	include/buf0buf.h	2484;"	d
buf_page_optimistic_get	buf/buf0buf.cc	/^bool buf_page_optimistic_get(ulint rw_latch, buf_block_t *block,$/;"	f
buf_page_print	buf/buf0buf.cc	/^void buf_page_print(const byte *read_buf, const page_size_t &page_size,$/;"	f
buf_page_print_flags	include/buf0buf.h	/^enum buf_page_print_flags {$/;"	g	class:Cache_hint
buf_page_realloc	buf/buf0buf.cc	/^static bool buf_page_realloc(buf_pool_t *buf_pool, buf_block_t *block) {$/;"	f	file:
buf_page_reset_file_page_was_freed	buf/buf0buf.cc	/^buf_page_t *buf_page_reset_file_page_was_freed(const page_id_t &page_id) {$/;"	f
buf_page_set_file_page_was_freed	buf/buf0buf.cc	/^buf_page_t *buf_page_set_file_page_was_freed(const page_id_t &page_id) {$/;"	f
buf_page_t	include/buf0buf.h	/^  buf_page_t(const buf_page_t &other)$/;"	f	class:Cache_hint::buf_page_t
buf_page_t	include/buf0buf.h	/^class buf_page_t {$/;"	c	class:Cache_hint
buf_page_try_get	include/buf0buf.h	420;"	d
buf_page_try_get_func	buf/buf0buf.cc	/^const buf_block_t *buf_page_try_get_func(const page_id_t &page_id,$/;"	f
buf_pool_LRU_list_mutex_key	sync/sync0sync.cc	/^mysql_pfs_key_t buf_pool_LRU_list_mutex_key;$/;"	v
buf_pool_adjust_chunk_unit	buf/buf0buf.cc	/^ulonglong buf_pool_adjust_chunk_unit(ulonglong size) {$/;"	f
buf_pool_check_no_pending_io	buf/buf0buf.cc	/^ulint buf_pool_check_no_pending_io(void) {$/;"	f
buf_pool_chunk_map_t	buf/buf0buf.cc	/^    buf_pool_chunk_map_t;$/;"	t	file:
buf_pool_chunks_mutex_key	sync/sync0sync.cc	/^mysql_pfs_key_t buf_pool_chunks_mutex_key;$/;"	v
buf_pool_clear_hash_index	buf/buf0buf.cc	/^void buf_pool_clear_hash_index(void) {$/;"	f
buf_pool_contains_zip	buf/buf0buf.cc	/^buf_block_t *buf_pool_contains_zip(buf_pool_t *buf_pool, const void *data) {$/;"	f
buf_pool_create	buf/buf0buf.cc	/^static void buf_pool_create(buf_pool_t *buf_pool, ulint buf_pool_size,$/;"	f	file:
buf_pool_flush_state_mutex_key	sync/sync0sync.cc	/^mysql_pfs_key_t buf_pool_flush_state_mutex_key;$/;"	v
buf_pool_flushed	include/srv0srv.h	/^  ulint_ctr_1_t buf_pool_flushed;$/;"	m	struct:srv_stats_t
buf_pool_free	buf/buf0buf.cc	/^static void buf_pool_free() {$/;"	f	file:
buf_pool_free_all	buf/buf0buf.cc	/^void buf_pool_free_all() {$/;"	f
buf_pool_free_instance	buf/buf0buf.cc	/^static void buf_pool_free_instance(buf_pool_t *buf_pool) {$/;"	f	file:
buf_pool_free_list_mutex_key	sync/sync0sync.cc	/^mysql_pfs_key_t buf_pool_free_list_mutex_key;$/;"	v
buf_pool_get	buf/buf0buf.cc	/^        m_buf_pool(buf_pool_get(m_page_id)) {}$/;"	f	struct:Buf_fetch
buf_pool_get_curr_size	log/log0recv.cc	173;"	d	file:
buf_pool_get_dirty_pages_count	buf/buf0flu.cc	/^ulint buf_pool_get_dirty_pages_count($/;"	f
buf_pool_get_oldest_modification_approx	buf/buf0buf.cc	/^lsn_t buf_pool_get_oldest_modification_approx(void) {$/;"	f
buf_pool_get_oldest_modification_lwm	buf/buf0buf.cc	/^lsn_t buf_pool_get_oldest_modification_lwm(void) {$/;"	f
buf_pool_index	include/buf0buf.h	/^  uint8_t buf_pool_index;$/;"	m	class:Cache_hint::buf_page_t
buf_pool_info_t	include/buf0buf.h	/^struct buf_pool_info_t {$/;"	s	class:Cache_hint
buf_pool_init	buf/buf0buf.cc	/^dberr_t buf_pool_init(ulint total_size, ulint n_instances) {$/;"	f
buf_pool_invalidate	buf/buf0buf.cc	/^void buf_pool_invalidate(void) {$/;"	f
buf_pool_invalidate_instance	buf/buf0buf.cc	/^static void buf_pool_invalidate_instance(buf_pool_t *buf_pool) {$/;"	f	file:
buf_pool_ptr	buf/buf0buf.cc	/^buf_pool_t *buf_pool_ptr;$/;"	v
buf_pool_reads	include/srv0srv.h	/^  ulint_ctr_1_t buf_pool_reads;$/;"	m	struct:srv_stats_t
buf_pool_register_chunk	buf/buf0buf.cc	/^static void buf_pool_register_chunk(buf_chunk_t *chunk) {$/;"	f	file:
buf_pool_resize	buf/buf0buf.cc	/^static void buf_pool_resize() {$/;"	f	file:
buf_pool_resize_chunk_make_null	buf/buf0buf.cc	/^static void buf_pool_resize_chunk_make_null(buf_chunk_t **new_chunks) {$/;"	f	file:
buf_pool_resize_hash	buf/buf0buf.cc	/^static void buf_pool_resize_hash(buf_pool_t *buf_pool) {$/;"	f	file:
buf_pool_resizing	buf/buf0buf.cc	/^volatile bool buf_pool_resizing;$/;"	v
buf_pool_set_sizes	buf/buf0buf.cc	/^static void buf_pool_set_sizes(void) {$/;"	f	file:
buf_pool_should_madvise	buf/buf0buf.cc	/^static bool buf_pool_should_madvise = false;$/;"	v	file:
buf_pool_stat_t	include/buf0buf.h	/^struct buf_pool_stat_t {$/;"	s	class:Cache_hint
buf_pool_t	include/buf0buf.h	/^struct buf_pool_t {$/;"	s	class:Cache_hint
buf_pool_update_madvise	buf/buf0buf.cc	/^void buf_pool_update_madvise() {$/;"	f
buf_pool_validate_instance	buf/buf0buf.cc	/^static ibool buf_pool_validate_instance(buf_pool_t *buf_pool) {$/;"	f	file:
buf_pool_wait_free	include/srv0srv.h	/^  ulint_ctr_1_t buf_pool_wait_free;$/;"	m	struct:srv_stats_t
buf_pool_watch_is_sentinel	buf/buf0buf.cc	/^ibool buf_pool_watch_is_sentinel(const buf_pool_t *buf_pool,$/;"	f
buf_pool_watch_occurred	buf/buf0buf.cc	/^ibool buf_pool_watch_occurred(const page_id_t &page_id) {$/;"	f
buf_pool_watch_remove	buf/buf0buf.cc	/^static void buf_pool_watch_remove(buf_pool_t *buf_pool, buf_page_t *watch) {$/;"	f	file:
buf_pool_watch_set	buf/buf0buf.cc	/^static buf_page_t *buf_pool_watch_set(const page_id_t &page_id,$/;"	f	file:
buf_pool_watch_unset	buf/buf0buf.cc	/^void buf_pool_watch_unset(const page_id_t &page_id) {$/;"	f
buf_pool_withdraw_blocks	buf/buf0buf.cc	/^static bool buf_pool_withdraw_blocks(buf_pool_t *buf_pool) {$/;"	f	file:
buf_pool_write_requests	include/srv0srv.h	/^  ulint_ctr_1_t buf_pool_write_requests;$/;"	m	struct:srv_stats_t
buf_pool_zip_free_mutex_key	sync/sync0sync.cc	/^mysql_pfs_key_t buf_pool_zip_free_mutex_key;$/;"	v
buf_pool_zip_hash_mutex_key	sync/sync0sync.cc	/^mysql_pfs_key_t buf_pool_zip_hash_mutex_key;$/;"	v
buf_pool_zip_mutex_key	sync/sync0sync.cc	/^mysql_pfs_key_t buf_pool_zip_mutex_key;$/;"	v
buf_pools_list_size_t	include/buf0buf.h	/^struct buf_pools_list_size_t {$/;"	s	class:Cache_hint
buf_print	buf/buf0buf.cc	/^void buf_print(void) {$/;"	f
buf_print_instance	buf/buf0buf.cc	/^static void buf_print_instance(buf_pool_t *buf_pool) {$/;"	f	file:
buf_print_io	buf/buf0buf.cc	/^void buf_print_io(FILE *file) \/*!< in\/out: buffer where to print *\/$/;"	f
buf_print_io_instance	buf/buf0buf.cc	/^static void buf_print_io_instance($/;"	f	file:
buf_read_ahead_linear	buf/buf0rea.cc	/^ulint buf_read_ahead_linear(const page_id_t &page_id,$/;"	f
buf_read_ahead_random	buf/buf0rea.cc	/^ulint buf_read_ahead_random(const page_id_t &page_id,$/;"	f
buf_read_ibuf_merge_pages	buf/buf0rea.cc	/^void buf_read_ibuf_merge_pages(bool sync, const space_id_t *space_ids,$/;"	f
buf_read_page	buf/buf0rea.cc	/^bool buf_read_page(const page_id_t &page_id, const page_size_t &page_size) {$/;"	f
buf_read_page_background	buf/buf0rea.cc	/^bool buf_read_page_background(const page_id_t &page_id,$/;"	f
buf_read_page_handle_error	buf/buf0buf.cc	/^void buf_read_page_handle_error(buf_page_t *bpage) {$/;"	f
buf_read_page_low	buf/buf0rea.cc	/^ulint buf_read_page_low(dberr_t *err, bool sync, ulint type, ulint mode,$/;"	f
buf_read_recv_pages	buf/buf0rea.cc	/^void buf_read_recv_pages(bool sync, space_id_t space_id,$/;"	f
buf_refresh_io_stats	buf/buf0buf.cc	/^static void buf_refresh_io_stats(buf_pool_t *buf_pool) {$/;"	f	file:
buf_refresh_io_stats_all	buf/buf0buf.cc	/^void buf_refresh_io_stats_all(void) {$/;"	f
buf_relocate	buf/buf0buf.cc	/^static void buf_relocate(buf_page_t *bpage, buf_page_t *dpage) {$/;"	f	file:
buf_remove_t	include/buf0types.h	/^enum buf_remove_t {$/;"	g
buf_resize_status	buf/buf0buf.cc	/^static void buf_resize_status(const char *fmt, ...) {$/;"	f	file:
buf_resize_thread	buf/buf0buf.cc	/^void buf_resize_thread() {$/;"	f
buf_resize_thread_key	srv/srv0start.cc	/^mysql_pfs_key_t buf_resize_thread_key;$/;"	v
buf_stat_per_index	buf/buf0buf.cc	/^buf_stat_per_index_t *buf_stat_per_index;$/;"	v
buf_stat_per_index_t	include/buf0stats.h	/^  buf_stat_per_index_t() {$/;"	f	class:buf_stat_per_index_t
buf_stat_per_index_t	include/buf0stats.h	/^class buf_stat_per_index_t {$/;"	c
buf_stats_aggregate_pool_info	buf/buf0buf.cc	/^static void buf_stats_aggregate_pool_info($/;"	f	file:
buf_stats_get_pool_info	buf/buf0buf.cc	/^void buf_stats_get_pool_info($/;"	f
buf_unzip_LRU_add_block	buf/buf0lru.cc	/^void buf_unzip_LRU_add_block(buf_block_t *block, ibool old) {$/;"	f
buf_unzip_LRU_remove_block_if_needed	buf/buf0lru.cc	/^static void buf_unzip_LRU_remove_block_if_needed(buf_page_t *bpage) {$/;"	f	file:
buf_validate	buf/buf0buf.cc	/^ibool buf_validate(void) {$/;"	f
buf_wait_for_read	buf/buf0buf.cc	/^static void buf_wait_for_read(buf_block_t *block) {$/;"	f	file:
buf_zip_decompress	buf/buf0buf.cc	/^ibool buf_zip_decompress(buf_block_t *block, \/*!< in\/out: block *\/$/;"	f
buff	log/log0meb.cc	/^  char buff[STRING_BUFFER_USUAL_SIZE];$/;"	m	struct:meb::value	file:
buffer_block_mutex_key	sync/sync0sync.cc	/^mysql_pfs_key_t buffer_block_mutex_key;$/;"	v
buffer_end	row/row0pread-histogram.cc	/^void Histogram_sampler::buffer_end() {$/;"	f	class:Histogram_sampler
buffer_fix_block_if_still_valid	buf/buf0block_hint.cc	/^void Block_hint::buffer_fix_block_if_still_valid() {$/;"	f	class:buf::Block_hint
buffer_next	row/row0pread-histogram.cc	/^dberr_t Histogram_sampler::buffer_next() {$/;"	f	class:Histogram_sampler
buffer_unfix_block_if_needed	buf/buf0block_hint.cc	/^void Block_hint::buffer_unfix_block_if_needed(buf_block_t *block) {$/;"	f	class:buf::Block_hint
bufp	include/gis0type.h	/^  byte *bufp; \/*!< aligned buffer point *\/$/;"	m	struct:matched_rec
build_57_partition	dict/dict0dd.cc	/^void build_57_partition(const dd::Partition *dd_part, std::string &partition) {$/;"	f	namespace:dict_name
build_active_file_name	arch/arch0page.cc	/^dberr_t Arch_Group::build_active_file_name() {$/;"	f	class:Arch_Group
build_descriptor	clone/clone0clone.cc	/^void Clone_Handle::build_descriptor(Clone_Desc_Locator *loc_desc) {$/;"	f	class:Clone_Handle
build_dir_name	arch/arch0arch.cc	/^void Arch_File_Ctx::build_dir_name(lsn_t dir_lsn, char *buffer, uint length) {$/;"	f	class:Arch_File_Ctx
build_durable_file_name	arch/arch0page.cc	/^dberr_t Arch_Group::build_durable_file_name() {$/;"	f	class:Arch_Group
build_file	clone/clone0copy.cc	/^Clone_File_Meta *Clone_Snapshot::build_file(const char *file_name,$/;"	f	class:Clone_Snapshot
build_file_path	clone/clone0apply.cc	/^int Clone_Snapshot::build_file_path(const char *data_dir, ulint alloc_size,$/;"	f	class:Clone_Snapshot
build_name	arch/arch0arch.cc	/^void Arch_File_Ctx::build_name(uint idx, lsn_t dir_lsn, char *buffer,$/;"	f	class:Arch_File_Ctx
build_partition	dict/dict0dd.cc	/^void build_partition(const dd::Partition *dd_part, std::string &partition) {$/;"	f	namespace:dict_name
build_partition_low	dict/dict0dd.cc	/^static void build_partition_low(const std::string part,$/;"	f	namespace:dict_name
build_partition_name	handler/handler0alter.cc	/^bool alter_part::build_partition_name(const dd::Partition *dd_part, bool temp,$/;"	f	class:alter_part
build_table	dict/dict0dd.cc	/^void build_table(const std::string &schema, const std::string &table,$/;"	f	namespace:dict_name
build_template	handler/ha_innodb.cc	/^void ha_innobase::build_template(bool whole_row) {$/;"	f	class:ha_innobase
build_template_field	handler/ha_innodb.cc	/^static mysql_row_templ_t *build_template_field($/;"	f	file:
build_template_needs_field	handler/ha_innodb.cc	/^static const Field *build_template_needs_field($/;"	f	file:
build_template_needs_field_in_icp	handler/ha_innodb.cc	/^inline bool build_template_needs_field_in_icp($/;"	f
bump_version	fil/fil0fil.cc	/^void fil_space_t::bump_version() {$/;"	f	class:fil_space_t
bytes	include/buf0buf.h	/^    byte bytes[FIL_PAGE_DATA];$/;"	m	union:Cache_hint::buf_buddy_free_t::__anon15
bytes	row/row0log.cc	/^  ulint bytes;            \/*!< current position within block *\/$/;"	m	struct:row_log_buf_t	file:
bytes_left	include/arch0arch.h	/^  uint64_t bytes_left() const {$/;"	f	class:Arch_File_Ctx
bytes_to_ignore_before_checkpoint	include/log0recv.h	/^  ulint bytes_to_ignore_before_checkpoint;$/;"	m	struct:recv_sys_t
cache	handler/ha_innodb.h	/^namespace cache {$/;"	n	namespace:dd
cache	include/fts0fts.h	/^  fts_cache_t *cache;$/;"	m	class:fts_t
cache	include/fts0types.h	/^  fts_cache_t *cache; \/*!< The parent cache *\/$/;"	m	struct:fts_get_doc_t
cache_full	include/fts0types.h	/^  ibool cache_full;     \/*!< flag, when true it indicates that$/;"	m	struct:fts_sync_t
cache_heap	include/fts0types.h	/^  mem_heap_t *cache_heap;       \/*!< Cache Heap *\/$/;"	m	struct:fts_cache_t
cache_last_read_mutex_key	sync/sync0sync.cc	/^mysql_pfs_key_t cache_last_read_mutex_key;$/;"	v
cache_select_table	trx/trx0i_s.cc	/^static i_s_table_cache_t *cache_select_table($/;"	f	file:
cache_tuples	row/row0merge.cc	/^void index_tuple_info_t::cache_tuples() {$/;"	f	class:index_tuple_info_t
cached	include/dict0mem.h	/^  unsigned cached : 1; \/*!< TRUE if the index object is in the$/;"	m	struct:dict_index_t
cached	include/dict0mem.h	/^  unsigned cached : 1;$/;"	m	struct:dict_table_t
cached_clust_rec	row/row0sel.cc	/^  const rec_t *cached_clust_rec;$/;"	m	class:Row_sel_get_clust_rec_for_mysql	file:
cached_old_vers	row/row0sel.cc	/^  rec_t *cached_old_vers;$/;"	m	class:Row_sel_get_clust_rec_for_mysql	file:
cached_stopword	include/fts0types.h	/^  ib_rbt_t *cached_stopword; \/*!< This stores all active stopwords *\/$/;"	m	struct:fts_stopword_t
calc_row_difference	handler/ha_innodb.cc	/^static dberr_t calc_row_difference($/;"	f	file:
calc_total_pages	include/lob0zip.h	/^  ulint calc_total_pages() {$/;"	f	class:lob::zInserter
calc_zip_checksum	buf/checksum.cc	/^uint32_t BlockReporter::calc_zip_checksum($/;"	f	class:BlockReporter
calculate_delete_length_stat	handler/ha_innodb.cc	/^static void calculate_delete_length_stat(const dict_table_t *ib_table,$/;"	f	file:
calculate_index_size_stats	handler/ha_innodb.cc	/^static void calculate_index_size_stats(const dict_table_t *ib_table,$/;"	f	file:
calculate_not_full_n_used	fsp/fsp0fsp.cc	/^page_no_t File_segment_inode::calculate_not_full_n_used() {$/;"	f	class:File_segment_inode
caller	include/que0que.h	/^  que_thr_t *caller;   \/*!< pointer to a possible calling query$/;"	m	struct:que_fork_t
can_auto_extend_last_file	include/fsp0sysspace.h	/^  ulint can_auto_extend_last_file() const { return (m_auto_extend_last_file); }$/;"	f	class:SysTablespace
can_be_evicted	include/dict0mem.h	/^  unsigned can_be_evicted : 1;$/;"	m	struct:dict_table_t
can_be_partially_updated	include/lob0first.h	/^  bool can_be_partially_updated() {$/;"	f	struct:lob::first_page_t
can_be_partially_updated	include/zlob0first.h	/^  bool can_be_partially_updated() {$/;"	f	struct:lob::z_first_page_t
can_be_purged	include/lob0index.h	/^  bool can_be_purged(trx_id_t trxid, undo_no_t undo_no) {$/;"	f	struct:lob::index_entry_t
can_be_purged	include/zlob0index.h	/^  bool can_be_purged(trx_id_t trxid, undo_no_t undo_no) {$/;"	f	struct:lob::z_index_entry_t
can_cache_be_updated	trx/trx0i_s.cc	/^static ibool can_cache_be_updated(trx_i_s_cache_t *cache) \/*!< in: cache *\/$/;"	f	file:
can_data_fit	lob/lob0impl.cc	/^bool z_frag_page_t::can_data_fit(dict_index_t *index, ulint data_size) {$/;"	f	class:lob::z_frag_page_t
can_decompress	os/os0file.cc	/^  static bool can_decompress(const Slot *slot) {$/;"	f	class:AIOHandler	file:
can_free	lob/lob0del.cc	/^bool Deleter::can_free() const {$/;"	f	class:lob::Deleter
can_get_updated	include/row0sel.h	/^  ibool can_get_updated;       \/*!< this is TRUE if the select$/;"	m	struct:sel_node_t
can_leave	include/ut0stateful_latching_rules.h	/^  bool can_leave(const latches_set_t &forbiden_latches,$/;"	f	class:ut::Stateful_latching_rules
can_prefetch_records	row/row0mysql.cc	/^bool row_prebuilt_t::can_prefetch_records() const {$/;"	f	class:row_prebuilt_t
can_rollback	include/lob0index.h	/^  bool can_rollback(trx_id_t trxid, undo_no_t undo_no) {$/;"	f	struct:lob::index_entry_t
can_rollback	include/zlob0index.h	/^  bool can_rollback(trx_id_t trxid, undo_no_t undo_no) {$/;"	f	struct:lob::z_index_entry_t
capacity	include/clone0desc.h	/^  size_t capacity() const { return (8 * size()); }$/;"	f	class:Chnunk_Bitmap
capacity	include/data0data.h	/^  const ulint capacity;    \/*!< fields array size *\/$/;"	m	struct:big_rec_t
capacity	include/read0types.h	/^    ulint capacity() const { return (m_reserved); }$/;"	f	class:ReadView::ids_t
capacity	include/ut0bitset.h	/^  size_t capacity() const { return (m_capacity); }$/;"	f	class:Bitset
capacity	include/ut0link_buf.h	/^inline size_t Link_buf<Position>::capacity() const {$/;"	f	class:Link_buf
cascade_heap	include/row0upd.h	/^  mem_heap_t *cascade_heap;$/;"	m	struct:upd_node_t
cascade_node	include/row0upd.h	/^  upd_node_t *cascade_node; \/* NULL or an update node template which$/;"	m	struct:upd_node_t
cells	include/hash0hash.h	/^  hash_cell_t *cells; \/*!< pointer to cell array *\/$/;"	m	struct:hash_table_t
cells	include/sync0arr_impl.h	/^  sync_cell_t *cells;    \/*!< pointer to wait array *\/$/;"	m	struct:sync_array_t
cfile_name	include/sync0rw.h	/^  const char *cfile_name;$/;"	m	struct:rw_lock_t
change_active_index	handler/ha_innodb.cc	/^int ha_innobase::change_active_index($/;"	f	class:ha_innobase
change_active_index	handler/ha_innopart.cc	/^int ha_innopart::change_active_index(uint part_id, uint keynr) {$/;"	f	class:ha_innopart
change_phase	include/clone0monitor.h	/^  void change_phase() {$/;"	f	class:Clone_Monitor
change_phase	include/ut0stage.h	/^  void change_phase() {$/;"	f	class:ut_stage_alter_ts
change_phase	include/ut0stage.h	/^  void change_phase() {}$/;"	f	class:ut_stage_alter_ts
change_phase	include/ut0stage.h	/^inline void ut_stage_alter_t::change_phase(const PSI_stage_info *new_stage) {$/;"	f	class:ut_stage_alter_t
change_state	clone/clone0clone.cc	/^int Clone_Task_Manager::change_state(Clone_Task *task,$/;"	f	class:Clone_Task_Manager
change_state	clone/clone0snapshot.cc	/^int Clone_Snapshot::change_state(Clone_Desc_State *state_desc,$/;"	f	class:Clone_Snapshot
charset	fts/fts0que.cc	/^  CHARSET_INFO *charset;$/;"	m	struct:fts_phrase_t	file:
charset	include/api0api.h	/^  ib_charset_t *charset; \/*!< Column charset *\/$/;"	m	struct:__anon26
charset	include/fts0ast.h	/^  CHARSET_INFO *charset; \/*!< charset used for$/;"	m	struct:fts_ast_state_t
charset	include/fts0fts.h	/^  CHARSET_INFO *charset;     \/*!< charset info if it is for FTS$/;"	m	struct:fts_table_t
charset	include/fts0types.h	/^  CHARSET_INFO *charset;     \/*!< charset for stopword *\/$/;"	m	struct:fts_stopword_t
charset	include/fts0types.h	/^  CHARSET_INFO *charset; \/*!< Document's charset info *\/$/;"	m	struct:fts_doc_t
charset	include/fts0types.h	/^  CHARSET_INFO *charset; \/*!< charset *\/$/;"	m	struct:fts_index_cache_t
charset	include/row0ftsort.h	/^  CHARSET_INFO *charset; \/*!< charset info *\/$/;"	m	struct:fts_psort_insert
charset	include/row0mysql.h	/^  ulint charset;                \/*!< MySQL charset-collation code$/;"	m	struct:mysql_row_templ_t
check	handler/ha_innodb.cc	/^dberr_t Compression::check(const char *algorithm, Compression *compression) {$/;"	f	class:Compression
check	handler/ha_innodb.cc	/^int ha_innobase::check(THD *thd,                \/*!< in: user thread handle *\/$/;"	f	class:ha_innobase
check	handler/ha_innodb.cc	/^void Validate_files::check(const Const_iter &begin, const Const_iter &end,$/;"	f	class:Validate_files
check	handler/ha_innopart.cc	/^int ha_innopart::check(THD *thd, HA_CHECK_OPT *check_opt) {$/;"	f	class:ha_innopart
check_ack	include/clone0clone.h	/^  bool check_ack(const Clone_Desc_State *state_desc) {$/;"	f	class:Clone_Task_Manager
check_active_clone	clone/clone0clone.cc	/^bool Clone_Sys::check_active_clone(bool print_alert) {$/;"	f	class:Clone_Sys
check_col_exists_in_indexes	handler/handler0alter.cc	/^static bool check_col_exists_in_indexes(const dict_table_t *table, ulint col_no,$/;"	f	file:
check_completed	os/os0file.cc	/^  Slot *check_completed(ulint *n_reserved) {$/;"	f	class:SimulatedAIOHandler
check_compress	clone/clone0repl.cc	/^bool Clone_persist_gtid::check_compress() {$/;"	f	class:Clone_persist_gtid
check_duplicate_undo_no	row/row0purge.cc	/^bool purge_node_t::check_duplicate_undo_no() const {$/;"	f	class:purge_node_t
check_error	include/clone0clone.h	/^  int check_error(THD *thd) {$/;"	f	class:Clone_Handle
check_file_spec	fsp/fsp0sysspace.cc	/^dberr_t SysTablespace::check_file_spec(bool create_new_db,$/;"	f	class:SysTablespace
check_file_status	fsp/fsp0sysspace.cc	/^dberr_t SysTablespace::check_file_status(const Datafile &file,$/;"	f	class:SysTablespace
check_flushed	include/clone0repl.h	/^  bool check_flushed(uint64_t request_number) const {$/;"	f	class:Clone_persist_gtid
check_foreigns	include/trx0trx.h	/^  bool check_foreigns;   \/*!< normally TRUE, but if the user$/;"	m	struct:trx_t
check_gtid_commit	clone/clone0repl.cc	/^bool Clone_persist_gtid::check_gtid_commit(THD *thd, bool found_gtid,$/;"	f	class:Clone_persist_gtid
check_gtid_prepare	clone/clone0repl.cc	/^bool Clone_persist_gtid::check_gtid_prepare(THD *thd, trx_t *trx,$/;"	f	class:Clone_persist_gtid
check_gtid_rollback	clone/clone0repl.cc	/^bool Clone_persist_gtid::check_gtid_rollback(THD *thd, trx_t *trx,$/;"	f	class:Clone_persist_gtid
check_if_incompatible_data	handler/ha_innodb.cc	/^bool ha_innobase::check_if_incompatible_data(HA_CREATE_INFO *info,$/;"	f	class:ha_innobase
check_if_supported_inplace_alter	handler/handler0alter.cc	/^enum_alter_inplace_result ha_innobase::check_if_supported_inplace_alter($/;"	f	class:ha_innobase
check_if_supported_inplace_alter	handler/handler0alter.cc	/^enum_alter_inplace_result ha_innopart::check_if_supported_inplace_alter($/;"	f	class:ha_innopart
check_interrupted	buf/buf0flu.cc	/^bool FlushObserver::check_interrupted() {$/;"	f	class:FlushObserver
check_is_not_latching	mtr/mtr0mtr.cc	/^void mtr_t::check_is_not_latching() const {$/;"	f	class:mtr_t
check_max_gtid_threshold	clone/clone0repl.cc	/^bool Clone_persist_gtid::check_max_gtid_threshold() {$/;"	f	class:Clone_persist_gtid
check_missing_tablespaces	fil/fil0fil.cc	/^bool Fil_system::check_missing_tablespaces() {$/;"	f	class:Fil_system
check_my_thread_mtrs_are_not_latching	include/mtr0mtr.h	/^  static void check_my_thread_mtrs_are_not_latching() {$/;"	f	struct:mtr_t
check_name	include/dict0dict.h	/^enum check_name {$/;"	g
check_nolog_and_mark	mtr/mtr0mtr.cc	/^void mtr_t::check_nolog_and_mark() {$/;"	f	class:mtr_t
check_nolog_and_unmark	mtr/mtr0mtr.cc	/^void mtr_t::check_nolog_and_unmark() {$/;"	f	class:mtr_t
check_partition	dict/dict0dd.cc	/^static bool check_partition(const std::string &dict_name, bool sub_part,$/;"	f	namespace:dict_name
check_path	fil/fil0fil.cc	/^  bool check_path(const std::string &path) const {$/;"	f	class:Fil_system
check_pending	os/os0file.cc	/^ulint SimulatedAIOHandler::check_pending(ulint global_segment,$/;"	f	class:SimulatedAIOHandler
check_pending_io	fil/fil0fil.cc	/^ulint Fil_shard::check_pending_io(const fil_space_t *space,$/;"	f	class:Fil_shard
check_read	os/os0file.cc	/^dberr_t AIOHandler::check_read(Slot *slot, ulint n_bytes) {$/;"	f	class:AIOHandler
check_redolog	include/lob0lob.h	/^  void check_redolog() {$/;"	f	class:lob::BtrContext
check_redolog_bulk	lob/lob0lob.cc	/^void BtrContext::check_redolog_bulk() {$/;"	f	class:lob::BtrContext
check_redolog_normal	lob/lob0lob.cc	/^void BtrContext::check_redolog_normal() {$/;"	f	class:lob::BtrContext
check_set_state	arch/arch0log.cc	/^Arch_State Arch_Log_Sys::check_set_state(bool is_abort, lsn_t *archived_lsn,$/;"	f	class:Arch_Log_Sys
check_size	fsp/fsp0sysspace.cc	/^dberr_t SysTablespace::check_size(Datafile &file) {$/;"	f	class:SysTablespace
check_space	clone/clone0apply.cc	/^int Clone_Handle::check_space() {$/;"	f	class:Clone_Handle
check_space_id	lob/lob0lob.cc	/^bool ref_t::check_space_id(dict_index_t *index) const {$/;"	f	class:lob::ref_t
check_state	buf/buf0buf.cc	/^dberr_t Buf_fetch<T>::check_state(buf_block_t *&block) {$/;"	f	class:Buf_fetch
check_state	clone/clone0clone.cc	/^int Clone_Task_Manager::check_state(Clone_Task *task, Snapshot_State new_state,$/;"	f	class:Clone_Task_Manager
check_state	clone/clone0snapshot.cc	/^uint Clone_Snapshot::check_state(Snapshot_State new_state, bool exit_on_wait) {$/;"	f	class:Clone_Snapshot
check_state	os/os0file.cc	/^dberr_t LinuxAIOHandler::check_state(Slot *slot) {$/;"	f	class:LinuxAIOHandler
check_timer	include/trx0purge.h	/^  int64_t check_timer() const { return (m_timer.elapsed()); }$/;"	f	class:undo::Truncate
check_tmp	dict/dict0dd.cc	/^static bool check_tmp(const std::string &dict_name, size_t &position) {$/;"	f	namespace:dict_name
check_trx_exists	handler/ha_innodb.cc	/^trx_t *check_trx_exists(THD *thd) \/*!< in: user thread handle *\/$/;"	f
check_trx_id_sanity	trx/trx0sys.cc	/^void ReadView::check_trx_id_sanity(trx_id_t id, const table_name_t &name) {$/;"	f	class:ReadView
check_trx_state	include/trx0trx.h	473;"	d
check_unique_secondary	include/trx0trx.h	/^  bool check_unique_secondary;$/;"	m	struct:trx_t
check_v_col_in_order	handler/handler0alter.cc	/^static bool check_v_col_in_order(const TABLE *table, const TABLE *altered_table,$/;"	f	file:
check_visibility	row/row0pread.cc	/^bool Parallel_reader::Scan_ctx::check_visibility(const rec_t *&rec,$/;"	f	class:Parallel_reader::Scan_ctx
checkpoint_disabled_update	handler/ha_innodb.cc	/^static void checkpoint_disabled_update(THD *thd, SYS_VAR *var, void *var_ptr,$/;"	f	file:
checkpoint_lsn	include/log0recv.h	/^  lsn_t checkpoint_lsn;$/;"	m	struct:recv_sys_t
checkpoint_no_t	include/log0types.h	/^typedef uint64_t checkpoint_no_t;$/;"	t
child	include/que0que.h	/^  que_node_t *child;     \/*!< graph child node *\/$/;"	m	struct:que_thr_t
child_no	include/gis0type.h	/^  page_no_t child_no; \/*!< child page num if for parent$/;"	m	struct:node_visit
child_status	include/row0ftsort.h	/^  ulint child_status;               \/*!< child thread status *\/$/;"	m	struct:fts_psort_t
choose_desc_version	clone/clone0desc.cc	/^uint choose_desc_version(const byte *ref_loc) {$/;"	f
chunk_size	include/clone0snapshot.h	/^  uint chunk_size() {$/;"	f	class:Clone_Snapshot
chunks	include/buf0buf.h	/^  buf_chunk_t *chunks;$/;"	m	struct:Cache_hint::buf_pool_t
chunks	trx/trx0i_s.cc	/^  i_s_mem_chunk_t chunks[MEM_CHUNKS_IN_TABLE_CACHE]; \/*!< array of$/;"	m	struct:i_s_table_cache_t	file:
chunks_mutex	include/buf0buf.h	/^  BufListMutex chunks_mutex;$/;"	m	struct:Cache_hint::buf_pool_t
chunks_old	include/buf0buf.h	/^  buf_chunk_t *chunks_old;$/;"	m	struct:Cache_hint::buf_pool_t
clean	arch/arch0page.cc	/^void ArchPageData::clean() {$/;"	f	class:ArchPageData
cleanup	handler/ha_innodb.cc	/^void innobase_truncate<Table>::cleanup() {$/;"	f	class:innobase_truncate
cleanup	include/dict0dd.h	/^  void cleanup() { UT_DELETE_ARRAY(m_result); }$/;"	f	class:DD_instant_col_val_coder
clear	buf/buf0block_hint.cc	/^void Block_hint::clear() { m_block = nullptr; }$/;"	f	class:buf::Block_hint
clear	fil/fil0fil.cc	/^  void clear() {$/;"	f	class:Tablespace_dirs
clear	fil/fil0fil.cc	/^  void clear() {$/;"	f	class:Tablespace_files
clear	include/lob0lob.h	/^  void clear() { m_pages.clear(); }$/;"	f	struct:lob::blob_dir_t
clear	include/read0types.h	/^    void clear() { resize(0); }$/;"	f	class:ReadView::ids_t
clear	include/trx0purge.h	/^  void clear() {$/;"	f	class:undo::Tablespaces
clear	trx/trx0rseg.cc	/^void Rsegs::clear() {$/;"	f	class:Rsegs
clear_blob_heaps	handler/ha_innopart.cc	/^void ha_innopart::clear_blob_heaps() {$/;"	f	class:ha_innopart
clear_compressed	include/os0file.h	/^  void clear_compressed() {$/;"	f	class:IORequest
clear_construction_list	trx/trx0purge.cc	/^void clear_construction_list() { s_under_construction.clear(); }$/;"	f	namespace:undo
clear_do_not_wake	include/os0file.h	/^  void clear_do_not_wake() { m_type &= ~DO_NOT_WAKE; }$/;"	f	class:IORequest
clear_encrypted	include/os0file.h	/^  void clear_encrypted() {$/;"	f	class:IORequest
clear_ins_upd_nodes	handler/ha_innopart.cc	/^void ha_innopart::clear_ins_upd_nodes() {$/;"	f	class:ha_innopart
clear_old_files	fil/fil0fil.cc	/^  void clear_old_files() { m_old_paths.clear(); }$/;"	f	class:Fil_system
clear_page_prefix	ut/ut0test.cc	/^Ret_t Tester::clear_page_prefix(const space_id_t space_id, page_no_t page_no,$/;"	f	class:ib::Tester
clear_punch_hole	include/os0file.h	/^  void clear_punch_hole() { m_type &= ~PUNCH_HOLE; }$/;"	f	class:IORequest
clear_search_tuples	include/row0mysql.h	/^  void clear_search_tuples() {$/;"	f	struct:row_prebuilt_t
client_type	include/api0api.h	/^  ib_u16_t client_type; \/*!< 16 bits of data relevant only to$/;"	m	struct:__anon26
cline	include/sync0rw.h	/^  uint16_t cline;$/;"	m	struct:rw_lock_t
clone	data/data0data.cc	/^dfield_t *dfield_t::clone(mem_heap_t *heap) {$/;"	f	class:dfield_t
clone	handler/ha_innodb.cc	/^handler *ha_innobase::clone(const char *name,   \/*!< in: table name *\/$/;"	f	class:ha_innobase
clone	handler/ha_innopart.cc	/^handler *ha_innopart::clone(const char *name, MEM_ROOT *mem_root) {$/;"	f	class:ha_innopart
clone_add_to_list_file	clone/clone0api.cc	/^int clone_add_to_list_file(const char *list_file_name, const char *file_name) {$/;"	f
clone_check_active	clone/clone0api.cc	/^bool clone_check_active() {$/;"	f
clone_check_recovery_crashpoint	clone/clone0api.cc	/^bool clone_check_recovery_crashpoint(bool is_cloned_db) {$/;"	f
clone_ddl_thread_key	srv/srv0start.cc	/^mysql_pfs_key_t clone_ddl_thread_key;$/;"	v
clone_drop_binary_logs	clone/clone0api.cc	/^static int clone_drop_binary_logs(THD *thd) {$/;"	f	file:
clone_drop_user_data	clone/clone0api.cc	/^static int clone_drop_user_data(THD *thd, bool allow_threads) {$/;"	f	file:
clone_execute_query	clone/clone0api.cc	/^static bool clone_execute_query(THD *thd, const char *sql_stmt,$/;"	f	file:
clone_files_error	clone/clone0api.cc	/^void clone_files_error() {$/;"	f
clone_files_fatal_error	clone/clone0api.cc	/^static void clone_files_fatal_error() {$/;"	f	file:
clone_files_recovery	clone/clone0api.cc	/^void clone_files_recovery(bool finished) {$/;"	f
clone_free	clone/clone0api.cc	/^void clone_free() {$/;"	f
clone_gtid_thread	clone/clone0repl.cc	/^static void clone_gtid_thread(Clone_persist_gtid *persist_gtid) {$/;"	f	file:
clone_gtid_thread_key	srv/srv0start.cc	/^mysql_pfs_key_t clone_gtid_thread_key;$/;"	v
clone_init	clone/clone0api.cc	/^dberr_t clone_init() {$/;"	f
clone_init_compression	clone/clone0api.cc	/^static void clone_init_compression(THD *thd) {$/;"	f	file:
clone_init_list_files	clone/clone0api.cc	/^void clone_init_list_files() {$/;"	f
clone_init_recovery_status	clone/clone0api.cc	/^static void clone_init_recovery_status(bool replace) {$/;"	f	file:
clone_init_tablespaces	clone/clone0api.cc	/^static void clone_init_tablespaces(THD *thd) {$/;"	f	file:
clone_mark_abort	clone/clone0api.cc	/^bool clone_mark_abort(bool force) {$/;"	f
clone_mark_abort	include/clone0api.h	181;"	d
clone_mark_active	clone/clone0api.cc	/^void clone_mark_active() {$/;"	f
clone_mark_active	include/clone0api.h	182;"	d
clone_mark_free	clone/clone0api.cc	/^void clone_mark_free() {$/;"	f
clone_mark_wait	clone/clone0api.cc	/^bool clone_mark_wait() {$/;"	f
clone_oldest_view	read/read0read.cc	/^void MVCC::clone_oldest_view(ReadView *view) {$/;"	f	class:MVCC
clone_snapshot_mutex_key	sync/sync0sync.cc	/^mysql_pfs_key_t clone_snapshot_mutex_key;$/;"	v
clone_sys	clone/clone0clone.cc	/^Clone_Sys *clone_sys = nullptr;$/;"	v
clone_sys_mutex_key	sync/sync0sync.cc	/^mysql_pfs_key_t clone_sys_mutex_key;$/;"	v
clone_task_mutex_key	sync/sync0sync.cc	/^mysql_pfs_key_t clone_task_mutex_key;$/;"	v
clone_update_gtid_status	clone/clone0api.cc	/^void clone_update_gtid_status(std::string &gtids) {$/;"	f
clone_update_recovery_status	clone/clone0api.cc	/^static void clone_update_recovery_status(bool finished, bool is_error,$/;"	f	file:
clone_validate_locator	clone/clone0desc.cc	/^bool clone_validate_locator(const byte *desc_loc, uint desc_len) {$/;"	f
close	dict/dict0dict.cc	/^void DDTableBuffer::close() {$/;"	f	class:DDTableBuffer
close	fsp/fsp0file.cc	/^dberr_t Datafile::close() {$/;"	f	class:Datafile
close	handler/ha_innodb.cc	/^int ha_innobase::close() {$/;"	f	class:ha_innobase
close	handler/ha_innopart.cc	/^int ha_innopart::close() {$/;"	f	class:ha_innopart
close	include/arch0arch.h	/^  void close() {$/;"	f	class:Arch_File_Ctx
close	include/btr0pcur.h	/^inline void btr_pcur_t::close() {$/;"	f	class:btr_pcur_t
close	include/dyn0buf.h	/^    void close(const byte *ptr) {$/;"	f	class:dyn_buf_t::block_t
close	include/dyn0buf.h	/^  void close(const byte *ptr) {$/;"	f	class:dyn_buf_t
close	include/read0types.h	/^  void close() {$/;"	f	class:ReadView
close	srv/srv0tmp.cc	/^bool Tablespace::close() const {$/;"	f	class:ibt::Tablespace
close_all_files	fil/fil0fil.cc	/^void Fil_shard::close_all_files() {$/;"	f	class:Fil_shard
close_all_files	fil/fil0fil.cc	/^void Fil_system::close_all_files() {$/;"	f	class:Fil_system
close_all_log_files	fil/fil0fil.cc	/^void Fil_system::close_all_log_files(bool free_all) {$/;"	f	class:Fil_system
close_cursor_statement	pars/pars0grm.y	/^close_cursor_statement:$/;"	l
close_file	clone/clone0clone.cc	/^int Clone_Handle::close_file(Clone_Task *task) {$/;"	f	class:Clone_Handle
close_file	fil/fil0fil.cc	/^bool Fil_shard::close_file(space_id_t space_id) {$/;"	f	class:Fil_shard
close_file	fil/fil0fil.cc	/^void Fil_shard::close_file(fil_node_t *file, bool LRU_close) {$/;"	f	class:Fil_shard
close_file_ctxs	include/arch0arch.h	/^  void close_file_ctxs() {$/;"	f	class:Arch_Group
close_file_in_all_LRU	fil/fil0fil.cc	/^bool Fil_system::close_file_in_all_LRU(bool print_info) {$/;"	f	class:Fil_system
close_files	srv/srv0tmp.cc	/^void close_files() {$/;"	f	namespace:ibt
close_files_in_LRU	fil/fil0fil.cc	/^bool Fil_shard::close_files_in_LRU(bool print_info) {$/;"	f	class:Fil_shard
close_log_files	fil/fil0fil.cc	/^void Fil_shard::close_log_files(bool free_all) {$/;"	f	class:Fil_shard
close_table_parts	handler/ha_innopart.cc	/^void Ha_innopart_share::close_table_parts(dict_table_t **table_parts,$/;"	f	class:Ha_innopart_share
close_table_parts	handler/ha_innopart.cc	/^void Ha_innopart_share::close_table_parts(void) {$/;"	f	class:Ha_innopart_share
clust_index_was_generated	include/row0mysql.h	/^  unsigned clust_index_was_generated : 1;$/;"	m	struct:row_prebuilt_t
clust_map	include/row0sel.h	/^  ulint *clust_map;          \/*!< map telling how clust_ref is built$/;"	m	struct:plan_t
clust_pcur	include/row0mysql.h	/^  btr_pcur_t *clust_pcur; \/*!< persistent cursor used in$/;"	m	struct:row_prebuilt_t
clust_pcur	include/row0sel.h	/^  btr_pcur_t clust_pcur;     \/*!< if index is non-clustered, we use$/;"	m	struct:plan_t
clust_rec_field_no	include/row0mysql.h	/^  ulint clust_rec_field_no;     \/*!< field number of the column in an$/;"	m	struct:mysql_row_templ_t
clust_ref	include/row0mysql.h	/^  dtuple_t *clust_ref;          \/*!< prebuilt dtuple used in$/;"	m	struct:row_prebuilt_t
clust_ref	include/row0sel.h	/^  dtuple_t *clust_ref;       \/*!< the reference to the clustered$/;"	m	struct:plan_t
clustered	api/api0api.cc	/^  ibool clustered; \/*!< True if clustered index *\/$/;"	m	struct:ib_index_def_t	file:
clustered_def	pars/pars0grm.y	/^clustered_def:$/;"	l
cmp_arg	include/ut0rbt.h	/^  void *cmp_arg;                       \/* Compare func argument *\/$/;"	m	struct:ib_rbt_t
cmp_cols_are_equal	rem/rem0cmp.cc	/^bool cmp_cols_are_equal(const dict_col_t *col1, const dict_col_t *col2,$/;"	f
cmp_data	rem/rem0cmp.cc	/^inline int cmp_data(ulint mtype, ulint prtype, bool is_asc, const byte *data1,$/;"	f
cmp_data_data	rem/rem0cmp.cc	/^int cmp_data_data(ulint mtype, ulint prtype, bool is_asc, const byte *data1,$/;"	f
cmp_decimal	rem/rem0cmp.cc	/^static UNIV_COLD int cmp_decimal(const byte *a, unsigned int a_length,$/;"	f	file:
cmp_dtuple_is_prefix_of_rec	rem/rem0cmp.cc	/^bool cmp_dtuple_is_prefix_of_rec(const dtuple_t *dtuple, const rec_t *rec,$/;"	f
cmp_dtuple_rec	rem/rem0cmp.cc	/^int cmp_dtuple_rec(const dtuple_t *dtuple, const rec_t *rec,$/;"	f
cmp_dtuple_rec_with_gis	rem/rem0cmp.cc	/^int cmp_dtuple_rec_with_gis(const dtuple_t *dtuple, const rec_t *rec,$/;"	f
cmp_dtuple_rec_with_gis_internal	rem/rem0cmp.cc	/^int cmp_dtuple_rec_with_gis_internal(const dtuple_t *dtuple, const rec_t *rec,$/;"	f
cmp_dtuple_rec_with_match_bytes	rem/rem0cmp.cc	/^int cmp_dtuple_rec_with_match_bytes(const dtuple_t *dtuple, const rec_t *rec,$/;"	f
cmp_dtuple_rec_with_match_low	rem/rem0cmp.cc	/^int cmp_dtuple_rec_with_match_low(const dtuple_t *dtuple, const rec_t *rec,$/;"	f
cmp_geometry_field	rem/rem0cmp.cc	/^static int cmp_geometry_field(ulint mtype,           \/*!< in: main type *\/$/;"	f	file:
cmp_get_pad_char	rem/rem0cmp.cc	/^ulint cmp_get_pad_char(const dtype_t *type) {$/;"	f
cmp_gis_field	rem/rem0cmp.cc	/^static int cmp_gis_field($/;"	f	file:
cmp_rec_rec_simple	rem/rem0cmp.cc	/^int cmp_rec_rec_simple(const rec_t *rec1, const rec_t *rec2,$/;"	f
cmp_rec_rec_simple_field	rem/rem0cmp.cc	/^static MY_ATTRIBUTE((warn_unused_result)) int cmp_rec_rec_simple_field($/;"	f
cmp_rec_rec_with_match	rem/rem0cmp.cc	/^int cmp_rec_rec_with_match(const rec_t *rec1, const rec_t *rec2,$/;"	f
cmp_ref	handler/ha_innodb.cc	/^int ha_innobase::cmp_ref($/;"	f	class:ha_innobase
cmp_ref	handler/ha_innopart.cc	/^int ha_innopart::cmp_ref(const uchar *ref1, const uchar *ref2) const {$/;"	f	class:ha_innopart
cmp_whole_field	rem/rem0cmp.cc	/^static int cmp_whole_field(ulint mtype, ulint prtype, bool is_asc,$/;"	f	file:
cmpl_info	include/row0purge.h	/^  ulint cmpl_info;$/;"	m	struct:purge_node_t
cmpl_info	include/row0undo.h	/^  ulint cmpl_info;          \/*!< compiler analysis of an update *\/$/;"	m	struct:undo_node_t
cmpl_info	include/row0upd.h	/^  ulint cmpl_info; \/* information extracted during query$/;"	m	struct:upd_node_t
cmpl_info	include/trx0rec.h	/^  ulint cmpl_info() {$/;"	f	struct:type_cmpl_t
code	include/pars0pars.h	/^  int code; \/*!< the token code for the reserved word from$/;"	m	struct:pars_res_word_t
col	include/dict0mem.h	/^  dict_col_t *col;           \/*!< pointer to the table column *\/$/;"	m	struct:dict_field_t
col	include/dict0mem.h	/^  dict_col_t *col;$/;"	m	struct:dict_col_default_t
col	include/pars0pars.h	/^  sym_node_t *col;     \/*!< column to set *\/$/;"	m	struct:col_assign_node_t
col_assign_list	include/row0upd.h	/^  que_node_t *col_assign_list;$/;"	m	struct:upd_node_t
col_assign_node_t	include/pars0pars.h	/^struct col_assign_node_t {$/;"	s
col_def	include/dict0crea.h	/^  ins_node_t *col_def;   \/*!< child node which does the inserts$/;"	m	struct:tab_node_t
col_map	handler/handler0alter.cc	/^  const ulint *col_map;$/;"	m	struct:ha_innobase_inplace_ctx	file:
col_map	include/row0merge.h	/^  const ulint *col_map; \/*!< mapping of column numbers$/;"	m	struct:row_merge_dup_t
col_map	row/row0log.cc	/^  const ulint *col_map; \/*!< mapping of old column numbers to$/;"	m	struct:row_log_t	file:
col_names	handler/handler0alter.cc	/^  const char **col_names;$/;"	m	struct:ha_innobase_inplace_ctx	file:
col_names	include/dict0mem.h	/^  const char *col_names;$/;"	m	struct:dict_table_t
col_no	include/dict0crea.h	/^  ulint col_no;      \/*!< next column definition to insert *\/$/;"	m	struct:tab_node_t
col_no	include/pars0sym.h	/^  ulint col_no;                  \/*!< column number if a$/;"	m	struct:sym_node_t
col_no	include/row0merge.h	/^  ulint col_no;        \/*!< column offset *\/$/;"	m	struct:index_field_t
col_no	include/row0mysql.h	/^  ulint col_no;                 \/*!< column number of the column *\/$/;"	m	struct:mysql_row_templ_t
col_set	handler/handler0alter.cc	/^typedef std::set<ulint, std::less<ulint>, ut_allocator<ulint>> col_set;$/;"	t	file:
col_var_list	include/pars0sym.h	/^  col_var_list;                  \/*!< list of table$/;"	m	struct:sym_node_t
collect	os/os0file.cc	/^void LinuxAIOHandler::collect() {$/;"	f	class:LinuxAIOHandler
collect_positions	fts/fts0que.cc	/^  ibool collect_positions;$/;"	m	struct:fts_query_t	file:
color	include/ut0rbt.h	/^  ib_rbt_color_t color; \/* color of this node *\/$/;"	m	struct:ib_rbt_node_t
cols	api/api0api.cc	/^  ib_vector_t *cols; \/*!< Vector of columns *\/$/;"	m	struct:ib_index_def_t	file:
cols	api/api0api.cc	/^  ib_vector_t *cols; \/*!< Vector of columns *\/$/;"	m	struct:ib_table_def_t	file:
cols	include/dict0mem.h	/^  dict_col_t *cols;$/;"	m	struct:dict_table_t
column	include/pars0pars.h	/^  sym_node_t *column;  \/*!< order-by column *\/$/;"	m	struct:order_node_t
column_assignment	pars/pars0grm.y	/^column_assignment:$/;"	l
column_assignment_list	pars/pars0grm.y	/^column_assignment_list:$/;"	l
column_def	pars/pars0grm.y	/^column_def:$/;"	l
column_def_list	pars/pars0grm.y	/^column_def_list:$/;"	l
column_list	pars/pars0grm.y	/^column_list:$/;"	l
columns	include/row0sel.h	/^  sym_node_list_t columns; \/*!< symbol table nodes for the columns$/;"	m	struct:plan_t
columns	include/row0upd.h	/^  sym_node_list_t columns; \/* symbol table nodes for the columns$/;"	m	struct:upd_node_t
comment	pars/lexyy.cc	959;"	d	file:
commit	btr/btr0bulk.cc	/^void PageBulk::commit(bool success) {$/;"	f	class:PageBulk
commit	mtr/mtr0mtr.cc	/^void mtr_t::commit() {$/;"	f	class:mtr_t
commit_blob_mtr	include/lob0zip.h	/^  void commit_blob_mtr() { mtr_commit(&m_blob_mtr); }$/;"	f	class:lob::zInserter
commit_btr_mtr	include/lob0lob.h	/^  void commit_btr_mtr() { m_mtr->commit(); }$/;"	f	class:lob::BtrContext
commit_cache_norebuild	handler/handler0alter.cc	/^inline MY_ATTRIBUTE((warn_unused_result)) bool commit_cache_norebuild($/;"	f
commit_cache_rebuild	handler/handler0alter.cc	/^inline void commit_cache_rebuild(ha_innobase_inplace_ctx *ctx) {$/;"	f
commit_cond	handler/ha_innodb.cc	/^static mysql_cond_t commit_cond;$/;"	v	file:
commit_cond_key	handler/ha_innodb.cc	/^static mysql_pfs_key_t commit_cond_key;$/;"	v	file:
commit_cond_m	handler/ha_innodb.cc	/^static mysql_mutex_t commit_cond_m;$/;"	v	file:
commit_cond_mutex_key	handler/ha_innodb.cc	/^static mysql_pfs_key_t commit_cond_mutex_key;$/;"	v	file:
commit_get_autoinc	handler/handler0alter.cc	/^static MY_ATTRIBUTE((warn_unused_result)) bool commit_get_autoinc($/;"	f
commit_graph	fts/fts0opt.cc	/^  que_t *commit_graph;$/;"	m	struct:fts_optimize_graph_t	file:
commit_inplace_alter_partition	handler/handler0alter.cc	/^bool ha_innopart::commit_inplace_alter_partition($/;"	f	class:ha_innopart
commit_inplace_alter_table	handler/handler0alter.cc	/^bool ha_innobase::commit_inplace_alter_table(TABLE *altered_table,$/;"	f	class:ha_innobase
commit_inplace_alter_table	handler/handler0alter.cc	/^bool ha_innopart::commit_inplace_alter_table(TABLE *altered_table,$/;"	f	class:ha_innopart
commit_inplace_alter_table_impl	handler/handler0alter.cc	/^bool ha_innobase::commit_inplace_alter_table_impl($/;"	f	class:ha_innobase
commit_lsn	include/trx0trx.h	/^  lsn_t commit_lsn; \/*!< lsn at the time of the commit *\/$/;"	m	struct:trx_t
commit_node_state	include/trx0trx.h	/^enum commit_node_state {$/;"	g
commit_node_t	include/trx0trx.h	/^struct commit_node_t {$/;"	s
commit_specify_mtr	include/btr0pcur.h	/^inline void btr_pcur_t::commit_specify_mtr(mtr_t *mtr) {$/;"	f	class:btr_pcur_t
commit_statement	pars/pars0grm.y	/^commit_statement:$/;"	l
commit_threads	handler/ha_innodb.cc	/^static ulong commit_threads = 0;$/;"	v	file:
commit_try_norebuild	handler/handler0alter.cc	/^inline MY_ATTRIBUTE((warn_unused_result)) bool commit_try_norebuild($/;"	f
commit_try_rebuild	handler/handler0alter.cc	/^inline MY_ATTRIBUTE((warn_unused_result)) bool commit_try_rebuild($/;"	f
common	include/dict0crea.h	/^  que_common_t common;   \/*!< node type: QUE_NODE_INDEX_CREATE *\/$/;"	m	struct:ind_node_t
common	include/dict0crea.h	/^  que_common_t common;   \/*!< node type: QUE_NODE_TABLE_CREATE *\/$/;"	m	struct:tab_node_t
common	include/pars0pars.h	/^  que_common_t common;          \/*!< type: QUE_NODE_FOR *\/$/;"	m	struct:for_node_t
common	include/pars0pars.h	/^  que_common_t common;      \/*!< type: QUE_NODE_IF *\/$/;"	m	struct:if_node_t
common	include/pars0pars.h	/^  que_common_t common;    \/*!< type: QUE_NODE_PROC *\/$/;"	m	struct:proc_node_t
common	include/pars0pars.h	/^  que_common_t common;   \/*!< type: QUE_NODE_ELSIF *\/$/;"	m	struct:elsif_node_t
common	include/pars0pars.h	/^  que_common_t common;   \/*!< type: QUE_NODE_WHILE *\/$/;"	m	struct:while_node_t
common	include/pars0pars.h	/^  que_common_t common; \/*!< type: QUE_NODE_ASSIGNMENT *\/$/;"	m	struct:assign_node_t
common	include/pars0pars.h	/^  que_common_t common; \/*!< type: QUE_NODE_COL_ASSIGN *\/$/;"	m	struct:col_assign_node_t
common	include/pars0pars.h	/^  que_common_t common; \/*!< type: QUE_NODE_EXIT *\/$/;"	m	struct:exit_node_t
common	include/pars0pars.h	/^  que_common_t common; \/*!< type: QUE_NODE_FUNC *\/$/;"	m	struct:func_node_t
common	include/pars0pars.h	/^  que_common_t common; \/*!< type: QUE_NODE_ORDER *\/$/;"	m	struct:order_node_t
common	include/pars0pars.h	/^  que_common_t common; \/*!< type: QUE_NODE_RETURN *\/$/;"	m	struct:return_node_t
common	include/pars0sym.h	/^  que_common_t common; \/*!< node type:$/;"	m	struct:sym_node_t
common	include/que0que.h	/^  que_common_t common;   \/*!< type: QUE_NODE_THR *\/$/;"	m	struct:que_thr_t
common	include/que0que.h	/^  que_common_t common; \/*!< type: QUE_NODE_FORK *\/$/;"	m	struct:que_fork_t
common	include/row0ins.h	/^  que_common_t common;     \/*!< node type: QUE_NODE_INSERT *\/$/;"	m	struct:ins_node_t
common	include/row0sel.h	/^  que_common_t common;       \/*!< node type: QUE_NODE_SELECT *\/$/;"	m	struct:sel_node_t
common	include/row0sel.h	/^  que_common_t common;       \/*!< type: QUE_NODE_OPEN *\/$/;"	m	struct:open_node_t
common	include/row0sel.h	/^  que_common_t common;    \/*!< type: QUE_NODE_FETCH *\/$/;"	m	struct:fetch_node_t
common	include/row0undo.h	/^  que_common_t common;      \/*!< node type: QUE_NODE_UNDO *\/$/;"	m	struct:undo_node_t
common	include/row0upd.h	/^  que_common_t common; \/*!< node type: QUE_NODE_UPDATE *\/$/;"	m	struct:upd_node_t
common	include/trx0roll.h	/^  que_common_t common;        \/*!< node type: QUE_NODE_ROLLBACK *\/$/;"	m	struct:roll_node_t
common	include/trx0trx.h	/^  que_common_t common;          \/*!< node type: QUE_NODE_COMMIT *\/$/;"	m	struct:commit_node_t
compact	pars/pars0grm.y	/^compact:$/;"	l
compare	include/data0data.h	/^  inline int compare(const rec_t *rec, const dict_index_t *index,$/;"	f	struct:dtuple_t
compare	include/ut0rbt.h	/^  ib_rbt_compare compare;              \/* Fn. to use for comparison *\/$/;"	m	struct:ib_rbt_t
compare	rem/rem0cmp.cc	/^int dtuple_t::compare(const rec_t *rec, const dict_index_t *index,$/;"	f	class:dtuple_t
compare_with_arg	include/ut0rbt.h	/^  ib_rbt_arg_compare compare_with_arg; \/* Fn. to use for comparison$/;"	m	struct:ib_rbt_t
complement	include/ut0stateful_latching_rules.h	/^  nodes_set_t complement(const nodes_set_t &states) const {$/;"	f	class:ut::Stateful_latching_rules
complete_io	fil/fil0fil.cc	/^void Fil_shard::complete_io(fil_node_t *file, const IORequest &type) {$/;"	f	class:Fil_shard
completed	fts/fts0opt.cc	/^  ib_time_monotonic_t completed; \/*!< Optimize finish time *\/$/;"	m	struct:fts_slot_t	file:
component_services	handler/ha_innodb.cc	/^namespace component_services {$/;"	n	namespace:innobase	file:
component_udfs	log/log0meb.cc	/^static udf_data_t component_udfs[] = {$/;"	m	namespace:meb	file:
compress	btr/btr0bulk.cc	/^bool PageBulk::compress() {$/;"	f	class:PageBulk
compress	include/dict0sdi.h	/^  inline void compress() {$/;"	f	class:Sdi_Compressor
compressed	include/page0types.h	/^  ulint compressed;$/;"	m	struct:page_zip_stat_t
compressed_ok	include/page0types.h	/^  ulint compressed_ok;$/;"	m	struct:page_zip_stat_t
compressed_page_size	os/os0file.cc	/^  static ulint compressed_page_size(const Slot *slot) {$/;"	f	class:AIOHandler	file:
compressed_usec	include/page0types.h	/^  ib_uint64_t compressed_usec;$/;"	m	struct:page_zip_stat_t
compression_algorithm	include/os0file.h	/^  void compression_algorithm(Compression::Type type) {$/;"	f	class:IORequest
compression_type	include/fil0fil.h	/^  Compression::Type compression_type;$/;"	m	struct:fil_space_t
compute	include/rem0rec.h	/^  const ulint *compute(const rec_t *rec, const dict_index_t *index) {$/;"	f	class:Rec_offsets
compute_how_much_to_write	log/log0write.cc	/^static inline size_t compute_how_much_to_write(const log_t &log,$/;"	f	namespace:Log_files_write_impl
compute_next_write_ahead_end	log/log0write.cc	/^static inline uint64_t compute_next_write_ahead_end(uint64_t real_offset) {$/;"	f	namespace:Log_files_write_impl
compute_path_length	clone/clone0apply.cc	/^size_t Clone_Snapshot::compute_path_length(const char *data_dir,$/;"	f	class:Clone_Snapshot
compute_real_offset	log/log0write.cc	/^static inline uint64_t compute_real_offset(const log_t &log, lsn_t start_lsn) {$/;"	f	namespace:Log_files_write_impl
cond	include/pars0pars.h	/^  que_node_t *cond;         \/*!< if condition *\/$/;"	m	struct:if_node_t
cond	include/pars0pars.h	/^  que_node_t *cond;      \/*!< if condition *\/$/;"	m	struct:elsif_node_t
cond	include/pars0pars.h	/^  que_node_t *cond;      \/*!< while condition *\/$/;"	m	struct:while_node_t
cond_attr	os/os0event.cc	/^  static pthread_condattr_t cond_attr;$/;"	m	struct:os_event	file:
cond_attr	os/os0event.cc	/^pthread_condattr_t os_event::cond_attr;$/;"	m	class:os_event	file:
cond_attr_has_monotonic_clock	os/os0event.cc	/^  static bool cond_attr_has_monotonic_clock;$/;"	m	struct:os_event	file:
cond_list	include/pars0pars.h	/^  UT_LIST_NODE_T(func_node_t) cond_list;$/;"	m	struct:func_node_t
cond_var	os/os0event.cc	/^  os_cond_t cond_var; \/*!< condition variable is$/;"	m	struct:os_event	file:
conflicts_with	mtr/mtr0mtr.cc	/^bool mtr_t::conflicts_with(const mtr_t *mtr2) const {$/;"	f	class:mtr_t
consistent_read	include/row0sel.h	/^  ibool consistent_read;     \/*!< TRUE if the select is a consistent,$/;"	m	struct:sel_node_t
const_iterator	include/lob0lob.h	/^  typedef std::vector<blob_page_info_t>::const_iterator const_iterator;$/;"	t	struct:lob::blob_dir_t
const_pointer	include/mem0mem.h	/^  typedef const T *const_pointer;$/;"	t	class:mem_heap_allocator
const_pointer	include/ut0new.h	/^  typedef const T *const_pointer;$/;"	t	class:ut_allocator
const_reference	include/mem0mem.h	/^  typedef const T &const_reference;$/;"	t	class:mem_heap_allocator
const_reference	include/ut0new.h	/^  typedef const T &const_reference;$/;"	t	class:ut_allocator
construct	include/mem0mem.h	/^  void construct(pointer p, const_reference t) {$/;"	f	class:mem_heap_allocator
construct	include/ut0new.h	/^  void construct(pointer p, const T &val) { new (p) T(val); }$/;"	f	class:ut_allocator
construct_file_pathname	log/log0meb.cc	/^static void construct_file_pathname(const Fil_path &path,$/;"	f	namespace:meb
construct_secure_file_path_name	log/log0meb.cc	/^static bool construct_secure_file_path_name(THD *thd, const char *label,$/;"	f	namespace:meb
contains	include/trx0purge.h	/^  bool contains(space_id_t num) { return (find(num) != nullptr); }$/;"	f	class:undo::Tablespaces
contains	include/trx0sys.h	/^  bool contains(space_id_t id) {$/;"	f	class:Space_Ids
control	os/os0file.cc	/^  struct iocb control;$/;"	m	struct:Slot	typeref:struct:Slot::iocb	file:
conv_buf	include/data0data.h	/^  uint64_t *conv_buf;$/;"	m	struct:multi_value_data
conv_to_int	include/dict0types.h	/^  uint64_t conv_to_int() const {$/;"	f	class:index_id_t
convert_bytes_to_work	include/clone0monitor.h	/^  uint64_t convert_bytes_to_work(uint64_t size, bool is_estimate) {$/;"	f	class:Clone_Monitor
convert_error_code_to_mysql	handler/ha_innodb.cc	/^int convert_error_code_to_mysql(dberr_t error, uint32_t flags, THD *thd) {$/;"	f
convert_search_mode_to_innobase	handler/ha_innodb.cc	/^page_cur_mode_t convert_search_mode_to_innobase(ha_rkey_function find_flag) {$/;"	f
convert_to_ddl_record	log/log0ddl.cc	/^void DDL_Log_Table::convert_to_ddl_record(bool is_clustered, rec_t *rec,$/;"	f	class:DDL_Log_Table
convert_to_filename_charset	fil/fil0fil.cc	/^void Fil_path::convert_to_filename_charset(std::string &name) {$/;"	f	class:Fil_path
convert_to_lower_case	fil/fil0fil.cc	/^void Fil_path::convert_to_lower_case(std::string &path) {$/;"	f	class:Fil_path
convert_to_space	dict/dict0dd.cc	/^void convert_to_space(std::string &dict_name) {$/;"	f	namespace:dict_name
convert_to_table_stats_record	row/row0sel.cc	/^static void convert_to_table_stats_record(rec_t *clust_rec,$/;"	f	file:
coords	include/gis0geo.h	/^  double *coords; \/* mbr. *\/$/;"	m	struct:rtr_split_node_t
copy	clone/clone0copy.cc	/^int Clone_Handle::copy(THD *thd, uint task_id, Ha_clone_cbk *callback) {$/;"	f	class:Clone_Handle
copy	include/data0data.h	/^  void copy(const multi_value_data *multi_value, mem_heap_t *heap) {$/;"	f	struct:multi_value_data
copy	include/lob0lob.h	/^  void copy(byte *field_ref) const { memcpy(field_ref, m_ref, SIZE); }$/;"	f	struct:lob::ref_t
copy	include/ut0bitset.h	/^  void copy(const byte *bitset, size_t size) {$/;"	f	class:Bitset
copyAll	btr/btr0bulk.cc	/^void PageBulk::copyAll(const page_t *src_page) {$/;"	f	class:PageBulk
copyRecords	btr/btr0bulk.cc	/^void PageBulk::copyRecords(const rec_t *first_rec) {$/;"	f	class:PageBulk
copy_cached_row	handler/ha_innopart.cc	/^inline void ha_innopart::copy_cached_row(uchar *buf, const uchar *cached_row) {$/;"	f	class:ha_innopart
copy_complete	read/read0read.cc	/^void ReadView::copy_complete() {$/;"	f	class:ReadView
copy_coords	gis/gis0geo.cc	/^inline static void copy_coords(double *dst,       \/*!< in\/out: destination. *\/$/;"	f	file:
copy_data	arch/arch0page.cc	/^void Arch_Block::copy_data(const Arch_Block *block) {$/;"	f	class:Arch_Block
copy_from	include/page0size.h	/^  inline void copy_from(const page_size_t &src) {$/;"	f	class:page_size_t
copy_log	arch/arch0log.cc	/^dberr_t Arch_Log_Sys::copy_log(Arch_File_Ctx *file_ctx, uint length) {$/;"	f	class:Arch_Log_Sys
copy_low	include/data0data.h	/^  void copy_low(const multi_value_data *multi_value, mem_heap_t *heap) {$/;"	f	struct:multi_value_data
copy_old_data	lob/lob0undo.cc	/^const byte *undo_data_t::copy_old_data(const byte *undo_ptr, ulint len) {$/;"	f	class:lob::undo_data_t
copy_prepare	read/read0read.cc	/^void ReadView::copy_prepare(const ReadView &other) {$/;"	f	class:ReadView
copy_row	row/row0pread.cc	/^void Parallel_reader::Scan_ctx::copy_row(const rec_t *rec, Iter *iter) const {$/;"	f	class:Parallel_reader::Scan_ctx
copy_stored_position	btr/btr0pcur.cc	/^void btr_pcur_t::copy_stored_position(btr_pcur_t *dst, const btr_pcur_t *src) {$/;"	f	class:btr_pcur_t
copy_to_another_array	include/ut0lock_free_hash.h	/^  void copy_to_another_array(arr_node_t *src_arr, arr_node_t *dst_arr) {$/;"	f	class:ut_lock_free_hash_t
copy_to_buffer	os/os0file.cc	/^  void copy_to_buffer(ulint len) {$/;"	f	class:SimulatedAIOHandler
copy_to_write_ahead_buffer	log/log0write.cc	/^static inline void copy_to_write_ahead_buffer(log_t &log, const byte *buffer,$/;"	f	namespace:Log_files_write_impl
copy_trx_ids	read/read0read.cc	/^void ReadView::copy_trx_ids(const trx_ids_t &trx_ids) {$/;"	f	class:ReadView
copy_type	include/dict0mem.h	/^  void copy_type(dtype_t *type) const {$/;"	f	struct:dict_col_t
copy_val	include/pars0sym.h	/^  ibool copy_val;                \/*!< TRUE if a column$/;"	m	struct:sym_node_t
copy_variables	include/row0sel.h	/^  copy_variables; \/*!< variables whose values we have to$/;"	m	struct:sel_node_t
copyable_atomic_t	include/buf0buf.h	/^  copyable_atomic_t(const copyable_atomic_t<T> &other)$/;"	f	class:Cache_hint::copyable_atomic_t
copyable_atomic_t	include/buf0buf.h	/^class copyable_atomic_t : public std::atomic<T> {$/;"	c	class:Cache_hint
corrupted_ids_t	include/dict0mem.h	/^typedef std::vector<index_id_t, ut_allocator<index_id_t>> corrupted_ids_t;$/;"	t
could_you	handler/ha_innodb.h	/^  struct _ft_vft_ext *could_you;$/;"	m	struct:new_ft_info	typeref:struct:new_ft_info::_ft_vft_ext
count_by_mode	include/dict0mem.h	/^  ulong count_by_mode[LOCK_NUM];$/;"	m	struct:dict_table_t
count_os_wait	include/sync0rw.h	/^  uint32_t count_os_wait;$/;"	m	struct:rw_lock_t
count_register_table_handler	include/sess0sess.h	/^  uint count_register_table_handler() const {$/;"	f	class:innodb_session_t
count_undo_deleted	fil/fil0fil.cc	/^  size_t count_undo_deleted(space_id_t undo_num) {$/;"	f	class:Fil_system
counter	row/row0ins.cc	/^  std::atomic<ulint> &counter;$/;"	m	class:ib_dec_in_dtor	file:
counter_indexer_t	include/ut0counter.h	/^struct counter_indexer_t : public generic_indexer_t<Type, N> {$/;"	s
crash_after_alter_encrypt_space_log_counter	log/log0ddl.cc	/^static uint32_t crash_after_alter_encrypt_space_log_counter = 1;$/;"	v	file:
crash_after_delete_space_delete_counter	log/log0ddl.cc	/^static uint32_t crash_after_delete_space_delete_counter = 1;$/;"	v	file:
crash_after_delete_space_log_counter	log/log0ddl.cc	/^static uint32_t crash_after_delete_space_log_counter = 1;$/;"	v	file:
crash_after_drop_log_counter	log/log0ddl.cc	/^static uint32_t crash_after_drop_log_counter = 1;$/;"	v	file:
crash_after_free_tree_delete_counter	log/log0ddl.cc	/^static uint32_t crash_after_free_tree_delete_counter = 1;$/;"	v	file:
crash_after_free_tree_log_counter	log/log0ddl.cc	/^static uint32_t crash_after_free_tree_log_counter = 1;$/;"	v	file:
crash_after_rename_space_delete_counter	log/log0ddl.cc	/^static uint32_t crash_after_rename_space_delete_counter = 1;$/;"	v	file:
crash_after_rename_space_log_counter	log/log0ddl.cc	/^static uint32_t crash_after_rename_space_log_counter = 1;$/;"	v	file:
crash_after_replay_counter	log/log0ddl.cc	/^static uint32_t crash_after_replay_counter = 1;$/;"	v	file:
crash_before_alter_encrypt_space_log_counter	log/log0ddl.cc	/^static uint32_t crash_before_alter_encrypt_space_log_counter = 1;$/;"	v	file:
crash_before_delete_space_log_counter	log/log0ddl.cc	/^static uint32_t crash_before_delete_space_log_counter = 1;$/;"	v	file:
crash_before_drop_log_counter	log/log0ddl.cc	/^static uint32_t crash_before_drop_log_counter = 1;$/;"	v	file:
crash_before_free_tree_log_counter	log/log0ddl.cc	/^static uint32_t crash_before_free_tree_log_counter = 1;$/;"	v	file:
crash_before_rename_space_log_counter	log/log0ddl.cc	/^static uint32_t crash_before_rename_space_log_counter = 1;$/;"	v	file:
create	handler/ha_innodb.cc	/^int ha_innobase::create(const char *name, TABLE *form,$/;"	f	class:ha_innobase
create	handler/ha_innopart.cc	/^int ha_innopart::create(const char *name, TABLE *form,$/;"	f	class:ha_innopart
create	handler/handler0alter.cc	/^  bool create(alter_part_array &to_drop, alter_part_array &all_news) {$/;"	f	class:alter_part_factory
create	handler/handler0alter.cc	/^int alter_part::create(const char *part_name, dd::Partition *dd_part,$/;"	f	class:alter_part
create	include/sync0sharded_rw.h	/^  void create($/;"	f	class:Sharded_rw_lock
create	include/ut0new.h	/^  void create(T_Args... args) {$/;"	f	class:aligned_pointer
create	include/ut0new.h	/^  void create(size_t size) {$/;"	f	class:aligned_array_pointer
create	include/ut0pool.h	/^  void create() {$/;"	f	struct:PoolManager
create	lock/lock0lock.cc	/^lock_t *RecLock::create(trx_t *trx, const lock_prdt_t *prdt) {$/;"	f	class:RecLock
create	log/log0meb.cc	/^  void create() {$/;"	f	class:meb::Queue
create	os/os0file.cc	/^AIO *AIO::create(latch_id_t id, ulint n, ulint n_segments) {$/;"	f	class:AIO
create	srv/srv0tmp.cc	/^dberr_t Tablespace::create() {$/;"	f	class:ibt::Tablespace
create	trx/trx0trx.cc	/^  void create() { mutex_create(LATCH_ID_TRX_POOL, &m_mutex); }$/;"	f	struct:TrxPoolLock
create	trx/trx0trx.cc	/^  void create() { mutex_create(LATCH_ID_TRX_POOL_MANAGER, &m_mutex); }$/;"	f	struct:TrxPoolManagerLock
create_clone_directory	clone/clone0clone.cc	/^int Clone_Handle::create_clone_directory() {$/;"	f	class:Clone_Handle
create_clustered_index_when_no_primary	handler/ha_innodb.cc	/^inline int create_clustered_index_when_no_primary($/;"	f
create_context	row/row0pread.cc	/^dberr_t Parallel_reader::Scan_ctx::create_context(const Range &range,$/;"	f	class:Parallel_reader::Scan_ctx
create_contexts	row/row0pread.cc	/^dberr_t Parallel_reader::Scan_ctx::create_contexts(const Ranges &ranges) {$/;"	f	class:Parallel_reader::Scan_ctx
create_data_lock_iterator	handler/p_s.cc	/^Innodb_data_lock_inspector::create_data_lock_iterator() {$/;"	f	class:Innodb_data_lock_inspector
create_data_lock_wait_iterator	handler/p_s.cc	/^Innodb_data_lock_inspector::create_data_lock_wait_iterator() {$/;"	f	class:Innodb_data_lock_inspector
create_desc	clone/clone0apply.cc	/^int Clone_Snapshot::create_desc(const char *data_dir,$/;"	f	class:Clone_Snapshot
create_detached_thread	include/os0thread-create.h	/^IB_thread create_detached_thread(mysql_pfs_key_t pfs_key, F &&f,$/;"	f
create_file	clone/clone0api.cc	/^static void create_file(std::string &file_name) {$/;"	f	file:
create_file	fsp/fsp0sysspace.cc	/^dberr_t SysTablespace::create_file(Datafile &file) {$/;"	f	class:SysTablespace
create_for_mysql	include/btr0pcur.h	/^  static btr_pcur_t *create_for_mysql() {$/;"	f	struct:btr_pcur_t
create_for_non_reorg	handler/handler0alter.cc	/^bool alter_part_factory::create_for_non_reorg(alter_part_array &to_drop,$/;"	f	class:alter_part_factory
create_for_reorg	handler/handler0alter.cc	/^bool alter_part_factory::create_for_reorg(alter_part_array &to_drop,$/;"	f	class:alter_part_factory
create_impl	handler/ha_innodb.cc	/^int innobase_basic_ddl::create_impl(THD *thd, const char *name, TABLE *form,$/;"	f	class:innobase_basic_ddl
create_index	handler/ha_innodb.cc	/^inline int create_index($/;"	f
create_index	pars/pars0grm.y	/^create_index:$/;"	l
create_log_file	srv/srv0start.cc	/^    create_log_file(pfs_os_file_t *file, \/*!< out: file handle *\/$/;"	f
create_log_files	srv/srv0start.cc	/^static dberr_t create_log_files(char *logfilename, size_t dirnamelen, lsn_t lsn,$/;"	f	file:
create_log_files_rename	srv/srv0start.cc	/^static void create_log_files_rename($/;"	f	file:
create_mlog_rec	log/log0test.cc	/^byte *Log_test::create_mlog_rec(byte *rec, Key key, Value value) {$/;"	f	class:Log_test
create_mlog_rec	log/log0test.cc	/^byte *Log_test::create_mlog_rec(byte *rec, Key key, Value value,$/;"	f	class:Log_test
create_new_checking_conflict	handler/handler0alter.cc	/^bool alter_part_factory::create_new_checking_conflict($/;"	f	class:alter_part_factory
create_node	fil/fil0fil.cc	/^fil_node_t *Fil_shard::create_node(const char *name, page_no_t size,$/;"	f	class:Fil_shard
create_old_checking_conflict	handler/handler0alter.cc	/^bool alter_part_factory::create_old_checking_conflict($/;"	f	class:alter_part_factory
create_one	handler/handler0alter.cc	/^bool alter_part_factory::create_one(alter_part_array &array,$/;"	f	class:alter_part_factory
create_one_low	handler/handler0alter.cc	/^alter_part *alter_part_factory::create_one_low(uint &part_id, uint old_part_id,$/;"	f	class:alter_part_factory
create_option_compression_is_valid	handler/ha_innodb.cc	/^bool create_table_info_t::create_option_compression_is_valid() {$/;"	f	class:create_table_info_t
create_option_data_directory_is_valid	handler/ha_innodb.cc	/^bool create_table_info_t::create_option_data_directory_is_valid(bool ignore) {$/;"	f	class:create_table_info_t
create_option_tablespace_is_valid	handler/ha_innodb.cc	/^bool create_table_info_t::create_option_tablespace_is_valid() {$/;"	f	class:create_table_info_t
create_options_are_invalid	handler/ha_innodb.cc	/^const char *create_table_info_t::create_options_are_invalid() {$/;"	f	class:create_table_info_t
create_persistent_cursor	row/row0pread.cc	/^Parallel_reader::Scan_ctx::create_persistent_cursor($/;"	f	class:Parallel_reader::Scan_ctx
create_range	row/row0pread.cc	/^void Parallel_reader::Scan_ctx::create_range(Ranges &ranges,$/;"	f	class:Parallel_reader::Scan_ctx
create_ranges	row/row0pread.cc	/^dberr_t Parallel_reader::Scan_ctx::create_ranges(const Scan_range &scan_range,$/;"	f	class:Parallel_reader::Scan_ctx
create_status_file	clone/clone0api.cc	/^static void create_status_file(const Clone_Handle *clone) {$/;"	f	file:
create_table	handler/ha_innodb.cc	/^int create_table_info_t::create_table(const dd::Table *dd_table) {$/;"	f	class:create_table_info_t
create_table	pars/pars0grm.y	/^create_table:$/;"	l
create_table_def	handler/ha_innodb.cc	/^    create_table_def(const dd::Table *dd_table) {$/;"	f	class:create_table_info_t
create_table_info_t	handler/ha_innodb.h	/^  create_table_info_t(THD *thd, TABLE *form, HA_CREATE_INFO *create_info,$/;"	f	class:create_table_info_t
create_table_info_t	handler/ha_innodb.h	/^class create_table_info_t {$/;"	c
create_table_update_dict	handler/ha_innodb.cc	/^int create_table_info_t::create_table_update_dict() {$/;"	f	class:create_table_info_t
create_table_update_global_dd	handler/ha_innodb.cc	/^int create_table_info_t::create_table_update_global_dd(Table *dd_table) {$/;"	f	class:create_table_info_t
create_temp_dir	srv/srv0tmp.cc	/^static dberr_t create_temp_dir() {$/;"	f	namespace:ibt
create_tracker	sync/sync0debug.cc	/^static CreateTracker *create_tracker;$/;"	v	file:
create_tuple	log/log0ddl.cc	/^void DDL_Log_Table::create_tuple(const DDL_Record &record) {$/;"	f	class:DDL_Log_Table
create_tuple	log/log0ddl.cc	/^void DDL_Log_Table::create_tuple(ulint id, const dict_index_t *index) {$/;"	f	class:DDL_Log_Table
create_tuples	dict/dict0dict.cc	/^void DDTableBuffer::create_tuples() {$/;"	f	class:DDTableBuffer
created_new_raw	include/fsp0sysspace.h	/^  bool created_new_raw() const { return (m_created_new_raw); }$/;"	f	class:SysTablespace
creator_trx_id	include/read0types.h	/^  void creator_trx_id(trx_id_t id) {$/;"	f	class:ReadView
ctime	include/os0file.h	/^  time_t ctime;                \/*!< creation time *\/$/;"	m	struct:AIO_mode::os_file_stat_t
ctx_array	handler/handler0alter.cc	/^  inplace_alter_handler_ctx **ctx_array;$/;"	m	class:ha_innopart_inplace_ctx	file:
cur_end	include/que0que.h	/^  ulint cur_end;             \/*!< QUE_CUR_NOT_DEFINED, QUE_CUR_START,$/;"	m	struct:que_fork_t
cur_iter_dirty_pct	buf/buf0flu.cc	/^ulint cur_iter_dirty_pct = 0;$/;"	m	namespace:Adaptive_flush	file:
cur_iter_lsn	buf/buf0flu.cc	/^lsn_t cur_iter_lsn = 0;$/;"	m	namespace:Adaptive_flush	file:
cur_iter_pages_dirty	buf/buf0flu.cc	/^ulint cur_iter_pages_dirty = 0;$/;"	m	namespace:Adaptive_flush	file:
cur_iter_time	buf/buf0flu.cc	/^ib_time_monotonic_ms_t cur_iter_time;$/;"	m	namespace:Adaptive_flush	file:
cur_node	fts/fts0que.cc	/^  fts_ast_node_t *cur_node; \/*!< Current tree node *\/$/;"	m	struct:fts_query_t	file:
cur_node	include/fts0ast.h	/^  fts_ast_node_t *cur_node; \/*!< Current node into which$/;"	m	struct:fts_ast_state_t
cur_on_row	include/que0que.h	/^  ibool cur_on_row;          \/*!< TRUE if cursor is on a row, i.e.,$/;"	m	struct:que_fork_t
cur_page	include/lob0ins.h	/^  page_t *cur_page() const { return (buf_block_get_frame(m_cur_blob_block)); }$/;"	f	struct:lob::BaseInserter
cur_pos	include/que0que.h	/^  ulint cur_pos;             \/*!< if there are n rows in the result$/;"	m	struct:que_fork_t
curr_left_side	include/buf0buf.h	/^  bool curr_left_side;$/;"	m	struct:Cache_hint::buf_block_t
curr_n_bytes	include/buf0buf.h	/^  uint16_t curr_n_bytes;$/;"	m	struct:Cache_hint::buf_block_t
curr_n_fields	include/buf0buf.h	/^  uint16_t curr_n_fields;$/;"	m	struct:Cache_hint::buf_block_t
curr_pool_size	include/buf0buf.h	/^  ulint curr_pool_size;$/;"	m	struct:Cache_hint::buf_pool_t
curr_size	include/buf0buf.h	/^  ulint curr_size;$/;"	m	struct:Cache_hint::buf_pool_t
current	include/fts0fts.h	/^  ib_rbt_node_t *current; \/*!< Current element *\/$/;"	m	struct:fts_result_t
current	lock/lock0lock.cc	/^  const lock_t *current(const trx_t *trx) const {$/;"	f	class:TrxLockIterator
current	lock/lock0lock.cc	/^  const trx_t *current() { return (reposition()); }$/;"	f	class:TrxListIterator
current_file_has_space	log/log0write.cc	/^static inline bool current_file_has_space(const log_t &log, uint64_t offset,$/;"	f	namespace:Log_files_write_impl
current_lock	include/lock0iter.h	/^  const lock_t *current_lock;$/;"	m	struct:lock_queue_iterator_t
current_thread_has_io_responsibility	include/buf0buf.h	/^  bool current_thread_has_io_responsibility() const {$/;"	f	class:Cache_hint::buf_page_t
current_thread_is_responsible	include/buf0buf.h	/^    bool current_thread_is_responsible() const {$/;"	f	class:Cache_hint::buf_page_t::io_responsibility_t
current_write_ahead_enough	log/log0write.cc	/^static inline bool current_write_ahead_enough(const log_t &log, uint64_t offset,$/;"	f	namespace:Log_files_write_impl
cursor	include/gis0type.h	/^  btr_cur_t *cursor;   \/*!< cursor used for search *\/$/;"	m	struct:rtr_info
cursor	include/gis0type.h	/^  btr_pcur_t *cursor; \/*!< cursor structure if we positioned$/;"	m	struct:node_visit
cursor_at_end	include/row0sel.h	/^  ibool cursor_at_end; \/*!< TRUE if the cursor is open but$/;"	m	struct:plan_t
cursor_declaration	pars/pars0grm.y	/^cursor_declaration:$/;"	l
cursor_def	include/pars0sym.h	/^  sel_node_t *cursor_def;        \/*!< cursor definition$/;"	m	struct:sym_node_t
cursor_def	include/row0sel.h	/^  sel_node_t *cursor_def;    \/*!< cursor definition *\/$/;"	m	struct:open_node_t
cursor_def	include/row0sel.h	/^  sel_node_t *cursor_def; \/*!< cursor definition *\/$/;"	m	struct:fetch_node_t
cursor_heap	include/row0mysql.h	/^  mem_heap_t *cursor_heap;$/;"	m	struct:row_prebuilt_t
cursor_positioned	pars/pars0grm.y	/^cursor_positioned:$/;"	l
cursors_t	row/row0mysql.cc	/^typedef std::vector<btr_pcur_t, ut_allocator<btr_pcur_t>> cursors_t;$/;"	t	file:
data	include/data0data.h	/^  void *data;       \/*!< pointer to data *\/$/;"	m	struct:dfield_t
data	include/data0data.h	/^  void *data;     \/*!< stored data *\/$/;"	m	struct:big_rec_field_t
data	include/ha0ha.h	/^  const rec_t *data;  \/*!< pointer to the data *\/$/;"	m	struct:ha_node_t
data	include/lock0prdt.h	/^  void *data; \/* Predicate data *\/$/;"	m	struct:lock_prdt
data	include/log0recv.h	/^  recv_data_t *data;$/;"	m	struct:recv_t
data	include/page0types.h	/^  page_zip_t *data;$/;"	m	struct:page_zip_des_t
data	include/read0types.h	/^    const trx_id_t *data() const { return (m_ptr); }$/;"	f	class:ReadView::ids_t
data	include/read0types.h	/^    trx_id_t *data() { return (m_ptr); }$/;"	f	class:ReadView::ids_t
data	include/row0sel.h	/^  byte *data; \/*!< data, or NULL; if not NULL, this field$/;"	m	struct:sel_buf_t
data	include/ut0list.h	/^  void *data;           \/*!< user data *\/$/;"	m	struct:ib_list_node_t
data	include/ut0list.h	/^  void *data;       \/*!< user data *\/$/;"	m	struct:ib_list_helper_t
data	include/ut0vec.h	/^  void *data;            \/* data elements *\/$/;"	m	struct:ib_vector_t
data0data_h	include/data0data.h	34;"	d
data0type_h	include/data0type.h	34;"	d
data0types_h	include/data0types.h	34;"	d
data_begin	include/lob0first.h	/^  byte *data_begin() const {$/;"	f	struct:lob::first_page_t
data_begin	include/lob0impl.h	/^  byte *data_begin() const { return (m_node.ptr() + OFFSET_DATA); }$/;"	f	struct:lob::frag_node_t
data_begin	include/lob0pages.h	/^  byte *data_begin() const { return (frame() + LOB_PAGE_DATA); }$/;"	f	struct:lob::data_page_t
data_dir_path	include/dict0mem.h	/^  char *data_dir_path;$/;"	m	struct:dict_table_t
data_error	data/data0data.cc	/^byte data_error;$/;"	v
data_len	include/data0data.h	/^  uint32_t *data_len;$/;"	m	struct:multi_value_data
data_mysql_default_charset_coll	data/data0type.cc	/^ulint data_mysql_default_charset_coll;$/;"	v
data_page_t	include/lob0pages.h	/^  data_page_t() {}$/;"	f	struct:lob::data_page_t
data_page_t	include/lob0pages.h	/^  data_page_t(buf_block_t *block) : basic_page_t(block, nullptr, nullptr) {}$/;"	f	struct:lob::data_page_t
data_page_t	include/lob0pages.h	/^  data_page_t(buf_block_t *block, mtr_t *mtr) : basic_page_t(block, mtr) {$/;"	f	struct:lob::data_page_t
data_page_t	include/lob0pages.h	/^  data_page_t(buf_block_t *block, mtr_t *mtr, dict_index_t *index)$/;"	f	struct:lob::data_page_t
data_page_t	include/lob0pages.h	/^  data_page_t(mtr_t *mtr, dict_index_t *index)$/;"	f	struct:lob::data_page_t
data_page_t	include/lob0pages.h	/^struct data_page_t : public basic_page_t {$/;"	s	namespace:lob
data_read	include/srv0srv.h	/^  ulint_ctr_1_t data_read;$/;"	m	struct:srv_stats_t
data_written	include/srv0srv.h	/^  ulint_ctr_1_t data_written;$/;"	m	struct:srv_stats_t
datap	include/data0data.h	/^  const void **datap;$/;"	m	struct:multi_value_data
db0err_h	include/db0err.h	34;"	d
db_name	include/dict0mem.h	/^  std::string db_name;$/;"	m	struct:dict_vcol_templ_t
dberr_t	include/db0err.h	/^enum dberr_t {$/;"	g
dblwr	buf/buf0dblwr.cc	/^namespace dblwr {$/;"	n	file:
dblwr	include/buf0dblwr.h	/^namespace dblwr {$/;"	n
dblwr	include/log0recv.h	/^  dblwr::recv::DBLWR *dblwr;$/;"	m	struct:recv_sys_t
dblwr	include/log0recv.h	/^namespace dblwr {$/;"	n
dblwr	include/os0file.h	/^  void dblwr() { m_type |= DBLWR; }$/;"	f	class:IORequest
dblwr_disabled	include/mtr0mtr.h	/^    bool dblwr_disabled() const {$/;"	f	class:mtr_t::Logging
dblwr_mutex_key	sync/sync0sync.cc	/^mysql_pfs_key_t dblwr_mutex_key;$/;"	v
dblwr_pages_written	include/srv0srv.h	/^  ulint_ctr_1_t dblwr_pages_written;$/;"	m	struct:srv_stats_t
dblwr_state	include/log0recv.h	/^  bool dblwr_state;$/;"	m	struct:recv_sys_t
dblwr_writes	include/srv0srv.h	/^  ulint_ctr_1_t dblwr_writes;$/;"	m	struct:srv_stats_t
dbug_run_purge	row/row0merge.cc	1800;"	d	file:
dbug_v_purge	row/row0vers.cc	1052;"	d	file:
dd	gis/gis0geo.cc	/^namespace dd {$/;"	n	file:
dd	handler/ha_innodb.h	/^namespace dd {$/;"	n
dd	include/dict0mem.h	/^namespace dd {$/;"	n
dd	include/dict0types.h	/^namespace dd {$/;"	n
dd	include/dict0upgrade.h	/^namespace dd {$/;"	n
dd	include/gis0geo.h	/^namespace dd {$/;"	n
dd	include/rem0cmp.h	/^namespace dd {$/;"	n
dd	include/row0mysql.h	/^namespace dd {$/;"	n
dd	rem/rem0cmp.cc	/^namespace dd {$/;"	n	file:
dd	trx/trx0rec.cc	/^namespace dd {$/;"	n	file:
dd_add_fts_doc_id_index	dict/dict0dd.cc	/^void dd_add_fts_doc_id_index(dd::Table &new_table, const dd::Table &old_table) {$/;"	f
dd_add_instant_columns	dict/dict0dd.cc	/^void dd_add_instant_columns(const TABLE *old_table, const TABLE *altered_table,$/;"	f
dd_check_corrupted	dict/dict0dd.cc	/^static MY_ATTRIBUTE((warn_unused_result)) int dd_check_corrupted($/;"	f
dd_clear_instant_part	dict/dict0dd.cc	/^void dd_clear_instant_part(dd::Partition &dd_part) {$/;"	f
dd_clear_instant_table	dict/dict0dd.cc	/^void dd_clear_instant_table(dd::Table &dd_table) {$/;"	f
dd_column_key_strings	include/dict0dd.h	/^const char *const dd_column_key_strings[DD_COLUMN__LAST] = {"default",$/;"	v
dd_column_keys	include/dict0dd.h	/^enum dd_column_keys {$/;"	g
dd_commit_inplace_alter_table	handler/handler0alter.cc	/^static void dd_commit_inplace_alter_table($/;"	f	file:
dd_commit_inplace_instant	handler/handler0alter.cc	/^static void dd_commit_inplace_instant(Alter_inplace_info *ha_alter_info,$/;"	f	file:
dd_commit_inplace_no_change	handler/handler0alter.cc	/^static void dd_commit_inplace_no_change(const Table *old_dd_tab,$/;"	f	file:
dd_commit_inplace_update_instant_meta	handler/handler0alter.cc	/^static void dd_commit_inplace_update_instant_meta(const dict_table_t *table,$/;"	f	file:
dd_commit_inplace_update_partition_instant_meta	handler/handler0alter.cc	/^static void dd_commit_inplace_update_partition_instant_meta($/;"	f	file:
dd_commit_instant_part	handler/handler0alter.cc	/^static void dd_commit_instant_part(const dict_table_t *new_table,$/;"	f	file:
dd_commit_instant_table	handler/handler0alter.cc	/^static void dd_commit_instant_table(const dict_table_t *new_table,$/;"	f	file:
dd_copy_autoinc	dict/dict0dd.cc	/^void dd_copy_autoinc(const dd::Properties &src, dd::Properties &dest) {$/;"	f
dd_copy_from_table_share	dict/dict0dd.cc	/^inline void dd_copy_from_table_share(THD *thd, dict_table_t *table,$/;"	f
dd_copy_instant_n_cols	dict/dict0dd.cc	/^void dd_copy_instant_n_cols(dd::Table &new_table, const dd::Table &old_table) {$/;"	f
dd_copy_private	dict/dict0dd.cc	/^void dd_copy_private(Table &new_table, const Table &old_table) {$/;"	f
dd_copy_table	include/dict0dd.h	/^inline void dd_copy_table(dd::Table &new_table, const dd::Table &old_table) {$/;"	f
dd_copy_table_columns	dict/dict0dd.cc	/^void dd_copy_table_columns(dd::Table &new_table, const dd::Table &old_table) {$/;"	f
dd_create_fts_common_table	dict/dict0dd.cc	/^bool dd_create_fts_common_table(const dict_table_t *parent_table,$/;"	f
dd_create_fts_index_table	dict/dict0dd.cc	/^bool dd_create_fts_index_table(const dict_table_t *parent_table,$/;"	f
dd_create_hardcoded	handler/ha_innodb.cc	/^static bool dd_create_hardcoded(space_id_t space_id, const char *filename) {$/;"	f	file:
dd_create_implicit_tablespace	dict/dict0dd.cc	/^bool dd_create_implicit_tablespace(dd::cache::Dictionary_client *dd_client,$/;"	f
dd_create_tablespace	dict/dict0dd.cc	/^bool dd_create_tablespace(dd::cache::Dictionary_client *dd_client, THD *thd,$/;"	f
dd_drop_fts_table	dict/dict0dd.cc	/^bool dd_drop_fts_table(const char *name, bool file_per_table) {$/;"	f
dd_drop_tablespace	dict/dict0dd.cc	/^bool dd_drop_tablespace(dd::cache::Dictionary_client *dd_client, THD *thd,$/;"	f
dd_fil	fil/fil0fil.cc	/^namespace dd_fil {$/;"	n	file:
dd_fill_dict_index	dict/dict0dd.cc	/^inline int dd_fill_dict_index(const dd::Table &dd_table, const TABLE *m_form,$/;"	f
dd_fill_dict_table	dict/dict0dd.cc	/^static inline dict_table_t *dd_fill_dict_table(const Table *dd_tab,$/;"	f	file:
dd_fill_instant_columns	dict/dict0dd.cc	/^static void dd_fill_instant_columns(const dd::Table &dd_table,$/;"	f	file:
dd_fill_one_dict_index	dict/dict0dd.cc	/^static MY_ATTRIBUTE((warn_unused_result)) int dd_fill_one_dict_index($/;"	f
dd_find_index	dict/dict0dd.cc	/^const dict_index_t *dd_find_index(const dict_table_t *table, Index *dd_index) {$/;"	f
dd_first	include/dict0dd.h	/^inline const Index *dd_first(const Table *table) {$/;"	f
dd_first_index	include/dict0dd.h	/^inline const dd::Index *dd_first_index(const dd::Table *table) {$/;"	f
dd_first_index	include/dict0dd.h	/^inline const dd::Partition_index *dd_first_index($/;"	f
dd_get_and_save_data_dir_path	dict/dict0dd.cc	/^void dd_get_and_save_data_dir_path(dict_table_t *table, const Table *dd_table,$/;"	f
dd_get_and_save_space_name	dict/dict0dd.cc	/^void dd_get_and_save_space_name(dict_table_t *table, const Table *dd_table,$/;"	f
dd_get_first_path	dict/dict0dd.cc	/^char *dd_get_first_path(mem_heap_t *heap, dict_table_t *table,$/;"	f
dd_get_meta_data_filename	dict/dict0dd.cc	/^void dd_get_meta_data_filename(dict_table_t *table, dd::Table *dd_table,$/;"	f
dd_get_or_assign_fts_tablespace_id	dict/dict0dd.cc	/^static bool dd_get_or_assign_fts_tablespace_id(const dict_table_t *parent_table,$/;"	f	file:
dd_get_referenced_table	dict/dict0dd.cc	/^char *dd_get_referenced_table(const char *name, const char *database_name,$/;"	f
dd_get_space_id	include/dict0dd.h	/^inline dd::Object_id dd_get_space_id(const dd::Table &table) {$/;"	f
dd_get_tablespace_size_option	dict/dict0dd.cc	/^bool dd_get_tablespace_size_option(dd::cache::Dictionary_client *dd_client,$/;"	f
dd_get_total_indexes_num	dict/dict0dd.cc	/^uint32_t dd_get_total_indexes_num() {$/;"	f
dd_getnext_system_low	dict/dict0dd.cc	/^static const rec_t *dd_getnext_system_low(btr_pcur_t *pcur, mtr_t *mtr) {$/;"	f	file:
dd_getnext_system_rec	dict/dict0dd.cc	/^const rec_t *dd_getnext_system_rec(btr_pcur_t *pcur, mtr_t *mtr) {$/;"	f
dd_has_explicit_pk	dict/dict0upgrade.cc	/^static bool dd_has_explicit_pk(const dd::Table *dd_table) {$/;"	f	file:
dd_implicit_alter_tablespace	dict/dict0dd.cc	/^bool dd_implicit_alter_tablespace(dd::cache::Dictionary_client *dd_client,$/;"	f
dd_import_instant_add_columns	dict/dict0dd.cc	/^void dd_import_instant_add_columns(const dict_table_t *table,$/;"	f
dd_index_key_strings	include/dict0dd.h	/^const char *const dd_index_key_strings[DD_INDEX__LAST] = {$/;"	v
dd_index_keys	include/dict0dd.h	/^enum dd_index_keys {$/;"	g
dd_index_match	dict/dict0dd.cc	/^static bool dd_index_match(const dict_index_t *index, const Index *dd_index) {$/;"	f	file:
dd_instant_columns_exist	dict/dict0dd.cc	/^bool dd_instant_columns_exist(const dd::Table &dd_table) {$/;"	f
dd_is_discarded	include/dict0dd.h	/^inline bool dd_is_discarded(const dd::Partition &partition) {$/;"	f
dd_is_discarded	include/dict0dd.h	/^inline bool dd_is_discarded(const dd::Table &table) {$/;"	f
dd_is_only_column	handler/ha_innodb.cc	/^static bool dd_is_only_column(const dd::Index *index,$/;"	f	file:
dd_is_table_in_encrypted_tablespace	dict/dict0dd.cc	/^bool dd_is_table_in_encrypted_tablespace(const dict_table_t *table) {$/;"	f
dd_load_tablespace	dict/dict0dd.cc	/^void dd_load_tablespace(const Table *dd_table, dict_table_t *table,$/;"	f
dd_match_default_value	dict/dict0dd.cc	/^bool dd_match_default_value(const dd::Column *dd_col, const dict_col_t *col) {$/;"	f
dd_mdl_for_undo	dict/dict0dd.cc	/^bool dd_mdl_for_undo(const trx_t *trx) {$/;"	f
dd_mdl_release	dict/dict0dd.cc	/^void dd_mdl_release(THD *thd, MDL_ticket **mdl) {$/;"	f
dd_open_fk_tables	dict/dict0dd.cc	/^void dd_open_fk_tables(dict_names_t &fk_list, bool dict_locked, THD *thd) {$/;"	f
dd_open_hardcoded	handler/ha_innodb.cc	/^static bool dd_open_hardcoded(space_id_t space_id, const char *filename) {$/;"	f	file:
dd_open_table	dict/dict0dd.cc	/^dict_table_t *dd_open_table(dd::cache::Dictionary_client *client,$/;"	f
dd_open_table_one	dict/dict0dd.cc	/^dict_table_t *dd_open_table_one(dd::cache::Dictionary_client *client,$/;"	f
dd_open_table_one_on_name	dict/dict0dd.cc	/^static void dd_open_table_one_on_name(const char *name, bool dict_locked,$/;"	f	file:
dd_parse_default_value	dict/dict0dd.cc	/^static void dd_parse_default_value(const dd::Properties &se_private_data,$/;"	f	file:
dd_parse_merge_threshold	dict/dict0dd.cc	/^static ulint dd_parse_merge_threshold(THD *thd, const char *str) {$/;"	f	file:
dd_part_adjust_table_id	dict/dict0dd.cc	/^void dd_part_adjust_table_id(dd::Table *new_table) {$/;"	f
dd_part_has_datadir	handler/handler0alter.cc	/^static bool dd_part_has_datadir(const dd::Partition *dd_part) {$/;"	f	file:
dd_part_has_instant_cols	include/dict0dd.h	/^inline bool dd_part_has_instant_cols(const dd::Partition &part) {$/;"	f
dd_part_is_first	include/dict0dd.h	/^inline bool dd_part_is_first(const dd::Partition *dd_part) {$/;"	f
dd_part_is_stored	include/dict0dd.h	/^inline bool dd_part_is_stored(const dd::Partition *part) {$/;"	f
dd_partition_key_strings	include/dict0dd.h	/^const char *const dd_partition_key_strings[DD_PARTITION__LAST] = {$/;"	v
dd_partition_keys	include/dict0dd.h	/^enum dd_partition_keys {$/;"	g
dd_prepare_inplace_alter_table	handler/handler0alter.cc	/^static MY_ATTRIBUTE((warn_unused_result)) bool dd_prepare_inplace_alter_table($/;"	f
dd_process_dd_columns_rec	dict/dict0dd.cc	/^bool dd_process_dd_columns_rec(mem_heap_t *heap, const rec_t *rec,$/;"	f
dd_process_dd_indexes_rec	dict/dict0dd.cc	/^bool dd_process_dd_indexes_rec(mem_heap_t *heap, const rec_t *rec,$/;"	f
dd_process_dd_indexes_rec_simple	dict/dict0dd.cc	/^bool dd_process_dd_indexes_rec_simple(mem_heap_t *heap, const rec_t *rec,$/;"	f
dd_process_dd_partitions_rec_and_mtr_commit	dict/dict0dd.cc	/^const char *dd_process_dd_partitions_rec_and_mtr_commit($/;"	f
dd_process_dd_tables_rec_and_mtr_commit	dict/dict0dd.cc	/^const char *dd_process_dd_tables_rec_and_mtr_commit($/;"	f
dd_process_dd_tablespaces_rec	dict/dict0dd.cc	/^bool dd_process_dd_tablespaces_rec(mem_heap_t *heap, const rec_t *rec,$/;"	f
dd_process_dd_virtual_columns_rec	dict/dict0dd.cc	/^bool dd_process_dd_virtual_columns_rec(mem_heap_t *heap, const rec_t *rec,$/;"	f
dd_release_mdl	dict/dict0dd.cc	/^void dd_release_mdl(MDL_ticket *mdl_ticket) {$/;"	f
dd_rename_fts_table	dict/dict0dd.cc	/^bool dd_rename_fts_table(const dict_table_t *table, const char *old_name) {$/;"	f
dd_sdi_acquire_exclusive_mdl	dict/dict0dict.cc	/^dberr_t dd_sdi_acquire_exclusive_mdl(THD *thd, space_id_t space_id,$/;"	f
dd_sdi_acquire_shared_mdl	dict/dict0dict.cc	/^dberr_t dd_sdi_acquire_shared_mdl(THD *thd, space_id_t space_id,$/;"	f
dd_set_autoinc	dict/dict0dd.cc	/^void dd_set_autoinc(dd::Properties &se_private_data, uint64 autoinc) {$/;"	f
dd_set_discarded	include/dict0dd.h	/^inline void dd_set_discarded(dd::Partition &partition, bool discarded) {$/;"	f
dd_set_discarded	include/dict0dd.h	/^inline void dd_set_discarded(dd::Table &table, bool discarded) {$/;"	f
dd_set_fts_nullability	dict/dict0dd.cc	/^static void dd_set_fts_nullability(dd::Column *dd_col, const dict_col_t *col) {$/;"	f	file:
dd_set_fts_table_options	dict/dict0dd.cc	/^void dd_set_fts_table_options(dd::Table *dd_table, const dict_table_t *table) {$/;"	f
dd_set_table_options	dict/dict0dd.cc	/^void dd_set_table_options(Table *dd_table, const dict_table_t *table) {$/;"	f
dd_set_tablespace_compression	dict/dict0dd.cc	/^bool dd_set_tablespace_compression(dd::cache::Dictionary_client *client,$/;"	f
dd_space_get_name	dict/dict0dd.cc	/^char *dd_space_get_name(mem_heap_t *heap, dict_table_t *table,$/;"	f
dd_space_id	include/dict0mem.h	/^  dd::Object_id dd_space_id;$/;"	m	struct:dict_table_t
dd_space_key_strings	include/dict0dd.h	/^const char *const dd_space_key_strings[DD_SPACE__LAST] = {$/;"	v
dd_space_keys	include/dict0dd.h	/^enum dd_space_keys {$/;"	g
dd_space_state_values	include/dict0dd.h	/^const char *const dd_space_state_values[DD_SPACE_STATE__LAST + 1] = {$/;"	v
dd_space_states	include/dict0dd.h	/^enum dd_space_states {$/;"	g
dd_startscan_system	dict/dict0dd.cc	/^const rec_t *dd_startscan_system(THD *thd, MDL_ticket **mdl, btr_pcur_t *pcur,$/;"	f
dd_table_check_for_child	dict/dict0dd.cc	/^dberr_t dd_table_check_for_child(dd::cache::Dictionary_client *client,$/;"	f
dd_table_close	dict/dict0dd.cc	/^void dd_table_close(dict_table_t *table, THD *thd, MDL_ticket **mdl,$/;"	f
dd_table_contains_fulltext	dict/dict0dd.cc	/^inline bool dd_table_contains_fulltext(const dd::Table &table) {$/;"	f
dd_table_discard_tablespace	dict/dict0dd.cc	/^bool dd_table_discard_tablespace(THD *thd, const dict_table_t *table,$/;"	f
dd_table_get_space_name	dict/dict0dd.cc	/^const char *dd_table_get_space_name(const Table *dd_table) {$/;"	f
dd_table_has_instant_cols	include/dict0dd.h	/^inline bool dd_table_has_instant_cols(const dd::Table &table) {$/;"	f
dd_table_is_partitioned	include/dict0dd.h	/^inline bool dd_table_is_partitioned(const dd::Table &table) {$/;"	f
dd_table_key_strings	include/dict0dd.h	/^const char *const dd_table_key_strings[DD_TABLE__LAST] = {$/;"	v
dd_table_keys	include/dict0dd.h	/^enum dd_table_keys {$/;"	g
dd_table_load_fk	dict/dict0dd.cc	/^dberr_t dd_table_load_fk(dd::cache::Dictionary_client *client,$/;"	f
dd_table_load_fk_from_dd	dict/dict0dd.cc	/^dberr_t dd_table_load_fk_from_dd(dict_table_t *m_table,$/;"	f
dd_table_match	dict/dict0dd.cc	/^bool dd_table_match(const dict_table_t *table, const Table *dd_table) {$/;"	f
dd_table_open_on_dd_obj	dict/dict0dd.cc	/^int dd_table_open_on_dd_obj(THD *thd, dd::cache::Dictionary_client *client,$/;"	f
dd_table_open_on_id	dict/dict0dd.cc	/^dict_table_t *dd_table_open_on_id(table_id_t table_id, THD *thd,$/;"	f
dd_table_open_on_id_low	dict/dict0dd.cc	/^static dict_table_t *dd_table_open_on_id_low(THD *thd, MDL_ticket **mdl,$/;"	f	file:
dd_table_open_on_name	dict/dict0dd.cc	/^dict_table_t *dd_table_open_on_name(THD *thd, MDL_ticket **mdl,$/;"	f
dd_table_part_has_instant_cols	include/dict0dd.h	/^inline bool dd_table_part_has_instant_cols(const dd::Table &table) {$/;"	f
dd_tablespace_get_filename	include/dict0dd.h	/^const char *dd_tablespace_get_filename(const dd::Tablespace *dd_space) {$/;"	f
dd_tablespace_get_mdl	dict/dict0dd.cc	/^bool dd_tablespace_get_mdl(const char *space_name, MDL_ticket **mdl_ticket,$/;"	f
dd_tablespace_get_space_id	dict/dict0dd.cc	/^bool dd_tablespace_get_space_id(const dd::Tablespace *dd_space,$/;"	f
dd_tablespace_get_state	dict/dict0dd.cc	/^void dd_tablespace_get_state(const dd::Properties *p, dd::String_type *state,$/;"	f
dd_tablespace_get_state	dict/dict0dd.cc	/^void dd_tablespace_get_state(const dd::Tablespace *dd_space,$/;"	f
dd_tablespace_get_state_enum	dict/dict0dd.cc	/^dd_space_states dd_tablespace_get_state_enum(const dd::Properties *p,$/;"	f
dd_tablespace_get_state_enum	dict/dict0dd.cc	/^dd_space_states dd_tablespace_get_state_enum(const dd::Tablespace *dd_space,$/;"	f
dd_tablespace_is_discarded	dict/dict0dd.cc	/^bool dd_tablespace_is_discarded(const dd::Tablespace *dd_space) {$/;"	f
dd_tablespace_is_implicit	dict/dict0dd.cc	/^bool dd_tablespace_is_implicit(dd::cache::Dictionary_client *client,$/;"	f
dd_tablespace_rename	dict/dict0dd.cc	/^dberr_t dd_tablespace_rename(dd::Object_id dd_space_id, bool is_system_cs,$/;"	f
dd_tablespace_set_id_and_state	dict/dict0dd.cc	/^bool dd_tablespace_set_id_and_state(const char *space_name, space_id_t space_id,$/;"	f
dd_tablespace_set_space_id	dict/dict0dd.cc	/^void dd_tablespace_set_space_id(dd::Tablespace *dd_space, space_id_t space_id) {$/;"	f
dd_tablespace_set_state	dict/dict0dd.cc	/^void dd_tablespace_set_state(dd::Tablespace *dd_space, dd_space_states state) {$/;"	f
dd_tablespace_update_cache	dict/dict0dd.cc	/^bool dd_tablespace_update_cache(THD *thd) {$/;"	f
dd_thd_for_undo	dict/dict0dd.cc	/^THD *dd_thd_for_undo(const trx_t *trx) {$/;"	f
dd_update_v_cols	dict/dict0dd.cc	/^void dd_update_v_cols(dd::Table *dd_table, table_id_t id) {$/;"	f
dd_upgrade_check_for_autoinc	dict/dict0upgrade.cc	/^static bool dd_upgrade_check_for_autoinc(TABLE *srv_table,$/;"	f	file:
dd_upgrade_drop_57_backup_spaces	dict/dict0upgrade.cc	/^static void dd_upgrade_drop_57_backup_spaces() {$/;"	f	file:
dd_upgrade_drop_sys_tables	dict/dict0upgrade.cc	/^static void dd_upgrade_drop_sys_tables() {$/;"	f	file:
dd_upgrade_ensure_has_dd_space_id	dict/dict0upgrade.cc	/^static bool dd_upgrade_ensure_has_dd_space_id(THD *thd,$/;"	f	file:
dd_upgrade_find_index	dict/dict0upgrade.cc	/^static uint32_t dd_upgrade_find_index(TABLE *srv_table, const char *name) {$/;"	f	file:
dd_upgrade_finish	dict/dict0upgrade.cc	/^int dd_upgrade_finish(THD *thd, bool failed_upgrade) {$/;"	f
dd_upgrade_fix_fts_column	dict/dict0upgrade.cc	/^bool dd_upgrade_fix_fts_column(dd::Table *dd_table, dict_table_t *ib_table) {$/;"	f
dd_upgrade_fts_rename_cleanup	dict/dict0upgrade.cc	/^static void dd_upgrade_fts_rename_cleanup(bool failed_upgrade) {$/;"	f	file:
dd_upgrade_get_field	dict/dict0upgrade.cc	/^static Field *dd_upgrade_get_field(const TABLE *srv_table, const char *name) {$/;"	f	file:
dd_upgrade_get_tablespace	dict/dict0upgrade.cc	/^static dd::Tablespace *dd_upgrade_get_tablespace($/;"	f	file:
dd_upgrade_indexes_num	dict/dict0upgrade.cc	/^uint32_t dd_upgrade_indexes_num = 1;$/;"	v
dd_upgrade_logs	dict/dict0upgrade.cc	/^int dd_upgrade_logs(THD *thd) {$/;"	f
dd_upgrade_match_cols	dict/dict0upgrade.cc	/^static bool dd_upgrade_match_cols(const TABLE *srv_table,$/;"	f	file:
dd_upgrade_match_index	dict/dict0upgrade.cc	/^static bool dd_upgrade_match_index(TABLE *srv_table, dict_index_t *index) {$/;"	f	file:
dd_upgrade_match_single_col	dict/dict0upgrade.cc	/^static bool dd_upgrade_match_single_col(const Field *field,$/;"	f	file:
dd_upgrade_partitions	dict/dict0upgrade.cc	/^static bool dd_upgrade_partitions(THD *thd, const char *norm_name,$/;"	f	file:
dd_upgrade_process_index	dict/dict0upgrade.cc	/^static void dd_upgrade_process_index(Index dd_index, dict_index_t *index,$/;"	f	file:
dd_upgrade_register_tablespace	dict/dict0upgrade.cc	/^static uint32_t dd_upgrade_register_tablespace($/;"	f	file:
dd_upgrade_set_auto_inc	dict/dict0upgrade.cc	/^static void dd_upgrade_set_auto_inc(const TABLE *srv_table, dd::Table *dd_table,$/;"	f	file:
dd_upgrade_set_row_type	dict/dict0upgrade.cc	/^static void dd_upgrade_set_row_type(dict_table_t *ib_table,$/;"	f	file:
dd_upgrade_table	dict/dict0upgrade.cc	/^bool dd_upgrade_table(THD *thd, const char *db_name, const char *table_name,$/;"	f
dd_upgrade_table_fk	dict/dict0upgrade.cc	/^static bool dd_upgrade_table_fk(dict_table_t *ib_table, dd::Table *dd_table) {$/;"	f	file:
dd_upgrade_tablespace	dict/dict0upgrade.cc	/^int dd_upgrade_tablespace(THD *thd) {$/;"	f
dd_write_default_value	dict/dict0dd.cc	/^void dd_write_default_value(const dict_col_t *col, dd::Column *dd_col) {$/;"	f
dd_write_index	dict/dict0dd.cc	/^static void dd_write_index(dd::Object_id dd_space_id, Index *dd_index,$/;"	f	file:
dd_write_table	dict/dict0dd.cc	/^void dd_write_table(dd::Object_id dd_space_id, Table *dd_table,$/;"	f
dd_write_tablespace	dict/dict0dd.cc	/^void dd_write_tablespace(dd::Tablespace *dd_space, space_id_t space_id,$/;"	f
ddl_log	include/dict0dict.h	/^  dict_table_t *ddl_log;$/;"	m	struct:dict_sys_t
ddl_log_close	include/log0ddl.h	/^inline void ddl_log_close() { UT_DELETE(log_ddl); }$/;"	f	class:Log_Type
ddl_log_crash_reset	log/log0ddl.cc	/^void ddl_log_crash_reset(THD *thd, SYS_VAR *var, void *var_ptr,$/;"	f
ddl_must_flush	include/trx0trx.h	/^  bool ddl_must_flush; \/*!< True if this trx involves dd table$/;"	m	struct:trx_t
ddl_mutex	trx/trx0purge.cc	/^ib_mutex_t ddl_mutex;$/;"	m	namespace:undo	file:
ddl_not_evictable	include/dict0mem.h	/^  unsigned ddl_not_evictable : 1;$/;"	m	struct:dict_table_t
ddl_operation	include/trx0trx.h	/^  bool ddl_operation;  \/*!< True if this trx involves dd table$/;"	m	struct:trx_t
dealloc	include/lob0impl.h	/^  void dealloc() {$/;"	f	struct:lob::node_page_t
dealloc	include/lob0impl.h	/^  void dealloc() {$/;"	f	struct:lob::z_data_page_t
dealloc	include/lob0impl.h	/^  void dealloc() {$/;"	f	struct:lob::z_frag_node_page_t
dealloc	include/lob0impl.h	/^  void dealloc() {$/;"	f	struct:lob::z_frag_page_t
dealloc	include/lob0impl.h	/^  void dealloc() {$/;"	f	struct:lob::z_index_page_t
dealloc	include/lob0pages.h	/^  void dealloc() {$/;"	f	struct:lob::data_page_t
dealloc	include/ut0new.h	/^  void dealloc() {$/;"	f	class:ut::aligned_array_pointer
dealloc	include/ut0new.h	/^  void dealloc() {$/;"	f	class:ut::aligned_pointer
dealloc	lob/lob0first.cc	/^void first_page_t::dealloc() {$/;"	f	class:lob::first_page_t
dealloc	lob/zlob0first.cc	/^void z_first_page_t::dealloc() {$/;"	f	class:lob::z_first_page_t
dealloc_frag_id	include/lob0impl.h	/^  void dealloc_frag_id(ulint frag_id) {$/;"	f	struct:lob::z_frag_page_t
dealloc_frag_id	lob/lob0impl.cc	/^void z_frag_page_t::dealloc_frag_id() {$/;"	f	class:lob::z_frag_page_t
dealloc_fragment	include/lob0impl.h	/^  void dealloc_fragment(frag_node_t &frag) {$/;"	f	struct:lob::z_frag_page_t
dealloc_fragment	include/lob0impl.h	/^  void dealloc_fragment(ulint frag_id) {$/;"	f	struct:lob::z_frag_page_t
dealloc_with_entry	lob/lob0impl.cc	/^void z_frag_page_t::dealloc_with_entry(z_first_page_t &first,$/;"	f	class:lob::z_frag_page_t
deallocate	include/mem0mem.h	/^  void deallocate(pointer p, size_type n) {}$/;"	f	class:mem_heap_allocator
deallocate	include/ut0new.h	/^  void deallocate(pointer ptr, size_type n_elements = 0) {$/;"	f	class:ut_allocator
deallocate_chunk	buf/buf0buf.cc	/^void buf_pool_t::deallocate_chunk(buf_chunk_t *chunk) {$/;"	f	class:buf_pool_t
deallocate_large	include/ut0new.h	/^  void deallocate_large(pointer ptr, const ut_new_pfx_t *pfx) {$/;"	f	class:ut_allocator
deallocate_trace	include/ut0new.h	/^  void deallocate_trace(const ut_new_pfx_t *pfx) {$/;"	f	class:ut_allocator
debug	trx/trx0trx.cc	/^  static bool debug(const trx_t *trx) {$/;"	f	struct:TrxFactory
debug_check	buf/buf0buf.cc	/^dberr_t Buf_fetch<T>::debug_check(buf_block_t *fix_block) {$/;"	f	class:Buf_fetch
debug_latch	include/buf0buf.h	/^  rw_lock_t debug_latch;$/;"	m	struct:Cache_hint::buf_block_t
debug_list	include/sync0rw.h	/^  UT_LIST_BASE_NODE_T(rw_lock_debug_t) debug_list;$/;"	m	struct:rw_lock_t
debug_restart	clone/clone0clone.cc	/^int Clone_Task_Manager::debug_restart(Clone_Task *task, int in_err,$/;"	f	class:Clone_Task_Manager
debug_skip_write	clone/clone0repl.cc	/^bool Clone_persist_gtid::debug_skip_write(bool compression) {$/;"	f	class:Clone_persist_gtid
debug_wait	clone/clone0clone.cc	/^void Clone_Task_Manager::debug_wait(uint chunk_num, Clone_Task *task) {$/;"	f	class:Clone_Task_Manager
dec	include/buf0stats.h	/^  void dec(const index_id_t &id) {$/;"	f	class:buf_stat_per_index_t
dec	include/ut0counter.h	/^inline Type dec(Shards<COUNT> &shards, size_t id) {$/;"	f	namespace:Counter
dec	include/ut0lock_free_hash.h	/^  void dec() {$/;"	f	class:ut_lock_free_cnt_t
declaration	pars/pars0grm.y	/^declaration:$/;"	l
declaration_list	pars/pars0grm.y	/^declaration_list:$/;"	l
declared_to_be_inside_innodb	include/trx0trx.h	/^  bool declared_to_be_inside_innodb;$/;"	m	struct:trx_t
decode	dict/dict0dd.cc	/^const byte *DD_instant_col_val_coder::decode(const char *stream, size_t in_len,$/;"	f	class:DD_instant_col_val_coder
decompress	include/dict0sdi-decompress.h	/^  inline void decompress() {$/;"	f	class:Sdi_Decompressor
decompressed	include/page0types.h	/^  ulint decompressed;$/;"	m	struct:page_zip_stat_t
decompressed_usec	include/page0types.h	/^  ib_uint64_t decompressed_usec;$/;"	m	struct:page_zip_stat_t
decr_curr_size	include/trx0types.h	/^  void decr_curr_size(page_no_t npages = 1) {$/;"	f	struct:trx_rseg_t
decr_len	include/lob0impl.h	/^  void decr_len() {$/;"	f	struct:lob::plist_base_node_t
decr_length_by_2	include/lob0impl.h	/^  void decr_length_by_2() {$/;"	f	struct:lob::frag_node_t
decr_n_dir_entries	include/lob0impl.h	/^  void decr_n_dir_entries() const {$/;"	f	struct:lob::z_frag_page_t
decrypt_key_in_header	clone/clone0snapshot.cc	/^void Clone_Snapshot::decrypt_key_in_header(fil_space_t *space,$/;"	f	class:Clone_Snapshot
def_trx_id	include/dict0mem.h	/^  trx_id_t def_trx_id;$/;"	m	struct:dict_table_t
default_indexer_t	include/ut0counter.h	112;"	d
default_rec	include/dict0mem.h	/^  byte *default_rec;$/;"	m	struct:dict_vcol_templ_t
default_rec	include/row0mysql.h	/^  const byte *default_rec; \/*!< the default values of all columns$/;"	m	struct:row_prebuilt_t
default_row_format_enum	handler/ha_innodb.cc	/^enum default_row_format_enum {$/;"	g	file:
deflate	page/page0zip.cc	592;"	d	file:
deflate	page/page0zip.cc	598;"	d	file:
deinit	log/log0meb.cc	/^  void deinit() {$/;"	f	class:meb::Queue
deinit	trx/trx0purge.cc	/^void undo::Tablespaces::deinit() {$/;"	f	class:undo::Tablespaces
deinit	trx/trx0rseg.cc	/^void Rsegs::deinit() {$/;"	f	class:Rsegs
deinitialize_service_handles	handler/ha_innodb.cc	/^static void deinitialize_service_handles() {$/;"	f	namespace:innobase::component_services
del_list_regenerated	fts/fts0opt.cc	/^  ibool del_list_regenerated;$/;"	m	struct:fts_optimize_t	file:
del_marks	include/trx0undo.h	/^  ibool del_marks; \/*!< relevant only in an update undo$/;"	m	struct:trx_undo_t
del_multi_val_pos	include/row0upd.h	/^  uint32_t del_multi_val_pos;$/;"	m	struct:upd_node_t
del_pos	fts/fts0opt.cc	/^  ulint del_pos; \/*!< Offset within to_delete vector,$/;"	m	struct:fts_optimize_t	file:
delete_all_rows	handler/ha_innodb.cc	/^int ha_innobase::delete_all_rows() {$/;"	f	class:ha_innobase
delete_array	include/ut0new.h	/^  void delete_array(T *ptr) {$/;"	f	class:ut_allocator
delete_by_id	log/log0ddl.cc	/^dberr_t Log_DDL::delete_by_id(trx_t *trx, uint64_t id, bool dict_locked) {$/;"	f	class:Log_DDL
delete_by_ids	log/log0ddl.cc	/^dberr_t Log_DDL::delete_by_ids(DDL_Records &records) {$/;"	f	class:Log_DDL
delete_file	arch/arch0arch.cc	/^bool Arch_File_Ctx::delete_file(uint file_index, lsn_t begin_lsn) {$/;"	f	class:Arch_File_Ctx
delete_files	arch/arch0arch.cc	/^void Arch_File_Ctx::delete_files(lsn_t begin_lsn) {$/;"	f	class:Arch_File_Ctx
delete_files	fsp/fsp0space.cc	/^void Tablespace::delete_files() {$/;"	f	class:Tablespace
delete_impl	handler/ha_innodb.cc	/^int innobase_basic_ddl::delete_impl(THD *thd, const char *name,$/;"	f	class:innobase_basic_ddl
delete_nodes_graph	fts/fts0opt.cc	/^  que_t *delete_nodes_graph;$/;"	m	struct:fts_optimize_graph_t	file:
delete_old_pool	srv/srv0tmp.cc	/^void Tablespace_pool::delete_old_pool(bool create_new_db) {$/;"	f	class:ibt::Tablespace_pool
delete_pool_manager	srv/srv0tmp.cc	/^void delete_pool_manager() { UT_DELETE(tbsp_pool); }$/;"	f	namespace:ibt
delete_row	handler/ha_innodb.cc	/^int ha_innobase::delete_row($/;"	f	class:ha_innobase
delete_row_in_part	handler/ha_innopart.cc	/^int ha_innopart::delete_row_in_part(uint part_id, const uchar *record) {$/;"	f	class:ha_innopart
delete_statement_positioned	pars/pars0grm.y	/^delete_statement_positioned:$/;"	l
delete_statement_searched	pars/pars0grm.y	/^delete_statement_searched:$/;"	l
delete_statement_start	pars/pars0grm.y	/^delete_statement_start:$/;"	l
delete_table	handler/ha_innodb.cc	/^int ha_innobase::delete_table(const char *name, const dd::Table *table_def) {$/;"	f	class:ha_innobase
delete_table	handler/ha_innopart.cc	/^int ha_innopart::delete_table(const char *name, const dd::Table *dd_table) {$/;"	f	class:ha_innopart
deleted	fts/fts0opt.cc	/^  ulint deleted; \/*!< Number of doc ids deleted since the$/;"	m	struct:fts_slot_t	file:
deleted	fts/fts0que.cc	/^  fts_doc_ids_t *deleted; \/*!< Deleted doc ids that need to be$/;"	m	struct:fts_query_t	file:
deleted	include/fts0types.h	/^  ulint deleted; \/*!< Number of doc ids deleted since$/;"	m	struct:fts_cache_t
deleted	include/log0recv.h	/^  Missing_Ids deleted;$/;"	m	struct:recv_sys_t
deleted_doc_ids	include/fts0types.h	/^  ib_vector_t *deleted_doc_ids; \/*!< Array of deleted doc ids, each$/;"	m	struct:fts_cache_t
deleted_lock	include/fts0types.h	/^  ib_mutex_t deleted_lock; \/*!< Lock covering deleted_doc_ids *\/$/;"	m	struct:fts_cache_t
delimit_dir_name	log/log0meb.cc	/^static std::string delimit_dir_name(const std::string &path_name) {$/;"	f	namespace:meb
deprecated_undo_logs	srv/srv0srv.cc	/^const char *deprecated_undo_logs =$/;"	v
depth	include/fts0ast.h	/^  int depth;                \/*!< Depth of parsing state *\/$/;"	m	struct:fts_ast_state_t
dequeue	log/log0meb.cc	/^  void dequeue(T &lb) {$/;"	f	class:meb::Queue
dequeue	row/row0pread.cc	/^std::shared_ptr<Parallel_reader::Ctx> Parallel_reader::dequeue() {$/;"	f	class:Parallel_reader
deserialize	clone/clone0desc.cc	/^bool Clone_Desc_Data::deserialize(const byte *desc_data, uint desc_len) {$/;"	f	class:Clone_Desc_Data
deserialize	clone/clone0desc.cc	/^bool Clone_Desc_File_MetaData::deserialize(const byte *desc_file,$/;"	f	class:Clone_Desc_File_MetaData
deserialize	clone/clone0desc.cc	/^bool Clone_Desc_Header::deserialize(const byte *desc_hdr, uint desc_len) {$/;"	f	class:Clone_Desc_Header
deserialize	clone/clone0desc.cc	/^bool Clone_Desc_State::deserialize(const byte *desc_state, uint desc_len) {$/;"	f	class:Clone_Desc_State
deserialize	clone/clone0desc.cc	/^bool Clone_Desc_Task_Meta::deserialize(const byte *desc_task, uint desc_len) {$/;"	f	class:Clone_Desc_Task_Meta
deserialize	clone/clone0desc.cc	/^void Chnunk_Bitmap::deserialize(const byte *desc_chunk, uint &len_left) {$/;"	f	class:Chnunk_Bitmap
deserialize	clone/clone0desc.cc	/^void Chunk_Info::deserialize(const byte *desc_chunk, uint &len_left) {$/;"	f	class:Chunk_Info
deserialize	clone/clone0desc.cc	/^void Clone_Desc_Locator::deserialize(const byte *desc_loc, uint desc_len,$/;"	f	class:Clone_Desc_Locator
deserialize	os/file.cc	/^dberr_t Compression::deserialize(bool dblwr_read, byte *src, byte *dst,$/;"	f	class:Compression
deserialize_header	os/file.cc	/^void Compression::deserialize_header(const byte *page,$/;"	f	class:Compression
destroy	include/lob0undo.h	/^  void destroy() {$/;"	f	struct:lob::undo_seq_t
destroy	include/lob0undo.h	/^  void destroy() {$/;"	f	struct:lob::undo_vers_t
destroy	include/mem0mem.h	/^  void destroy(pointer p) { (reinterpret_cast<T *>(p))->~T(); }$/;"	f	class:mem_heap_allocator
destroy	include/ut0new.h	/^  void destroy(pointer p) { p->~T(); }$/;"	f	class:ut_allocator
destroy	include/ut0pool.h	/^  void destroy() {$/;"	f	struct:PoolManager
destroy	lob/lob0del.cc	/^dberr_t Deleter::destroy() {$/;"	f	class:lob::Deleter
destroy	lob/lob0first.cc	/^void first_page_t::destroy() {$/;"	f	class:lob::first_page_t
destroy	lob/lob0undo.cc	/^void undo_data_t::destroy() {$/;"	f	class:lob::undo_data_t
destroy	lob/zlob0first.cc	/^size_t z_first_page_t::destroy() {$/;"	f	class:lob::z_first_page_t
destroy	trx/trx0trx.cc	/^  static void destroy(trx_t *trx) {$/;"	f	struct:TrxFactory
destroy	trx/trx0trx.cc	/^  void destroy() { mutex_free(&m_mutex); }$/;"	f	struct:TrxPoolLock
destroy	trx/trx0trx.cc	/^  void destroy() { mutex_free(&m_mutex); }$/;"	f	struct:TrxPoolManagerLock
destroy_data_lock_iterator	handler/p_s.cc	/^void Innodb_data_lock_inspector::destroy_data_lock_iterator($/;"	f	class:Innodb_data_lock_inspector
destroy_data_lock_wait_iterator	handler/p_s.cc	/^void Innodb_data_lock_inspector::destroy_data_lock_wait_iterator($/;"	f	class:Innodb_data_lock_inspector
destroy_record_priority_queue_for_parts	handler/ha_innopart.cc	/^inline void ha_innopart::destroy_record_priority_queue_for_parts() {$/;"	f	class:ha_innopart
detach	clone/clone0snapshot.cc	/^uint Clone_Snapshot::detach() {$/;"	f	class:Clone_Snapshot
detach	handler/ha_innodb.cc	/^void create_table_info_t::detach() {$/;"	f	class:create_table_info_t
detach	include/arch0arch.h	/^  uint detach(lsn_t stop_lsn, Arch_Page_Pos *stop_pos) {$/;"	f	class:Arch_Group
detach	include/clone0clone.h	/^  uint detach() {$/;"	f	class:Clone_Handle
detach_snapshot	clone/clone0clone.cc	/^void Clone_Sys::detach_snapshot(Clone_Snapshot *snapshot,$/;"	f	class:Clone_Sys
detail	include/detail/ut0new.h	/^namespace detail {$/;"	n	namespace:ut
detail	include/ut0tuple.h	/^namespace detail {$/;"	n
detail_ut0new_h	include/detail/ut0new.h	31;"	d
detailed_error	include/trx0trx.h	/^  char *detailed_error;          \/*!< detailed error message for last$/;"	m	struct:trx_t
device_t	include/fsp0file.h	/^enum device_t {$/;"	g
dfield_check_typed	data/data0data.cc	/^bool dfield_check_typed(const dfield_t *field) {$/;"	f
dfield_check_typed_no_assert	data/data0data.cc	/^static bool dfield_check_typed_no_assert(const dfield_t *field) {$/;"	f	file:
dfield_get_data	include/data0data.h	65;"	d
dfield_get_type	include/data0data.h	64;"	d
dfield_print	data/data0data.cc	/^void dfield_print(std::ostream &o, const dfield_t *field, ulint n) {$/;"	f
dfield_print_also_hex	data/data0data.cc	/^void dfield_print_also_hex(const dfield_t *dfield) {$/;"	f
dfield_print_raw	data/data0data.cc	/^static void dfield_print_raw(FILE *f, const dfield_t *dfield) {$/;"	f	file:
dfield_t	include/data0data.h	/^  dfield_t()$/;"	f	struct:dfield_t
dfield_t	include/data0data.h	/^struct dfield_t {$/;"	s
dict0boot_h	include/dict0boot.h	34;"	d
dict0crea_h	include/dict0crea.h	34;"	d
dict0dd_h	include/dict0dd.h	31;"	d
dict0dict_h	include/dict0dict.h	35;"	d
dict0load_h	include/dict0load.h	35;"	d
dict0mem_h	include/dict0mem.h	35;"	d
dict0priv_h	include/dict0priv.h	34;"	d
dict0stats_bg_h	include/dict0stats_bg.h	34;"	d
dict0stats_h	include/dict0stats.h	34;"	d
dict0types_h	include/dict0types.h	34;"	d
dict_add_col_name	dict/mem.cc	/^const char *dict_add_col_name(const char *col_names, \/*!< in: existing column$/;"	f
dict_add_v_col_t	include/dict0mem.h	/^struct dict_add_v_col_t {$/;"	s
dict_boot	dict/dict0boot.cc	/^dberr_t dict_boot(void) {$/;"	f
dict_build_index_def	dict/dict0crea.cc	/^void dict_build_index_def(const dict_table_t *table, \/*!< in: table *\/$/;"	f
dict_build_table_def	dict/dict0crea.cc	/^dberr_t dict_build_table_def(dict_table_t *table,$/;"	f
dict_build_tablespace	dict/dict0crea.cc	/^dberr_t dict_build_tablespace(trx_t *trx, Tablespace *tablespace) {$/;"	f
dict_build_tablespace_for_table	dict/dict0crea.cc	/^dberr_t dict_build_tablespace_for_table(dict_table_t *table,$/;"	f
dict_check_sys_tables	dict/dict0load.cc	/^space_id_t dict_check_sys_tables(bool validate) {$/;"	f
dict_check_sys_tablespaces	dict/dict0load.cc	/^space_id_t dict_check_sys_tablespaces(bool validate) {$/;"	f
dict_close	dict/dict0dict.cc	/^void dict_close(void) {$/;"	f
dict_col_default_t	include/dict0mem.h	/^struct dict_col_default_t {$/;"	s
dict_col_in_v_indexes	handler/handler0alter.cc	/^static bool dict_col_in_v_indexes(dict_table_t *table, dict_col_t *col) {$/;"	f	file:
dict_col_name_is_reserved	dict/dict0dict.cc	/^ibool dict_col_name_is_reserved(const char *name) \/*!< in: column name *\/$/;"	f
dict_col_sys_columns_enum	include/dict0boot.h	/^enum dict_col_sys_columns_enum {$/;"	g
dict_col_sys_datafiles_enum	include/dict0boot.h	/^enum dict_col_sys_datafiles_enum {$/;"	g
dict_col_sys_fields_enum	include/dict0boot.h	/^enum dict_col_sys_fields_enum {$/;"	g
dict_col_sys_foreign_cols_enum	include/dict0boot.h	/^enum dict_col_sys_foreign_cols_enum {$/;"	g
dict_col_sys_foreign_enum	include/dict0boot.h	/^enum dict_col_sys_foreign_enum {$/;"	g
dict_col_sys_indexes_enum	include/dict0boot.h	/^enum dict_col_sys_indexes_enum {$/;"	g
dict_col_sys_tables_enum	include/dict0boot.h	/^enum dict_col_sys_tables_enum {$/;"	g
dict_col_sys_tablespaces_enum	include/dict0boot.h	/^enum dict_col_sys_tablespaces_enum {$/;"	g
dict_col_sys_virtual_enum	include/dict0boot.h	/^enum dict_col_sys_virtual_enum {$/;"	g
dict_col_t	include/dict0mem.h	/^struct dict_col_t {$/;"	s
dict_create	dict/dict0boot.cc	/^dberr_t dict_create(void) {$/;"	f
dict_create_index_tree_in_mem	dict/dict0crea.cc	/^dberr_t dict_create_index_tree_in_mem(dict_index_t *index, trx_t *trx) {$/;"	f
dict_dict_h	dict/dict.h	39;"	d
dict_drop_temporary_table_index	dict/dict0crea.cc	/^void dict_drop_temporary_table_index(const dict_index_t *index,$/;"	f
dict_duplicate_v_col	dict/dict0dict.cc	/^static dict_v_col_t *dict_duplicate_v_col(const dict_v_col_t *v_col,$/;"	f	file:
dict_err_ignore_t	include/dict0types.h	/^enum dict_err_ignore_t {$/;"	g
dict_field_t	include/dict0mem.h	/^  dict_field_t() : col(nullptr), prefix_len(0), fixed_len(0), is_ascending(0) {}$/;"	f	struct:dict_field_t
dict_field_t	include/dict0mem.h	/^struct dict_field_t {$/;"	s
dict_fld_sys_columns_enum	include/dict0boot.h	/^enum dict_fld_sys_columns_enum {$/;"	g
dict_fld_sys_datafiles_enum	include/dict0boot.h	/^enum dict_fld_sys_datafiles_enum {$/;"	g
dict_fld_sys_fields_enum	include/dict0boot.h	/^enum dict_fld_sys_fields_enum {$/;"	g
dict_fld_sys_foreign_cols_enum	include/dict0boot.h	/^enum dict_fld_sys_foreign_cols_enum {$/;"	g
dict_fld_sys_foreign_enum	include/dict0boot.h	/^enum dict_fld_sys_foreign_enum {$/;"	g
dict_fld_sys_foreign_for_name_enum	include/dict0boot.h	/^enum dict_fld_sys_foreign_for_name_enum {$/;"	g
dict_fld_sys_indexes_enum	include/dict0boot.h	/^enum dict_fld_sys_indexes_enum {$/;"	g
dict_fld_sys_table_ids_enum	include/dict0boot.h	/^enum dict_fld_sys_table_ids_enum {$/;"	g
dict_fld_sys_tables_enum	include/dict0boot.h	/^enum dict_fld_sys_tables_enum {$/;"	g
dict_fld_sys_tablespaces_enum	include/dict0boot.h	/^enum dict_fld_sys_tablespaces_enum {$/;"	g
dict_fld_sys_virtual_enum	include/dict0boot.h	/^enum dict_fld_sys_virtual_enum {$/;"	g
dict_foreign_add_to_cache	dict/dict0dict.cc	/^dberr_t dict_foreign_add_to_cache(dict_foreign_t *foreign,$/;"	f
dict_foreign_add_to_referenced_table	include/dict0mem.h	/^struct dict_foreign_add_to_referenced_table {$/;"	s
dict_foreign_base_for_stored	dict/dict0crea.cc	/^static bool dict_foreign_base_for_stored(const char *col_name,$/;"	f	file:
dict_foreign_compare	include/dict0mem.h	/^struct dict_foreign_compare {$/;"	s
dict_foreign_different_tables	include/dict0mem.h	/^struct dict_foreign_different_tables {$/;"	s
dict_foreign_err_file	dict/dict0dict.cc	/^FILE *dict_foreign_err_file = nullptr;$/;"	v
dict_foreign_err_mutex	dict/dict0dict.cc	/^ib_mutex_t dict_foreign_err_mutex;$/;"	v
dict_foreign_err_mutex_key	sync/sync0sync.cc	/^mysql_pfs_key_t dict_foreign_err_mutex_key;$/;"	v
dict_foreign_error_report	dict/dict0dict.cc	/^static void dict_foreign_error_report($/;"	f	file:
dict_foreign_error_report_low	dict/dict0dict.cc	/^static void dict_foreign_error_report_low($/;"	f	file:
dict_foreign_find	dict/dict0dict.cc	/^static dict_foreign_t *dict_foreign_find($/;"	f	file:
dict_foreign_find_index	dict/dict0dict.cc	/^dict_index_t *dict_foreign_find_index($/;"	f
dict_foreign_free	include/dict0mem.h	/^inline void dict_foreign_free($/;"	f
dict_foreign_has_col_as_base_col	dict/dict0crea.cc	/^bool dict_foreign_has_col_as_base_col(const char *col_name,$/;"	f
dict_foreign_has_col_in_v_index	dict/dict0crea.cc	/^bool dict_foreign_has_col_in_v_index(const char *fk_col_name,$/;"	f
dict_foreign_not_exists	include/dict0mem.h	/^  dict_foreign_not_exists(const dict_foreign_set &obj_) : m_foreigns(obj_) {}$/;"	f	struct:dict_foreign_not_exists
dict_foreign_not_exists	include/dict0mem.h	/^struct dict_foreign_not_exists {$/;"	s
dict_foreign_print	include/dict0mem.h	/^  dict_foreign_print(std::ostream &out) : m_out(out) {}$/;"	f	struct:dict_foreign_print
dict_foreign_print	include/dict0mem.h	/^struct dict_foreign_print {$/;"	s
dict_foreign_qualify_index	dict/dict0dict.cc	/^bool dict_foreign_qualify_index($/;"	f
dict_foreign_remove_from_cache	dict/dict0dict.cc	/^void dict_foreign_remove_from_cache($/;"	f
dict_foreign_remove_partial	dict/dict0dict.cc	/^struct dict_foreign_remove_partial {$/;"	s	file:
dict_foreign_replace_index	dict/dict0dict.cc	/^bool dict_foreign_replace_index($/;"	f
dict_foreign_set	include/dict0mem.h	/^    dict_foreign_set;$/;"	t
dict_foreign_set_free	include/dict0mem.h	/^  dict_foreign_set_free(const dict_foreign_set &foreign_set)$/;"	f	struct:dict_foreign_set_free
dict_foreign_set_free	include/dict0mem.h	/^struct dict_foreign_set_free {$/;"	s
dict_foreign_set_validate	dict/dict0mem.cc	/^bool dict_foreign_set_validate(const dict_foreign_set &fk_set) {$/;"	f
dict_foreign_set_validate	dict/dict0mem.cc	/^bool dict_foreign_set_validate(const dict_table_t &table) {$/;"	f
dict_foreign_t	include/dict0mem.h	/^struct dict_foreign_t {$/;"	s
dict_foreign_with_index	include/dict0mem.h	/^  dict_foreign_with_index(const dict_index_t *index) : m_index(index) {}$/;"	f	struct:dict_foreign_with_index
dict_foreign_with_index	include/dict0mem.h	/^struct dict_foreign_with_index {$/;"	s
dict_foreigns_has_s_base_col	dict/dict0crea.cc	/^bool dict_foreigns_has_s_base_col(const dict_foreign_set &local_fk_set,$/;"	f
dict_foreigns_has_this_col	dict/dict0crea.cc	/^bool dict_foreigns_has_this_col(const dict_table_t *table,$/;"	f
dict_fs2utf8	dict/dict0dict.cc	/^void dict_fs2utf8(const char *db_and_table, char *db_utf8, size_t db_utf8_size,$/;"	f
dict_get_and_save_data_dir_path	dict/dict0load.cc	/^void dict_get_and_save_data_dir_path(dict_table_t *table, bool dict_mutex_own) {$/;"	f
dict_get_and_save_space_name	dict/dict0load.cc	/^void dict_get_and_save_space_name(dict_table_t *table, bool dict_mutex_own) {$/;"	f
dict_get_db_name_len	dict/dict0dict.cc	/^ulint dict_get_db_name_len(const char *name) \/*!< in: table name in the form$/;"	f
dict_get_first_path	dict/dict0load.cc	/^char *dict_get_first_path(ulint space_id) {$/;"	f
dict_get_first_table_name_in_db	dict/dict0load.cc	/^char *dict_get_first_table_name_in_db($/;"	f
dict_getnext_system	dict/dict0load.cc	/^const rec_t *dict_getnext_system(btr_pcur_t *pcur, \/*!< in\/out: persistent$/;"	f
dict_getnext_system_low	dict/dict0load.cc	/^static const rec_t *dict_getnext_system_low($/;"	f	file:
dict_hdr_create	dict/dict0boot.cc	/^static ibool dict_hdr_create(mtr_t *mtr) \/*!< in: mtr *\/$/;"	f	file:
dict_hdr_flush_row_id	dict/dict0boot.cc	/^void dict_hdr_flush_row_id(void) {$/;"	f
dict_hdr_get	dict/dict0boot.cc	/^dict_hdr_t *dict_hdr_get(mtr_t *mtr) \/*!< in: mtr *\/$/;"	f
dict_hdr_get_new_id	dict/dict0boot.cc	/^void dict_hdr_get_new_id(table_id_t *table_id, space_index_t *index_id,$/;"	f
dict_hdr_t	include/dict0boot.h	/^typedef byte dict_hdr_t;$/;"	t
dict_ibfk	dict/dict0dict.cc	/^static char dict_ibfk[] = "_ibfk_";$/;"	v	file:
dict_ind_free	dict/dict0dict.cc	/^void dict_ind_free(void) {$/;"	f
dict_ind_init	dict/dict0dict.cc	/^void dict_ind_init(void) {$/;"	f
dict_ind_redundant	dict/dict0dict.cc	/^dict_index_t *dict_ind_redundant;$/;"	v
dict_index_add_col	dict/dict.cc	/^void dict_index_add_col(dict_index_t *index, const dict_table_t *table,$/;"	f
dict_index_add_to_cache	dict/dict0dict.cc	/^dberr_t dict_index_add_to_cache(dict_table_t *table, dict_index_t *index,$/;"	f
dict_index_add_to_cache_w_vcol	dict/dict0dict.cc	/^dberr_t dict_index_add_to_cache_w_vcol(dict_table_t *table, dict_index_t *index,$/;"	f
dict_index_build_data_tuple	dict/dict0dict.cc	/^dtuple_t *dict_index_build_data_tuple($/;"	f
dict_index_build_internal_clust	dict/dict0dict.cc	/^static dict_index_t *dict_index_build_internal_clust($/;"	f	file:
dict_index_build_internal_fts	dict/dict0dict.cc	/^static dict_index_t *dict_index_build_internal_fts($/;"	f	file:
dict_index_build_internal_non_clust	dict/dict0dict.cc	/^static dict_index_t *dict_index_build_internal_non_clust($/;"	f	file:
dict_index_build_node_ptr	dict/dict0dict.cc	/^dtuple_t *dict_index_build_node_ptr(const dict_index_t *index, \/*!< in: index *\/$/;"	f
dict_index_calc_min_rec_len	dict/dict0dict.cc	/^ulint dict_index_calc_min_rec_len(const dict_index_t *index) \/*!< in: index *\/$/;"	f
dict_index_check_search_tuple	dict/dict0dict.cc	/^ibool dict_index_check_search_tuple($/;"	f
dict_index_contains_col_or_prefix	dict/dict0dict.cc	/^ibool dict_index_contains_col_or_prefix(const dict_index_t *index, ulint n,$/;"	f
dict_index_copy	dict/dict0dict.cc	/^static void dict_index_copy(dict_index_t *index1, \/*!< in: index to copy to *\/$/;"	f	file:
dict_index_copy_rec_order_prefix	dict/dict0dict.cc	/^rec_t *dict_index_copy_rec_order_prefix(const dict_index_t *index,$/;"	f
dict_index_copy_types	dict/dict0dict.cc	/^void dict_index_copy_types(dtuple_t *tuple, const dict_index_t *index,$/;"	f
dict_index_find	dict/dict0dict.cc	/^const dict_index_t *dict_index_find(const index_id_t &id) {$/;"	f
dict_index_find_and_set_cols	dict/dict0dict.cc	/^static ibool dict_index_find_and_set_cols(const dict_table_t *table,$/;"	f	file:
dict_index_get_nth_field_pos	dict/dict0dict.cc	/^ulint dict_index_get_nth_field_pos($/;"	f
dict_index_has_col_by_name	dict/dict0crea.cc	/^static bool dict_index_has_col_by_name(const char *col_name,$/;"	f	file:
dict_index_node_ptr_max_size	dict/dict0dict.cc	/^ulint dict_index_node_ptr_max_size(const dict_index_t *index) \/*!< in: index *\/$/;"	f
dict_index_remove_from_cache	dict/dict0dict.cc	/^void dict_index_remove_from_cache(dict_table_t *table, \/*!< in\/out: table *\/$/;"	f
dict_index_remove_from_cache_low	dict/dict0dict.cc	/^static void dict_index_remove_from_cache_low($/;"	f	file:
dict_index_remove_from_v_col_list	dict/dict0dict.cc	/^void dict_index_remove_from_v_col_list(dict_index_t *index) {$/;"	f
dict_index_t	include/dict0mem.h	/^struct dict_index_t {$/;"	s
dict_index_too_big_for_tree	dict/dict0dict.cc	/^static bool dict_index_too_big_for_tree($/;"	f	file:
dict_index_zip_failure	dict/dict0dict.cc	/^void dict_index_zip_failure($/;"	f
dict_index_zip_pad_alloc	dict/dict0dict.cc	/^static void dict_index_zip_pad_alloc(void *index_void) {$/;"	f	file:
dict_index_zip_pad_lock	dict/dict0dict.cc	/^static void dict_index_zip_pad_lock(dict_index_t *index) {$/;"	f	file:
dict_index_zip_pad_mutex_create_lazy	include/dict0mem.h	/^inline void dict_index_zip_pad_mutex_create_lazy(dict_index_t *index) {$/;"	f
dict_index_zip_pad_mutex_destroy	include/dict0mem.h	/^inline void dict_index_zip_pad_mutex_destroy(dict_index_t *index) {$/;"	f
dict_index_zip_pad_optimal_page_size	dict/dict0dict.cc	/^ulint dict_index_zip_pad_optimal_page_size($/;"	f
dict_index_zip_pad_unlock	include/dict0mem.h	/^inline void dict_index_zip_pad_unlock(dict_index_t *index) {$/;"	f
dict_index_zip_pad_update	dict/dict0dict.cc	/^static void dict_index_zip_pad_update($/;"	f	file:
dict_index_zip_success	dict/dict0dict.cc	/^void dict_index_zip_success($/;"	f
dict_init	dict/dict0dict.cc	/^void dict_init(void) {$/;"	f
dict_init_dynamic_metadata	dict/dict0dict.cc	/^static void dict_init_dynamic_metadata(dict_table_t *table,$/;"	f	file:
dict_intrinsic_table_t	include/sess0sess.h	/^  dict_intrinsic_table_t(dict_table_t *handler) : m_handler(handler) {$/;"	f	class:dict_intrinsic_table_t
dict_intrinsic_table_t	include/sess0sess.h	/^class dict_intrinsic_table_t {$/;"	c
dict_load_column_del	dict/dict0load.cc	/^static const char *dict_load_column_del = "delete-marked record in SYS_COLUMN";$/;"	v	file:
dict_load_column_low	dict/dict0load.cc	/^static const char *dict_load_column_low($/;"	f	file:
dict_load_columns	dict/dict0load.cc	/^static void dict_load_columns(dict_table_t *table, \/*!< in\/out: table *\/$/;"	f	file:
dict_load_field_del	dict/dict0load.cc	/^static const char *dict_load_field_del = "delete-marked record in SYS_FIELDS";$/;"	v	file:
dict_load_field_low	dict/dict0load.cc	/^static const char *dict_load_field_low($/;"	f	file:
dict_load_fields	dict/dict0load.cc	/^static ulint dict_load_fields($/;"	f	file:
dict_load_foreign	dict/dict0load.cc	/^    dict_load_foreign(const char *id,$/;"	f
dict_load_foreign_cols	dict/dict0load.cc	/^static void dict_load_foreign_cols($/;"	f	file:
dict_load_foreigns	dict/dict0load.cc	/^dberr_t dict_load_foreigns($/;"	f
dict_load_index_del	dict/dict0load.cc	/^static const char *dict_load_index_del = "delete-marked record in SYS_INDEXES";$/;"	v	file:
dict_load_index_id_err	dict/dict0load.cc	/^static const char *dict_load_index_id_err = "SYS_INDEXES.TABLE_ID mismatch";$/;"	v	file:
dict_load_index_low	dict/dict0load.cc	/^static const char *dict_load_index_low($/;"	f	file:
dict_load_indexes	dict/dict0load.cc	/^static dberr_t dict_load_indexes($/;"	f	file:
dict_load_is_system_table	dict/dict0load.cc	/^static bool dict_load_is_system_table(const char *name) {$/;"	f	file:
dict_load_sys_table	dict/dict0load.cc	/^void dict_load_sys_table(dict_table_t *table) \/*!< in: system table *\/$/;"	f
dict_load_table	dict/dict0load.cc	/^dict_table_t *dict_load_table(const char *name, bool cached,$/;"	f
dict_load_table_low	dict/dict0load.cc	/^static const char *dict_load_table_low(table_name_t &name, const rec_t *rec,$/;"	f	file:
dict_load_table_one	dict/dict0load.cc	/^static dict_table_t *dict_load_table_one(table_name_t &name, bool cached,$/;"	f	file:
dict_load_tablespace	dict/dict0load.cc	/^void dict_load_tablespace(dict_table_t *table, mem_heap_t *heap,$/;"	f
dict_load_tablespaces_for_upgrade	dict/dict0load.cc	/^void dict_load_tablespaces_for_upgrade() {$/;"	f
dict_load_virtual	dict/dict0load.cc	/^static void dict_load_virtual(dict_table_t *table, mem_heap_t *heap) {$/;"	f	file:
dict_load_virtual_del	dict/dict0load.cc	/^static const char *dict_load_virtual_del =$/;"	v	file:
dict_load_virtual_low	dict/dict0load.cc	/^static const char *dict_load_virtual_low(dict_table_t *table, mem_heap_t *heap,$/;"	f	file:
dict_load_virtual_one_col	dict/dict0load.cc	/^static void dict_load_virtual_one_col(dict_table_t *table, ulint nth_v_col,$/;"	f	file:
dict_lru_find_table	dict/dict0dict.cc	/^static ibool dict_lru_find_table($/;"	f	file:
dict_lru_find_table	dict/dict0dict.cc	62;"	d	file:
dict_lru_validate	dict/dict0dict.cc	/^static ibool dict_lru_validate(void) {$/;"	f	file:
dict_lru_validate	dict/dict0dict.cc	61;"	d	file:
dict_make_room_in_cache	dict/dict0dict.cc	/^ulint dict_make_room_in_cache($/;"	f
dict_mem_create_temporary_tablename	dict/dict0mem.cc	/^char *dict_mem_create_temporary_tablename(mem_heap_t *heap, const char *dbtab,$/;"	f
dict_mem_fill_column_struct	dict/mem.cc	/^void dict_mem_fill_column_struct(dict_col_t *column, ulint col_pos, ulint mtype,$/;"	f
dict_mem_fill_vcol_from_v_indexes	dict/dict0mem.cc	/^static void dict_mem_fill_vcol_from_v_indexes(const char *col_name,$/;"	f	file:
dict_mem_fill_vcol_has_index	dict/dict0mem.cc	/^static void dict_mem_fill_vcol_has_index(const dict_index_t *index,$/;"	f	file:
dict_mem_fill_vcol_set_for_base_col	dict/dict0mem.cc	/^static void dict_mem_fill_vcol_set_for_base_col(const char *col_name,$/;"	f	file:
dict_mem_foreign_create	dict/dict0mem.cc	/^dict_foreign_t *dict_mem_foreign_create(void) {$/;"	f
dict_mem_foreign_fill_vcol_set	dict/dict0mem.cc	/^void dict_mem_foreign_fill_vcol_set(dict_foreign_t *foreign) {$/;"	f
dict_mem_foreign_table_name_lookup_set	dict/dict0mem.cc	/^void dict_mem_foreign_table_name_lookup_set($/;"	f
dict_mem_h	dict/mem.h	35;"	d
dict_mem_index_create	dict/mem.cc	/^dict_index_t *dict_mem_index_create($/;"	f
dict_mem_index_free	dict/dict0mem.cc	/^void dict_mem_index_free(dict_index_t *index) \/*!< in: index *\/$/;"	f
dict_mem_init	dict/dict0mem.cc	/^void dict_mem_init(void) {$/;"	f
dict_mem_referenced_table_name_lookup_set	dict/dict0mem.cc	/^void dict_mem_referenced_table_name_lookup_set($/;"	f
dict_mem_table_add_col	dict/mem.cc	/^void dict_mem_table_add_col(dict_table_t *table, mem_heap_t *heap,$/;"	f
dict_mem_table_add_s_col	dict/dict0mem.cc	/^void dict_mem_table_add_s_col(dict_table_t *table, ulint num_base) {$/;"	f
dict_mem_table_add_v_col	dict/dict0mem.cc	/^dict_v_col_t *dict_mem_table_add_v_col(dict_table_t *table, mem_heap_t *heap,$/;"	f
dict_mem_table_col_rename	dict/dict0mem.cc	/^void dict_mem_table_col_rename(dict_table_t *table, ulint nth_col,$/;"	f
dict_mem_table_col_rename_low	dict/dict0mem.cc	/^static void dict_mem_table_col_rename_low($/;"	f	file:
dict_mem_table_create	dict/mem.cc	/^dict_table_t *dict_mem_table_create($/;"	f
dict_mem_table_fill_foreign_vcol_set	dict/dict0mem.cc	/^void dict_mem_table_fill_foreign_vcol_set(dict_table_t *table) {$/;"	f
dict_mem_table_free	dict/mem.cc	/^void dict_mem_table_free(dict_table_t *table) \/*!< in: table *\/$/;"	f
dict_mem_table_free_foreign_vcol_set	dict/dict0mem.cc	/^void dict_mem_table_free_foreign_vcol_set(dict_table_t *table) {$/;"	f
dict_mem_table_is_system	dict/mem.cc	/^static bool dict_mem_table_is_system(const std::string name) {$/;"	f	file:
dict_move_to_mru	dict/dict0dict.cc	/^void dict_move_to_mru(dict_table_t *table) \/*!< in: table to move to MRU *\/$/;"	f
dict_mutex_enter_for_mysql	dict/dict0dict.cc	/^void dict_mutex_enter_for_mysql(void) { mutex_enter(&dict_sys->mutex); }$/;"	f
dict_mutex_exit_for_mysql	dict/dict0dict.cc	/^void dict_mutex_exit_for_mysql(void) { mutex_exit(&dict_sys->mutex); }$/;"	f
dict_name	dict/dict0dd.cc	/^namespace dict_name {$/;"	n	file:
dict_name	include/dict0types.h	/^namespace dict_name {$/;"	n
dict_names_t	include/dict0load.h	/^typedef std::deque<const char *, ut_allocator<const char *>> dict_names_t;$/;"	t
dict_non_lru_find_table	dict/dict0dict.cc	/^static ibool dict_non_lru_find_table($/;"	f	file:
dict_non_lru_find_table	dict/dict0dict.cc	63;"	d	file:
dict_operation	include/trx0trx.h	/^  trx_dict_op_t dict_operation; \/**< @see enum trx_dict_op_t *\/$/;"	m	struct:trx_t
dict_operation	include/trx0undo.h	/^  ibool dict_operation; \/*!< TRUE if a dict operation trx *\/$/;"	m	struct:trx_undo_t
dict_operation_lock	dict/dict0dict.cc	/^rw_lock_t *dict_operation_lock;$/;"	v
dict_operation_lock_key	sync/sync0sync.cc	/^mysql_pfs_key_t dict_operation_lock_key;$/;"	v
dict_operation_lock_mode	include/trx0trx.h	/^  ib_uint32_t dict_operation_lock_mode;$/;"	m	struct:trx_t
dict_partitioned_table_remove_from_cache	dict/dict0dict.cc	/^void dict_partitioned_table_remove_from_cache(const char *name) {$/;"	f
dict_persist	dict/dict0dict.cc	/^dict_persist_t *dict_persist = nullptr;$/;"	v
dict_persist_close	dict/dict0dict.cc	/^void dict_persist_close(void) {$/;"	f
dict_persist_dirty_tables_mutex_key	sync/sync0sync.cc	/^mysql_pfs_key_t dict_persist_dirty_tables_mutex_key;$/;"	v
dict_persist_init	dict/dict0dict.cc	/^void dict_persist_init(void) {$/;"	f
dict_persist_t	include/dict0dict.h	/^struct dict_persist_t {$/;"	s
dict_persist_to_dd_table_buffer	dict/dict0dict.cc	/^void dict_persist_to_dd_table_buffer() {$/;"	f
dict_persist_update_log_margin	dict/dict0dict.cc	/^static void dict_persist_update_log_margin() {$/;"	f	file:
dict_print_info_on_foreign_key_in_create_format	dict/dict0dict.cc	/^void dict_print_info_on_foreign_key_in_create_format(FILE *file, trx_t *trx,$/;"	f
dict_process_sys_tablespaces	dict/dict0load.cc	/^const char *dict_process_sys_tablespaces($/;"	f
dict_remove_db_name	dict/dict0dict.cc	/^const char *dict_remove_db_name(const char *name) \/*!< in: table name in the$/;"	f
dict_resize	dict/dict0dict.cc	/^void dict_resize() {$/;"	f
dict_s_col_list	include/dict0mem.h	/^typedef std::list<dict_s_col_t, ut_allocator<dict_s_col_t>> dict_s_col_list;$/;"	t
dict_s_col_t	include/dict0mem.h	/^struct dict_s_col_t {$/;"	s
dict_save_data_dir_path	dict/dict0load.cc	/^void dict_save_data_dir_path(dict_table_t *table, char *filepath) {$/;"	f
dict_sdi_close_table	dict/dict0dict.cc	/^void dict_sdi_close_table(dict_table_t *table) {$/;"	f
dict_sdi_create	dict/dict0sdi.cc	/^bool dict_sdi_create(dd::Tablespace *tablespace) {$/;"	f
dict_sdi_create_idx_in_mem	dict/dict0crea.cc	/^dict_index_t *dict_sdi_create_idx_in_mem(space_id_t space, bool space_discarded,$/;"	f
dict_sdi_delete	dict/dict0sdi.cc	/^bool dict_sdi_delete(const dd::Tablespace &tablespace, const dd::Table *table,$/;"	f
dict_sdi_drop	dict/dict0sdi.cc	/^bool dict_sdi_drop(dd::Tablespace *tablespace) {$/;"	f
dict_sdi_exists	dict/dict0sdi.cc	/^static dberr_t dict_sdi_exists(const dd::Tablespace &tablespace,$/;"	f	file:
dict_sdi_get	dict/dict0sdi.cc	/^bool dict_sdi_get(const dd::Tablespace &tablespace, const sdi_key_t *sdi_key,$/;"	f
dict_sdi_get_index	dict/dict0dict.cc	/^dict_index_t *dict_sdi_get_index(space_id_t tablespace_id) {$/;"	f
dict_sdi_get_keys	dict/dict0sdi.cc	/^bool dict_sdi_get_keys(const dd::Tablespace &tablespace, sdi_vector_t &vector) {$/;"	f
dict_sdi_get_table	dict/dict0dict.cc	/^dict_table_t *dict_sdi_get_table(space_id_t tablespace_id, bool dict_locked,$/;"	f
dict_sdi_remove_from_cache	dict/dict0dict.cc	/^void dict_sdi_remove_from_cache(space_id_t space_id, dict_table_t *sdi_table,$/;"	f
dict_sdi_report_error	dict/dict0sdi.cc	/^static void dict_sdi_report_error(const char *operation, const dd::Table *table,$/;"	f	file:
dict_sdi_report_error	dict/dict0sdi.cc	/^static void dict_sdi_report_error(int errornum, const char *operation,$/;"	f	file:
dict_sdi_set	dict/dict0sdi.cc	/^bool dict_sdi_set(handlerton *hton, const dd::Tablespace &tablespace,$/;"	f
dict_set_compression	dict/dict0dict.cc	/^dberr_t dict_set_compression(dict_table_t *table, const char *algorithm,$/;"	f
dict_set_corrupted	dict/dict0dict.cc	/^void dict_set_corrupted(dict_index_t *index) {$/;"	f
dict_set_merge_threshold_all_debug	dict/dict0dict.cc	/^void dict_set_merge_threshold_all_debug(uint merge_threshold_all) {$/;"	f
dict_space_get_name	dict/dict0load.cc	/^static char *dict_space_get_name(space_id_t space_id,$/;"	f	file:
dict_startscan_system	dict/dict0load.cc	/^const rec_t *dict_startscan_system($/;"	f
dict_stats_analyze_index	dict/dict0stats.cc	/^static void dict_stats_analyze_index($/;"	f	file:
dict_stats_analyze_index_below_cur	dict/dict0stats.cc	/^static void dict_stats_analyze_index_below_cur(const btr_cur_t *cur,$/;"	f	file:
dict_stats_analyze_index_for_n_prefix	dict/dict0stats.cc	/^static bool dict_stats_analyze_index_for_n_prefix($/;"	f	file:
dict_stats_analyze_index_level	dict/dict0stats.cc	/^static bool dict_stats_analyze_index_level($/;"	f	file:
dict_stats_analyze_index_low	dict/dict0stats.cc	/^static bool dict_stats_analyze_index_low(ib_uint64_t &n_sample_pages,$/;"	f	file:
dict_stats_assert_initialized	dict/dict0stats.cc	/^static void dict_stats_assert_initialized($/;"	f	file:
dict_stats_assert_initialized_index	dict/dict0stats.cc	/^static void dict_stats_assert_initialized_index($/;"	f	file:
dict_stats_copy	dict/dict0stats.cc	/^static void dict_stats_copy(dict_table_t *dst, \/*!< in\/out: destination table *\/$/;"	f	file:
dict_stats_delete_from_index_stats	dict/dict0stats.cc	/^dberr_t dict_stats_delete_from_index_stats($/;"	f
dict_stats_delete_from_table_stats	dict/dict0stats.cc	/^dberr_t dict_stats_delete_from_table_stats($/;"	f
dict_stats_disabled_debug_update	dict/dict0stats_bg.cc	/^void dict_stats_disabled_debug_update(THD *thd, SYS_VAR *var, void *var_ptr,$/;"	f
dict_stats_disabled_event	dict/dict0stats_bg.cc	/^static os_event_t dict_stats_disabled_event;$/;"	v	file:
dict_stats_drop_index	dict/dict0stats.cc	/^dberr_t dict_stats_drop_index($/;"	f
dict_stats_drop_table	dict/dict0stats.cc	/^dberr_t dict_stats_drop_table($/;"	f
dict_stats_empty_index	dict/dict0stats.cc	/^static void dict_stats_empty_index(dict_index_t *index) \/*!< in\/out: index *\/$/;"	f	file:
dict_stats_empty_table	dict/dict0stats.cc	/^static void dict_stats_empty_table(dict_table_t *table) \/*!< in\/out: table *\/$/;"	f	file:
dict_stats_event	dict/dict0stats_bg.cc	/^os_event_t dict_stats_event = nullptr;$/;"	v
dict_stats_evict_tablespaces	dict/dict0stats.cc	/^void dict_stats_evict_tablespaces() {$/;"	f
dict_stats_exec_sql	dict/dict0stats.cc	/^static dberr_t dict_stats_exec_sql(pars_info_t *pinfo, const char *sql,$/;"	f	file:
dict_stats_fetch_from_ps	dict/dict0stats.cc	/^static dberr_t dict_stats_fetch_from_ps($/;"	f	file:
dict_stats_fetch_index_stats_step	dict/dict0stats.cc	/^static ibool dict_stats_fetch_index_stats_step($/;"	f	file:
dict_stats_fetch_table_stats_step	dict/dict0stats.cc	/^static ibool dict_stats_fetch_table_stats_step($/;"	f	file:
dict_stats_index_long_waiters	dict/dict0stats.cc	/^static bool dict_stats_index_long_waiters($/;"	f	file:
dict_stats_index_set_n_diff	dict/dict0stats.cc	/^void dict_stats_index_set_n_diff(const n_diff_data_t *n_diff_data,$/;"	f
dict_stats_process_entry_from_recalc_pool	dict/dict0stats_bg.cc	/^static void dict_stats_process_entry_from_recalc_pool(THD *thd) {$/;"	f	file:
dict_stats_recalc_pool_add	dict/dict0stats_bg.cc	/^void dict_stats_recalc_pool_add($/;"	f
dict_stats_recalc_pool_deinit	dict/dict0stats_bg.cc	/^static void dict_stats_recalc_pool_deinit() {$/;"	f	file:
dict_stats_recalc_pool_del	dict/dict0stats_bg.cc	/^void dict_stats_recalc_pool_del($/;"	f
dict_stats_recalc_pool_get	dict/dict0stats_bg.cc	/^static bool dict_stats_recalc_pool_get($/;"	f	file:
dict_stats_recalc_pool_init	dict/dict0stats_bg.cc	/^static void dict_stats_recalc_pool_init() {$/;"	f	file:
dict_stats_rename_index	dict/dict0stats.cc	/^dberr_t dict_stats_rename_index($/;"	f
dict_stats_rename_table	dict/dict0stats.cc	/^dberr_t dict_stats_rename_table($/;"	f
dict_stats_rename_table_in_index_stats	dict/dict0stats.cc	/^dberr_t dict_stats_rename_table_in_index_stats($/;"	f
dict_stats_rename_table_in_table_stats	dict/dict0stats.cc	/^dberr_t dict_stats_rename_table_in_table_stats($/;"	f
dict_stats_save	dict/dict0stats.cc	/^static dberr_t dict_stats_save(dict_table_t *table_orig,$/;"	f	file:
dict_stats_save_index_stat	dict/dict0stats.cc	/^static dberr_t dict_stats_save_index_stat(dict_index_t *index, lint last_update,$/;"	f	file:
dict_stats_scan_page	dict/dict0stats.cc	/^ulint *dict_stats_scan_page(const rec_t **out_rec, ulint *offsets1,$/;"	f
dict_stats_should_ignore_index	dict/dict0stats.cc	/^bool dict_stats_should_ignore_index(const dict_index_t *index) \/*!< in: index *\/$/;"	f
dict_stats_shutdown	dict/dict0stats_bg.cc	/^void dict_stats_shutdown() {$/;"	f
dict_stats_snapshot_create	dict/dict0stats.cc	/^static dict_table_t *dict_stats_snapshot_create(dict_table_t *table) {$/;"	f	file:
dict_stats_snapshot_free	dict/dict0stats.cc	/^static void dict_stats_snapshot_free($/;"	f	file:
dict_stats_table_clone_create	dict/dict0stats.cc	/^static dict_table_t *dict_stats_table_clone_create($/;"	f	file:
dict_stats_table_clone_free	dict/dict0stats.cc	/^static void dict_stats_table_clone_free($/;"	f	file:
dict_stats_thread	dict/dict0stats_bg.cc	/^void dict_stats_thread() {$/;"	f
dict_stats_thread_deinit	dict/dict0stats_bg.cc	/^void dict_stats_thread_deinit() {$/;"	f
dict_stats_thread_init	dict/dict0stats_bg.cc	/^void dict_stats_thread_init() {$/;"	f
dict_stats_thread_key	srv/srv0start.cc	/^mysql_pfs_key_t dict_stats_thread_key;$/;"	v
dict_stats_upd_option_t	include/dict0stats.h	/^enum dict_stats_upd_option_t {$/;"	g
dict_stats_update	dict/dict0stats.cc	/^dberr_t dict_stats_update(dict_table_t *table, \/*!< in\/out: table *\/$/;"	f
dict_stats_update_for_index	dict/dict0stats.cc	/^void dict_stats_update_for_index(dict_index_t *index) \/*!< in\/out: index *\/$/;"	f
dict_stats_update_persistent	dict/dict0stats.cc	/^static dberr_t dict_stats_update_persistent($/;"	f	file:
dict_stats_update_transient	dict/dict0stats.cc	/^static void dict_stats_update_transient($/;"	f	file:
dict_stats_update_transient_for_index	dict/dict0stats.cc	/^static void dict_stats_update_transient_for_index($/;"	f	file:
dict_stats_wait_bg_to_stop_using_table	dict/dict0stats_bg.cc	/^void dict_stats_wait_bg_to_stop_using_table($/;"	f
dict_sync_check	include/sync0types.h	/^  explicit dict_sync_check(bool dict_mutex_allowed)$/;"	f	struct:dict_sync_check
dict_sync_check	include/sync0types.h	/^struct dict_sync_check : public sync_check_functor_t {$/;"	s
dict_sys	dict/dict0dict.cc	/^dict_sys_t *dict_sys = nullptr;$/;"	v
dict_sys_mutex_key	sync/sync0sync.cc	/^mysql_pfs_key_t dict_sys_mutex_key;$/;"	v
dict_sys_t	include/dict0dict.h	/^struct dict_sys_t {$/;"	s
dict_sys_table_id	dict/dict0dict.cc	/^static table_id_t dict_sys_table_id[SYS_NUM_SYSTEM_TABLES];$/;"	v	file:
dict_sys_table_id_build	dict/dict0dict.cc	/^bool dict_sys_table_id_build() {$/;"	f
dict_sys_tables_rec_check	dict/dict0load.cc	/^static const char *dict_sys_tables_rec_check(const rec_t *rec) {$/;"	f	file:
dict_sys_tables_rec_read	dict/dict0load.cc	/^static bool dict_sys_tables_rec_read(const rec_t *rec,$/;"	f	file:
dict_sys_tablespaces_rec_read	dict/dict0load.cc	/^static bool dict_sys_tablespaces_rec_read(const rec_t *rec, space_id_t *id,$/;"	f	file:
dict_system_id_t	include/dict0load.h	/^enum dict_system_id_t {$/;"	g
dict_table_add_system_columns	dict/dict0dict.cc	/^void dict_table_add_system_columns(dict_table_t *table, mem_heap_t *heap) {$/;"	f
dict_table_add_to_cache	dict/dict0dict.cc	/^void dict_table_add_to_cache(dict_table_t *table, ibool can_be_evicted,$/;"	f
dict_table_apply_dynamic_metadata	dict/dict0dict.cc	/^bool dict_table_apply_dynamic_metadata($/;"	f
dict_table_assign_new_id	dict/dict0crea.cc	/^void dict_table_assign_new_id(dict_table_t *table, trx_t *trx) {$/;"	f
dict_table_autoinc_alloc	dict/dict0dict.cc	/^static void dict_table_autoinc_alloc(void *table_void) {$/;"	f	file:
dict_table_autoinc_create_lazy	include/dict0mem.h	/^inline void dict_table_autoinc_create_lazy(dict_table_t *table) {$/;"	f
dict_table_autoinc_destroy	include/dict0mem.h	/^inline void dict_table_autoinc_destroy(dict_table_t *table) {$/;"	f
dict_table_autoinc_initialize	dict/dict0dict.cc	/^void dict_table_autoinc_initialize(dict_table_t *table, ib_uint64_t value) {$/;"	f
dict_table_autoinc_lock	dict/dict0dict.cc	/^void dict_table_autoinc_lock(dict_table_t *table) \/*!< in\/out: table *\/$/;"	f
dict_table_autoinc_log	dict/dict0dict.cc	/^void dict_table_autoinc_log(dict_table_t *table, uint64_t value, mtr_t *mtr) {$/;"	f
dict_table_autoinc_own	include/dict0mem.h	/^inline bool dict_table_autoinc_own(const dict_table_t *table) {$/;"	f
dict_table_autoinc_read	dict/dict0dict.cc	/^ib_uint64_t dict_table_autoinc_read(const dict_table_t *table) \/*!< in: table *\/$/;"	f
dict_table_autoinc_unlock	dict/dict0dict.cc	/^void dict_table_autoinc_unlock(dict_table_t *table) \/*!< in\/out: table *\/$/;"	f
dict_table_autoinc_update_if_greater	dict/dict0dict.cc	/^void dict_table_autoinc_update_if_greater(dict_table_t *table,$/;"	f
dict_table_can_be_evicted	dict/dict0dict.cc	/^static ibool dict_table_can_be_evicted($/;"	f	file:
dict_table_change_id_in_cache	dict/dict0dict.cc	/^void dict_table_change_id_in_cache($/;"	f
dict_table_change_id_sys_tables	dict/dict0dict.cc	/^void dict_table_change_id_sys_tables() {$/;"	f
dict_table_check_for_dup_indexes	dict/dict0dict.cc	/^void dict_table_check_for_dup_indexes(const dict_table_t *table,$/;"	f
dict_table_close	dict/dict0dict.cc	/^void dict_table_close(dict_table_t *table, ibool dict_locked, ibool try_drop) {$/;"	f
dict_table_close_and_drop	dict/dict0dict.cc	/^void dict_table_close_and_drop($/;"	f
dict_table_col_in_clustered_key	dict/dict0dict.cc	/^ibool dict_table_col_in_clustered_key($/;"	f
dict_table_copy_types	dict/dict0dict.cc	/^void dict_table_copy_types(dtuple_t *tuple,           \/*!< in\/out: data tuple *\/$/;"	f
dict_table_copy_v_types	dict/dict0dict.cc	/^void dict_table_copy_v_types(dtuple_t *tuple, const dict_table_t *table) {$/;"	f
dict_table_extent_size	dict/dict0dict.cc	/^page_no_t dict_table_extent_size(const dict_table_t *table) {$/;"	f
dict_table_find_index_on_id	dict/dict0dict.cc	/^static const dict_index_t *dict_table_find_index_on_id($/;"	f	file:
dict_table_get_all_fts_indexes	dict/dict0dict.cc	/^ulint dict_table_get_all_fts_indexes(dict_table_t *table,$/;"	f
dict_table_get_datadir	dict/dict0dict.cc	/^std::string dict_table_get_datadir(const dict_table_t *table) {$/;"	f
dict_table_get_highest_foreign_id	dict/dict0dict.cc	/^ulint dict_table_get_highest_foreign_id($/;"	f
dict_table_get_index_on_name	dict/dict0dict.cc	/^dict_index_t *dict_table_get_index_on_name(dict_table_t *table,$/;"	f
dict_table_get_index_on_name	include/dict0dict.h	/^inline const dict_index_t *dict_table_get_index_on_name($/;"	f
dict_table_get_nth_col_pos	dict/dict0dict.cc	/^ulint dict_table_get_nth_col_pos(const dict_table_t *table, \/*!< in: table *\/$/;"	f
dict_table_get_nth_v_col	include/dict0dict.h	534;"	d
dict_table_get_nth_v_col_mysql	dict/dict0dict.cc	/^dict_v_col_t *dict_table_get_nth_v_col_mysql(const dict_table_t *table,$/;"	f
dict_table_get_v_col_name	dict/dict0dict.cc	/^const char *dict_table_get_v_col_name(const dict_table_t *table, ulint col_nr) {$/;"	f
dict_table_get_v_col_name_mysql	dict/dict0dict.cc	/^const char *dict_table_get_v_col_name_mysql(const dict_table_t *table,$/;"	f
dict_table_get_v_col_pos_for_mysql	dict/dict0dict.cc	/^static ulint dict_table_get_v_col_pos_for_mysql(const dict_table_t *table,$/;"	f	file:
dict_table_has_column	dict/dict0dict.cc	/^ulint dict_table_has_column(const dict_table_t *table, const char *col_name,$/;"	f
dict_table_info_t	include/dict0load.h	/^enum dict_table_info_t {$/;"	g
dict_table_is_referenced_by_foreign_key	dict/dict0dict.cc	/^ibool dict_table_is_referenced_by_foreign_key($/;"	f
dict_table_is_system	dict/dict0dict.cc	/^bool dict_table_is_system(table_id_t table_id) {$/;"	f
dict_table_load_dynamic_metadata	dict/dict0dict.cc	/^void dict_table_load_dynamic_metadata(dict_table_t *table) {$/;"	f
dict_table_mark_dirty	dict/dict0dict.cc	/^void dict_table_mark_dirty(dict_table_t *table) {$/;"	f
dict_table_move_from_lru_to_non_lru	dict/dict0dict.cc	/^void dict_table_move_from_lru_to_non_lru($/;"	f
dict_table_move_from_non_lru_to_lru	dict/dict0dict.cc	/^void dict_table_move_from_non_lru_to_lru(dict_table_t *table) {$/;"	f
dict_table_mutex_create_lazy	include/dict0mem.h	/^inline void dict_table_mutex_create_lazy(dict_table_t *table) {$/;"	f
dict_table_mutex_destroy	include/dict0mem.h	/^inline void dict_table_mutex_destroy(dict_table_t *table) {$/;"	f
dict_table_mutex_key	sync/sync0sync.cc	/^mysql_pfs_key_t dict_table_mutex_key;$/;"	v
dict_table_mysql_pos_to_innodb	dict/dict0dict.cc	/^ulint dict_table_mysql_pos_to_innodb(const dict_table_t *table, ulint n) {$/;"	f
dict_table_next_uncorrupted_index	include/dict0dict.h	433;"	d
dict_table_op_t	include/dict0dict.h	/^enum dict_table_op_t {$/;"	g
dict_table_open_on_name	dict/dict0dict.cc	/^dict_table_t *dict_table_open_on_name($/;"	f
dict_table_persist_to_dd_table_buffer	dict/dict0dict.cc	/^void dict_table_persist_to_dd_table_buffer(dict_table_t *table) {$/;"	f
dict_table_persist_to_dd_table_buffer_low	dict/dict0dict.cc	/^static void dict_table_persist_to_dd_table_buffer_low(dict_table_t *table) {$/;"	f	file:
dict_table_read_dynamic_metadata	dict/dict0dict.cc	/^void dict_table_read_dynamic_metadata(const byte *buffer, ulint size,$/;"	f
dict_table_remove_from_cache	dict/dict0dict.cc	/^void dict_table_remove_from_cache(dict_table_t *table) \/*!< in, own: table *\/$/;"	f
dict_table_remove_from_cache_debug	dict/dict0dict.cc	/^void dict_table_remove_from_cache_debug(dict_table_t *table, bool lru_evict) {$/;"	f
dict_table_remove_from_cache_low	dict/dict0dict.cc	/^static void dict_table_remove_from_cache_low($/;"	f	file:
dict_table_rename_in_cache	dict/dict0dict.cc	/^dberr_t dict_table_rename_in_cache($/;"	f
dict_table_set_big_rows	dict/dict0dict.cc	/^void dict_table_set_big_rows(dict_table_t *table) {$/;"	f
dict_table_skip_corrupt_index	include/dict0dict.h	427;"	d
dict_table_stats_key	sync/sync0sync.cc	/^mysql_pfs_key_t dict_table_stats_key;$/;"	v
dict_table_stats_latch_alloc	dict/dict0dict.cc	/^static void dict_table_stats_latch_alloc(void *table_void) {$/;"	f	file:
dict_table_stats_latch_create	dict/dict0dict.cc	/^void dict_table_stats_latch_create(dict_table_t *table, bool enabled) {$/;"	f
dict_table_stats_latch_destroy	dict/dict0dict.cc	/^void dict_table_stats_latch_destroy(dict_table_t *table) {$/;"	f
dict_table_stats_latch_free	dict/dict0dict.cc	/^static void dict_table_stats_latch_free(dict_table_t *table) {$/;"	f	file:
dict_table_stats_lock	dict/dict0dict.cc	/^void dict_table_stats_lock(dict_table_t *table, ulint latch_mode) {$/;"	f
dict_table_stats_unlock	dict/dict0dict.cc	/^void dict_table_stats_unlock(dict_table_t *table, ulint latch_mode) {$/;"	f
dict_table_t	include/dict0mem.h	/^struct dict_table_t {$/;"	s
dict_table_try_drop_aborted	dict/dict0dict.cc	/^static void dict_table_try_drop_aborted($/;"	f	file:
dict_table_try_drop_aborted_and_mutex_exit	dict/dict0dict.cc	/^static void dict_table_try_drop_aborted_and_mutex_exit($/;"	f	file:
dict_table_wait_for_bg_threads_to_exit	dict/dict0dict.cc	/^void dict_table_wait_for_bg_threads_to_exit($/;"	f
dict_tables_have_same_db	dict/dict0dict.cc	/^ibool dict_tables_have_same_db(const char *name1, \/*!< in: table name in the$/;"	f
dict_temp_file_num	dict/dict0mem.cc	/^static std::atomic<ib_uint32_t> dict_temp_file_num;$/;"	v	file:
dict_tf_to_fsp_flags	dict/dict0dict.cc	/^uint32_t dict_tf_to_fsp_flags(uint32_t table_flags) {$/;"	f
dict_tf_to_row_format_string	dict/dict0dict.cc	/^const char *dict_tf_to_row_format_string($/;"	f
dict_upgrade_evict_tables_cache	dict/dict0dict.cc	/^void dict_upgrade_evict_tables_cache() {$/;"	f
dict_v_col_t	include/dict0mem.h	/^struct dict_v_col_t {$/;"	s
dict_v_idx_list	include/dict0mem.h	/^typedef std::list<dict_v_idx_t, ut_allocator<dict_v_idx_t>> dict_v_idx_list;$/;"	t
dict_v_idx_t	include/dict0mem.h	/^struct dict_v_idx_t {$/;"	s
dict_vcol_set	include/dict0mem.h	/^    dict_vcol_set;$/;"	t
dict_vcol_templ_t	include/dict0mem.h	/^struct dict_vcol_templ_t {$/;"	s
difference_type	include/mem0mem.h	/^  typedef ptrdiff_t difference_type;$/;"	t	class:mem_heap_allocator
difference_type	include/ut0new.h	/^  typedef ptrdiff_t difference_type;$/;"	t	class:ut_allocator
digits_count	include/os0thread.h	/^  static constexpr size_t digits_count =$/;"	m	class:Atomic_xor_of_things
dirty_dict_tables	include/dict0dict.h	/^  dirty_dict_tables;$/;"	m	struct:dict_persist_t
dirty_dict_tables	include/dict0mem.h	/^  UT_LIST_NODE_T(dict_table_t) dirty_dict_tables;$/;"	m	struct:dict_table_t
dirty_status	include/dict0mem.h	/^  std::atomic<table_dirty_status> dirty_status;$/;"	m	struct:dict_table_t
disable	include/arch0arch.h	/^  void disable(lsn_t end_lsn) {$/;"	f	class:Arch_Group
disable	mtr/mtr0mtr.cc	/^int mtr_t::Logging::disable(THD *) {$/;"	f	class:mtr_t::Logging
disable	sync/sync0sync.cc	/^void MutexMonitor::disable() {$/;"	f	class:MutexMonitor
disable_ahi	include/dict0mem.h	/^  unsigned disable_ahi : 1;$/;"	m	struct:dict_index_t
disable_caching	include/dict0mem.h	/^  bool disable_caching;$/;"	m	class:last_ops_cur_t
disable_compression	include/os0file.h	/^  void disable_compression() { m_type |= NO_COMPRESSION; }$/;"	f	class:IORequest
disable_indexes	handler/ha_innodb.cc	/^int ha_innobase::disable_indexes(uint mode) {$/;"	f	class:ha_innobase
disable_partial_io_warnings	include/os0file.h	/^  void disable_partial_io_warnings() { m_type |= DISABLE_PARTIAL_IO_WARNINGS; }$/;"	f	class:IORequest
disable_punch_hole_optimisation	include/os0file.h	/^  void disable_punch_hole_optimisation() {$/;"	f	class:IORequest
discard_after_ddl	include/dict0mem.h	/^  bool discard_after_ddl;$/;"	m	struct:dict_table_t
discard_modifications	include/mtr0mtr.h	/^  void discard_modifications() { m_impl.m_modifications = false; }$/;"	f	struct:mtr_t
discard_or_import_tablespace	handler/ha_innodb.cc	/^int ha_innobase::discard_or_import_tablespace(bool discard,$/;"	f	class:ha_innobase
discard_or_import_tablespace	handler/ha_innopart.cc	/^int ha_innopart::discard_or_import_tablespace(bool discard,$/;"	f	class:ha_innopart
discard_trx	handler/p_s.cc	/^bool discard_trx(const trx_t *trx, bool read_write) {$/;"	f
disown_inherited_fields	lob/lob0lob.cc	/^void BtrContext::disown_inherited_fields(const upd_t *update) {$/;"	f	class:lob::BtrContext
display_progress	clone/clone0copy.cc	/^void Clone_Handle::display_progress(uint32_t cur_chunk, uint32_t max_chunk,$/;"	f	class:Clone_Handle
distance	fts/fts0que.cc	/^  ulint distance; \/*!< The proximity distance of a$/;"	m	struct:fts_query_t	file:
distance	fts/fts0que.cc	/^  ulint distance;$/;"	m	struct:fts_phrase_t	file:
distance	include/fts0ast.h	/^  ulint distance;        \/*!< > 0 if proximity distance$/;"	m	struct:fts_ast_text_t
do_io	fil/fil0fil.cc	/^dberr_t Fil_shard::do_io(const IORequest &type, bool sync,$/;"	f	class:Fil_shard
do_or_wait_for_done	include/os0once.h	/^  static void do_or_wait_for_done(std::atomic<state_t> *state,$/;"	f	class:os_once
do_redo_io	fil/fil0fil.cc	/^dberr_t Fil_shard::do_redo_io(const IORequest &type, const page_id_t &page_id,$/;"	f	class:Fil_shard
do_verify	include/fsp0fsp.h	/^  bool do_verify() { return (m_dist(m_random_engine) > 90); }$/;"	f	class:File_segment_inode
doc_col	include/fts0fts.h	/^  ulint doc_col;$/;"	m	class:fts_t
doc_count	fts/fts0que.cc	/^  ib_uint64_t doc_count; \/*!< Total number of documents that$/;"	m	struct:fts_word_freq_t	file:
doc_count	include/fts0types.h	/^  ulint doc_count; \/*!< Number of doc ids in ilist *\/$/;"	m	struct:fts_node_t
doc_freqs	fts/fts0que.cc	/^  ib_rbt_t *doc_freqs;   \/*!< RB Tree for storing per document$/;"	m	struct:fts_word_freq_t	file:
doc_id	fts/fts0que.cc	/^  doc_id_t doc_id; \/*!< Document id *\/$/;"	m	struct:fts_doc_freq_t	file:
doc_id	fts/fts0que.cc	/^  doc_id_t doc_id; \/*!< Document id *\/$/;"	m	struct:fts_match_t	file:
doc_id	fts/fts0que.cc	/^  doc_id_t doc_id; \/*!< The document id to match *\/$/;"	m	struct:fts_select_t	file:
doc_id	include/fts0fts.h	/^  doc_id_t doc_id; \/*!< Document id *\/$/;"	m	struct:fts_ranking_t
doc_id	include/fts0fts.h	/^  doc_id_t doc_id; \/*!< Id of the ins\/upd\/del document *\/$/;"	m	struct:fts_trx_row_t
doc_id	include/fts0types.h	/^  doc_id_t doc_id;  \/*!< Document id *\/$/;"	m	struct:fts_doc_stats_t
doc_id	include/fts0types.h	/^  doc_id_t doc_id; \/*!< The doc id affected *\/$/;"	m	struct:fts_update_t
doc_id	include/row0ftsort.h	/^  doc_id_t doc_id; \/*!< document ID *\/$/;"	m	struct:fts_doc_item
doc_id_lock	include/fts0types.h	/^  ib_mutex_t doc_id_lock; \/*!< Lock covering Doc ID *\/$/;"	m	struct:fts_cache_t
doc_id_t	include/fts0fts.h	/^typedef ib_uint64_t doc_id_t;$/;"	t
doc_ids	fts/fts0que.cc	/^  ib_rbt_t *doc_ids; \/*!< The current set of matching$/;"	m	struct:fts_query_t	file:
doc_ids	include/fts0fts.h	/^  ib_vector_t *doc_ids; \/*!< document ids (each element is$/;"	m	struct:fts_doc_ids_t
doc_list	include/row0ftsort.h	/^  UT_LIST_NODE_T(fts_doc_item_t) doc_list;$/;"	m	struct:fts_doc_item
doc_stats	include/fts0types.h	/^  ib_vector_t *doc_stats; \/*!< Array of the fts_doc_stats_t$/;"	m	struct:fts_index_cache_t
docs_added_graph	include/fts0fts.h	/^  que_t *docs_added_graph;$/;"	m	struct:fts_trx_table_t
does_not_fit_in_memory	include/dict0mem.h	/^  ibool does_not_fit_in_memory;$/;"	m	struct:dict_table_t
done	fts/fts0opt.cc	/^  ibool done; \/*!< TRUE when optimize finishes *\/$/;"	m	struct:fts_optimize_t	file:
done	include/row0purge.h	/^  bool done;$/;"	m	struct:purge_node_t
done	include/trx0purge.h	/^  purge_iter_t done;$/;"	m	struct:trx_purge_t
done	os/os0file.cc	/^  void done() {$/;"	f	class:SimulatedAIOHandler
done_logging	trx/trx0purge.cc	/^void done_logging(space_id_t space_num) {$/;"	f	namespace:undo
dot_ext	fil/fil0fil.cc	/^const char *dot_ext[] = {"", ".ibd", ".cfg", ".cfp", ".ibt", ".ibu", ".dblwr"};$/;"	v
drop	log/log0meb.cc	/^  void drop() {$/;"	f	class:meb::Queue
drop	trx/trx0purge.cc	/^void undo::Tablespaces::drop(Tablespace &ref_undo_space) {$/;"	f	class:undo::Tablespaces
drop	trx/trx0purge.cc	/^void undo::Tablespaces::drop(Tablespace *undo_space) {$/;"	f	class:undo::Tablespaces
drop_aborted	include/dict0mem.h	/^  unsigned drop_aborted : 1;$/;"	m	struct:dict_table_t
drop_clone	clone/clone0clone.cc	/^void Clone_Sys::drop_clone(Clone_Handle *clone_handle) {$/;"	f	class:Clone_Sys
drop_fk	handler/handler0alter.cc	/^  dict_foreign_t **drop_fk;$/;"	m	struct:ha_innobase_inplace_ctx	file:
drop_index	handler/handler0alter.cc	/^  dict_index_t **drop_index;$/;"	m	struct:ha_innobase_inplace_ctx	file:
drop_remnants	log/log0meb.cc	/^static bool drop_remnants(bool force) {$/;"	f	namespace:meb
drop_status_file	clone/clone0api.cc	/^static void drop_status_file(const Clone_Handle *clone) {$/;"	f	file:
drop_task	clone/clone0clone.cc	/^bool Clone_Handle::drop_task(THD *thd, uint task_id, int in_err,$/;"	f	class:Clone_Handle
drop_task	clone/clone0clone.cc	/^bool Clone_Task_Manager::drop_task(THD *thd, uint task_id, bool &is_master) {$/;"	f	class:Clone_Task_Manager
drop_vcol	handler/handler0alter.cc	/^  dict_v_col_t *drop_vcol;$/;"	m	struct:ha_innobase_inplace_ctx	file:
drop_vcol_name	handler/handler0alter.cc	/^  const char **drop_vcol_name;$/;"	m	struct:ha_innobase_inplace_ctx	file:
dtuple_check_typed	data/data0data.cc	/^bool dtuple_check_typed(const dtuple_t *tuple) {$/;"	f
dtuple_check_typed_no_assert	data/data0data.cc	/^static bool dtuple_check_typed_no_assert(const dtuple_t *tuple) {$/;"	f	file:
dtuple_coll_eq	data/data0data.cc	/^bool dtuple_coll_eq(const dtuple_t *tuple1, const dtuple_t *tuple2) {$/;"	f
dtuple_convert_back_big_rec	data/data0data.cc	/^void dtuple_convert_back_big_rec(dtuple_t *entry, big_rec_t *vector) {$/;"	f
dtuple_convert_big_rec	data/data0data.cc	/^big_rec_t *dtuple_convert_big_rec(dict_index_t *index, upd_t *upd,$/;"	f
dtuple_get_nth_field	include/data0data.h	214;"	d
dtuple_get_nth_v_field	include/data0data.h	215;"	d
dtuple_print	data/data0data.cc	/^void dtuple_print(FILE *f, const dtuple_t *tuple) {$/;"	f
dtuple_print	data/data0data.cc	/^void dtuple_print(std::ostream &o, const dtuple_t *tuple) {$/;"	f
dtuple_set_n_fields	data/data0data.cc	/^void dtuple_set_n_fields(dtuple_t *tuple, ulint n_fields) {$/;"	f
dtuple_t	include/data0data.h	/^struct dtuple_t {$/;"	s
dtuple_validate	data/data0data.cc	/^bool dtuple_validate(const dtuple_t *tuple) {$/;"	f
dtype_form_prtype	data/data0type.cc	/^ulint dtype_form_prtype($/;"	f
dtype_get_at_most_n_mbchars	data/data0type.cc	/^ulint dtype_get_at_most_n_mbchars($/;"	f
dtype_is_binary_string_type	data/data0type.cc	/^ibool dtype_is_binary_string_type(ulint mtype,  \/*!< in: main data type *\/$/;"	f
dtype_is_non_binary_string_type	data/data0type.cc	/^ibool dtype_is_non_binary_string_type(ulint mtype,  \/*!< in: main data type *\/$/;"	f
dtype_is_string_type	data/data0type.cc	/^ibool dtype_is_string_type($/;"	f
dtype_print	data/data0type.cc	/^void dtype_print(const dtype_t *type) {$/;"	f
dtype_t	include/data0type.h	/^struct dtype_t {$/;"	s
dtype_validate	data/data0type.cc	/^ibool dtype_validate(const dtype_t *type) \/*!< in: type struct to validate *\/$/;"	f
dup	include/row0ftsort.h	/^  row_merge_dup_t *dup;    \/*!< descriptor of FTS index *\/$/;"	m	struct:fts_psort_common_t
duplicate	include/data0data.h	/^  bool duplicate() const {$/;"	f	struct:multi_value_data
duplicate_check	fil/fil0fil.cc	/^void Tablespace_dirs::duplicate_check(const Const_iter &start,$/;"	f	class:Tablespace_dirs
dyn0buf_h	include/dyn0buf.h	34;"	d
dyn0types_h	include/dyn0types.h	34;"	d
dyn_buf_t	include/dyn0buf.h	/^  dyn_buf_t() : m_heap(), m_size() {$/;"	f	class:dyn_buf_t
dyn_buf_t	include/dyn0buf.h	/^class dyn_buf_t {$/;"	c
dynamic_metadata	include/dict0dict.h	/^  dict_table_t *dynamic_metadata;$/;"	m	struct:dict_sys_t
edge_t	include/ut0stateful_latching_rules.h	/^    edge_t(node_t from, std::initializer_list<int> &&idxs, node_t to)$/;"	f	struct:ut::Stateful_latching_rules::edge_t
edge_t	include/ut0stateful_latching_rules.h	/^  struct edge_t {$/;"	s	class:ut::Stateful_latching_rules
elapsed_time	fts/fts0fts.cc	/^static ib_time_t elapsed_time = 0;$/;"	v	file:
elem_type	include/ut0lst.h	/^  typedef Type elem_type;$/;"	t	struct:ut_list_base
else_part	include/pars0pars.h	/^  que_node_t *else_part;    \/*!< else-part statement list *\/$/;"	m	struct:if_node_t
else_part	pars/pars0grm.y	/^else_part:$/;"	l
elsif_element	pars/pars0grm.y	/^elsif_element:$/;"	l
elsif_list	include/pars0pars.h	/^  elsif_node_t *elsif_list; \/*!< elsif element list *\/$/;"	m	struct:if_node_t
elsif_list	pars/pars0grm.y	/^elsif_list:$/;"	l
elsif_node_t	include/pars0pars.h	/^struct elsif_node_t {$/;"	s
empty	include/lob0impl.h	/^  bool empty() const { return (get_len() == 0); }$/;"	f	struct:lob::plist_base_node_t
empty	include/log0recv.h	/^  bool empty() const { return (m_tables.empty()); }$/;"	f	class:MetadataRecover
empty	include/read0types.h	/^    bool empty() const { return (size() == 0); }$/;"	f	class:ReadView::ids_t
empty	include/read0types.h	/^  bool empty() const { return (m_ids.empty()); }$/;"	f	class:ReadView
empty	include/trx0purge.h	/^  bool empty() { return (m_spaces.empty()); }$/;"	f	class:undo::Tablespaces
empty	include/trx0undo.h	/^  ulint empty;              \/*!< TRUE if the stack of undo log$/;"	m	struct:trx_undo_t
empty	log/log0meb.cc	/^  bool empty() { return m_front == -1; }$/;"	f	class:meb::Queue
enable	mtr/mtr0mtr.cc	/^int mtr_t::Logging::enable(THD *thd) {$/;"	f	class:mtr_t::Logging
enable	sync/sync0sync.cc	/^void MutexMonitor::enable() {$/;"	f	class:MutexMonitor
enable_indexes	handler/ha_innodb.cc	/^int ha_innobase::enable_indexes(uint mode) {$/;"	f	class:ha_innobase
enabled	log/log0test.cc	/^bool Log_test::enabled(Options option) const {$/;"	f	class:Log_test
encode	dict/dict0dd.cc	/^const char *DD_instant_col_val_coder::encode(const byte *stream, size_t in_len,$/;"	f	class:DD_instant_col_val_coder
encrypt_key_in_header	clone/clone0snapshot.cc	/^bool Clone_Snapshot::encrypt_key_in_header(const page_size_t &page_size,$/;"	f	class:Clone_Snapshot
encrypt_key_in_log_header	clone/clone0snapshot.cc	/^bool Clone_Snapshot::encrypt_key_in_log_header(byte *log_header,$/;"	f	class:Clone_Snapshot
encryption	include/os0enc.h	/^namespace encryption {$/;"	n	namespace:innobase
encryption	os/os0enc.cc	/^namespace encryption {$/;"	n	namespace:innobase	file:
encryption_algorithm	include/os0file.h	/^  void encryption_algorithm(Encryption::Type type) {$/;"	f	class:IORequest
encryption_iv	include/dict0mem.h	/^  byte *encryption_iv;$/;"	m	struct:dict_table_t
encryption_iv	include/fil0fil.h	/^  byte encryption_iv[Encryption::KEY_LEN];$/;"	m	struct:fil_space_t
encryption_key	include/dict0mem.h	/^  byte *encryption_key;$/;"	m	struct:dict_table_t
encryption_key	include/fil0fil.h	/^  byte encryption_key[Encryption::KEY_LEN];$/;"	m	struct:fil_space_t
encryption_key	include/os0file.h	/^  void encryption_key(byte *key, ulint key_len, byte *iv) {$/;"	f	class:IORequest
encryption_op_in_progress	include/fil0fil.h	/^  encryption_op_type encryption_op_in_progress;$/;"	m	struct:fil_space_t
encryption_op_type	include/fil0fil.h	/^enum encryption_op_type { ENCRYPTION = 1, DECRYPTION = 2, NONE };$/;"	g
encryption_rotate	fil/fil0fil.cc	/^size_t Fil_shard::encryption_rotate(size_t *rotate_count) {$/;"	f	class:Fil_shard
encryption_rotate	fil/fil0fil.cc	/^size_t Fil_system::encryption_rotate() {$/;"	f	class:Fil_system
encryption_type	include/fil0fil.h	/^  Encryption::Type encryption_type;$/;"	m	struct:fil_space_t
end	include/trx0types.h	/^  Rseg_Iterator end() { return (m_rsegs.end()); }$/;"	f	class:Rsegs
end	include/trx0types.h	/^  Rseg_Iterator end() { return (m_rsegs.end()); }$/;"	f	class:TrxUndoRsegs
end	include/ut0dbg.h	/^  void end() { m_show_from_destructor = false; }$/;"	f	class:ut_chrono_t
end	row/row0pread-adapter.cc	/^dberr_t Parallel_reader_adapter::end($/;"	f	class:Parallel_reader_adapter
end_access	include/ut0lock_free_hash.h	/^  void end_access() {$/;"	f	class:ut_lock_free_list_node_t
end_conds	include/row0sel.h	/^  end_conds; \/*!< conditions which determine the$/;"	m	struct:plan_t
end_lsn	include/log0recv.h	/^  lsn_t end_lsn;$/;"	m	struct:recv_t
end_lsn	include/log0types.h	/^  lsn_t end_lsn;$/;"	m	struct:Log_handle
end_phase_read_pk	include/ut0stage.h	/^  void end_phase_read_pk() {}$/;"	f	class:ut_stage_alter_t
end_phase_read_pk	include/ut0stage.h	/^inline void ut_stage_alter_t::end_phase_read_pk() {$/;"	f	class:ut_stage_alter_t
end_ptr	include/lob0impl.h	/^  byte *end_ptr() const {$/;"	f	struct:lob::frag_node_t
end_stmt	handler/ha_innodb.cc	/^int ha_innobase::end_stmt() {$/;"	f	class:ha_innobase
end_stmt	include/trx0trx.h	/^  static void end_stmt(trx_t *trx) { exit(trx); }$/;"	f	class:TrxInInnoDB
end_write	arch/arch0page.cc	/^void Arch_Block::end_write() { m_state = ARCH_BLOCK_READY_TO_FLUSH; }$/;"	f	class:Arch_Block
enqueue	log/log0meb.cc	/^  void enqueue(const T &lb) {$/;"	f	class:meb::Queue
enqueue	row/row0pread.cc	/^void Parallel_reader::enqueue(std::shared_ptr<Ctx> ctx) {$/;"	f	class:Parallel_reader
enter	include/trx0trx.h	/^  static void enter(trx_t *trx, bool disable) {$/;"	f	class:TrxInInnoDB
enter	trx/trx0trx.cc	/^  void enter() { mutex_enter(&m_mutex); }$/;"	f	struct:TrxPoolLock
enter	trx/trx0trx.cc	/^  void enter() { mutex_enter(&m_mutex); }$/;"	f	struct:TrxPoolManagerLock
enter_ibuf	include/mtr0mtr.h	/^  void enter_ibuf() { m_impl.m_inside_ibuf = true; }$/;"	f	struct:mtr_t
entry	include/row0ins.h	/^  dtuple_t *entry;         \/*!< NULL, or entry to insert in the index;$/;"	m	struct:ins_node_t
entry_list	include/row0ins.h	/^  entry_list;       \/* list of entries, one for each index *\/$/;"	m	struct:ins_node_t
entry_sys_heap	include/row0ins.h	/^  mem_heap_t *entry_sys_heap;$/;"	m	struct:ins_node_t
epilogue	include/os0thread-create.h	/^  void epilogue() {$/;"	f	class:Runnable
equal	include/data0data.h	/^  bool equal(const multi_value_data *multi_value) const {$/;"	f	struct:multi_value_data
equals_to	include/page0size.h	/^  inline bool equals_to(const page_size_t &a) const {$/;"	f	class:page_size_t
erase	include/dyn0buf.h	/^  void erase() {$/;"	f	class:dyn_buf_t
erase	include/trx0types.h	/^  void erase(Rseg_Iterator &it) { m_rsegs.erase(it); }$/;"	f	class:TrxUndoRsegs
error	fts/fts0que.cc	/^  dberr_t error; \/*!< Error code if any, that is$/;"	m	struct:fts_query_t	file:
error	include/row0ftsort.h	/^  dberr_t error;                    \/*!< db error during psort *\/$/;"	m	struct:fts_psort_t
error	include/ut0ut.h	/^  error() : logger(ERROR_LEVEL) {}$/;"	f	class:ib::error
error	include/ut0ut.h	/^  explicit error(int err, Args &&... args)$/;"	f	class:ib::error
error	include/ut0ut.h	/^class error : public logger {$/;"	c	namespace:ib
error	log/log0meb.cc	/^    unsigned char *error MY_ATTRIBUTE((unused))) {$/;"	f	namespace:meb
error	row/row0log.cc	/^  dberr_t error;        \/*!< error that occurred during online$/;"	m	struct:row_log_t	file:
error_index	include/trx0trx.h	/^  const dict_index_t *error_index; \/*!< if the error number indicates a$/;"	m	struct:trx_t
error_key_num	include/trx0trx.h	/^  ulint error_key_num;             \/*!< if the index creation fails to a$/;"	m	struct:trx_t
error_or_warn	include/ut0ut.h	/^  error_or_warn(bool pred) : logger(pred ? ERROR_LEVEL : WARNING_LEVEL) {}$/;"	f	class:ib::error_or_warn
error_or_warn	include/ut0ut.h	/^  explicit error_or_warn(bool pred, int err, Args &&... args)$/;"	f	class:ib::error_or_warn
error_or_warn	include/ut0ut.h	/^class error_or_warn : public logger {$/;"	c	namespace:ib
error_state	include/trx0trx.h	/^  dberr_t error_state;             \/*!< 0 if no error, otherwise error$/;"	m	struct:trx_t
estimate_rows_upper_bound	handler/ha_innodb.cc	/^ha_rows ha_innobase::estimate_rows_upper_bound() {$/;"	f	class:ha_innobase
estimate_rows_upper_bound	handler/ha_innopart.cc	/^ha_rows ha_innopart::estimate_rows_upper_bound() {$/;"	f	class:ha_innopart
eval0eval_h	include/eval0eval.h	35;"	d
eval0proc_h	include/eval0proc.h	34;"	d
eval_aggregate	eval/eval0eval.cc	/^void eval_aggregate(func_node_t *node) \/*!< in: aggregate operation node *\/$/;"	f
eval_arith	eval/eval0eval.cc	/^void eval_arith(func_node_t *arith_node) \/*!< in: arithmetic operation node *\/$/;"	f
eval_cmp	eval/eval0eval.cc	/^ibool eval_cmp(func_node_t *cmp_node) \/*!< in: comparison node *\/$/;"	f
eval_cmp_like	eval/eval0eval.cc	/^ibool eval_cmp_like(que_node_t *arg1, \/* !< in: left operand *\/$/;"	f
eval_concat	eval/eval0eval.cc	/^static void eval_concat(func_node_t *func_node) \/*!< in: function node *\/$/;"	f	file:
eval_dummy	eval/eval0eval.cc	/^static byte eval_dummy;$/;"	v	file:
eval_func	eval/eval0eval.cc	/^void eval_func(func_node_t *func_node) \/*!< in: function node *\/$/;"	f
eval_instr	eval/eval0eval.cc	/^static void eval_instr(func_node_t *func_node) \/*!< in: function node *\/$/;"	f	file:
eval_length	eval/eval0eval.cc	/^void eval_length(func_node_t *func_node) \/*!< in: function node *\/$/;"	f
eval_logical	eval/eval0eval.cc	/^void eval_logical(func_node_t *logical_node) \/*!< in: logical operation node *\/$/;"	f
eval_node_alloc_val_buf	eval/eval0eval.cc	/^byte *eval_node_alloc_val_buf($/;"	f
eval_node_free_val_buf	eval/eval0eval.cc	/^void eval_node_free_val_buf(que_node_t *node) \/*!< in: query graph node *\/$/;"	f
eval_notfound	eval/eval0eval.cc	/^void eval_notfound(func_node_t *func_node) \/*!< in: function node *\/$/;"	f
eval_substr	eval/eval0eval.cc	/^void eval_substr(func_node_t *func_node) \/*!< in: function node *\/$/;"	f
eval_to_binary	eval/eval0eval.cc	/^void eval_to_binary(func_node_t *func_node) \/*!< in: function node *\/$/;"	f
event	include/fts0types.h	/^  os_event_t event;  \/*!< sync finish event *\/$/;"	m	struct:fts_sync_t
event	include/srv0srv.h	/^  os_event_t event;$/;"	m	struct:srv_slot_t
event	include/sync0rw.h	/^  os_event_t event;$/;"	m	struct:rw_lock_t
event	include/trx0purge.h	/^  os_event_t event;$/;"	m	struct:trx_purge_t
event	ut/ut0wqueue.cc	/^  os_event_t event; \/*!< event we use to signal additions to list *\/$/;"	m	struct:ib_wqueue_t	file:
event_iter	os/os0event.cc	/^  event_iter_t event_iter; \/*!< For O(1) removal from$/;"	m	struct:os_event	file:
event_iter_t	os/os0event.cc	/^typedef os_event_list_t::iterator event_iter_t;$/;"	t	file:
event_manager_mutex_key	sync/sync0sync.cc	/^mysql_pfs_key_t event_manager_mutex_key;$/;"	v
event_mutex_key	sync/sync0sync.cc	/^mysql_pfs_key_t event_mutex_key;$/;"	v
exchange_partition_adjust_datadir	handler/handler0alter.cc	/^void exchange_partition_adjust_datadir(THD *thd, dict_table_t *table_p,$/;"	f
exchange_partition_low	handler/handler0alter.cc	/^int ha_innopart::exchange_partition_low(uint part_id, dd::Table *part_table,$/;"	f	class:ha_innopart
exclusive_latch	include/lock0priv.h	/^  static void exclusive_latch(ut::Location location) {$/;"	f	class:locksys::Unsafe_global_latch_manipulator
exclusive_unlatch	include/lock0priv.h	/^  static void exclusive_unlatch() { lock_sys->latches.global_latch.x_unlock(); }$/;"	f	class:locksys::Unsafe_global_latch_manipulator
exec	handler/ha_innodb.cc	/^int innobase_truncate<Table>::exec() {$/;"	f	class:innobase_truncate
execute	mtr/mtr0mtr.cc	/^void mtr_t::Command::execute() {$/;"	f	class:mtr_t::Command
execute	os/os0file.cc	/^ssize_t SyncFileIO::execute(Slot *slot) {$/;"	f	class:SyncFileIO
execute	os/os0file.cc	/^ssize_t SyncFileIO::execute(const IORequest &request) {$/;"	f	class:SyncFileIO
execute_sql	clone/clone0api.cc	/^bool Fixup_data::execute_sql(THD *thd, const char *schema_name,$/;"	f	class:__anon2::Fixup_data
exists	include/lob0undo.h	/^  bool exists() const {$/;"	f	struct:lob::undo_seq_t
exit	fts/fts0blex.cc	498;"	d	file:
exit	fts/fts0tlex.cc	494;"	d	file:
exit	include/trx0trx.h	/^  static void exit(trx_t *trx) {$/;"	f	class:TrxInInnoDB
exit	pars/lexyy.cc	917;"	d	file:
exit	trx/trx0trx.cc	/^  void exit() { mutex_exit(&m_mutex); }$/;"	f	struct:TrxPoolLock
exit	trx/trx0trx.cc	/^  void exit() { mutex_exit(&m_mutex); }$/;"	f	struct:TrxPoolManagerLock
exit_ibuf	include/mtr0mtr.h	/^  void exit_ibuf() { m_impl.m_inside_ibuf = false; }$/;"	f	struct:mtr_t
exit_node_t	include/pars0pars.h	/^struct exit_node_t {$/;"	s
exit_statement	pars/pars0grm.y	/^exit_statement:$/;"	l
exit_step	eval/eval0proc.cc	/^que_thr_t *exit_step(que_thr_t *thr) \/*!< in: query thread *\/$/;"	f
exp	include/row0upd.h	/^  que_node_t *exp;        \/*!< expression for calculating a new$/;"	m	struct:upd_field_t
exp	pars/pars0grm.y	/^exp:$/;"	l
exp_list	pars/pars0grm.y	/^exp_list:$/;"	l
expand	srv/srv0tmp.cc	/^dberr_t Tablespace_pool::expand(size_t size) {$/;"	f	class:ibt::Tablespace_pool
explicit_cursor	include/row0sel.h	/^  sym_node_t *explicit_cursor; \/*!< not NULL if an explicit cursor *\/$/;"	m	struct:sel_node_t
explicitly_non_lru	include/dict0mem.h	/^  bool explicitly_non_lru;$/;"	m	struct:dict_table_t
export_var_t	include/srv0srv.h	/^struct export_var_t {$/;"	s
export_vars	srv/srv0srv.cc	/^export_var_t export_vars;$/;"	v
expr	fts/fts0pars.y	/^expr	: term		{$/;"	l
expr_lst	fts/fts0pars.y	/^expr_lst: \/* Empty *\/	{$/;"	l
ext	include/data0data.h	/^  unsigned ext : 1; \/*!< TRUE=externally stored, FALSE=local *\/$/;"	m	struct:dfield_t
ext	include/row0ext.h	/^  const ulint *ext; \/*!< col_no's of externally stored columns *\/$/;"	m	struct:row_ext_t
ext	include/row0undo.h	/^  row_ext_t *ext;           \/*!< NULL, or prefixes of the externally$/;"	m	struct:undo_node_t
ext	include/row0upd.h	/^  row_ext_t *ext;      \/*!< NULL, or prefixes of the externally$/;"	m	struct:upd_node_t
ext_in_new	include/data0data.h	/^  bool ext_in_new;$/;"	m	struct:big_rec_field_t
ext_in_old	include/data0data.h	/^  bool ext_in_old;$/;"	m	struct:big_rec_field_t
ext_in_old	include/row0upd.h	/^  bool ext_in_old;$/;"	m	struct:upd_field_t
extend_and_flush_files	clone/clone0apply.cc	/^int Clone_Snapshot::extend_and_flush_files(bool flush_redo) {$/;"	f	class:Clone_Snapshot
extent_size	include/page0size.h	/^  page_no_t extent_size() const {$/;"	f	class:page_size_t
extents_per_xdes	include/page0size.h	/^  size_t extents_per_xdes() const { return (m_physical \/ extent_size()); }$/;"	f	class:page_size_t
external_lock	handler/ha_innodb.cc	/^int ha_innobase::external_lock(THD *thd, \/*!< in: handle to the user thread *\/$/;"	f	class:ha_innobase
external_lock	handler/ha_innopart.cc	/^int ha_innopart::external_lock(THD *thd, int lock_type) {$/;"	f	class:ha_innopart
extra	handler/ha_innodb.cc	/^int ha_innobase::extra(enum ha_extra_function operation)$/;"	f	class:ha_innobase
extra	handler/ha_innopart.cc	/^int ha_innopart::extra(enum ha_extra_function operation) {$/;"	f	class:ha_innopart
f_len	include/fts0fts.h	/^  ulint f_len;    \/*!< Length of the string in bytes *\/$/;"	m	struct:fts_string_t
f_n_char	include/fts0fts.h	/^  ulint f_n_char; \/*!< Number of characters *\/$/;"	m	struct:fts_string_t
f_str	include/fts0fts.h	/^  byte *f_str;    \/*!< string, not necessary terminated in$/;"	m	struct:fts_string_t
failed	clone/clone0api.cc	/^  bool failed() const { return (m_num_errors.load() != 0); }$/;"	f	class:__anon2::Fixup_data	file:
failed	handler/ha_innodb.cc	/^  bool failed() const { return (m_n_errors.load() != 0); }$/;"	f	class:Validate_files	file:
failure	include/dict0mem.h	/^  ulint failure;          \/*!< failed compression ops during$/;"	m	struct:zip_pad_info_t
fallback_to_single_threaded_mode	include/row0pread.h	/^  void fallback_to_single_threaded_mode() {$/;"	f
fast	include/ut0counter.h	/^  enum { fast = 0 };$/;"	e	enum:single_indexer_t::__anon12
fast	include/ut0counter.h	/^  enum { fast = 1 };$/;"	e	enum:counter_indexer_t::__anon11
fatal	include/ut0ut.h	/^  explicit fatal(int err, Args &&... args)$/;"	f	class:ib::fatal
fatal	include/ut0ut.h	/^  fatal() : logger(ERROR_LEVEL) {}$/;"	f	class:ib::fatal
fatal	include/ut0ut.h	/^class fatal : public logger {$/;"	c	namespace:ib
fatal_or_error	include/ut0ut.h	/^  explicit fatal_or_error(bool fatal, int err, Args &&... args)$/;"	f	class:ib::fatal_or_error
fatal_or_error	include/ut0ut.h	/^  fatal_or_error(bool fatal) : logger(ERROR_LEVEL), m_fatal(fatal) {}$/;"	f	class:ib::fatal_or_error
fatal_or_error	include/ut0ut.h	/^class fatal_or_error : public logger {$/;"	c	namespace:ib
fclass	include/pars0pars.h	/^  ulint fclass;        \/*!< class of the function *\/$/;"	m	struct:func_node_t
fd	include/row0merge.h	/^  int fd;            \/*!< file descriptor *\/$/;"	m	struct:merge_file_t
fd	row/row0log.cc	/^  int fd;              \/*!< file descriptor *\/$/;"	m	struct:row_log_t	file:
fd_del	include/gis0type.h	/^  bool fd_del;    \/*!< found deleted row *\/$/;"	m	struct:rtr_info
fetch	handler/p_s.cc	/^bool Innodb_data_lock_iterator::fetch(PSI_server_data_lock_container *container,$/;"	f	class:Innodb_data_lock_iterator
fetch	handler/p_s.cc	/^bool Innodb_data_lock_wait_iterator::fetch($/;"	f	class:Innodb_data_lock_wait_iterator
fetch	lob/lob0lob.cc	/^dberr_t zReader::fetch() {$/;"	f	class:lob::zReader
fetch	lob/lob0lob.cc	/^ulint Reader::fetch() {$/;"	f	class:lob::Reader
fetch_cache	include/row0mysql.h	/^  byte *fetch_cache[MYSQL_FETCH_CACHE_SIZE];$/;"	m	struct:row_prebuilt_t
fetch_cache_first	include/row0mysql.h	/^  ulint fetch_cache_first;            \/*!< position of the first not yet$/;"	m	struct:row_prebuilt_t
fetch_data_into_cache	trx/trx0i_s.cc	/^static void fetch_data_into_cache(trx_i_s_cache_t *cache) \/*!< in\/out: cache *\/$/;"	f	file:
fetch_data_into_cache_low	trx/trx0i_s.cc	/^static void fetch_data_into_cache_low($/;"	f	file:
fetch_direction	include/row0mysql.h	/^  ulint fetch_direction;         \/*!< ROW_SEL_NEXT or ROW_SEL_PREV *\/$/;"	m	struct:row_prebuilt_t
fetch_group_within_lsn_range	arch/arch0page.cc	/^int Arch_Page_Sys::fetch_group_within_lsn_range(lsn_t &start_id, lsn_t &stop_id,$/;"	f	class:Arch_Page_Sys
fetch_node_t	include/row0sel.h	/^struct fetch_node_t {$/;"	s
fetch_page	lob/lob0lob.cc	/^dberr_t zReader::fetch_page() {$/;"	f	class:lob::zReader
fetch_page	lob/lob0lob.cc	/^void Reader::fetch_page() {$/;"	f	class:lob::Reader
fetch_reset_lsn	arch/arch0recv.cc	/^lsn_t Arch_File_Ctx::fetch_reset_lsn(uint64_t block_num) {$/;"	f	class:Arch_File_Ctx
fetch_reset_points	arch/arch0recv.cc	/^dberr_t Arch_File_Ctx::fetch_reset_points(uint file_index,$/;"	f	class:Arch_File_Ctx
fetch_statement	pars/pars0grm.y	/^fetch_statement:$/;"	l
fetch_step	row/row0sel.cc	/^que_thr_t *fetch_step(que_thr_t *thr) \/*!< in: query thread *\/$/;"	f
fetch_stop_points	arch/arch0recv.cc	/^dberr_t Arch_File_Ctx::fetch_stop_points(bool last_file,$/;"	f	class:Arch_File_Ctx
fetch_table	include/row0sel.h	/^  ulint fetch_table;         \/*!< number of the next table to access$/;"	m	struct:sel_node_t
fetch_trx_in_trx_list	handler/p_s.cc	/^static const trx_t *fetch_trx_in_trx_list(uint64_t filter_trx_immutable_id,$/;"	f	file:
fetch_value	log/log0ddl.cc	/^ulint DDL_Log_Table::fetch_value(const byte *data, ulint offset) {$/;"	f	class:DDL_Log_Table
field	include/row0ftsort.h	/^  dfield_t *field; \/*!< field contains document string *\/$/;"	m	struct:fts_doc_item
field_def	include/dict0crea.h	/^  ins_node_t *field_def; \/*!< child node which does the inserts$/;"	m	struct:ind_node_t
field_no	include/data0data.h	/^  ulint field_no; \/*!< field number in record *\/$/;"	m	struct:big_rec_field_t
field_no	include/dict0crea.h	/^  ulint field_no;                \/* next field definition to insert *\/$/;"	m	struct:ind_node_t
field_no	include/row0upd.h	/^  unsigned field_no : 16; \/*!< field number in an index, usually$/;"	m	struct:upd_field_t
field_nos	include/pars0sym.h	/^  ulint field_nos[2];            \/*!< if a column, in$/;"	m	struct:sym_node_t
field_ref_almost_zero	lob/lob0lob.cc	/^const byte field_ref_almost_zero[FIELD_REF_SIZE] = {$/;"	m	namespace:lob	file:
field_ref_zero	page/page0zip.cc	/^const byte field_ref_zero[FIELD_REF_SIZE] = {$/;"	v
fields	include/data0data.h	/^  big_rec_field_t *fields; \/*!< stored fields *\/$/;"	m	struct:big_rec_t
fields	include/data0data.h	/^  dfield_t *fields;$/;"	m	struct:dtuple_t
fields	include/dict0mem.h	/^  dict_field_t *fields; \/*!< array of field descriptions *\/$/;"	m	struct:dict_index_t
fields	include/row0merge.h	/^  dfield_t *fields; \/*!< data fields *\/$/;"	m	struct:mtuple_t
fields	include/row0merge.h	/^  index_field_t *fields;     \/*!< field definitions *\/$/;"	m	struct:index_def_t
fields	include/row0upd.h	/^  upd_field_t *fields; \/*!< array of update fields *\/$/;"	m	struct:upd_t
fil0fil_h	include/fil0fil.h	34;"	d
fil0types_h	include/fil0types.h	34;"	d
fil_add_moved_space	fil/fil0fil.cc	/^void fil_add_moved_space(dd::Object_id dd_object_id, space_id_t space_id,$/;"	f
fil_addr_is_null	fil/fil0fil.cc	/^bool fil_addr_is_null(const fil_addr_t &addr) {$/;"	f
fil_addr_null	fil/fil0fil.cc	/^fil_addr_t fil_addr_null = {FIL_NULL, 0};$/;"	v
fil_addr_t	include/fil0fil.h	/^  fil_addr_t() : page(FIL_NULL), boffset(0) {}$/;"	f	struct:fil_addr_t
fil_addr_t	include/fil0fil.h	/^  fil_addr_t(page_no_t p, uint32_t boff) : page(p), boffset(boff) {}$/;"	f	struct:fil_addr_t
fil_addr_t	include/fil0fil.h	/^struct fil_addr_t {$/;"	s
fil_adjust_name_import	fil/fil0fil.cc	/^void fil_adjust_name_import(dict_table_t *table, const char *path,$/;"	f
fil_adjust_partition_stat	fil/fil0fil.cc	/^static void fil_adjust_partition_stat(const std::string &old_path,$/;"	f	file:
fil_aio_wait	fil/fil0fil.cc	/^void fil_aio_wait(ulint segment) {$/;"	f
fil_assign_new_space_id	fil/fil0fil.cc	/^bool fil_assign_new_space_id(space_id_t *space_id) {$/;"	f
fil_block_check_type	include/fil0fil.h	1890;"	d
fil_buf_block_init	fil/fil0fil.cc	/^static void fil_buf_block_init(buf_block_t *block, byte *frame) {$/;"	f	file:
fil_buffering_disabled	fil/fil0fil.cc	669;"	d	file:
fil_buffering_disabled	fil/fil0fil.cc	673;"	d	file:
fil_check_missing_tablespaces	fil/fil0fil.cc	/^bool fil_check_missing_tablespaces() {$/;"	f
fil_close	fil/fil0fil.cc	/^void fil_close() {$/;"	f
fil_close_all_files	fil/fil0fil.cc	/^void fil_close_all_files() { fil_system->close_all_files(); }$/;"	f
fil_close_log_files	fil/fil0fil.cc	/^void fil_close_log_files(bool free_all) {$/;"	f
fil_close_tablespace	fil/fil0fil.cc	/^dberr_t fil_close_tablespace(trx_t *trx, space_id_t space_id) {$/;"	f
fil_count_undo_deleted	fil/fil0fil.cc	/^size_t fil_count_undo_deleted(space_id_t undo_num) {$/;"	f
fil_create_tablespace	fil/fil0fil.cc	/^static dberr_t fil_create_tablespace(space_id_t space_id, const char *name,$/;"	f	file:
fil_delete_file	fil/fil0fil.cc	/^bool fil_delete_file(const char *path) {$/;"	f
fil_delete_tablespace	fil/fil0fil.cc	/^dberr_t fil_delete_tablespace(space_id_t space_id, buf_remove_t buf_remove) {$/;"	f
fil_discard_tablespace	fil/fil0fil.cc	/^dberr_t fil_discard_tablespace(space_id_t space_id) {$/;"	f
fil_encryption_rotate	fil/fil0fil.cc	/^size_t fil_encryption_rotate() { return (fil_system->encryption_rotate()); }$/;"	f
fil_flush	fil/fil0fil.cc	/^void fil_flush(space_id_t space_id) {$/;"	f
fil_flush_file_redo	fil/fil0fil.cc	/^void fil_flush_file_redo() { fil_system->flush_file_redo(); }$/;"	f
fil_flush_file_spaces	fil/fil0fil.cc	/^void fil_flush_file_spaces(uint8_t purpose) {$/;"	f
fil_free_scanned_files	fil/fil0fil.cc	/^void fil_free_scanned_files() { fil_system->free_scanned_files(); }$/;"	f
fil_fusionio_enable_atomic_write	fil/fil0fil.cc	/^bool fil_fusionio_enable_atomic_write(pfs_os_file_t file) {$/;"	f
fil_get_compression	fil/fil0fil.cc	/^Compression::Type fil_get_compression(space_id_t space_id) {$/;"	f
fil_get_dirs	fil/fil0fil.cc	/^std::string fil_get_dirs() { return fil_system->get_dirs(); }$/;"	f
fil_get_partition_file	fil/fil0fil.cc	/^static bool fil_get_partition_file(const std::string &old_path,$/;"	f	file:
fil_get_scan_threads	fil/fil0fil.cc	/^size_t fil_get_scan_threads(size_t num_files) {$/;"	f
fil_ibd_create	fil/fil0fil.cc	/^dberr_t fil_ibd_create(space_id_t space_id, const char *name, const char *path,$/;"	f
fil_ibd_open	fil/fil0fil.cc	/^dberr_t fil_ibd_open(bool validate, fil_type_t purpose, space_id_t space_id,$/;"	f
fil_ibt_create	fil/fil0fil.cc	/^dberr_t fil_ibt_create(space_id_t space_id, const char *name, const char *path,$/;"	f
fil_init	fil/fil0fil.cc	/^void fil_init(ulint max_n_open) {$/;"	f
fil_io	fil/fil0fil.cc	/^dberr_t fil_io(const IORequest &type, bool sync, const page_id_t &page_id,$/;"	f
fil_io_set_encryption	fil/fil0fil.cc	/^void fil_io_set_encryption(IORequest &req_type, const page_id_t &page_id,$/;"	f
fil_iterate	fil/fil0fil.cc	/^static dberr_t fil_iterate(const Fil_page_iterator &iter, buf_block_t *block,$/;"	f	file:
fil_load_status	fil/fil0fil.cc	/^enum fil_load_status {$/;"	g	file:
fil_n_log_flushes	fil/fil0fil.cc	/^ulint fil_n_log_flushes = 0;$/;"	v
fil_n_pending_log_flushes	fil/fil0fil.cc	/^ulint fil_n_pending_log_flushes = 0;$/;"	v
fil_n_pending_tablespace_flushes	fil/fil0fil.cc	/^ulint fil_n_pending_tablespace_flushes = 0;$/;"	v
fil_name_write_rename	fil/fil0fil.cc	/^static void fil_name_write_rename(space_id_t space_id, const char *old_name,$/;"	f	file:
fil_no_punch_hole	fil/fil0fil.cc	/^void fil_no_punch_hole(fil_node_t *file) { file->punch_hole = false; }$/;"	f
fil_node_create	fil/fil0fil.cc	/^char *fil_node_create(const char *name, page_no_t size, fil_space_t *space,$/;"	f
fil_node_t	include/fil0fil.h	/^struct fil_node_t {$/;"	s
fil_op_replay_rename	fil/fil0fil.cc	/^static bool fil_op_replay_rename(const page_id_t &page_id,$/;"	f	file:
fil_op_replay_rename_for_ddl	fil/fil0fil.cc	/^bool fil_op_replay_rename_for_ddl(const page_id_t &page_id,$/;"	f
fil_op_write_log	fil/fil0fil.cc	/^static void fil_op_write_log(mlog_id_t type, space_id_t space_id,$/;"	f	file:
fil_op_write_space_extend	fil/fil0fil.cc	/^static void fil_op_write_space_extend(space_id_t space_id, os_offset_t offset,$/;"	f	file:
fil_open_for_business	fil/fil0fil.cc	/^dberr_t fil_open_for_business(bool read_only_mode) {$/;"	f
fil_open_log_and_system_tablespace_files	fil/fil0fil.cc	/^void fil_open_log_and_system_tablespace_files() {$/;"	f
fil_operation_t	fil/fil0fil.cc	/^enum fil_operation_t {$/;"	g	file:
fil_page_check_type	include/fil0fil.h	/^inline void fil_page_check_type(const page_id_t &page_id, byte *page,$/;"	f
fil_page_get_next	fil/fil0fil.cc	/^page_no_t fil_page_get_next(const byte *page) {$/;"	f
fil_page_get_prev	fil/fil0fil.cc	/^page_no_t fil_page_get_prev(const byte *page) {$/;"	f
fil_page_get_type	include/fil0fil.h	/^inline page_type_t fil_page_get_type(const byte *page) {$/;"	f
fil_page_index_page_check	include/fil0fil.h	1327;"	d
fil_page_reset_type	fil/fil0fil.cc	/^void fil_page_reset_type(const page_id_t &page_id, byte *page, ulint type,$/;"	f
fil_page_set_type	fil/fil0fil.cc	/^void fil_page_set_type(byte *page, ulint type) {$/;"	f
fil_page_type_is_index	include/fil0fil.h	1321;"	d
fil_path_is_known	fil/fil0fil.cc	/^bool fil_path_is_known(const std::string &path) {$/;"	f
fil_path_to_space_name	fil/fil0fil.cc	/^char *fil_path_to_space_name(const char *filename) {$/;"	f
fil_purge	fil/fil0fil.cc	/^void fil_purge() { fil_system->purge(); }$/;"	f
fil_read	fil/fil0fil.cc	/^static dberr_t fil_read(const page_id_t &page_id, const page_size_t &page_size,$/;"	f	file:
fil_redo_io	fil/fil0fil.cc	/^dberr_t fil_redo_io(const IORequest &type, const page_id_t &page_id,$/;"	f
fil_rename_partition_file	fil/fil0fil.cc	/^static void fil_rename_partition_file(const std::string &old_path,$/;"	f	file:
fil_rename_precheck	fil/fil0fil.cc	/^dberr_t fil_rename_precheck(const dict_table_t *old_table,$/;"	f
fil_rename_tablespace	fil/fil0fil.cc	/^dberr_t fil_rename_tablespace(space_id_t space_id, const char *old_path,$/;"	f
fil_rename_tablespace_by_id	fil/fil0fil.cc	/^dberr_t fil_rename_tablespace_by_id(space_id_t space_id, const char *old_name,$/;"	f
fil_rename_tablespace_check	fil/fil0fil.cc	/^dberr_t fil_rename_tablespace_check(space_id_t space_id, const char *old_path,$/;"	f
fil_rename_validate	fil/fil0fil.cc	/^static dberr_t fil_rename_validate(fil_space_t *space, const std::string &name,$/;"	f	file:
fil_report_invalid_page_access	fil/fil0fil.cc	7583;"	d	file:
fil_report_invalid_page_access_low	fil/fil0fil.cc	/^static void fil_report_invalid_page_access_low(page_no_t block_offset,$/;"	f	file:
fil_report_missing_tablespace	fil/fil0fil.cc	/^static void fil_report_missing_tablespace(const char *name,$/;"	f	file:
fil_reset_encryption	fil/fil0fil.cc	/^dberr_t fil_reset_encryption(space_id_t space_id) {$/;"	f
fil_scan_for_tablespaces	fil/fil0fil.cc	/^dberr_t fil_scan_for_tablespaces() { return fil_system->scan(); }$/;"	f
fil_set_autoextend_size	fil/fil0fil.cc	/^dberr_t fil_set_autoextend_size(space_id_t space_id, uint64_t autoextend_size) {$/;"	f
fil_set_compression	fil/fil0fil.cc	/^dberr_t fil_set_compression(space_id_t space_id, const char *algorithm) {$/;"	f
fil_set_encryption	fil/fil0fil.cc	/^dberr_t fil_set_encryption(space_id_t space_id, Encryption::Type algorithm,$/;"	f
fil_set_max_space_id_if_bigger	fil/fil0fil.cc	/^void fil_set_max_space_id_if_bigger(space_id_t max_id) {$/;"	f
fil_set_scan_dir	fil/fil0fil.cc	/^void fil_set_scan_dir(const std::string &directory, bool is_undo_dir) {$/;"	f
fil_set_scan_dirs	fil/fil0fil.cc	/^void fil_set_scan_dirs(const std::string &directories) {$/;"	f
fil_space_acquire	fil/fil0fil.cc	/^fil_space_t *fil_space_acquire(space_id_t space_id) {$/;"	f
fil_space_acquire_silent	fil/fil0fil.cc	/^fil_space_t *fil_space_acquire_silent(space_id_t space_id) {$/;"	f
fil_space_close	fil/fil0fil.cc	/^void fil_space_close(space_id_t space_id) {$/;"	f
fil_space_create	fil/fil0fil.cc	/^fil_space_t *fil_space_create(const char *name, space_id_t space_id,$/;"	f
fil_space_dec_redo_skipped_count	fil/fil0fil.cc	/^void fil_space_dec_redo_skipped_count(space_id_t space_id) {$/;"	f
fil_space_exists_in_mem	fil/fil0fil.cc	/^bool fil_space_exists_in_mem(space_id_t space_id, const char *name,$/;"	f
fil_space_extend	fil/fil0fil.cc	/^bool fil_space_extend(fil_space_t *space, page_no_t size) {$/;"	f
fil_space_free	fil/fil0fil.cc	/^static bool fil_space_free(space_id_t space_id, bool x_latched) {$/;"	f	file:
fil_space_get	fil/fil0fil.cc	/^fil_space_t *fil_space_get(space_id_t space_id) {$/;"	f
fil_space_get_first_path	fil/fil0fil.cc	/^char *fil_space_get_first_path(space_id_t space_id) {$/;"	f
fil_space_get_flags	fil/fil0fil.cc	/^uint32_t fil_space_get_flags(space_id_t space_id) {$/;"	f
fil_space_get_id_by_name	fil/fil0fil.cc	/^space_id_t fil_space_get_id_by_name(const char *name) {$/;"	f
fil_space_get_latch	fil/fil0fil.cc	/^rw_lock_t *fil_space_get_latch(space_id_t space_id) {$/;"	f
fil_space_get_n_reserved_extents	fil/fil0fil.cc	/^ulint fil_space_get_n_reserved_extents(space_id_t space_id) {$/;"	f
fil_space_get_page_size	fil/fil0fil.cc	/^const page_size_t fil_space_get_page_size(space_id_t space_id, bool *found) {$/;"	f
fil_space_get_size	fil/fil0fil.cc	/^page_no_t fil_space_get_size(space_id_t space_id) {$/;"	f
fil_space_get_sys_space	include/fil0fil.h	2110;"	d
fil_space_get_type	fil/fil0fil.cc	/^fil_type_t fil_space_get_type(space_id_t space_id) {$/;"	f
fil_space_get_undo_initial_size	fil/fil0fil.cc	/^page_no_t fil_space_get_undo_initial_size(space_id_t space_id) {$/;"	f
fil_space_inc_redo_skipped_count	fil/fil0fil.cc	/^void fil_space_inc_redo_skipped_count(space_id_t space_id) {$/;"	f
fil_space_is_redo_skipped	fil/fil0fil.cc	/^bool fil_space_is_redo_skipped(space_id_t space_id) {$/;"	f
fil_space_latch_key	sync/sync0sync.cc	/^mysql_pfs_key_t fil_space_latch_key;$/;"	v
fil_space_open	fil/fil0fil.cc	/^bool fil_space_open(space_id_t space_id) {$/;"	f
fil_space_open_if_needed	include/fil0fil.h	/^inline void fil_space_open_if_needed(fil_space_t *space) {$/;"	f
fil_space_read_name_and_filepath	fil/fil0fil.cc	/^bool fil_space_read_name_and_filepath(space_id_t space_id, char **name,$/;"	f
fil_space_release	fil/fil0fil.cc	/^void fil_space_release(fil_space_t *space) {$/;"	f
fil_space_release_free_extents	fil/fil0fil.cc	/^void fil_space_release_free_extents(space_id_t space_id, ulint n_reserved) {$/;"	f
fil_space_reserve_free_extents	fil/fil0fil.cc	/^bool fil_space_reserve_free_extents(space_id_t space_id, ulint n_free_now,$/;"	f
fil_space_set_flags	fil/fil0fil.cc	/^void fil_space_set_flags(fil_space_t *space, uint32_t flags) {$/;"	f
fil_space_set_imported	fil/fil0fil.cc	/^void fil_space_set_imported(space_id_t space_id) {$/;"	f
fil_space_set_undo_size	fil/fil0fil.cc	/^void fil_space_set_undo_size(space_id_t space_id, bool use_current) {$/;"	f
fil_space_t	include/fil0fil.h	/^struct fil_space_t {$/;"	s
fil_space_update_name	fil/fil0fil.cc	/^void fil_space_update_name(fil_space_t *space, const char *name) {$/;"	f
fil_system	fil/fil0fil.cc	/^static Fil_system *fil_system = nullptr;$/;"	v	file:
fil_system_get_file_by_space_id	fil/fil0fil.cc	/^bool fil_system_get_file_by_space_id(space_id_t space_id, std::string &name) {$/;"	f
fil_system_get_file_by_space_num	fil/fil0fil.cc	/^bool fil_system_get_file_by_space_num(space_id_t space_num,$/;"	f
fil_system_mutex_key	sync/sync0sync.cc	/^mysql_pfs_key_t fil_system_mutex_key;$/;"	v
fil_tablespace_encryption_init	fil/fil0fil.cc	/^static void fil_tablespace_encryption_init(const fil_space_t *space) {$/;"	f	file:
fil_tablespace_iterate	fil/fil0fil.cc	/^dberr_t fil_tablespace_iterate(dict_table_t *table, ulint n_io_buffers,$/;"	f
fil_tablespace_lookup_for_recovery	fil/fil0fil.cc	/^bool fil_tablespace_lookup_for_recovery(space_id_t space_id) {$/;"	f
fil_tablespace_open_for_recovery	fil/fil0fil.cc	/^bool fil_tablespace_open_for_recovery(space_id_t space_id) {$/;"	f
fil_tablespace_path_equals	fil/fil0fil.cc	/^Fil_state fil_tablespace_path_equals(dd::Object_id dd_object_id,$/;"	f
fil_tablespace_redo_create	fil/fil0fil.cc	/^byte *fil_tablespace_redo_create(byte *ptr, const byte *end,$/;"	f
fil_tablespace_redo_delete	fil/fil0fil.cc	/^byte *fil_tablespace_redo_delete(byte *ptr, const byte *end,$/;"	f
fil_tablespace_redo_encryption	fil/fil0fil.cc	/^byte *fil_tablespace_redo_encryption(byte *ptr, const byte *end,$/;"	f
fil_tablespace_redo_extend	fil/fil0fil.cc	/^byte *fil_tablespace_redo_extend(byte *ptr, const byte *end,$/;"	f
fil_tablespace_redo_rename	fil/fil0fil.cc	/^byte *fil_tablespace_redo_rename(byte *ptr, const byte *end,$/;"	f
fil_truncate_tablespace	fil/fil0fil.cc	/^bool fil_truncate_tablespace(space_id_t space_id, page_no_t size_in_pages) {$/;"	f
fil_type_is_data	include/fil0fil.h	/^inline bool fil_type_is_data(fil_type_t type) {$/;"	f
fil_update_partition_name	fil/fil0fil.cc	/^bool fil_update_partition_name(space_id_t space_id, uint32_t fsp_flags,$/;"	f
fil_validate	fil/fil0fil.cc	/^bool fil_validate() { return fil_system->validate(); }$/;"	f
fil_validate_skip	fil/fil0fil.cc	/^static bool fil_validate_skip() {$/;"	f	file:
fil_validate_space_reference_count	fil/fil0fil.cc	/^static void fil_validate_space_reference_count($/;"	f	file:
fil_write	fil/fil0fil.cc	/^static dberr_t fil_write(const page_id_t &page_id, const page_size_t &page_size,$/;"	f	file:
fil_write_flushed_lsn	fil/fil0fil.cc	/^dberr_t fil_write_flushed_lsn(lsn_t lsn) {$/;"	f
fil_write_zeros	fil/fil0fil.cc	/^static dberr_t fil_write_zeros(const fil_node_t *file, ulint page_size,$/;"	f	file:
file	include/os0file.h	/^namespace file {$/;"	n
file	include/sync0arr_impl.h	/^  const char *file = nullptr;  \/*!< in debug version file where$/;"	m	struct:sync_cell_t
file_callback	clone/clone0clone.cc	/^int Clone_Handle::file_callback(Ha_clone_cbk *cbk, Clone_Task *task, uint len,$/;"	f	class:Clone_Handle
file_close_to_free	fil/fil0fil.cc	/^void Fil_shard::file_close_to_free(fil_node_t *file, fil_space_t *space) {$/;"	f	class:Fil_shard
file_exists	clone/clone0api.cc	/^static bool file_exists(std::string &file_name) {$/;"	f	file:
file_found	fsp/fsp0space.cc	/^void Tablespace::file_found(Datafile &file) {$/;"	f	class:Tablespace
file_found	fsp/fsp0sysspace.cc	/^void SysTablespace::file_found(Datafile &file) {$/;"	f	class:SysTablespace
file_id	srv/srv0tmp.cc	/^uint32_t Tablespace::file_id() const {$/;"	f	class:ibt::Tablespace
file_name	include/mem0mem.h	/^  char file_name[16]; \/* file name where the mem heap was created *\/$/;"	m	struct:mem_block_info_t
file_name	include/sync0rw.h	/^  const char *file_name;     \/*!< File name where the lock was obtained *\/$/;"	m	struct:rw_lock_debug_t
file_name	include/trx0purge.h	/^  char *file_name() {$/;"	f	struct:undo::Tablespace
file_name	srv/srv0tmp.cc	/^std::string Tablespace::file_name() const {$/;"	f	class:ibt::Tablespace
file_name_only	include/fil0fil.h	/^  enum path_type { absolute, relative, file_name_only, invalid };$/;"	e	enum:Fil_path::path_type
file_not_found	fsp/fsp0sysspace.cc	/^dberr_t SysTablespace::file_not_found(Datafile &file, bool create_new_db) {$/;"	f	class:SysTablespace
file_open_mutex_key	sync/sync0sync.cc	/^mysql_pfs_key_t file_open_mutex_key;$/;"	v
file_opened	fil/fil0fil.cc	/^void Fil_shard::file_opened(fil_node_t *file) {$/;"	f	class:Fil_shard
file_page_was_freed	include/buf0buf.h	/^  bool file_page_was_freed;$/;"	m	class:Cache_hint::buf_page_t
file_roll_forward	clone/clone0api.cc	/^static int file_roll_forward(std::string &data_file, int final_state) {$/;"	f	file:
file_rollback	clone/clone0api.cc	/^static void file_rollback(std::string &data_file) {$/;"	f	file:
file_status_t	include/fsp0sysspace.h	/^  enum file_status_t {$/;"	g	class:SysTablespace
file_to_table	dict/dict0dd.cc	/^void file_to_table(std::string &name, bool quiet) {$/;"	f	namespace:dict_name
filename	include/ut0ut.h	/^  const char *filename;$/;"	m	struct:ut::Location
filepath	include/fsp0file.h	/^  const char *filepath() const { return (m_filepath); }$/;"	f	class:Datafile
files	srv/srv0start.cc	/^static pfs_os_file_t files[1000];$/;"	v	file:
files_t	include/fsp0space.h	/^  typedef std::vector<Datafile, ut_allocator<Datafile>> files_t;$/;"	t	class:Tablespace
fill_dd	include/dict0mem.h	/^  bool fill_dd;                \/*!< Flag whether need to fill dd tables$/;"	m	struct:dict_index_t
fill_info	arch/arch0recv.cc	/^dberr_t Arch_Page_Sys::Recv::fill_info(Arch_Page_Sys *page_sys) {$/;"	f	class:Arch_Page_Sys::Recv
fill_locks_row	trx/trx0i_s.cc	/^void fill_locks_row(i_s_locks_row_t *row, const lock_t *lock, ulint heap_no) {$/;"	f
fill_srid_value	include/dict0mem.h	/^  void fill_srid_value(uint32_t srid_value, bool srid_is_valid_value) {$/;"	f	struct:dict_index_t
fill_trx_row	trx/trx0i_s.cc	/^static ibool fill_trx_row($/;"	f	file:
find	fsp/fsp0space.cc	/^bool Tablespace::find(const char *filename) {$/;"	f	class:Tablespace
find	include/dyn0buf.h	/^  block_t *find(ulint &pos) {$/;"	f	class:dyn_buf_t
find	include/trx0purge.h	/^  Tablespace *find(space_id_t num) {$/;"	f	class:undo::Tablespaces
find	include/trx0sys.h	/^  iterator find(space_id_t id) { return (std::find(begin(), end(), id)); }$/;"	f	class:Space_Ids
find	trx/trx0rseg.cc	/^trx_rseg_t *Rsegs::find(ulint rseg_id) {$/;"	f	class:Rsegs
find_alter_encrypt_record	log/log0ddl.cc	/^DDL_Record *Log_DDL::find_alter_encrypt_record(space_id_t space_id) {$/;"	f	class:Log_DDL
find_clone	clone/clone0clone.cc	/^Clone_Handle *Clone_Sys::find_clone(const byte *ref_loc, uint loc_len,$/;"	f	class:Clone_Sys
find_completed_slot	os/os0file.cc	/^Slot *LinuxAIOHandler::find_completed_slot(ulint *n_pending) {$/;"	f	class:LinuxAIOHandler
find_first_inactive_explicit	include/trx0purge.h	/^  Tablespace *find_first_inactive_explicit(size_t *num_active) {$/;"	f	class:undo::Tablespaces
find_free_index	clone/clone0clone.cc	/^int Clone_Sys::find_free_index(Clone_Handle_Type hdl_type, uint &free_index) {$/;"	f	class:Clone_Sys
find_multi_value_field	row/row0row.cc	/^dfield_t *Multi_value_entry_builder_normal::find_multi_value_field() {$/;"	f	class:Multi_value_entry_builder_normal
find_offset	lob/lob0update.cc	/^fil_addr_t find_offset(trx_t *trx, dict_index_t *index, fil_addr_t node_loc,$/;"	f	namespace:lob
find_reset_point	arch/arch0page.cc	/^bool Arch_File_Ctx::find_reset_point(lsn_t check_lsn, Arch_Point &reset_point) {$/;"	f	class:Arch_File_Ctx
find_reset_point	include/arch0arch.h	/^  bool find_reset_point(lsn_t check_lsn, Arch_Point &reset_point) {$/;"	f	class:Arch_Group
find_space_id	fsp/fsp0file.cc	/^dberr_t Datafile::find_space_id() {$/;"	f	class:Datafile
find_stop_point	arch/arch0page.cc	/^bool Arch_File_Ctx::find_stop_point(Arch_Group *group, lsn_t check_lsn,$/;"	f	class:Arch_File_Ctx
find_stop_point	include/arch0arch.h	/^  bool find_stop_point(lsn_t check_lsn, Arch_Point &stop_point,$/;"	f	class:Arch_Group
finish	btr/btr0bulk.cc	/^dberr_t BtrBulk::finish(dberr_t err) {$/;"	f	class:BtrBulk
finish	btr/btr0bulk.cc	/^void PageBulk::finish() {$/;"	f	class:PageBulk
finish	include/lob0zip.h	/^  dberr_t finish(bool validate = true) {$/;"	f	class:lob::zInserter
finishAllPageBulks	btr/btr0bulk.cc	/^dberr_t BtrBulk::finishAllPageBulks(dberr_t err, page_no_t &last_page_no) {$/;"	f	class:BtrBulk
finish_callback	row/row0pread-histogram.cc	/^dberr_t Histogram_sampler::finish_callback($/;"	f	class:Histogram_sampler
finish_state	clone/clone0clone.cc	/^int Clone_Task_Manager::finish_state(Clone_Task *task) {$/;"	f	class:Clone_Task_Manager
finish_write	handler/handler0alter.cc	/^  void finish_write(row_prebuilt_t *prebuilt, uint new_part_id) {$/;"	f	class:Altered_partitions
first	include/fut0lst.h	/^  fil_addr_t first;$/;"	m	struct:flst_bnode_t
first	include/lock0priv.h	/^  static lock_t *first(hash_cell_t *list, const RecID &rec_id) {$/;"	f	struct:Lock_iter
first	include/ut0list.h	/^  ib_list_node_t *first; \/*!< first node *\/$/;"	m	struct:ib_list_t
first_datafile	include/fsp0space.h	/^  Datafile *first_datafile() {$/;"	f	class:Tablespace
first_doc_id	include/fts0types.h	/^  doc_id_t first_doc_id; \/*!< First document id in ilist. *\/$/;"	m	struct:fts_node_t
first_doc_id	include/fts0types.h	/^  doc_id_t first_doc_id; \/*!< first doc id since this table$/;"	m	struct:fts_cache_t
first_free_slot	include/sync0arr_impl.h	/^  ulint first_free_slot; \/*!< the last slot that was freed *\/$/;"	m	struct:sync_array_t
first_free_slot	sync/sync0arr.cc	/^                                                           first_free_slot() {$/;"	f
first_index	include/dict0mem.h	/^  const dict_index_t *first_index() const {$/;"	f	struct:dict_table_t
first_index	include/dict0mem.h	/^  dict_index_t *first_index() {$/;"	f	struct:dict_table_t
first_page_t	include/lob0first.h	/^  first_page_t() {}$/;"	f	struct:lob::first_page_t
first_page_t	include/lob0first.h	/^  first_page_t(buf_block_t *block) : basic_page_t(block, nullptr) {}$/;"	f	struct:lob::first_page_t
first_page_t	include/lob0first.h	/^  first_page_t(buf_block_t *block, mtr_t *mtr) : basic_page_t(block, mtr) {}$/;"	f	struct:lob::first_page_t
first_page_t	include/lob0first.h	/^  first_page_t(buf_block_t *block, mtr_t *mtr, dict_index_t *index)$/;"	f	struct:lob::first_page_t
first_page_t	include/lob0first.h	/^  first_page_t(mtr_t *mtr, dict_index_t *index)$/;"	f	struct:lob::first_page_t
first_page_t	include/lob0first.h	/^struct first_page_t : public basic_page_t {$/;"	s	namespace:lob
first_prefetched	include/row0sel.h	/^  ulint first_prefetched;  \/*!< index of the first cached row in$/;"	m	struct:plan_t
fix	clone/clone0api.cc	/^  bool fix(THD *thd, const DD_Objs<T> &dd_objects) {$/;"	f	class:__anon2::Fixup_data
fix_cloned_tables	clone/clone0api.cc	/^bool fix_cloned_tables(THD *thd) {$/;"	f
fix_config_tables	clone/clone0api.cc	/^bool Fixup_data::fix_config_tables(THD *thd) {$/;"	f	class:__anon2::Fixup_data
fix_objects	clone/clone0api.cc	/^void Fixup_data::fix_objects(THD *thd, const DD_Objs_Iter<T> &begin,$/;"	f	class:__anon2::Fixup_data
fix_one_object	clone/clone0api.cc	/^bool Fixup_data::fix_one_object(THD *thd, const dd::Schema *schema,$/;"	f	class:__anon2::Fixup_data
fix_one_object	clone/clone0api.cc	/^bool Fixup_data::fix_one_object(THD *thd, const dd::Table *table,$/;"	f	class:__anon2::Fixup_data
fix_one_object	clone/clone0api.cc	/^bool Fixup_data::fix_one_object(THD *thd, const dd::Tablespace *tablespace,$/;"	f	class:__anon2::Fixup_data
fixed_len	include/dict0mem.h	/^  unsigned fixed_len : 10;   \/*!< 0 or the fixed length of the$/;"	m	struct:dict_field_t
fixed_len_key	include/dict0mem.h	/^  bool fixed_len_key;$/;"	m	class:rec_cache_t
fk_cascade_depth	include/que0que.h	/^  ulint fk_cascade_depth;   \/*!< maximum cascading call depth$/;"	m	struct:que_thr_t
fk_max_recusive_level	include/dict0mem.h	/^  unsigned fk_max_recusive_level : 8;$/;"	m	struct:dict_table_t
flag	include/trx0undo.h	/^  ulint flag;      \/*!< flag for current transaction XID and GTID.$/;"	m	struct:trx_undo_t
flag_mismatch_spaces	fsp/fsp0fsp.cc	/^std::vector<space_id_t> flag_mismatch_spaces;$/;"	v
flags	dict/dict0upgrade.cc	/^  uint32_t flags;$/;"	m	struct:__anon1	file:
flags	fts/fts0que.cc	/^  ulint flags; \/*!< Specify the full text search type,$/;"	m	struct:fts_query_t	file:
flags	handler/ha_innodb.h	/^  uint32_t flags() const { return (m_flags); }$/;"	f	class:create_table_info_t
flags	include/dict0mem.h	/^  unsigned flags : DICT_TF_BITS;$/;"	m	struct:dict_table_t
flags	include/fsp0file.h	/^  uint32_t flags() const { return (m_flags); }$/;"	f	class:Datafile
flags	include/fsp0space.h	/^  uint32_t flags() const { return (m_flags); }$/;"	f	class:Tablespace
flags2	handler/ha_innodb.h	/^  uint32_t flags2() const { return (m_flags2); }$/;"	f	class:create_table_info_t
flags2	include/dict0mem.h	/^  unsigned flags2 : DICT_TF2_BITS;$/;"	m	struct:dict_table_t
flags2_reset	handler/ha_innodb.h	/^  void flags2_reset() { m_flags2 = 0; }$/;"	f	class:create_table_info_t
flags_reset	handler/ha_innodb.h	/^  void flags_reset() { m_flags = 0; }$/;"	f	class:create_table_info_t
flex_int16_t	fts/fts0blex.cc	/^typedef int16_t flex_int16_t;$/;"	t	file:
flex_int16_t	fts/fts0blex.cc	/^typedef short int flex_int16_t;$/;"	t	file:
flex_int16_t	fts/fts0tlex.cc	/^typedef int16_t flex_int16_t;$/;"	t	file:
flex_int16_t	fts/fts0tlex.cc	/^typedef short int flex_int16_t;$/;"	t	file:
flex_int16_t	include/fts0blex.h	/^typedef int16_t flex_int16_t;$/;"	t
flex_int16_t	include/fts0blex.h	/^typedef short int flex_int16_t;$/;"	t
flex_int16_t	include/fts0tlex.h	/^typedef int16_t flex_int16_t;$/;"	t
flex_int16_t	include/fts0tlex.h	/^typedef short int flex_int16_t;$/;"	t
flex_int16_t	pars/lexyy.cc	/^typedef int16_t flex_int16_t;$/;"	t	file:
flex_int16_t	pars/lexyy.cc	/^typedef short int flex_int16_t;$/;"	t	file:
flex_int32_t	fts/fts0blex.cc	/^typedef int flex_int32_t;$/;"	t	file:
flex_int32_t	fts/fts0blex.cc	/^typedef int32_t flex_int32_t;$/;"	t	file:
flex_int32_t	fts/fts0tlex.cc	/^typedef int flex_int32_t;$/;"	t	file:
flex_int32_t	fts/fts0tlex.cc	/^typedef int32_t flex_int32_t;$/;"	t	file:
flex_int32_t	include/fts0blex.h	/^typedef int flex_int32_t;$/;"	t
flex_int32_t	include/fts0blex.h	/^typedef int32_t flex_int32_t;$/;"	t
flex_int32_t	include/fts0tlex.h	/^typedef int flex_int32_t;$/;"	t
flex_int32_t	include/fts0tlex.h	/^typedef int32_t flex_int32_t;$/;"	t
flex_int32_t	pars/lexyy.cc	/^typedef int flex_int32_t;$/;"	t	file:
flex_int32_t	pars/lexyy.cc	/^typedef int32_t flex_int32_t;$/;"	t	file:
flex_int8_t	fts/fts0blex.cc	/^typedef int8_t flex_int8_t;$/;"	t	file:
flex_int8_t	fts/fts0blex.cc	/^typedef signed char flex_int8_t;$/;"	t	file:
flex_int8_t	fts/fts0tlex.cc	/^typedef int8_t flex_int8_t;$/;"	t	file:
flex_int8_t	fts/fts0tlex.cc	/^typedef signed char flex_int8_t;$/;"	t	file:
flex_int8_t	include/fts0blex.h	/^typedef int8_t flex_int8_t;$/;"	t
flex_int8_t	include/fts0blex.h	/^typedef signed char flex_int8_t;$/;"	t
flex_int8_t	include/fts0tlex.h	/^typedef int8_t flex_int8_t;$/;"	t
flex_int8_t	include/fts0tlex.h	/^typedef signed char flex_int8_t;$/;"	t
flex_int8_t	pars/lexyy.cc	/^typedef int8_t flex_int8_t;$/;"	t	file:
flex_int8_t	pars/lexyy.cc	/^typedef signed char flex_int8_t;$/;"	t	file:
flex_uint16_t	fts/fts0blex.cc	/^typedef uint16_t flex_uint16_t;$/;"	t	file:
flex_uint16_t	fts/fts0blex.cc	/^typedef unsigned short int flex_uint16_t;$/;"	t	file:
flex_uint16_t	fts/fts0tlex.cc	/^typedef uint16_t flex_uint16_t;$/;"	t	file:
flex_uint16_t	fts/fts0tlex.cc	/^typedef unsigned short int flex_uint16_t;$/;"	t	file:
flex_uint16_t	include/fts0blex.h	/^typedef uint16_t flex_uint16_t;$/;"	t
flex_uint16_t	include/fts0blex.h	/^typedef unsigned short int flex_uint16_t;$/;"	t
flex_uint16_t	include/fts0tlex.h	/^typedef uint16_t flex_uint16_t;$/;"	t
flex_uint16_t	include/fts0tlex.h	/^typedef unsigned short int flex_uint16_t;$/;"	t
flex_uint16_t	pars/lexyy.cc	/^typedef uint16_t flex_uint16_t;$/;"	t	file:
flex_uint16_t	pars/lexyy.cc	/^typedef unsigned short int flex_uint16_t;$/;"	t	file:
flex_uint32_t	fts/fts0blex.cc	/^typedef uint32_t flex_uint32_t;$/;"	t	file:
flex_uint32_t	fts/fts0blex.cc	/^typedef unsigned int flex_uint32_t;$/;"	t	file:
flex_uint32_t	fts/fts0tlex.cc	/^typedef uint32_t flex_uint32_t;$/;"	t	file:
flex_uint32_t	fts/fts0tlex.cc	/^typedef unsigned int flex_uint32_t;$/;"	t	file:
flex_uint32_t	include/fts0blex.h	/^typedef uint32_t flex_uint32_t;$/;"	t
flex_uint32_t	include/fts0blex.h	/^typedef unsigned int flex_uint32_t;$/;"	t
flex_uint32_t	include/fts0tlex.h	/^typedef uint32_t flex_uint32_t;$/;"	t
flex_uint32_t	include/fts0tlex.h	/^typedef unsigned int flex_uint32_t;$/;"	t
flex_uint32_t	pars/lexyy.cc	/^typedef uint32_t flex_uint32_t;$/;"	t	file:
flex_uint32_t	pars/lexyy.cc	/^typedef unsigned int flex_uint32_t;$/;"	t	file:
flex_uint8_t	fts/fts0blex.cc	/^typedef uint8_t flex_uint8_t;$/;"	t	file:
flex_uint8_t	fts/fts0blex.cc	/^typedef unsigned char flex_uint8_t; $/;"	t	file:
flex_uint8_t	fts/fts0tlex.cc	/^typedef uint8_t flex_uint8_t;$/;"	t	file:
flex_uint8_t	fts/fts0tlex.cc	/^typedef unsigned char flex_uint8_t; $/;"	t	file:
flex_uint8_t	include/fts0blex.h	/^typedef uint8_t flex_uint8_t;$/;"	t
flex_uint8_t	include/fts0blex.h	/^typedef unsigned char flex_uint8_t; $/;"	t
flex_uint8_t	include/fts0tlex.h	/^typedef uint8_t flex_uint8_t;$/;"	t
flex_uint8_t	include/fts0tlex.h	/^typedef unsigned char flex_uint8_t; $/;"	t
flex_uint8_t	pars/lexyy.cc	/^typedef uint8_t flex_uint8_t;$/;"	t	file:
flex_uint8_t	pars/lexyy.cc	/^typedef unsigned char flex_uint8_t; $/;"	t	file:
flst_add_first	fut/fut0lst.cc	/^void flst_add_first(flst_base_node_t *base, flst_node_t *node, mtr_t *mtr) {$/;"	f
flst_add_last	fut/fut0lst.cc	/^void flst_add_last(flst_base_node_t *base, flst_node_t *node, mtr_t *mtr) {$/;"	f
flst_add_to_empty	fut/fut0lst.cc	/^static void flst_add_to_empty(flst_base_node_t *base, \/*!< in: pointer to base$/;"	f	file:
flst_base_node_t	include/fut0lst.h	/^typedef byte flst_base_node_t;$/;"	t
flst_bnode_t	include/fut0lst.h	/^  flst_bnode_t() : len(0) {}$/;"	f	struct:flst_bnode_t
flst_bnode_t	include/fut0lst.h	/^  flst_bnode_t(const flst_base_node_t *base, mtr_t *mtr)$/;"	f	struct:flst_bnode_t
flst_bnode_t	include/fut0lst.h	/^struct flst_bnode_t {$/;"	s
flst_insert_after	fut/fut0lst.cc	/^void flst_insert_after($/;"	f
flst_insert_before	fut/fut0lst.cc	/^void flst_insert_before($/;"	f
flst_node_t	include/fut0lst.h	/^typedef byte flst_node_t;$/;"	t
flst_remove	fut/fut0lst.cc	/^void flst_remove(flst_base_node_t *base, flst_node_t *node2, mtr_t *mtr) {$/;"	f
flst_validate	fut/fut0lst.cc	/^ibool flst_validate($/;"	f
flush	arch/arch0page.cc	/^dberr_t Arch_Block::flush(Arch_Group *file_group, Arch_Blk_Flush_Type type) {$/;"	f	class:Arch_Block
flush	buf/buf0flu.cc	/^void FlushObserver::flush() {$/;"	f	class:FlushObserver
flush	include/arch0arch.h	/^  void flush() {$/;"	f	class:Arch_File_Ctx
flush_active_block	arch/arch0page.cc	/^dberr_t Arch_Page_Sys::flush_active_block(Arch_Page_Pos cur_pos,$/;"	f	class:Arch_Page_Sys
flush_at_checkpoint	arch/arch0page.cc	/^void Arch_Page_Sys::flush_at_checkpoint(lsn_t checkpoint_lsn) {$/;"	f	class:Arch_Page_Sys
flush_blocks	arch/arch0page.cc	/^dberr_t Arch_Page_Sys::flush_blocks(bool *wait) {$/;"	f	class:Arch_Page_Sys
flush_counter	include/fil0fil.h	/^  int64_t flush_counter;$/;"	m	struct:fil_node_t
flush_end	include/log0recv.h	/^  os_event_t flush_end;$/;"	m	struct:recv_sys_t
flush_every	log/log0test.cc	/^int Log_test::flush_every() const { return (m_flush_every); }$/;"	f	class:Log_test
flush_file_redo	fil/fil0fil.cc	/^void Fil_shard::flush_file_redo() {$/;"	f	class:Fil_shard
flush_file_redo	fil/fil0fil.cc	/^void Fil_system::flush_file_redo() { m_shards[REDO_SHARD]->flush_file_redo(); }$/;"	f	class:Fil_system
flush_file_spaces	fil/fil0fil.cc	/^void Fil_shard::flush_file_spaces(uint8_t purpose) {$/;"	f	class:Fil_shard
flush_file_spaces	fil/fil0fil.cc	/^void Fil_system::flush_file_spaces(uint8_t purpose) {$/;"	f	class:Fil_system
flush_gtids	clone/clone0repl.cc	/^void Clone_persist_gtid::flush_gtids(THD *thd) {$/;"	f	class:Clone_persist_gtid
flush_hp	include/buf0buf.h	/^  FlushHp flush_hp;$/;"	m	struct:Cache_hint::buf_pool_t
flush_immediate	include/clone0repl.h	/^  bool flush_immediate() const {$/;"	f	class:Clone_persist_gtid
flush_inactive_blocks	arch/arch0page.cc	/^dberr_t Arch_Page_Sys::flush_inactive_blocks(Arch_Page_Pos &cur_pos,$/;"	f	class:Arch_Page_Sys
flush_list	include/buf0buf.h	/^  UT_LIST_BASE_NODE_T(buf_page_t) flush_list;$/;"	m	struct:Cache_hint::buf_pool_t
flush_list_bytes	include/buf0buf.h	/^  uint64_t flush_list_bytes;$/;"	m	struct:Cache_hint::buf_pool_stat_t
flush_list_bytes	include/buf0buf.h	/^  ulint flush_list_bytes; \/*!< flush_list size in bytes *\/$/;"	m	struct:Cache_hint::buf_pools_list_size_t
flush_list_len	include/buf0buf.h	/^  ulint flush_list_len;              \/*!< Length of buf_pool->flush_list *\/$/;"	m	struct:Cache_hint::buf_pool_info_t
flush_list_mutex	include/buf0buf.h	/^  BufListMutex flush_list_mutex;$/;"	m	struct:Cache_hint::buf_pool_t
flush_list_mutex_key	sync/sync0sync.cc	/^mysql_pfs_key_t flush_list_mutex_key;$/;"	v
flush_list_pass	buf/buf0flu.cc	/^  ulint flush_list_pass;$/;"	m	struct:page_cleaner_slot_t	file:
flush_list_time	buf/buf0flu.cc	/^  uint64_t flush_list_time;$/;"	m	struct:page_cleaner_slot_t	file:
flush_log_later	include/trx0trx.h	/^  bool flush_log_later;      \/* In 2PC, we hold the$/;"	m	struct:trx_t
flush_lru_pass	buf/buf0flu.cc	/^  ulint flush_lru_pass;$/;"	m	struct:page_cleaner_slot_t	file:
flush_lru_time	buf/buf0flu.cc	/^  uint64_t flush_lru_time;$/;"	m	struct:page_cleaner_slot_t	file:
flush_observer	include/trx0trx.h	/^  FlushObserver *flush_observer; \/*!< flush observer *\/$/;"	m	struct:trx_t
flush_pass	buf/buf0flu.cc	/^  ulint flush_pass;           \/*!< count to finish to flush$/;"	m	struct:page_cleaner_t	file:
flush_rbt	include/buf0buf.h	/^  ib_rbt_t *flush_rbt;$/;"	m	struct:Cache_hint::buf_pool_t
flush_size	include/fil0fil.h	/^  page_no_t flush_size;$/;"	m	struct:fil_node_t
flush_start	include/log0recv.h	/^  os_event_t flush_start;$/;"	m	struct:recv_sys_t
flush_state_mutex	include/buf0buf.h	/^  ib_mutex_t flush_state_mutex;$/;"	m	struct:Cache_hint::buf_pool_t
flush_tables	include/trx0trx.h	/^  ib_uint32_t flush_tables; \/*!< if "covering" the FLUSH TABLES",$/;"	m	struct:trx_t
flush_time	buf/buf0flu.cc	/^  uint64_t flush_time;        \/*!< elapsed time to flush$/;"	m	struct:page_cleaner_t	file:
flush_type	include/buf0buf.h	/^  buf_flush_t flush_type;$/;"	m	class:Cache_hint::buf_page_t
flush_type	include/log0recv.h	/^  buf_flush_t flush_type;$/;"	m	struct:recv_sys_t
flushed	log/log0test.cc	/^const Log_test::Pages &Log_test::flushed() const { return (m_flushed); }$/;"	f	class:Log_test
fold	include/buf0types.h	/^  inline uint32_t fold() const { return (m_space << 20) + m_space + m_page_no; }$/;"	f	class:page_id_t
fold	include/ha0ha.h	/^  ulint fold;      \/*!< fold value for the data *\/$/;"	m	struct:ha_node_t
fold	include/lock0priv.h	/^  ulint fold() const { return (m_fold); }$/;"	f	struct:RecID
for_each	include/lock0priv.h	/^  static const lock_t *for_each(const RecID &rec_id, F &&f,$/;"	f	struct:Lock_iter
for_each	include/sync0sharded_rw.h	/^  void for_each(F f) {$/;"	f	class:Sharded_rw_lock
for_each_block	include/dyn0buf.h	/^  bool for_each_block(Functor &functor) const {$/;"	f	class:dyn_buf_t
for_each_block_in_reverse	include/dyn0buf.h	/^  bool for_each_block_in_reverse(Functor &functor) const {$/;"	f	class:dyn_buf_t
for_each_file	include/fil0fil.h	/^  static dberr_t for_each_file(bool include_log, F &&f) {$/;"	f	class:Fil_iterator
for_each_table	include/dict0dict.h	/^  void for_each_table(Functor &functor) {$/;"	f	struct:dict_sys_t
for_node_t	include/pars0pars.h	/^struct for_node_t {$/;"	s
for_statement	pars/pars0grm.y	/^for_statement:$/;"	l
for_step	eval/eval0proc.cc	/^que_thr_t *for_step(que_thr_t *thr) \/*!< in: query thread *\/$/;"	f
for_update_clause	pars/pars0grm.y	/^for_update_clause:$/;"	l
force_abort	arch/arch0log.cc	/^void Arch_Log_Sys::force_abort() {$/;"	f	class:Arch_Log_Sys
force_constexpr	include/ut0new.h	/^struct force_constexpr {$/;"	s
foreign	include/row0upd.h	/^  dict_foreign_t *foreign;  \/* NULL or pointer to a foreign key$/;"	m	struct:upd_node_t
foreign_col_names	include/dict0mem.h	/^  const char **foreign_col_names; \/*!< names of the columns in the$/;"	m	struct:dict_foreign_t
foreign_index	include/dict0mem.h	/^  dict_index_t *foreign_index;       \/*!< foreign index; we require that$/;"	m	struct:dict_foreign_t
foreign_list	include/dict0mem.h	/^  UT_LIST_BASE_NODE_T(dict_foreign_t) foreign_list;$/;"	m	struct:dict_table_t
foreign_set	include/dict0mem.h	/^  dict_foreign_set foreign_set;$/;"	m	struct:dict_table_t
foreign_table	include/dict0mem.h	/^  dict_table_t *foreign_table;    \/*!< table where the foreign key is *\/$/;"	m	struct:dict_foreign_t
foreign_table_name	include/dict0mem.h	/^  char *foreign_table_name; \/*!< foreign table name *\/$/;"	m	struct:dict_foreign_t
foreign_table_name_lookup	include/dict0mem.h	/^  char *foreign_table_name_lookup;$/;"	m	struct:dict_foreign_t
fork_type	include/que0que.h	/^  ulint fork_type;     \/*!< fork type *\/$/;"	m	struct:que_fork_t
format_validate	dict/dict0dd.cc	/^static bool format_validate(THD *thd, const TABLE *form, row_type real_type,$/;"	f	file:
found	fts/fts0que.cc	/^  ibool found; \/*!< TRUE if found *\/$/;"	m	struct:fts_select_t	file:
found	fts/fts0que.cc	/^  ibool found;$/;"	m	struct:fts_phrase_t	file:
found	include/fts0types.h	/^  ibool found; \/*!< TRUE if the document was found$/;"	m	struct:fts_doc_t
found_clust	include/row0purge.h	/^  bool found_clust;$/;"	m	struct:purge_node_t
found_corrupt_fs	include/log0recv.h	/^  bool found_corrupt_fs;$/;"	m	struct:recv_sys_t
found_corrupt_log	include/log0recv.h	/^  bool found_corrupt_log;$/;"	m	struct:recv_sys_t
found_prepared_trx	include/trx0sys.h	/^  bool found_prepared_trx; \/*!< True if XA PREPARED trxs are$/;"	m	struct:trx_sys_t
frag_begin	include/lob0impl.h	/^  byte *frag_begin() const { return (m_node.ptr() + OFFSET_DATA); }$/;"	f	struct:lob::frag_node_t
frag_id_to_addr	include/lob0impl.h	/^  paddr_t frag_id_to_addr(ulint frag_id) const {$/;"	f	struct:lob::z_frag_page_t
frag_list	include/lob0impl.h	/^  plist_base_node_t frag_list() const {$/;"	f	struct:lob::z_frag_page_t
frag_list	include/zlob0first.h	/^  flst_base_node_t *frag_list() const { return (frame() + OFFSET_FRAG_LIST); }$/;"	f	struct:lob::z_first_page_t
frag_node_t	include/lob0impl.h	/^  frag_node_t(byte *frame, byte *ptr) : m_node(frame, ptr), m_mtr(nullptr) {}$/;"	f	struct:lob::frag_node_t
frag_node_t	include/lob0impl.h	/^  frag_node_t(byte *frame, byte *ptr, mtr_t *mtr)$/;"	f	struct:lob::frag_node_t
frag_node_t	include/lob0impl.h	/^  frag_node_t(byte *frame, byte *ptr, ulint len, mtr_t *mtr)$/;"	f	struct:lob::frag_node_t
frag_node_t	include/lob0impl.h	/^  frag_node_t(const plist_node_t &node, mtr_t *mtr)$/;"	f	struct:lob::frag_node_t
frag_node_t	include/lob0impl.h	/^struct frag_node_t {$/;"	s	namespace:lob
frame	include/buf0buf.h	/^  byte *frame;$/;"	m	struct:Cache_hint::buf_block_t
frame	include/lob0impl.h	/^  byte *frame() const { return (buf_block_get_frame(m_block)); }$/;"	f	struct:lob::z_data_page_t
frame	include/lob0impl.h	/^  byte *frame() const { return (buf_block_get_frame(m_block)); }$/;"	f	struct:lob::z_frag_node_page_t
frame	include/lob0impl.h	/^  byte *frame() const { return (buf_block_get_frame(m_block)); }$/;"	f	struct:lob::z_frag_page_t
frame	include/lob0impl.h	/^  byte *frame() const { return (buf_block_get_frame(m_block)); }$/;"	f	struct:lob::z_index_page_t
frame	include/lob0impl.h	/^  byte *frame() const { return (m_node.get_frame()); }$/;"	f	struct:lob::frag_node_t
frame	include/lob0util.h	/^  byte *frame() const { return (buf_block_get_frame(m_block)); }$/;"	f	struct:lob::basic_page_t
frame	include/zlob0first.h	/^  byte *frame() const { return (buf_block_get_frame(m_block)); }$/;"	f	struct:lob::z_first_page_t
free	include/buf0buf.h	/^  UT_LIST_BASE_NODE_T(buf_page_t) free;$/;"	m	struct:Cache_hint::buf_pool_t
free	include/fts0ast.h	42;"	d
free	include/mem0mem.h	/^  ulint free;       \/*!< offset in bytes of the first free position for$/;"	m	struct:mem_block_info_t
free	include/sync0sharded_rw.h	/^  void free() {$/;"	f	class:Sharded_rw_lock
free	include/sync0sharded_rw.h	/^  void free() {}$/;"	f	class:Sharded_rw_lock
free	include/ut0link_buf.h	/^void Link_buf<Position>::free() {$/;"	f	class:Link_buf
free	pars/lexyy.cc	915;"	d	file:
free_all_data_pages	lob/lob0first.cc	/^void first_page_t::free_all_data_pages() {$/;"	f	class:lob::first_page_t
free_all_data_pages	lob/zlob0first.cc	/^size_t z_first_page_t::free_all_data_pages() {$/;"	f	class:lob::z_first_page_t
free_all_frag_node_pages	lob/zlob0first.cc	/^size_t z_first_page_t::free_all_frag_node_pages() {$/;"	f	class:lob::z_first_page_t
free_all_frag_pages	lob/zlob0first.cc	/^size_t z_first_page_t::free_all_frag_pages() {$/;"	f	class:lob::z_first_page_t
free_all_frag_pages_new	lob/zlob0first.cc	/^size_t z_first_page_t::free_all_frag_pages_new() {$/;"	f	class:lob::z_first_page_t
free_all_frag_pages_old	lob/zlob0first.cc	/^size_t z_first_page_t::free_all_frag_pages_old() {$/;"	f	class:lob::z_first_page_t
free_all_index_pages	lob/lob0first.cc	/^void first_page_t::free_all_index_pages() {$/;"	f	class:lob::first_page_t
free_all_index_pages	lob/zlob0first.cc	/^size_t z_first_page_t::free_all_index_pages() {$/;"	f	class:lob::z_first_page_t
free_blob_heap_array	handler/ha_innopart.cc	/^void ha_innopart::free_blob_heap_array() {$/;"	f	class:ha_innopart
free_block	include/mem0mem.h	/^  void *free_block;$/;"	m	struct:mem_block_info_t
free_data_pages	lob/zlob0index.cc	/^size_t z_index_entry_t::free_data_pages(mtr_t *mtr) {$/;"	f	class:lob::z_index_entry_t
free_externally_stored_fields	lob/lob0lob.cc	/^void BtrContext::free_externally_stored_fields(trx_id_t trx_id,$/;"	f	class:lob::BtrContext
free_filepath	fsp/fsp0file.cc	/^void Datafile::free_filepath() {$/;"	f	class:Datafile
free_first_page	fsp/fsp0file.cc	/^void Datafile::free_first_page() {$/;"	f	class:Datafile
free_first_page	lob/lob0del.cc	/^dberr_t Deleter::free_first_page() {$/;"	f	class:lob::Deleter
free_for_mysql	include/btr0pcur.h	/^  static void free_for_mysql(btr_pcur_t *&pcur) {$/;"	f	struct:btr_pcur_t
free_frag_list	include/zlob0first.h	/^  flst_base_node_t *free_frag_list() const {$/;"	f	struct:lob::z_first_page_t
free_frag_page	lob/lob0impl.cc	/^void z_frag_entry_t::free_frag_page(mtr_t *mtr, dict_index_t *index) {$/;"	f	class:lob::z_frag_entry_t
free_list	include/lob0first.h	/^  flst_base_node_t *free_list() const {$/;"	f	struct:lob::first_page_t
free_list	include/lob0impl.h	/^  plist_base_node_t free_list() const {$/;"	f	struct:lob::z_frag_page_t
free_list	include/zlob0first.h	/^  flst_base_node_t *free_list() const { return (frame() + OFFSET_FREE_LIST); }$/;"	f	struct:lob::z_first_page_t
free_list_len	include/buf0buf.h	/^  ulint free_list_len;               \/*!< Length of buf_pool->free list *\/$/;"	m	struct:Cache_hint::buf_pool_info_t
free_list_mutex	include/buf0buf.h	/^  BufListMutex free_list_mutex;$/;"	m	struct:Cache_hint::buf_pool_t
free_memory	include/ut0new.h	/^  void free_memory() {$/;"	f	class:aligned_memory
free_offset	row/row0log.cc	/^  ulonglong free_offset;$/;"	m	class:row_log_table_blob_t	file:
free_old_part	handler/handler0alter.cc	/^  inline void free_old_part(bool check_in_cache, const char *part_name) {$/;"	f	class:alter_part
free_rec_buf	include/btr0pcur.h	/^  void free_rec_buf() {$/;"	f	struct:btr_pcur_t
free_scanned_files	fil/fil0fil.cc	/^  void free_scanned_files() { m_dirs.clear(); }$/;"	f	class:Fil_system
free_share	handler/ha_innodb.cc	/^static void free_share($/;"	f	file:
free_tmp	srv/srv0tmp.cc	/^void free_tmp(Tablespace *ts) {$/;"	f	namespace:ibt
free_ts	srv/srv0tmp.cc	/^void Tablespace_pool::free_ts(Tablespace *ts) {$/;"	f	class:ibt::Tablespace_pool
free_updated_extern_fields	lob/lob0lob.cc	/^void BtrContext::free_updated_extern_fields(trx_id_t trx_id, undo_no_t undo_no,$/;"	f	class:lob::BtrContext
freed_page_clock	include/buf0buf.h	/^  uint32_t freed_page_clock;$/;"	m	class:Cache_hint::buf_page_t
freed_page_clock	include/buf0buf.h	/^  ulint freed_page_clock;$/;"	m	struct:Cache_hint::buf_pool_t
freq	fts/fts0que.cc	/^  ulint freq;      \/*!< Frequency of a word in a document *\/$/;"	m	struct:fts_doc_freq_t	file:
front	include/read0types.h	/^    value_type front() const {$/;"	f	class:ReadView::ids_t
fseg_alloc_free_extent	fsp/fsp0fsp.cc	/^static xdes_t *fseg_alloc_free_extent(fseg_inode_t *inode, space_id_t space,$/;"	f	file:
fseg_alloc_free_page	include/fsp0fsp.h	557;"	d
fseg_alloc_free_page_general	fsp/fsp0fsp.cc	/^buf_block_t *fseg_alloc_free_page_general(fseg_header_t *seg_header,$/;"	f
fseg_alloc_free_page_low	fsp/fsp0fsp.cc	/^static buf_block_t *fseg_alloc_free_page_low(fil_space_t *space,$/;"	f	file:
fseg_create	fsp/fsp0fsp.cc	/^buf_block_t *fseg_create($/;"	f
fseg_create_general	fsp/fsp0fsp.cc	/^buf_block_t *fseg_create_general($/;"	f
fseg_fill_free_list	fsp/fsp0fsp.cc	/^static void fseg_fill_free_list(fseg_inode_t *inode, space_id_t space,$/;"	f	file:
fseg_find_free_frag_page_slot	fsp/fsp0fsp.cc	/^static ulint fseg_find_free_frag_page_slot($/;"	f	file:
fseg_find_last_used_frag_page_slot	fsp/fsp0fsp.cc	/^static ulint fseg_find_last_used_frag_page_slot($/;"	f	file:
fseg_free_extent	fsp/fsp0fsp.cc	/^static void fseg_free_extent(fseg_inode_t *seg_inode, space_id_t space,$/;"	f	file:
fseg_free_page	fsp/fsp0fsp.cc	/^void fseg_free_page(fseg_header_t *seg_header, space_id_t space_id,$/;"	f
fseg_free_page_low	fsp/fsp0fsp.cc	/^static void fseg_free_page_low(fseg_inode_t *seg_inode,$/;"	f	file:
fseg_free_step	fsp/fsp0fsp.cc	/^ibool fseg_free_step($/;"	f
fseg_free_step_not_header	fsp/fsp0fsp.cc	/^ibool fseg_free_step_not_header($/;"	f
fseg_get_first_extent	fsp/fsp0fsp.cc	/^static xdes_t *fseg_get_first_extent(fseg_inode_t *inode, space_id_t space_id,$/;"	f	file:
fseg_get_n_frag_pages	fsp/fsp0fsp.cc	/^static ulint fseg_get_n_frag_pages($/;"	f	file:
fseg_get_nth_frag_page_no	fsp/fsp0fsp.cc	/^page_no_t fseg_get_nth_frag_page_no($/;"	f
fseg_header	include/fsp0types.h	/^  fseg_header(const fseg_header_t *header, mtr_t *mtr)$/;"	f	class:fseg_header
fseg_header	include/fsp0types.h	/^class fseg_header {$/;"	c
fseg_header_t	include/fsp0types.h	/^typedef byte fseg_header_t;$/;"	t
fseg_inode_get	fsp/fsp0fsp.cc	/^static fseg_inode_t *fseg_inode_get(fseg_header_t *header, space_id_t space,$/;"	f	file:
fseg_inode_t	include/fsp0fsp.h	/^typedef byte fseg_inode_t;$/;"	t
fseg_inode_try_get	fsp/fsp0fsp.cc	/^static fseg_inode_t *fseg_inode_try_get(fseg_header_t *header, space_id_t space,$/;"	f	file:
fseg_mark_page_used	fsp/fsp0fsp.cc	/^static void fseg_mark_page_used(space_id_t space_id,$/;"	f	file:
fseg_n_reserved_pages	fsp/fsp0fsp.cc	/^ulint fseg_n_reserved_pages($/;"	f
fseg_n_reserved_pages_low	fsp/fsp0fsp.cc	/^static ulint fseg_n_reserved_pages_low(space_id_t space_id,$/;"	f	file:
fseg_page_is_free	fsp/fsp0fsp.cc	/^bool fseg_page_is_free(fseg_header_t *seg_header, \/*!< in: segment header *\/$/;"	f
fseg_print	fsp/fsp0fsp.cc	/^void fseg_print(fseg_header_t *header, \/*!< in: segment header *\/$/;"	f
fseg_print_low	fsp/fsp0fsp.cc	/^static void fseg_print_low(space_id_t space_id, const page_size_t &page_size,$/;"	f	file:
fseg_set_nth_frag_page_no	fsp/fsp0fsp.cc	/^void fseg_set_nth_frag_page_no(fseg_inode_t *inode, \/*!< in: segment inode *\/$/;"	f
fsp0file_h	include/fsp0file.h	34;"	d
fsp0fsp_h	include/fsp0fsp.h	34;"	d
fsp0space_h	include/fsp0space.h	34;"	d
fsp0sysspace_h	include/fsp0sysspace.h	34;"	d
fsp0types_h	include/fsp0types.h	35;"	d
fsp_alloc_free_extent	fsp/fsp0fsp.cc	/^static xdes_t *fsp_alloc_free_extent(space_id_t space_id,$/;"	f	file:
fsp_alloc_free_page	fsp/fsp0fsp.cc	/^static MY_ATTRIBUTE((warn_unused_result)) buf_block_t *fsp_alloc_free_page($/;"	f
fsp_alloc_from_free_frag	fsp/fsp0fsp.cc	/^static void fsp_alloc_from_free_frag($/;"	f	file:
fsp_alloc_seg_inode	fsp/fsp0fsp.cc	/^static fseg_inode_t *fsp_alloc_seg_inode($/;"	f	file:
fsp_alloc_seg_inode_page	fsp/fsp0fsp.cc	/^static ibool fsp_alloc_seg_inode_page($/;"	f	file:
fsp_alloc_xdes_free_frag	fsp/fsp0fsp.cc	/^static xdes_t *fsp_alloc_xdes_free_frag(space_id_t space, fseg_inode_t *inode,$/;"	f	file:
fsp_alter_encrypt_tablespace	fsp/fsp0fsp.cc	/^dberr_t fsp_alter_encrypt_tablespace(THD *thd, space_id_t space_id,$/;"	f
fsp_check_tablespace_size	fsp/fsp0fsp.cc	/^bool fsp_check_tablespace_size(space_id_t space_id) {$/;"	f
fsp_fill_free_list	fsp/fsp0fsp.cc	/^static void fsp_fill_free_list(bool init_space, fil_space_t *space,$/;"	f	file:
fsp_flags_set_encryption	include/fsp0types.h	/^UNIV_INLINE void fsp_flags_set_encryption(uint32_t &flags) {$/;"	f
fsp_flags_set_sdi	include/fsp0types.h	/^UNIV_INLINE void fsp_flags_set_sdi(uint32_t &flags) {$/;"	f
fsp_flags_to_dict_tf	fsp/fsp0fsp.cc	/^uint32_t fsp_flags_to_dict_tf(uint32_t fsp_flags, bool compact) {$/;"	f
fsp_flags_unset_encryption	include/fsp0types.h	/^UNIV_INLINE void fsp_flags_unset_encryption(uint32_t &flags) {$/;"	f
fsp_flags_unset_sdi	include/fsp0types.h	/^UNIV_INLINE void fsp_flags_unset_sdi(uint32_t &flags) {$/;"	f
fsp_free_extent	fsp/fsp0fsp.cc	/^static void fsp_free_extent(const page_id_t &page_id,$/;"	f	file:
fsp_free_page	fsp/fsp0fsp.cc	/^static void fsp_free_page(const page_id_t &page_id,$/;"	f	file:
fsp_free_seg_inode	fsp/fsp0fsp.cc	/^static void fsp_free_seg_inode(space_id_t space, const page_size_t &page_size,$/;"	f	file:
fsp_get_available_space_in_free_extents	fsp/fsp0fsp.cc	/^uintmax_t fsp_get_available_space_in_free_extents(const fil_space_t *space) {$/;"	f
fsp_get_available_space_in_free_extents	fsp/fsp0fsp.cc	/^uintmax_t fsp_get_available_space_in_free_extents(space_id_t space_id) {$/;"	f
fsp_get_extent_size_in_pages	include/fsp0fsp.h	/^page_no_t fsp_get_extent_size_in_pages(const page_size_t &page_size) {$/;"	f
fsp_get_last_free_frag_extent	fsp/fsp0fsp.cc	/^static xdes_t *fsp_get_last_free_frag_extent(fsp_header_t *header,$/;"	f	file:
fsp_get_pages_to_extend_ibd	fsp/fsp0fsp.cc	/^page_no_t fsp_get_pages_to_extend_ibd(const page_size_t &page_size,$/;"	f
fsp_get_space_header	fsp/fsp0fsp.cc	/^fsp_header_t *fsp_get_space_header(space_id_t id, const page_size_t &page_size,$/;"	f
fsp_get_space_header_block	fsp/fsp0fsp.cc	/^fsp_header_t *fsp_get_space_header_block(space_id_t id,$/;"	f
fsp_has_sdi	fsp/fsp0fsp.cc	/^dberr_t fsp_has_sdi(space_id_t space_id) {$/;"	f
fsp_header_dict_get_server_version	fsp/fsp0fsp.cc	/^bool fsp_header_dict_get_server_version(uint *version) {$/;"	f
fsp_header_encryption_op_type_in_progress	fsp/fsp0fsp.cc	/^encryption_op_type fsp_header_encryption_op_type_in_progress($/;"	f
fsp_header_get_encryption_key	fsp/fsp0fsp.cc	/^bool fsp_header_get_encryption_key(uint32_t fsp_flags, byte *key, byte *iv,$/;"	f
fsp_header_get_encryption_offset	fsp/fsp0fsp.cc	/^ulint fsp_header_get_encryption_offset(const page_size_t &page_size) {$/;"	f
fsp_header_get_field	include/fsp0fsp.h	/^inline uint32_t fsp_header_get_field(const page_t *page, uint32_t field) {$/;"	f
fsp_header_get_flags	include/fsp0fsp.h	/^inline uint32_t fsp_header_get_flags(const page_t *page) {$/;"	f
fsp_header_get_page_size	fsp/fsp0fsp.cc	/^page_size_t fsp_header_get_page_size(const page_t *page) {$/;"	f
fsp_header_get_space_id	fsp/fsp0fsp.cc	/^space_id_t fsp_header_get_space_id($/;"	f
fsp_header_get_tablespace_size	fsp/fsp0fsp.cc	/^page_no_t fsp_header_get_tablespace_size(void) {$/;"	f
fsp_header_inc_size	fsp/fsp0fsp.cc	/^void fsp_header_inc_size(space_id_t space_id, page_no_t size_inc, mtr_t *mtr) {$/;"	f
fsp_header_init	fsp/fsp0fsp.cc	/^bool fsp_header_init(space_id_t space_id, page_no_t size, mtr_t *mtr,$/;"	f
fsp_header_init_fields	fsp/fsp0fsp.cc	/^void fsp_header_init_fields($/;"	f
fsp_header_mem_t	fsp/fsp0fsp.cc	/^fsp_header_mem_t::fsp_header_mem_t(const fsp_header_t *header, mtr_t *mtr)$/;"	f	class:fsp_header_mem_t
fsp_header_mem_t	include/fsp0fsp.h	/^struct fsp_header_mem_t {$/;"	s
fsp_header_rotate_encryption	fsp/fsp0fsp.cc	/^bool fsp_header_rotate_encryption(fil_space_t *space, byte *encrypt_info,$/;"	f
fsp_header_set_field	include/fsp0fsp.h	/^inline void fsp_header_set_field(page_t *page, uint32_t field, uint32_t val) {$/;"	f
fsp_header_size_update	include/fsp0fsp.h	/^inline void fsp_header_size_update(fsp_header_t *header, ulint size,$/;"	f
fsp_header_t	include/fsp0fsp.h	/^typedef byte fsp_header_t;$/;"	t
fsp_header_write_encryption	fsp/fsp0fsp.cc	/^bool fsp_header_write_encryption(space_id_t space_id, uint32_t space_flags,$/;"	f
fsp_header_write_encryption_progress	fsp/fsp0fsp.cc	/^bool fsp_header_write_encryption_progress($/;"	f
fsp_init	fsp/fsp0fsp.cc	/^void fsp_init() {$/;"	f
fsp_init_file_page	fsp/fsp0fsp.cc	/^static void fsp_init_file_page(buf_block_t *block, mtr_t *mtr) {$/;"	f	file:
fsp_init_file_page_low	fsp/fsp0fsp.cc	/^static void fsp_init_file_page_low($/;"	f	file:
fsp_init_resume_alter_encrypt_tablespace	fsp/fsp0fsp.cc	/^void fsp_init_resume_alter_encrypt_tablespace() {$/;"	f
fsp_init_xdes_free_frag	fsp/fsp0fsp.cc	/^static void fsp_init_xdes_free_frag(fsp_header_t *header, xdes_t *descr,$/;"	f	file:
fsp_is_checksum_disabled	fsp/fsp0fsp.cc	/^bool fsp_is_checksum_disabled(space_id_t space_id) {$/;"	f
fsp_is_dd_tablespace	fsp/fsp0fsp.cc	/^bool fsp_is_dd_tablespace(space_id_t space_id) {$/;"	f
fsp_is_file_per_table	include/fsp0fsp.h	/^bool fsp_is_file_per_table(space_id_t space_id, uint32_t fsp_flags) {$/;"	f
fsp_is_global_temporary	fsp/fsp0fsp.cc	/^bool fsp_is_global_temporary(space_id_t space_id) {$/;"	f
fsp_is_ibd_tablespace	include/fsp0fsp.h	/^bool fsp_is_ibd_tablespace(space_id_t space_id) {$/;"	f
fsp_is_session_temporary	fsp/fsp0fsp.cc	/^bool fsp_is_session_temporary(space_id_t space_id) {$/;"	f
fsp_is_shared_tablespace	include/fsp0types.h	377;"	d
fsp_is_system_or_temp_tablespace	include/fsp0fsp.h	/^bool fsp_is_system_or_temp_tablespace(space_id_t space_id) {$/;"	f
fsp_is_system_tablespace	include/fsp0fsp.h	/^bool fsp_is_system_tablespace(space_id_t space_id) {$/;"	f
fsp_is_system_temporary	fsp/fsp0fsp.cc	/^bool fsp_is_system_temporary(space_id_t space_id) {$/;"	f
fsp_is_undo_tablespace	fsp/fsp0fsp.cc	/^bool fsp_is_undo_tablespace(space_id_t space_id) {$/;"	f
fsp_page_create	fsp/fsp0fsp.cc	/^static buf_block_t *fsp_page_create(const page_id_t &page_id,$/;"	f	file:
fsp_parse_init_file_page	fsp/fsp0fsp.cc	/^byte *fsp_parse_init_file_page($/;"	f
fsp_reserve_free_extents	fsp/fsp0fsp.cc	/^bool fsp_reserve_free_extents(ulint *n_reserved, space_id_t space_id,$/;"	f
fsp_reserve_free_pages	fsp/fsp0fsp.cc	/^static bool fsp_reserve_free_pages(fil_space_t *space,$/;"	f	file:
fsp_reserve_t	include/fsp0types.h	/^enum fsp_reserve_t {$/;"	g
fsp_sdi_get_root_page_num	fsp/fsp0fsp.cc	/^page_no_t fsp_sdi_get_root_page_num(space_id_t space,$/;"	f
fsp_sdi_write_root_to_page	fsp/fsp0fsp.cc	/^void fsp_sdi_write_root_to_page(page_t *page, const page_size_t &page_size,$/;"	f
fsp_seg_inode_page_find_free	fsp/fsp0fsp.cc	/^static page_no_t fsp_seg_inode_page_find_free(page_t *page, page_no_t i,$/;"	f	file:
fsp_seg_inode_page_find_used	fsp/fsp0fsp.cc	/^static page_no_t fsp_seg_inode_page_find_used(page_t *page,$/;"	f	file:
fsp_seg_inode_page_get_nth_inode	fsp/fsp0fsp.cc	/^fseg_inode_t *fsp_seg_inode_page_get_nth_inode(page_t *page, page_no_t i,$/;"	f
fsp_skip_sanity_check	fsp/fsp0fsp.cc	/^bool fsp_skip_sanity_check(space_id_t space_id) {$/;"	f
fsp_space_modify_check	fsp/fsp0fsp.cc	/^static void fsp_space_modify_check(space_id_t id, const mtr_t *mtr) {$/;"	f	file:
fsp_try_extend_data_file	fsp/fsp0fsp.cc	/^static UNIV_COLD ulint fsp_try_extend_data_file(fil_space_t *space,$/;"	f	file:
fsp_try_extend_data_file_with_pages	fsp/fsp0fsp.cc	/^MY_ATTRIBUTE((warn_unused_result)) bool fsp_try_extend_data_file_with_pages($/;"	f
fsync_written_pages	log/log0test.cc	/^void Log_test::fsync_written_pages() {$/;"	f	class:Log_test
ft_end	handler/ha_innodb.cc	/^void ha_innobase::ft_end() {$/;"	f	class:ha_innobase
ft_init	handler/ha_innodb.cc	/^int ha_innobase::ft_init() {$/;"	f	class:ha_innobase
ft_init_ext	handler/ha_innodb.cc	/^FT_INFO *ha_innobase::ft_init_ext(uint flags,  \/* in: *\/$/;"	f	class:ha_innobase
ft_init_ext_with_hints	handler/ha_innodb.cc	/^FT_INFO *ha_innobase::ft_init_ext_with_hints(uint keynr,      \/* in: key num *\/$/;"	f	class:ha_innobase
ft_prebuilt	handler/ha_innodb.h	/^  row_prebuilt_t *ft_prebuilt;$/;"	m	struct:new_ft_info
ft_read	handler/ha_innodb.cc	/^int ha_innobase::ft_read(uchar *buf) \/*!< in\/out: buf contain result row *\/$/;"	f	class:ha_innobase
ft_result	handler/ha_innodb.h	/^  fts_result_t *ft_result;$/;"	m	struct:new_ft_info
ft_vft_ext_result	handler/ha_innodb.cc	/^const struct _ft_vft_ext ft_vft_ext_result = {$/;"	v	typeref:struct:_ft_vft_ext
ft_vft_result	handler/ha_innodb.cc	/^const struct _ft_vft ft_vft_result = {nullptr, innobase_fts_find_ranking,$/;"	v	typeref:struct:_ft_vft
fts	include/dict0mem.h	/^  fts_t *fts;$/;"	m	struct:dict_table_t
fts0bHEADER_H	include/fts0blex.h	2;"	d
fts0bIN_HEADER	include/fts0blex.h	389;"	d
fts0bIN_HEADER	include/fts0blex.h	3;"	d
fts0b_create_buffer	fts/fts0blex.cc	/^    YY_BUFFER_STATE fts0b_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)$/;"	f
fts0b_delete_buffer	fts/fts0blex.cc	/^    void fts0b_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)$/;"	f
fts0b_flush_buffer	fts/fts0blex.cc	/^    void fts0b_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)$/;"	f
fts0b_init_buffer	fts/fts0blex.cc	/^    static void fts0b_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)$/;"	f	file:
fts0b_load_buffer_state	fts/fts0blex.cc	/^static void fts0b_load_buffer_state  (yyscan_t yyscanner)$/;"	f	file:
fts0b_scan_buffer	fts/fts0blex.cc	/^YY_BUFFER_STATE fts0b_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)$/;"	f
fts0b_scan_bytes	fts/fts0blex.cc	/^YY_BUFFER_STATE fts0b_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len , yyscan_t yyscanner)$/;"	f
fts0b_scan_string	fts/fts0blex.cc	/^YY_BUFFER_STATE fts0b_scan_string (yyconst char * yystr , yyscan_t yyscanner)$/;"	f
fts0b_switch_to_buffer	fts/fts0blex.cc	/^    void fts0b_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)$/;"	f
fts0balloc	fts/fts0blex.cc	/^void *fts0balloc (yy_size_t  size ,  yyscan_t yyscanner MY_ATTRIBUTE((unused)))$/;"	f
fts0bensure_buffer_stack	fts/fts0blex.cc	/^static void fts0bensure_buffer_stack (yyscan_t yyscanner)$/;"	f	file:
fts0bfree	fts/fts0blex.cc	/^void fts0bfree (void * ptr ,  yyscan_t yyscanner MY_ATTRIBUTE((unused)))$/;"	f
fts0bget_column	fts/fts0blex.cc	/^int fts0bget_column  (yyscan_t yyscanner)$/;"	f
fts0bget_debug	fts/fts0blex.cc	/^int fts0bget_debug  (yyscan_t yyscanner)$/;"	f
fts0bget_extra	fts/fts0blex.cc	/^YY_EXTRA_TYPE fts0bget_extra  (yyscan_t yyscanner)$/;"	f
fts0bget_in	fts/fts0blex.cc	/^FILE *fts0bget_in  (yyscan_t yyscanner)$/;"	f
fts0bget_leng	fts/fts0blex.cc	/^yy_size_t fts0bget_leng  (yyscan_t yyscanner)$/;"	f
fts0bget_lineno	fts/fts0blex.cc	/^int fts0bget_lineno  (yyscan_t yyscanner)$/;"	f
fts0bget_out	fts/fts0blex.cc	/^FILE *fts0bget_out  (yyscan_t yyscanner)$/;"	f
fts0bget_text	fts/fts0blex.cc	/^char *fts0bget_text  (yyscan_t yyscanner)$/;"	f
fts0blex_destroy	fts/fts0blex.cc	/^int fts0blex_destroy  (yyscan_t yyscanner)$/;"	f
fts0blex_init	fts/fts0blex.cc	/^int fts0blex_init(yyscan_t* ptr_yy_globals)$/;"	f
fts0blex_init_extra	fts/fts0blex.cc	/^int fts0blex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )$/;"	f
fts0bpop_buffer_state	fts/fts0blex.cc	/^void fts0bpop_buffer_state (yyscan_t yyscanner)$/;"	f
fts0bpush_buffer_state	fts/fts0blex.cc	/^void fts0bpush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)$/;"	f
fts0brealloc	fts/fts0blex.cc	/^void *fts0brealloc  (void * ptr, yy_size_t  size ,  yyscan_t yyscanner MY_ATTRIBUTE((unused)))$/;"	f
fts0brestart	fts/fts0blex.cc	/^    void fts0brestart  (FILE * input_file , yyscan_t yyscanner)$/;"	f
fts0bset_column	fts/fts0blex.cc	/^void fts0bset_column (int  column_no , yyscan_t yyscanner)$/;"	f
fts0bset_debug	fts/fts0blex.cc	/^void fts0bset_debug (int  bdebug , yyscan_t yyscanner)$/;"	f
fts0bset_extra	fts/fts0blex.cc	/^void fts0bset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)$/;"	f
fts0bset_in	fts/fts0blex.cc	/^void fts0bset_in (FILE *  in_str , yyscan_t yyscanner)$/;"	f
fts0bset_lineno	fts/fts0blex.cc	/^void fts0bset_lineno (int  line_number , yyscan_t yyscanner)$/;"	f
fts0bset_out	fts/fts0blex.cc	/^void fts0bset_out (FILE *  out_str , yyscan_t yyscanner)$/;"	f
fts0bwrap	fts/fts0blex.cc	377;"	d	file:
fts0bwrap	include/fts0blex.h	262;"	d
fts0fts_h	include/fts0fts.h	34;"	d
fts0tHEADER_H	include/fts0tlex.h	2;"	d
fts0tIN_HEADER	include/fts0tlex.h	388;"	d
fts0tIN_HEADER	include/fts0tlex.h	3;"	d
fts0t_create_buffer	fts/fts0tlex.cc	/^    YY_BUFFER_STATE fts0t_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)$/;"	f
fts0t_delete_buffer	fts/fts0tlex.cc	/^    void fts0t_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)$/;"	f
fts0t_flush_buffer	fts/fts0tlex.cc	/^    void fts0t_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)$/;"	f
fts0t_init_buffer	fts/fts0tlex.cc	/^    static void fts0t_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)$/;"	f	file:
fts0t_load_buffer_state	fts/fts0tlex.cc	/^static void fts0t_load_buffer_state  (yyscan_t yyscanner)$/;"	f	file:
fts0t_scan_buffer	fts/fts0tlex.cc	/^YY_BUFFER_STATE fts0t_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)$/;"	f
fts0t_scan_bytes	fts/fts0tlex.cc	/^YY_BUFFER_STATE fts0t_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len , yyscan_t yyscanner)$/;"	f
fts0t_scan_string	fts/fts0tlex.cc	/^YY_BUFFER_STATE fts0t_scan_string (yyconst char * yystr , yyscan_t yyscanner)$/;"	f
fts0t_switch_to_buffer	fts/fts0tlex.cc	/^    void fts0t_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)$/;"	f
fts0talloc	fts/fts0tlex.cc	/^void *fts0talloc (yy_size_t  size ,  yyscan_t yyscanner MY_ATTRIBUTE((unused)))$/;"	f
fts0tensure_buffer_stack	fts/fts0tlex.cc	/^static void fts0tensure_buffer_stack (yyscan_t yyscanner)$/;"	f	file:
fts0tfree	fts/fts0tlex.cc	/^void fts0tfree (void * ptr ,  yyscan_t yyscanner MY_ATTRIBUTE((unused)))$/;"	f
fts0tget_column	fts/fts0tlex.cc	/^int fts0tget_column  (yyscan_t yyscanner)$/;"	f
fts0tget_debug	fts/fts0tlex.cc	/^int fts0tget_debug  (yyscan_t yyscanner)$/;"	f
fts0tget_extra	fts/fts0tlex.cc	/^YY_EXTRA_TYPE fts0tget_extra  (yyscan_t yyscanner)$/;"	f
fts0tget_in	fts/fts0tlex.cc	/^FILE *fts0tget_in  (yyscan_t yyscanner)$/;"	f
fts0tget_leng	fts/fts0tlex.cc	/^yy_size_t fts0tget_leng  (yyscan_t yyscanner)$/;"	f
fts0tget_lineno	fts/fts0tlex.cc	/^int fts0tget_lineno  (yyscan_t yyscanner)$/;"	f
fts0tget_out	fts/fts0tlex.cc	/^FILE *fts0tget_out  (yyscan_t yyscanner)$/;"	f
fts0tget_text	fts/fts0tlex.cc	/^char *fts0tget_text  (yyscan_t yyscanner)$/;"	f
fts0tlex_destroy	fts/fts0tlex.cc	/^int fts0tlex_destroy  (yyscan_t yyscanner)$/;"	f
fts0tlex_init	fts/fts0tlex.cc	/^int fts0tlex_init(yyscan_t* ptr_yy_globals)$/;"	f
fts0tlex_init_extra	fts/fts0tlex.cc	/^int fts0tlex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )$/;"	f
fts0tpop_buffer_state	fts/fts0tlex.cc	/^void fts0tpop_buffer_state (yyscan_t yyscanner)$/;"	f
fts0tpush_buffer_state	fts/fts0tlex.cc	/^void fts0tpush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)$/;"	f
fts0trealloc	fts/fts0tlex.cc	/^void *fts0trealloc  (void * ptr, yy_size_t  size ,  yyscan_t yyscanner MY_ATTRIBUTE((unused)))$/;"	f
fts0trestart	fts/fts0tlex.cc	/^    void fts0trestart  (FILE * input_file , yyscan_t yyscanner)$/;"	f
fts0tset_column	fts/fts0tlex.cc	/^void fts0tset_column (int  column_no , yyscan_t yyscanner)$/;"	f
fts0tset_debug	fts/fts0tlex.cc	/^void fts0tset_debug (int  bdebug , yyscan_t yyscanner)$/;"	f
fts0tset_extra	fts/fts0tlex.cc	/^void fts0tset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)$/;"	f
fts0tset_in	fts/fts0tlex.cc	/^void fts0tset_in (FILE *  in_str , yyscan_t yyscanner)$/;"	f
fts0tset_lineno	fts/fts0tlex.cc	/^void fts0tset_lineno (int  line_number , yyscan_t yyscanner)$/;"	f
fts0tset_out	fts/fts0tlex.cc	/^void fts0tset_out (FILE *  out_str , yyscan_t yyscanner)$/;"	f
fts0twrap	fts/fts0tlex.cc	376;"	d	file:
fts0twrap	include/fts0tlex.h	261;"	d
fts_add	fts/fts0fts.cc	/^static void fts_add(fts_trx_table_t *ftt, fts_trx_row_t *row) {$/;"	f	file:
fts_add_doc_by_id	fts/fts0fts.cc	/^static ulint fts_add_doc_by_id(fts_trx_table_t *ftt, doc_id_t doc_id,$/;"	f	file:
fts_add_doc_from_tuple	fts/fts0fts.cc	/^void fts_add_doc_from_tuple(fts_trx_table_t *ftt, doc_id_t doc_id,$/;"	f
fts_add_doc_id_column	fts/fts0fts.cc	/^void fts_add_doc_id_column(dict_table_t *table, mem_heap_t *heap) {$/;"	f
fts_add_index	fts/fts0fts.cc	/^void fts_add_index(dict_index_t *index, \/*!< FTS index to be added *\/$/;"	f
fts_add_token	fts/fts0fts.cc	/^static void fts_add_token(fts_doc_t *result_doc, fts_string_t str,$/;"	f	file:
fts_ast_add_node	fts/fts0ast.cc	/^fts_ast_node_t *fts_ast_add_node($/;"	f
fts_ast_callback	include/fts0ast.h	/^typedef dberr_t (*fts_ast_callback)(fts_ast_oper_t, fts_ast_node_t *, void *);$/;"	t
fts_ast_create_node_list	fts/fts0ast.cc	/^fts_ast_node_t *fts_ast_create_node_list($/;"	f
fts_ast_create_node_oper	fts/fts0ast.cc	/^fts_ast_node_t *fts_ast_create_node_oper($/;"	f
fts_ast_create_node_phrase_list	fts/fts0ast.cc	/^fts_ast_node_t *fts_ast_create_node_phrase_list(void *arg) \/*!< in: ast state *\/$/;"	f
fts_ast_create_node_subexp_list	fts/fts0ast.cc	/^fts_ast_node_t *fts_ast_create_node_subexp_list($/;"	f
fts_ast_create_node_term	fts/fts0ast.cc	/^fts_ast_node_t *fts_ast_create_node_term($/;"	f
fts_ast_create_node_term_for_parser	fts/fts0ast.cc	/^fts_ast_node_t *fts_ast_create_node_term_for_parser($/;"	f
fts_ast_create_node_text	fts/fts0ast.cc	/^fts_ast_node_t *fts_ast_create_node_text($/;"	f
fts_ast_free_list	fts/fts0ast.cc	/^static void fts_ast_free_list(fts_ast_node_t *node) \/*!< in: ast node to free *\/$/;"	f	file:
fts_ast_free_node	fts/fts0ast.cc	/^fts_ast_node_t *fts_ast_free_node($/;"	f
fts_ast_list_t	include/fts0ast.h	/^struct fts_ast_list_t {$/;"	s
fts_ast_node_check_union	fts/fts0ast.cc	/^bool fts_ast_node_check_union(fts_ast_node_t *node) {$/;"	f
fts_ast_node_create	fts/fts0ast.cc	/^static fts_ast_node_t *fts_ast_node_create(void) {$/;"	f	file:
fts_ast_node_print	fts/fts0ast.cc	/^void fts_ast_node_print(fts_ast_node_t *node) \/*!< in: ast node to print *\/$/;"	f
fts_ast_node_print_recursive	fts/fts0ast.cc	/^static void fts_ast_node_print_recursive($/;"	f	file:
fts_ast_node_t	include/fts0ast.h	/^struct fts_ast_node_t {$/;"	s
fts_ast_node_type_get	fts/fts0ast.cc	/^const char *fts_ast_node_type_get(fts_ast_type_t type) {$/;"	f
fts_ast_oper_t	include/fts0ast.h	/^enum fts_ast_oper_t {$/;"	g
fts_ast_state_add_node	fts/fts0ast.cc	/^static void fts_ast_state_add_node($/;"	f	file:
fts_ast_state_free	fts/fts0ast.cc	/^void fts_ast_state_free(fts_ast_state_t *state) \/*!< in: ast state to free *\/$/;"	f
fts_ast_state_t	include/fts0ast.h	/^struct fts_ast_state_t {$/;"	s
fts_ast_string_create	fts/fts0ast.cc	/^fts_ast_string_t *fts_ast_string_create(const byte *str, ulint len) {$/;"	f
fts_ast_string_free	fts/fts0ast.cc	/^void fts_ast_string_free(fts_ast_string_t *ast_str) {$/;"	f
fts_ast_string_print	fts/fts0ast.cc	/^static void fts_ast_string_print(const fts_ast_string_t *ast_str) {$/;"	f	file:
fts_ast_string_t	include/fts0ast.h	/^struct fts_ast_string_t {$/;"	s
fts_ast_string_to_ul	fts/fts0ast.cc	/^ulint fts_ast_string_to_ul(const fts_ast_string_t *ast_str, int base) {$/;"	f
fts_ast_term_set_wildcard	fts/fts0ast.cc	/^void fts_ast_term_set_wildcard(fts_ast_node_t *node) \/*!< in\/out: set attribute$/;"	f
fts_ast_term_t	include/fts0ast.h	/^struct fts_ast_term_t {$/;"	s
fts_ast_text_set_distance	fts/fts0ast.cc	/^void fts_ast_text_set_distance(fts_ast_node_t *node, \/*!< in\/out: text node *\/$/;"	f
fts_ast_text_t	include/fts0ast.h	/^struct fts_ast_text_t {$/;"	s
fts_ast_type_t	include/fts0ast.h	/^enum fts_ast_type_t {$/;"	g
fts_ast_visit	fts/fts0ast.cc	/^dberr_t fts_ast_visit(fts_ast_oper_t oper,      \/*!< in: current operator *\/$/;"	f
fts_ast_visit_pass_t	fts/fts0ast.cc	/^enum fts_ast_visit_pass_t {$/;"	g	file:
fts_ast_visit_sub_exp	fts/fts0que.cc	/^static dberr_t fts_ast_visit_sub_exp(fts_ast_node_t *node,$/;"	f	file:
fts_aux_table_t	include/fts0fts.h	/^struct fts_aux_table_t {$/;"	s
fts_bg_threads_mutex_key	sync/sync0sync.cc	/^mysql_pfs_key_t fts_bg_threads_mutex_key;$/;"	v
fts_bind_doc_id	include/fts0fts.h	88;"	d
fts_boolean_syntax	include/fts0tokenize.h	/^static const char *fts_boolean_syntax = DEFAULT_FTB_SYNTAX;$/;"	v
fts_bsearch	fts/fts0opt.cc	/^int fts_bsearch(fts_update_t *array, \/*!< in: array to sort *\/$/;"	f
fts_cache_add_doc	fts/fts0fts.cc	/^static void fts_cache_add_doc($/;"	f	file:
fts_cache_append_deleted_doc_ids	fts/fts0fts.cc	/^void fts_cache_append_deleted_doc_ids($/;"	f
fts_cache_clear	fts/fts0fts.cc	/^void fts_cache_clear(fts_cache_t *cache) {$/;"	f
fts_cache_create	fts/fts0fts.cc	/^fts_cache_t *fts_cache_create($/;"	f
fts_cache_destroy	fts/fts0fts.cc	/^static void fts_cache_destroy(fts_cache_t *cache) {$/;"	f	file:
fts_cache_find_wildcard	fts/fts0que.cc	/^static ulint fts_cache_find_wildcard($/;"	f	file:
fts_cache_find_word	fts/fts0fts.cc	/^const ib_vector_t *fts_cache_find_word($/;"	f
fts_cache_index_cache_create	fts/fts0fts.cc	/^fts_index_cache_t *fts_cache_index_cache_create($/;"	f
fts_cache_index_cache_remove	fts/fts0fts.cc	/^void fts_cache_index_cache_remove(dict_table_t *table, dict_index_t *index) {$/;"	f
fts_cache_init	fts/fts0fts.cc	/^void fts_cache_init(fts_cache_t *cache) \/*!< in: cache to initialize *\/$/;"	f
fts_cache_init_rw_lock_key	sync/sync0sync.cc	/^mysql_pfs_key_t fts_cache_init_rw_lock_key;$/;"	v
fts_cache_node_add_positions	fts/fts0fts.cc	/^void fts_cache_node_add_positions($/;"	f
fts_cache_rw_lock_key	sync/sync0sync.cc	/^mysql_pfs_key_t fts_cache_rw_lock_key;$/;"	v
fts_cache_t	include/fts0types.h	/^struct fts_cache_t {$/;"	s
fts_check_cached_index	fts/fts0fts.cc	/^ibool fts_check_cached_index($/;"	f
fts_check_common_tables_exist	fts/fts0fts.cc	/^bool fts_check_common_tables_exist(const dict_table_t *table) {$/;"	f
fts_check_token	fts/fts0fts.cc	/^bool fts_check_token(const fts_string_t *token, const ib_rbt_t *stopwords,$/;"	f
fts_cmp_set_sync_doc_id	fts/fts0fts.cc	/^static dberr_t fts_cmp_set_sync_doc_id($/;"	f	file:
fts_commit	fts/fts0fts.cc	/^dberr_t fts_commit(trx_t *trx) \/*!< in: transaction *\/$/;"	f
fts_commit_table	fts/fts0fts.cc	/^    fts_commit_table(fts_trx_table_t *ftt) \/*!< in: FTS table to commit*\/$/;"	f
fts_common_table	fts/fts0opt.cc	/^  fts_table_t fts_common_table;$/;"	m	struct:fts_optimize_t	file:
fts_common_table	fts/fts0que.cc	/^  fts_table_t fts_common_table;$/;"	m	struct:fts_query_t	file:
fts_common_tables	fts/fts0fts.cc	/^const char *fts_common_tables[] = {"being_deleted", "being_deleted_cache",$/;"	v
fts_common_tables_5_7	fts/fts0fts.cc	/^const char *fts_common_tables_5_7[] = {"BEING_DELETED", "BEING_DELETED_CACHE",$/;"	v
fts_config_create_index_param_name	fts/fts0config.cc	/^char *fts_config_create_index_param_name($/;"	f
fts_config_fetch_value	fts/fts0config.cc	/^static ibool fts_config_fetch_value(void *row,      \/*!< in: sel_node_t* *\/$/;"	f	file:
fts_config_get_index_ulint	fts/fts0config.cc	/^dberr_t fts_config_get_index_ulint(trx_t *trx,          \/*!< in: transaction *\/$/;"	f
fts_config_get_index_value	fts/fts0config.cc	/^dberr_t fts_config_get_index_value(trx_t *trx,          \/*!< transaction *\/$/;"	f
fts_config_get_ulint	fts/fts0config.cc	/^dberr_t fts_config_get_ulint(trx_t *trx,             \/*!< in: transaction *\/$/;"	f
fts_config_get_value	fts/fts0config.cc	/^dberr_t fts_config_get_value(trx_t *trx,             \/*!< transaction *\/$/;"	f
fts_config_set_index_ulint	fts/fts0config.cc	/^dberr_t fts_config_set_index_ulint(trx_t *trx,          \/*!< in: transaction *\/$/;"	f
fts_config_set_index_value	fts/fts0config.cc	/^dberr_t fts_config_set_index_value(trx_t *trx,          \/*!< transaction *\/$/;"	f
fts_config_set_ulint	fts/fts0config.cc	/^dberr_t fts_config_set_ulint(trx_t *trx,             \/*!< in: transaction *\/$/;"	f
fts_config_set_value	fts/fts0config.cc	/^dberr_t fts_config_set_value($/;"	f
fts_config_table_insert_values_sql	fts/fts0fts.cc	/^static const char *fts_config_table_insert_values_sql =$/;"	v	file:
fts_create	fts/fts0fts.cc	/^fts_t *fts_create(dict_table_t *table) \/*!< in\/out: table with FTS indexes *\/$/;"	f
fts_create_common_dd_tables	fts/fts0fts.cc	/^bool fts_create_common_dd_tables(const dict_table_t *table) {$/;"	f
fts_create_common_tables	fts/fts0fts.cc	/^dberr_t fts_create_common_tables(trx_t *trx, const dict_table_t *table,$/;"	f
fts_create_doc_id	fts/fts0fts.cc	/^dberr_t fts_create_doc_id(dict_table_t *table, dtuple_t *row,$/;"	f
fts_create_in_mem_aux_table	fts/fts0fts.cc	/^static dict_table_t *fts_create_in_mem_aux_table(const char *aux_table_name,$/;"	f	file:
fts_create_index_dd_tables	fts/fts0fts.cc	/^dberr_t fts_create_index_dd_tables(dict_table_t *table) {$/;"	f
fts_create_index_tables	fts/fts0fts.cc	/^dberr_t fts_create_index_tables(trx_t *trx, dict_index_t *index) {$/;"	f
fts_create_index_tables_low	fts/fts0fts.cc	/^dberr_t fts_create_index_tables_low(trx_t *trx, dict_index_t *index,$/;"	f
fts_create_one_common_table	fts/fts0fts.cc	/^static dict_table_t *fts_create_one_common_table(trx_t *trx,$/;"	f	file:
fts_create_one_index_dd_tables	fts/fts0fts.cc	/^static dberr_t fts_create_one_index_dd_tables(const dict_index_t *index) {$/;"	f	file:
fts_create_one_index_table	fts/fts0fts.cc	/^static dict_table_t *fts_create_one_index_table(trx_t *trx,$/;"	f	file:
fts_default_parser	fts/fts0plugin.cc	/^struct st_mysql_ftparser fts_default_parser = {$/;"	v	typeref:struct:st_mysql_ftparser
fts_default_parser_deinit	fts/fts0plugin.cc	/^static int fts_default_parser_deinit($/;"	f	file:
fts_default_parser_init	fts/fts0plugin.cc	/^static int fts_default_parser_init($/;"	f	file:
fts_default_parser_parse	fts/fts0plugin.cc	/^static int fts_default_parser_parse($/;"	f	file:
fts_default_stopword	fts/fts0fts.cc	/^const char *fts_default_stopword[] = {$/;"	v
fts_delete	fts/fts0fts.cc	/^    fts_delete(fts_trx_table_t *ftt, \/*!< in: FTS trx table *\/$/;"	f
fts_delete_doc_ids_sql	fts/fts0opt.cc	/^static const char *fts_delete_doc_ids_sql =$/;"	v	file:
fts_delete_mutex_key	sync/sync0sync.cc	/^mysql_pfs_key_t fts_delete_mutex_key;$/;"	v
fts_detach_aux_tables	fts/fts0fts.cc	/^void fts_detach_aux_tables(const dict_table_t *table, bool dict_locked) {$/;"	f
fts_doc_fetch_by_doc_id	fts/fts0fts.cc	/^dberr_t fts_doc_fetch_by_doc_id($/;"	f
fts_doc_free	fts/fts0fts.cc	/^void fts_doc_free(fts_doc_t *doc) \/*!< in: document *\/$/;"	f
fts_doc_freq_t	fts/fts0que.cc	/^struct fts_doc_freq_t {$/;"	s	file:
fts_doc_id	include/row0mysql.h	/^  doc_id_t fts_doc_id;          \/* if the table has an FTS index on$/;"	m	struct:row_prebuilt_t
fts_doc_id_in_read_set	include/row0mysql.h	/^  bool fts_doc_id_in_read_set;        \/*!< true if table has externally$/;"	m	struct:row_prebuilt_t
fts_doc_id_index	include/dict0mem.h	/^  dict_index_t *fts_doc_id_index;$/;"	m	struct:dict_table_t
fts_doc_id_index_enum	handler/ha_innodb.h	/^enum fts_doc_id_index_enum {$/;"	g
fts_doc_id_mutex_key	sync/sync0sync.cc	/^mysql_pfs_key_t fts_doc_id_mutex_key;$/;"	v
fts_doc_ids_create	fts/fts0fts.cc	/^fts_doc_ids_t *fts_doc_ids_create(void) {$/;"	f
fts_doc_ids_free	fts/fts0fts.cc	/^void fts_doc_ids_free(fts_doc_ids_t *fts_doc_ids) {$/;"	f
fts_doc_ids_t	include/fts0fts.h	/^struct fts_doc_ids_t {$/;"	s
fts_doc_init	fts/fts0fts.cc	/^void fts_doc_init(fts_doc_t *doc) \/*!< in: doc to initialize *\/$/;"	f
fts_doc_item	include/row0ftsort.h	/^struct fts_doc_item {$/;"	s
fts_doc_item_t	include/row0ftsort.h	/^typedef struct fts_doc_item fts_doc_item_t;$/;"	t	typeref:struct:fts_doc_item
fts_doc_list	include/row0ftsort.h	/^  fts_doc_list_t fts_doc_list;      \/*!< doc list to process *\/$/;"	m	struct:fts_psort_t
fts_doc_list_t	include/row0ftsort.h	/^typedef UT_LIST_BASE_NODE_T(fts_doc_item_t) fts_doc_list_t;$/;"	t
fts_doc_stats_t	include/fts0types.h	/^struct fts_doc_stats_t {$/;"	s
fts_doc_t	include/fts0types.h	/^struct fts_doc_t {$/;"	s
fts_drop_all_index_tables	fts/fts0fts.cc	/^    fts_drop_all_index_tables(trx_t *trx, fts_t *fts, aux_name_vec_t *aux_vec) {$/;"	f
fts_drop_aux_vec	handler/handler0alter.cc	/^  aux_name_vec_t *fts_drop_aux_vec;$/;"	m	struct:ha_innobase_inplace_ctx	file:
fts_drop_common_tables	fts/fts0fts.cc	/^    fts_drop_common_tables(trx_t *trx, fts_table_t *fts_table,$/;"	f
fts_drop_dd_tables	fts/fts0fts.cc	/^bool fts_drop_dd_tables(const aux_name_vec_t *aux_vec, bool file_per_table) {$/;"	f
fts_drop_index	fts/fts0fts.cc	/^dberr_t fts_drop_index(dict_table_t *table, dict_index_t *index, trx_t *trx,$/;"	f
fts_drop_index_tables	fts/fts0fts.cc	/^dberr_t fts_drop_index_tables(trx_t *trx, dict_index_t *index,$/;"	f
fts_drop_table	fts/fts0fts.cc	/^static dberr_t fts_drop_table(trx_t *trx, const char *table_name,$/;"	f	file:
fts_drop_tables	fts/fts0fts.cc	/^dberr_t fts_drop_tables(trx_t *trx, dict_table_t *table,$/;"	f
fts_empty_common_tables	fts/fts0fts.cc	/^dberr_t fts_empty_common_tables(trx_t *trx, dict_table_t *table) {$/;"	f
fts_empty_table	fts/fts0fts.cc	/^static dberr_t fts_empty_table(trx_t *trx, fts_table_t *fts_table) {$/;"	f	file:
fts_enable_diag_print	fts/fts0opt.cc	/^bool fts_enable_diag_print;$/;"	v
fts_encode_t	fts/fts0opt.cc	/^struct fts_encode_t {$/;"	s	file:
fts_end_delete_sql	fts/fts0opt.cc	/^static const char *fts_end_delete_sql =$/;"	v	file:
fts_eval_sql	fts/fts0sql.cc	/^dberr_t fts_eval_sql(trx_t *trx,   \/*!< in: transaction *\/$/;"	f
fts_expand_query	fts/fts0que.cc	/^    fts_expand_query(dict_index_t *index, \/*!< in: FTS index to search *\/$/;"	f
fts_fetch_doc_from_rec	fts/fts0fts.cc	/^static void fts_fetch_doc_from_rec($/;"	f	file:
fts_fetch_doc_from_tuple	fts/fts0fts.cc	/^static void fts_fetch_doc_from_tuple(fts_get_doc_t *get_doc,$/;"	f	file:
fts_fetch_doc_ids	fts/fts0opt.cc	/^static ibool fts_fetch_doc_ids($/;"	f	file:
fts_fetch_index_words	fts/fts0opt.cc	/^static ibool fts_fetch_index_words($/;"	f	file:
fts_fetch_store_doc_id	fts/fts0fts.cc	/^static ibool fts_fetch_store_doc_id(void *row,      \/*!< in: sel_node_t* *\/$/;"	f	file:
fts_fetch_t	include/fts0types.h	/^struct fts_fetch_t {$/;"	s
fts_filter	include/fts0types.h	/^typedef void (*fts_filter)(void *, fts_node_t *, void *, ulint len);$/;"	t
fts_find_index_cache	fts/fts0fts.cc	/^fts_index_cache_t *fts_find_index_cache($/;"	f
fts_free	fts/fts0fts.cc	/^void fts_free(dict_table_t *table) \/*!< in\/out: table with FTS indexes *\/$/;"	f
fts_free_aux_names	fts/fts0fts.cc	/^void fts_free_aux_names(aux_name_vec_t *aux_vec) {$/;"	f
fts_freeze_aux_tables	fts/fts0fts.cc	/^void fts_freeze_aux_tables(const dict_table_t *table) {$/;"	f
fts_freq_doc_id_cmp	fts/fts0que.cc	/^int fts_freq_doc_id_cmp(const void *p1, \/*!< in: id1 *\/$/;"	f
fts_get_charset	fts/fts0fts.cc	/^CHARSET_INFO *fts_get_charset(ulint prtype) {$/;"	f
fts_get_doc_id_from_rec	fts/fts0fts.cc	/^doc_id_t fts_get_doc_id_from_rec(dict_table_t *table, const rec_t *rec,$/;"	f
fts_get_doc_id_from_row	fts/fts0fts.cc	/^doc_id_t fts_get_doc_id_from_row(dict_table_t *table, \/*!< in: table *\/$/;"	f
fts_get_doc_t	include/fts0types.h	/^struct fts_get_doc_t {$/;"	s
fts_get_docs_clear	fts/fts0fts.cc	/^static void fts_get_docs_clear($/;"	f	file:
fts_get_docs_create	fts/fts0fts.cc	/^static ib_vector_t *fts_get_docs_create(fts_cache_t *cache) {$/;"	f	file:
fts_get_index_cache	fts/fts0fts.cc	/^fts_index_cache_t *fts_get_index_cache($/;"	f
fts_get_index_get_doc	fts/fts0fts.cc	/^static fts_get_doc_t *fts_get_index_get_doc($/;"	f	file:
fts_get_max_cache_size	fts/fts0fts.cc	/^static ulint fts_get_max_cache_size($/;"	f	file:
fts_get_max_doc_id	fts/fts0fts.cc	/^doc_id_t fts_get_max_doc_id(dict_table_t *table) \/*!< in: user table *\/$/;"	f
fts_get_next_doc_id	fts/fts0fts.cc	/^dberr_t fts_get_next_doc_id(const dict_table_t *table, \/*!< in: table *\/$/;"	f
fts_get_rows_count	fts/fts0fts.cc	/^ulint fts_get_rows_count(fts_table_t *fts_table) \/*!< in: fts table to read *\/$/;"	f
fts_get_select_columns_str	fts/fts0sql.cc	/^const char *fts_get_select_columns_str($/;"	f
fts_get_table_flags2_for_aux_tables	fts/fts0fts.cc	/^static inline uint32_t fts_get_table_flags2_for_aux_tables(uint32_t flags2) {$/;"	f	file:
fts_get_table_id	fts/fts0sql.cc	/^int fts_get_table_id($/;"	f
fts_get_table_name	fts/fts0sql.cc	/^void fts_get_table_name(const fts_table_t *fts_table,$/;"	f
fts_get_table_name_5_7	fts/fts0sql.cc	/^void fts_get_table_name_5_7(const fts_table_t *fts_table, char *table_name) {$/;"	f
fts_get_table_name_low	fts/fts0sql.cc	/^static void fts_get_table_name_low(const fts_table_t *fts_table,$/;"	f	file:
fts_get_table_name_prefix	fts/fts0sql.cc	/^char *fts_get_table_name_prefix($/;"	f
fts_get_table_name_prefix_5_7	fts/fts0sql.cc	/^char *fts_get_table_name_prefix_5_7(const fts_table_t *fts_table) {$/;"	f
fts_get_table_name_prefix_low	fts/fts0sql.cc	/^static char *fts_get_table_name_prefix_low(const fts_table_t *fts_table,$/;"	f	file:
fts_get_token_size	fts/fts0fts.cc	/^ulint fts_get_token_size(const CHARSET_INFO *cs, \/*!< in: Character set *\/$/;"	f
fts_get_word	include/fts0tokenize.h	/^inline uchar fts_get_word(const CHARSET_INFO *cs, uchar **start, uchar *end,$/;"	f
fts_heap	include/fts0fts.h	/^  mem_heap_t *fts_heap;$/;"	m	class:fts_t
fts_in_dict_index	fts/fts0fts.cc	/^static ibool fts_in_dict_index($/;"	f	file:
fts_in_index_cache	fts/fts0fts.cc	/^static ibool fts_in_index_cache($/;"	f	file:
fts_index_cache_init	fts/fts0fts.cc	/^static void fts_index_cache_init($/;"	f	file:
fts_index_cache_t	include/fts0types.h	/^struct fts_index_cache_t {$/;"	s
fts_index_fetch_nodes	fts/fts0opt.cc	/^dberr_t fts_index_fetch_nodes($/;"	f
fts_index_fetch_words	fts/fts0opt.cc	/^static MY_ATTRIBUTE((warn_unused_result)) dberr_t fts_index_fetch_words($/;"	f
fts_index_get_charset	fts/fts0fts.cc	/^CHARSET_INFO *fts_index_get_charset(dict_index_t *index) \/*!< in: FTS index *\/$/;"	f
fts_index_selector	fts/fts0fts.cc	/^const fts_index_selector_t fts_index_selector[] = {$/;"	v
fts_index_selector_5_7	fts/fts0fts.cc	/^const fts_index_selector_t fts_index_selector_5_7[] = {$/;"	v
fts_index_selector_t	include/fts0types.h	/^struct fts_index_selector_t {$/;"	s
fts_index_table	fts/fts0opt.cc	/^  fts_table_t fts_index_table; \/*!< Common table definition *\/$/;"	m	struct:fts_optimize_t	file:
fts_index_table	fts/fts0que.cc	/^  fts_table_t fts_index_table; \/*!< FTS auxiliary index table def *\/$/;"	m	struct:fts_query_t	file:
fts_indexes	include/fts0fts.h	/^  ib_vector_t *fts_indexes; \/*!< The indexes that are affected *\/$/;"	m	struct:fts_trx_row_t
fts_indexes	include/fts0types.h	/^  ib_vector_t *fts_indexes; \/*!< The FTS indexes that need to be$/;"	m	struct:fts_update_t
fts_init_config_table	fts/fts0fts.cc	/^static dberr_t fts_init_config_table(fts_table_t *fts_table) {$/;"	f	file:
fts_init_delete_sql	fts/fts0opt.cc	/^static const char *fts_init_delete_sql =$/;"	v	file:
fts_init_doc_id	fts/fts0fts.cc	/^doc_id_t fts_init_doc_id(const dict_table_t *table) \/*!< in: table *\/$/;"	f
fts_init_get_doc_id	fts/fts0fts.cc	/^static ibool fts_init_get_doc_id(void *row,      \/*!< in: sel_node_t* *\/$/;"	f	file:
fts_init_index	fts/fts0fts.cc	/^ibool fts_init_index(dict_table_t *table,  \/*!< in: Table with FTS *\/$/;"	f
fts_init_recover_doc	fts/fts0fts.cc	/^static ibool fts_init_recover_doc(void *row,      \/*!< in: sel_node_t* *\/$/;"	f	file:
fts_internal_tbl_name	fts/fts0fts.cc	/^char *fts_internal_tbl_name = nullptr;$/;"	v
fts_is_aux_table_name	fts/fts0fts.cc	/^bool fts_is_aux_table_name(fts_aux_table_t *table, const char *name,$/;"	f
fts_is_index_updated	fts/fts0fts.cc	/^static ibool fts_is_index_updated($/;"	f	file:
fts_is_sync_needed	fts/fts0opt.cc	/^static bool fts_is_sync_needed(const ib_vector_t *tables) \/*!< in: registered$/;"	f	file:
fts_lexer	fts/fts0pars.cc	/^fts_lexer($/;"	f
fts_lexer_create	fts/fts0pars.cc	/^fts_lexer_create($/;"	f
fts_lexer_free	fts/fts0pars.cc	/^fts_lexer_free($/;"	f
fts_lexer_t	fts/fts0pars.cc	/^struct fts_lexer_t {$/;"	s	file:
fts_load_default_stopword	fts/fts0fts.cc	/^static void fts_load_default_stopword($/;"	f	file:
fts_load_stopword	fts/fts0fts.cc	/^ibool fts_load_stopword($/;"	f
fts_load_user_stopword	fts/fts0fts.cc	/^static ibool fts_load_user_stopword($/;"	f	file:
fts_lock_all_aux_tables	fts/fts0fts.cc	/^dberr_t fts_lock_all_aux_tables(THD *thd, dict_table_t *table) {$/;"	f
fts_lock_all_index_tables	fts/fts0fts.cc	/^    fts_lock_all_index_tables(THD *thd, fts_t *fts) {$/;"	f
fts_lock_common_tables	fts/fts0fts.cc	/^    fts_lock_common_tables(THD *thd, fts_table_t *fts_table) {$/;"	f
fts_lock_index_tables	fts/fts0fts.cc	/^dberr_t fts_lock_index_tables(THD *thd, dict_index_t *index) {$/;"	f
fts_match_t	fts/fts0que.cc	/^struct fts_match_t {$/;"	s	file:
fts_max_cache_size	fts/fts0fts.cc	/^ulong fts_max_cache_size;$/;"	v
fts_max_token_size	fts/fts0fts.cc	/^ulong fts_max_token_size;$/;"	v
fts_max_total_cache_size	fts/fts0fts.cc	/^ulong fts_max_total_cache_size;$/;"	v
fts_merge_doc_ids	fts/fts0que.cc	/^static dberr_t fts_merge_doc_ids($/;"	f	file:
fts_min_token_size	fts/fts0fts.cc	/^ulong fts_min_token_size;$/;"	v
fts_modify	fts/fts0fts.cc	/^    fts_modify(fts_trx_table_t *ftt, \/*!< in: FTS trx table *\/$/;"	f
fts_msg_id_t	fts/fts0opt.cc	/^struct fts_msg_id_t {$/;"	s	file:
fts_msg_t	fts/fts0opt.cc	/^struct fts_msg_t {$/;"	s	file:
fts_msg_type_t	fts/fts0opt.cc	/^enum fts_msg_type_t {$/;"	g	file:
fts_need_sync	fts/fts0fts.cc	/^bool fts_need_sync = false;$/;"	v
fts_next_doc_id	include/trx0trx.h	/^  doc_id_t fts_next_doc_id; \/* The document id used for updates *\/$/;"	m	struct:trx_t
fts_node_t	include/fts0types.h	/^struct fts_node_t {$/;"	s
fts_num_word_optimize	fts/fts0opt.cc	/^ulong fts_num_word_optimize;$/;"	v
fts_opt_start_shutdown	fts/fts0opt.cc	/^static bool fts_opt_start_shutdown = false;$/;"	v	file:
fts_optimize_add_table	fts/fts0opt.cc	/^void fts_optimize_add_table(dict_table_t *table) \/*!< in: table to add *\/$/;"	f
fts_optimize_being_deleted_count	fts/fts0opt.cc	/^static ulint fts_optimize_being_deleted_count($/;"	f	file:
fts_optimize_compact	fts/fts0opt.cc	/^static MY_ATTRIBUTE((warn_unused_result)) dberr_t fts_optimize_compact($/;"	f
fts_optimize_create	fts/fts0opt.cc	/^static fts_optimize_t *fts_optimize_create($/;"	f	file:
fts_optimize_create_deleted_doc_id_snapshot	fts/fts0opt.cc	/^    fts_optimize_create_deleted_doc_id_snapshot($/;"	f
fts_optimize_create_msg	fts/fts0opt.cc	/^static fts_msg_t *fts_optimize_create_msg($/;"	f	file:
fts_optimize_del_table	fts/fts0opt.cc	/^static ibool fts_optimize_del_table($/;"	f	file:
fts_optimize_deleted_pos	fts/fts0opt.cc	/^static MY_ATTRIBUTE((warn_unused_result)) int fts_optimize_deleted_pos($/;"	f
fts_optimize_encode_node	fts/fts0opt.cc	/^static dberr_t fts_optimize_encode_node($/;"	f	file:
fts_optimize_find_slot	fts/fts0opt.cc	/^static fts_slot_t *fts_optimize_find_slot($/;"	f	file:
fts_optimize_free	fts/fts0opt.cc	/^static void fts_optimize_free($/;"	f	file:
fts_optimize_get_index_end_time	fts/fts0opt.cc	/^    fts_optimize_get_index_end_time($/;"	f
fts_optimize_get_index_start_time	fts/fts0opt.cc	/^    fts_optimize_get_index_start_time($/;"	f
fts_optimize_get_time_limit	fts/fts0opt.cc	/^static ib_time_t fts_optimize_get_time_limit($/;"	f	file:
fts_optimize_graph_free	fts/fts0opt.cc	/^static void fts_optimize_graph_free($/;"	f	file:
fts_optimize_graph_t	fts/fts0opt.cc	/^struct fts_optimize_graph_t {$/;"	s	file:
fts_optimize_how_many	fts/fts0opt.cc	/^static ulint fts_optimize_how_many($/;"	f	file:
fts_optimize_index	fts/fts0opt.cc	/^    fts_optimize_index(fts_optimize_t *optim, \/*!< in: optimize instance *\/$/;"	f
fts_optimize_index_completed	fts/fts0opt.cc	/^static MY_ATTRIBUTE((warn_unused_result)) dberr_t fts_optimize_index_completed($/;"	f
fts_optimize_index_fetch_node	fts/fts0opt.cc	/^ibool fts_optimize_index_fetch_node($/;"	f
fts_optimize_index_read_words	fts/fts0opt.cc	/^static MY_ATTRIBUTE((warn_unused_result)) dberr_t fts_optimize_index_read_words($/;"	f
fts_optimize_indexes	fts/fts0opt.cc	/^    fts_optimize_indexes(fts_optimize_t *optim) \/*!< in: optimize instance *\/$/;"	f
fts_optimize_init	fts/fts0opt.cc	/^void fts_optimize_init(void) {$/;"	f
fts_optimize_lookup	fts/fts0opt.cc	/^static int fts_optimize_lookup($/;"	f	file:
fts_optimize_mutex_key	sync/sync0sync.cc	/^mysql_pfs_key_t fts_optimize_mutex_key;$/;"	v
fts_optimize_new_table	fts/fts0opt.cc	/^static ibool fts_optimize_new_table($/;"	f	file:
fts_optimize_node	fts/fts0opt.cc	/^static dberr_t fts_optimize_node($/;"	f	file:
fts_optimize_purge_deleted_doc_id_snapshot	fts/fts0opt.cc	/^    fts_optimize_purge_deleted_doc_id_snapshot($/;"	f
fts_optimize_purge_deleted_doc_ids	fts/fts0opt.cc	/^    fts_optimize_purge_deleted_doc_ids($/;"	f
fts_optimize_purge_snapshot	fts/fts0opt.cc	/^static MY_ATTRIBUTE((warn_unused_result)) dberr_t fts_optimize_purge_snapshot($/;"	f
fts_optimize_read_deleted_doc_id_snapshot	fts/fts0opt.cc	/^    fts_optimize_read_deleted_doc_id_snapshot($/;"	f
fts_optimize_read_node	fts/fts0opt.cc	/^static fts_node_t *fts_optimize_read_node(fts_word_t *word, \/*!< in: *\/$/;"	f	file:
fts_optimize_remove_table	fts/fts0opt.cc	/^void fts_optimize_remove_table(dict_table_t *table) \/*!< in: table to remove *\/$/;"	f
fts_optimize_request_sync_table	fts/fts0opt.cc	/^void fts_optimize_request_sync_table(dict_table_t *table) {$/;"	f
fts_optimize_reset_start_time	fts/fts0opt.cc	/^static MY_ATTRIBUTE((warn_unused_result)) dberr_t fts_optimize_reset_start_time($/;"	f
fts_optimize_set_index_end_time	fts/fts0opt.cc	/^    fts_optimize_set_index_end_time(trx_t *trx,          \/*!< in: transaction *\/$/;"	f
fts_optimize_set_index_start_time	fts/fts0opt.cc	/^    fts_optimize_set_index_start_time($/;"	f
fts_optimize_shutdown	fts/fts0opt.cc	/^void fts_optimize_shutdown() {$/;"	f
fts_optimize_start_table	fts/fts0opt.cc	/^static void fts_optimize_start_table($/;"	f	file:
fts_optimize_sync_table	fts/fts0opt.cc	/^void fts_optimize_sync_table(table_id_t table_id) {$/;"	f
fts_optimize_t	fts/fts0opt.cc	/^struct fts_optimize_t {$/;"	s	file:
fts_optimize_table	fts/fts0opt.cc	/^dberr_t fts_optimize_table(dict_table_t *table) \/*!< in: table to optimiza *\/$/;"	f
fts_optimize_table_bk	fts/fts0opt.cc	/^static dberr_t fts_optimize_table_bk($/;"	f	file:
fts_optimize_thread	fts/fts0opt.cc	/^static void fts_optimize_thread(ib_wqueue_t *wq) {$/;"	f	file:
fts_optimize_thread_key	srv/srv0start.cc	/^mysql_pfs_key_t fts_optimize_thread_key;$/;"	v
fts_optimize_time_limit	fts/fts0opt.cc	/^static ib_time_t fts_optimize_time_limit = 0;$/;"	v	file:
fts_optimize_word	fts/fts0opt.cc	/^static ib_vector_t *fts_optimize_word($/;"	f	file:
fts_optimize_words	fts/fts0opt.cc	/^static void fts_optimize_words($/;"	f	file:
fts_optimize_wq	fts/fts0opt.cc	/^static ib_wqueue_t *fts_optimize_wq;$/;"	v	file:
fts_optimize_write_word	fts/fts0opt.cc	/^static MY_ATTRIBUTE((warn_unused_result)) dberr_t fts_optimize_write_word($/;"	f
fts_parallel_merge_thread	row/row0ftsort.cc	/^static void fts_parallel_merge_thread(fts_psort_t *psort_info) {$/;"	f	file:
fts_parallel_merge_thread_key	srv/srv0start.cc	/^mysql_pfs_key_t fts_parallel_merge_thread_key;$/;"	v
fts_parallel_tokenization_thread	row/row0ftsort.cc	/^static void fts_parallel_tokenization_thread(fts_psort_t *psort_info) {$/;"	f	file:
fts_parallel_tokenization_thread_key	srv/srv0start.cc	/^mysql_pfs_key_t fts_parallel_tokenization_thread_key;$/;"	v
fts_parse	fts/fts0pars.cc	/^fts_parse($/;"	f
fts_parse_by_parser	fts/fts0plugin.cc	/^int fts_parse_by_parser(ibool mode,       \/*!< in: parse boolean mode *\/$/;"	f
fts_parse_query_internal	fts/fts0plugin.cc	/^static int fts_parse_query_internal($/;"	f	file:
fts_parse_sql	fts/fts0sql.cc	/^que_t *fts_parse_sql($/;"	f
fts_phrase_or_proximity_search	fts/fts0que.cc	/^static ibool fts_phrase_or_proximity_search($/;"	f	file:
fts_phrase_param_t	fts/fts0que.cc	/^struct fts_phrase_param_t {$/;"	s	file:
fts_phrase_t	fts/fts0que.cc	/^  fts_phrase_t(const dict_table_t *table)$/;"	f	struct:fts_phrase_t
fts_phrase_t	fts/fts0que.cc	/^struct fts_phrase_t {$/;"	s	file:
fts_pll_tokenize_mutex_key	sync/sync0sync.cc	/^mysql_pfs_key_t fts_pll_tokenize_mutex_key;$/;"	v
fts_print_doc_id	fts/fts0que.cc	/^static void fts_print_doc_id($/;"	f	file:
fts_process_token	fts/fts0fts.cc	/^static ulint fts_process_token(fts_doc_t *doc, fts_doc_t *result,$/;"	f	file:
fts_proximity_get_positions	fts/fts0que.cc	/^static bool fts_proximity_get_positions($/;"	f	file:
fts_proximity_is_word_in_range	fts/fts0que.cc	/^static bool fts_proximity_is_word_in_range($/;"	f	file:
fts_proximity_t	fts/fts0que.cc	/^struct fts_proximity_t {$/;"	s	file:
fts_psort_common_t	include/row0ftsort.h	/^struct fts_psort_common_t {$/;"	s
fts_psort_insert	include/row0ftsort.h	/^struct fts_psort_insert {$/;"	s
fts_psort_insert_t	include/row0ftsort.h	/^typedef struct fts_psort_insert fts_psort_insert_t;$/;"	t	typeref:struct:fts_psort_insert
fts_psort_t	include/row0ftsort.h	/^struct fts_psort_t {$/;"	s
fts_que_graph_free	include/fts0fts.h	436;"	d
fts_query	fts/fts0que.cc	/^dberr_t fts_query(trx_t *trx, dict_index_t *index, uint flags,$/;"	f
fts_query_add_doc_freq	fts/fts0que.cc	/^static fts_doc_freq_t *fts_query_add_doc_freq($/;"	f	file:
fts_query_add_ranking	fts/fts0que.cc	/^static void fts_query_add_ranking($/;"	f	file:
fts_query_add_word_for_parser	fts/fts0plugin.cc	/^static int fts_query_add_word_for_parser($/;"	f	file:
fts_query_add_word_freq	fts/fts0que.cc	/^static fts_word_freq_t *fts_query_add_word_freq($/;"	f	file:
fts_query_add_word_to_document	fts/fts0que.cc	/^static void fts_query_add_word_to_document($/;"	f	file:
fts_query_cache	fts/fts0que.cc	/^static dberr_t fts_query_cache($/;"	f	file:
fts_query_calculate_idf	fts/fts0que.cc	/^static void fts_query_calculate_idf(fts_query_t *query) \/*!< in: Query state *\/$/;"	f	file:
fts_query_calculate_ranking	fts/fts0que.cc	/^static void fts_query_calculate_ranking($/;"	f	file:
fts_query_can_optimize	fts/fts0que.cc	/^static void fts_query_can_optimize($/;"	f	file:
fts_query_change_ranking	fts/fts0que.cc	/^static void fts_query_change_ranking($/;"	f	file:
fts_query_check_node	fts/fts0que.cc	/^static void fts_query_check_node($/;"	f	file:
fts_query_compare_rank	fts/fts0que.cc	/^static int fts_query_compare_rank(const void *p1, \/*!< in: pointer to elem *\/$/;"	f	file:
fts_query_difference	fts/fts0que.cc	/^    fts_query_difference(fts_query_t *query,        \/*!< in: query instance *\/$/;"	f
fts_query_execute	fts/fts0que.cc	/^    fts_query_execute(fts_query_t *query,  \/*!< in: query instance *\/$/;"	f
fts_query_expansion_fetch_doc	fts/fts0fts.cc	/^ibool fts_query_expansion_fetch_doc(void *row,      \/*!< in: sel_node_t* *\/$/;"	f
fts_query_fetch_document	fts/fts0que.cc	/^static ibool fts_query_fetch_document(void *row,      \/*!< in:  sel_node_t* *\/$/;"	f	file:
fts_query_filter_doc_ids	fts/fts0que.cc	/^static dberr_t fts_query_filter_doc_ids($/;"	f	file:
fts_query_free	fts/fts0que.cc	/^static void fts_query_free(fts_query_t *query) \/*!< in: query instance to free*\/$/;"	f	file:
fts_query_free_doc_ids	fts/fts0que.cc	/^static void fts_query_free_doc_ids($/;"	f	file:
fts_query_free_result	fts/fts0que.cc	/^void fts_query_free_result($/;"	f
fts_query_get_oper_node	fts/fts0plugin.cc	/^static fts_ast_node_t *fts_query_get_oper_node($/;"	f	file:
fts_query_get_result	fts/fts0que.cc	/^static fts_result_t *fts_query_get_result($/;"	f	file:
fts_query_get_token	fts/fts0que.cc	/^static byte *fts_query_get_token($/;"	f	file:
fts_query_index_fetch_nodes	fts/fts0que.cc	/^static ibool fts_query_index_fetch_nodes($/;"	f	file:
fts_query_intersect	fts/fts0que.cc	/^static MY_ATTRIBUTE((warn_unused_result)) dberr_t fts_query_intersect($/;"	f
fts_query_intersect_doc_id	fts/fts0que.cc	/^static void fts_query_intersect_doc_id($/;"	f	file:
fts_query_is_in_proximity_range	fts/fts0que.cc	/^static MY_ATTRIBUTE((warn_unused_result)) bool fts_query_is_in_proximity_range($/;"	f
fts_query_match_document	fts/fts0que.cc	/^static MY_ATTRIBUTE((warn_unused_result)) dberr_t fts_query_match_document($/;"	f
fts_query_match_phrase	fts/fts0que.cc	/^static ibool fts_query_match_phrase(fts_phrase_t *phrase, byte *start,$/;"	f	file:
fts_query_match_phrase_add_word_for_parser	fts/fts0que.cc	/^static int fts_query_match_phrase_add_word_for_parser($/;"	f	file:
fts_query_match_phrase_terms	fts/fts0que.cc	/^static ibool fts_query_match_phrase_terms($/;"	f	file:
fts_query_match_phrase_terms_by_parser	fts/fts0que.cc	/^static ibool fts_query_match_phrase_terms_by_parser($/;"	f	file:
fts_query_parse	fts/fts0que.cc	/^static fts_ast_node_t *fts_query_parse($/;"	f	file:
fts_query_phrase_search	fts/fts0que.cc	/^static MY_ATTRIBUTE((warn_unused_result)) dberr_t fts_query_phrase_search($/;"	f
fts_query_phrase_split	fts/fts0que.cc	/^static void fts_query_phrase_split(fts_query_t *query,$/;"	f	file:
fts_query_prepare_result	fts/fts0que.cc	/^static fts_result_t *fts_query_prepare_result($/;"	f	file:
fts_query_process_doc_id	fts/fts0que.cc	/^static dberr_t fts_query_process_doc_id($/;"	f	file:
fts_query_read_node	fts/fts0que.cc	/^static dberr_t fts_query_read_node($/;"	f	file:
fts_query_remove_doc_id	fts/fts0que.cc	/^static void fts_query_remove_doc_id($/;"	f	file:
fts_query_search_phrase	fts/fts0que.cc	/^    fts_query_search_phrase(fts_query_t *query,       \/*!< in: query instance *\/$/;"	f
fts_query_skip_word	fts/fts0que.cc	/^byte *fts_query_skip_word(byte *ptr,       \/*!< in: start of scan *\/$/;"	f
fts_query_sort_result_on_rank	fts/fts0que.cc	/^void fts_query_sort_result_on_rank($/;"	f
fts_query_t	fts/fts0que.cc	/^struct fts_query_t {$/;"	s	file:
fts_query_union	fts/fts0que.cc	/^    fts_query_union(fts_query_t *query,  \/*!< in: query instance *\/$/;"	f
fts_query_union_doc_id	fts/fts0que.cc	/^static void fts_query_union_doc_id($/;"	f	file:
fts_query_visitor	fts/fts0que.cc	/^static dberr_t fts_query_visitor($/;"	f	file:
fts_rank_t	include/fts0fts.h	/^typedef float fts_rank_t;$/;"	t
fts_ranking_t	include/fts0fts.h	/^struct fts_ranking_t {$/;"	s
fts_ranking_words_add	fts/fts0que.cc	/^static void fts_ranking_words_add($/;"	f	file:
fts_ranking_words_create	fts/fts0que.cc	/^static void fts_ranking_words_create($/;"	f	file:
fts_ranking_words_get_next	fts/fts0que.cc	/^static bool fts_ranking_words_get_next($/;"	f	file:
fts_read_doc_id	include/fts0fts.h	85;"	d
fts_read_stopword	fts/fts0fts.cc	/^static ibool fts_read_stopword($/;"	f	file:
fts_read_ulint	fts/fts0fts.cc	/^static ibool fts_read_ulint(void *row,      \/*!< in: sel_node_t* *\/$/;"	f	file:
fts_rename_aux_tables	fts/fts0fts.cc	/^dberr_t fts_rename_aux_tables(dict_table_t *table,  \/*!< in: user Table *\/$/;"	f
fts_rename_one_aux_table	fts/fts0fts.cc	/^static MY_ATTRIBUTE((warn_unused_result)) dberr_t fts_rename_one_aux_table($/;"	f
fts_reset_get_doc	fts/fts0fts.cc	/^static void fts_reset_get_doc(fts_cache_t *cache) \/*!< in: FTS index cache *\/$/;"	f	file:
fts_result_cache_limit	fts/fts0fts.cc	/^ulong fts_result_cache_limit;$/;"	v
fts_result_t	include/fts0fts.h	/^struct fts_result_t {$/;"	s
fts_retrieve_ranking	fts/fts0que.cc	/^float fts_retrieve_ranking($/;"	f
fts_row_state	include/fts0fts.h	/^enum fts_row_state {$/;"	g
fts_savepoint_copy	fts/fts0fts.cc	/^void fts_savepoint_copy(const fts_savepoint_t *src, \/*!< in: source savepoint *\/$/;"	f
fts_savepoint_create	fts/fts0fts.cc	/^static fts_savepoint_t *fts_savepoint_create($/;"	f	file:
fts_savepoint_free	fts/fts0fts.cc	/^void fts_savepoint_free($/;"	f
fts_savepoint_laststmt_refresh	fts/fts0fts.cc	/^void fts_savepoint_laststmt_refresh(trx_t *trx) \/*!< in: transaction *\/$/;"	f
fts_savepoint_lookup	fts/fts0fts.cc	/^ulint fts_savepoint_lookup(ib_vector_t *savepoints, \/*!< in: savepoints *\/$/;"	f
fts_savepoint_release	fts/fts0fts.cc	/^void fts_savepoint_release(trx_t *trx,       \/*!< in: transaction *\/$/;"	f
fts_savepoint_rollback	fts/fts0fts.cc	/^void fts_savepoint_rollback(trx_t *trx,       \/*!< in: transaction *\/$/;"	f
fts_savepoint_rollback_last_stmt	fts/fts0fts.cc	/^void fts_savepoint_rollback_last_stmt(trx_t *trx) \/*!< in: transaction *\/$/;"	f
fts_savepoint_t	include/fts0fts.h	/^struct fts_savepoint_t {$/;"	s
fts_savepoint_take	fts/fts0fts.cc	/^void fts_savepoint_take(trx_t *trx, fts_trx_t *fts_trx, const char *name) {$/;"	f
fts_scan	fts/fts0pars.cc	/^typedef int (*fts_scan)();$/;"	t	file:
fts_scanner	fts/fts0pars.cc	/^typedef	int	(*fts_scanner)();$/;"	t	file:
fts_scanner_alt	fts/fts0pars.cc	/^typedef	int	(*fts_scanner_alt)(YYSTYPE* val, yyscan_t yyscanner);$/;"	t	file:
fts_select_t	fts/fts0que.cc	/^struct fts_select_t {$/;"	s	file:
fts_slot_t	fts/fts0opt.cc	/^struct fts_slot_t {$/;"	s	file:
fts_sort_pll_degree	row/row0ftsort.cc	/^ulong fts_sort_pll_degree = 2;$/;"	v
fts_sql_begin	fts/fts0sql.cc	/^static const char *fts_sql_begin = "PROCEDURE P() IS\\n";$/;"	v	file:
fts_sql_callback	include/fts0types.h	/^typedef pars_user_func_cb_t fts_sql_callback;$/;"	t
fts_sql_commit	fts/fts0sql.cc	/^dberr_t fts_sql_commit(trx_t *trx) \/*!< in: transaction *\/$/;"	f
fts_sql_end	fts/fts0sql.cc	/^static const char *fts_sql_end =$/;"	v	file:
fts_sql_rollback	fts/fts0sql.cc	/^dberr_t fts_sql_rollback(trx_t *trx) \/*!< in: transaction *\/$/;"	f
fts_state_t	fts/fts0opt.cc	/^enum fts_state_t {$/;"	g	file:
fts_status	include/fts0fts.h	/^  ulint fts_status;$/;"	m	class:fts_t
fts_status	include/fts0fts.h	/^enum fts_status {$/;"	g
fts_status_t	include/fts0fts.h	/^typedef enum fts_status fts_status_t;$/;"	t	typeref:enum:fts_status
fts_stopword_t	include/fts0types.h	/^struct fts_stopword_t {$/;"	s
fts_string_t	include/fts0fts.h	/^struct fts_string_t {$/;"	s
fts_sync	fts/fts0fts.cc	/^static dberr_t fts_sync(fts_sync_t *sync, bool unlock_cache, bool wait,$/;"	f	file:
fts_sync_add_deleted_cache	fts/fts0fts.cc	/^    fts_sync_add_deleted_cache(fts_sync_t *sync,     \/*!< in: sync state *\/$/;"	f
fts_sync_begin	fts/fts0fts.cc	/^static void fts_sync_begin(fts_sync_t *sync) \/*!< in: sync state *\/$/;"	f	file:
fts_sync_commit	fts/fts0fts.cc	/^    fts_sync_commit(fts_sync_t *sync) {$/;"	f
fts_sync_index	fts/fts0fts.cc	/^    fts_sync_index(fts_sync_t *sync,               \/*!< in: sync state *\/$/;"	f
fts_sync_index_check	fts/fts0fts.cc	/^static bool fts_sync_index_check(fts_index_cache_t *index_cache) {$/;"	f	file:
fts_sync_index_reset	fts/fts0fts.cc	/^static void fts_sync_index_reset(fts_index_cache_t *index_cache) {$/;"	f	file:
fts_sync_rollback	fts/fts0fts.cc	/^static void fts_sync_rollback(fts_sync_t *sync) \/*!< in: sync state *\/$/;"	f	file:
fts_sync_t	include/fts0types.h	/^struct fts_sync_t {$/;"	s
fts_sync_table	fts/fts0fts.cc	/^dberr_t fts_sync_table(dict_table_t *table, bool unlock_cache, bool wait,$/;"	f
fts_sync_write_words	fts/fts0fts.cc	/^    fts_sync_write_words(trx_t *trx, fts_index_cache_t *index_cache,$/;"	f
fts_t	fts/fts0fts.cc	/^fts_t::fts_t(dict_table_t *table, mem_heap_t *heap)$/;"	f	class:fts_t
fts_t	include/fts0fts.h	/^class fts_t {$/;"	c
fts_table_fetch_doc_ids	fts/fts0opt.cc	/^dberr_t fts_table_fetch_doc_ids($/;"	f
fts_table_state_enum	include/fts0priv.h	/^enum fts_table_state_enum {$/;"	g
fts_table_state_t	include/fts0priv.h	/^typedef enum fts_table_state_enum fts_table_state_t;$/;"	t	typeref:enum:fts_table_state_enum
fts_table_t	include/fts0fts.h	/^struct fts_table_t {$/;"	s
fts_table_type_t	include/fts0fts.h	/^enum fts_table_type_t {$/;"	g
fts_token_list	include/row0ftsort.h	/^  fts_token_list_t fts_token_list;$/;"	m	struct:fts_tokenize_ctx
fts_token_list_t	include/row0ftsort.h	/^typedef UT_LIST_BASE_NODE_T(row_fts_token_t) fts_token_list_t;$/;"	t
fts_token_t	include/fts0types.h	/^struct fts_token_t {$/;"	s
fts_tokenize_add_word_for_parser	fts/fts0fts.cc	/^static int fts_tokenize_add_word_for_parser($/;"	f	file:
fts_tokenize_by_parser	fts/fts0fts.cc	/^static void fts_tokenize_by_parser($/;"	f	file:
fts_tokenize_ctx	include/row0ftsort.h	/^struct fts_tokenize_ctx {$/;"	s
fts_tokenize_ctx_t	include/row0ftsort.h	/^typedef struct fts_tokenize_ctx fts_tokenize_ctx_t;$/;"	t	typeref:struct:fts_tokenize_ctx
fts_tokenize_document	fts/fts0fts.cc	/^static void fts_tokenize_document(fts_doc_t *doc, fts_doc_t *result,$/;"	f	file:
fts_tokenize_document_internal	fts/fts0fts.cc	/^int fts_tokenize_document_internal($/;"	f
fts_tokenize_document_next	fts/fts0fts.cc	/^static void fts_tokenize_document_next(fts_doc_t *doc, ulint add_pos,$/;"	f	file:
fts_tokenize_param_t	fts/fts0fts.cc	/^struct fts_tokenize_param_t {$/;"	s	file:
fts_tokenizer_word_get	fts/fts0fts.cc	/^static fts_tokenizer_word_t *fts_tokenizer_word_get($/;"	f	file:
fts_tokenizer_word_t	include/fts0types.h	/^struct fts_tokenizer_word_t {$/;"	s
fts_trx	include/fts0fts.h	/^  fts_trx_t *fts_trx; \/*!< link to parent *\/$/;"	m	struct:fts_trx_table_t
fts_trx	include/trx0trx.h	/^  fts_trx_t *fts_trx;       \/*!< FTS information, or NULL if$/;"	m	struct:trx_t
fts_trx_add_op	fts/fts0fts.cc	/^void fts_trx_add_op(trx_t *trx, dict_table_t *table, doc_id_t doc_id,$/;"	f
fts_trx_create	fts/fts0fts.cc	/^fts_trx_t *fts_trx_create(trx_t *trx) {$/;"	f
fts_trx_free	fts/fts0fts.cc	/^void fts_trx_free(fts_trx_t *fts_trx) \/* in, own: FTS trx *\/$/;"	f
fts_trx_init	fts/fts0fts.cc	/^static fts_trx_table_t *fts_trx_init($/;"	f	file:
fts_trx_row_get_new_state	fts/fts0fts.cc	/^static fts_row_state fts_trx_row_get_new_state($/;"	f	file:
fts_trx_row_t	include/fts0fts.h	/^struct fts_trx_row_t {$/;"	s
fts_trx_t	include/fts0fts.h	/^struct fts_trx_t {$/;"	s
fts_trx_table_add_op	fts/fts0fts.cc	/^static void fts_trx_table_add_op($/;"	f	file:
fts_trx_table_clone	fts/fts0fts.cc	/^static fts_trx_table_t *fts_trx_table_clone($/;"	f	file:
fts_trx_table_create	fts/fts0fts.cc	/^static fts_trx_table_t *fts_trx_table_create($/;"	f	file:
fts_trx_table_rows_free	fts/fts0fts.cc	/^void fts_trx_table_rows_free(ib_rbt_t *rows) \/*!< in: rbt of rows to free *\/$/;"	f
fts_trx_table_t	include/fts0fts.h	/^struct fts_trx_table_t {$/;"	s
fts_undo_last_stmt	fts/fts0fts.cc	/^static void fts_undo_last_stmt($/;"	f	file:
fts_update_doc_id	fts/fts0fts.cc	/^doc_id_t fts_update_doc_id(dict_table_t *table, upd_field_t *ufield,$/;"	f
fts_update_max_cache_size	fts/fts0fts.cc	/^static void fts_update_max_cache_size(fts_sync_t *sync) \/*!< in: sync state *\/$/;"	f	file:
fts_update_next_doc_id	fts/fts0fts.cc	/^void fts_update_next_doc_id($/;"	f
fts_update_sync_doc_id	fts/fts0fts.cc	/^static dberr_t fts_update_sync_doc_id($/;"	f	file:
fts_update_t	include/fts0types.h	/^struct fts_update_t {$/;"	s
fts_upgrade_aux_tables	fts/fts0fts.cc	/^dberr_t fts_upgrade_aux_tables(dict_table_t *table) {$/;"	f
fts_upgrade_get_5_7_table_id	fts/fts0fts.cc	/^inline table_id_t fts_upgrade_get_5_7_table_id(table_id_t table_id) {$/;"	f
fts_upgrade_rename	fts/fts0fts.cc	/^dberr_t fts_upgrade_rename(const dict_table_t *table, bool rollback) {$/;"	f
fts_upgrade_rename_aux_table	fts/fts0fts.cc	/^static void fts_upgrade_rename_aux_table(const char *old_name,$/;"	f	file:
fts_upgrade_rename_aux_table_low	fts/fts0fts.cc	/^static dict_table_t *fts_upgrade_rename_aux_table_low(const char *old_name,$/;"	f	file:
fts_valid_stopword_table	fts/fts0fts.cc	/^CHARSET_INFO *fts_valid_stopword_table($/;"	f
fts_wait_for_background_thread_to_start	fts/fts0fts.cc	/^ibool fts_wait_for_background_thread_to_start($/;"	f
fts_word_free	fts/fts0opt.cc	/^void fts_word_free(fts_word_t *word) \/*!< in: instance to free.*\/$/;"	f
fts_word_freq_t	fts/fts0que.cc	/^struct fts_word_freq_t {$/;"	s	file:
fts_word_init	fts/fts0opt.cc	/^static fts_word_t *fts_word_init($/;"	f	file:
fts_word_t	include/fts0types.h	/^struct fts_word_t {$/;"	s
fts_words_free	fts/fts0fts.cc	/^static void fts_words_free(ib_rbt_t *words) \/*!< in: rb tree of words *\/$/;"	f	file:
fts_write_doc_id	include/fts0fts.h	82;"	d
fts_write_node	fts/fts0fts.cc	/^dberr_t fts_write_node(trx_t *trx,             \/*!< in: transaction *\/$/;"	f
fts_zip_create	fts/fts0opt.cc	/^static fts_zip_t *fts_zip_create(mem_heap_t *heap, \/*!< in: heap *\/$/;"	f	file:
fts_zip_deflate_end	fts/fts0opt.cc	/^static void fts_zip_deflate_end($/;"	f	file:
fts_zip_init	fts/fts0opt.cc	/^static void fts_zip_init($/;"	f	file:
fts_zip_initialize	fts/fts0opt.cc	/^static void fts_zip_initialize($/;"	f	file:
fts_zip_read_word	fts/fts0opt.cc	/^static byte *fts_zip_read_word($/;"	f	file:
fts_zip_t	fts/fts0opt.cc	/^struct fts_zip_t {$/;"	s	file:
ftserror	fts/fts0pars.cc	/^ftserror($/;"	f
ftslex	fts/fts0pars.cc	96;"	d	file:
func	include/pars0pars.h	/^  int func;            \/*!< token code of the function name *\/$/;"	m	struct:func_node_t
func	include/pars0pars.h	/^  pars_user_func_cb_t func; \/*!< function address *\/$/;"	m	struct:pars_user_func_t
func	include/row0sel.h	/^  pars_user_func_t *func; \/*!< User callback function or NULL.$/;"	m	struct:fetch_node_t
func_node_list	include/pars0pars.h	/^  UT_LIST_NODE_T(func_node_t) func_node_list;$/;"	m	struct:func_node_t
func_node_list	include/pars0sym.h	/^  func_node_list;$/;"	m	struct:sym_tab_t
func_node_t	include/pars0pars.h	/^struct func_node_t {$/;"	s
funcs	include/pars0pars.h	/^  ib_vector_t *funcs;      \/*!< user functions, or NUll$/;"	m	struct:pars_info_t
function_declaration	pars/pars0grm.y	/^function_declaration:$/;"	l
function_name	pars/pars0grm.y	/^function_name:$/;"	l
fut0fut_h	include/fut0fut.h	34;"	d
fut0lst_h	include/fut0lst.h	34;"	d
g_engine	handler/p_s.cc	/^static const char *g_engine = "INNODB";$/;"	v	file:
g_engine_length	handler/p_s.cc	/^static const size_t g_engine_length = 6;$/;"	v	file:
gap_can_intersect_range	row/row0sel.cc	/^  bool gap_can_intersect_range;$/;"	m	struct:row_to_range_relation_t	file:
general_fetch	handler/ha_innodb.cc	/^int ha_innobase::general_fetch($/;"	f	class:ha_innobase
general_space_name	include/fil0fil.h	/^static constexpr char general_space_name[] = "innodb_general";$/;"	v
generate_key	os/os0enc.cc	/^bool generate_key(const char *key_id, const char *key_type, size_t key_length) {$/;"	f	namespace:innobase::encryption
generic_indexer_t	include/ut0counter.h	/^struct generic_indexer_t {$/;"	s
get	dict/dict0dict.cc	/^Persister *Persisters::get(persistent_type_t type) const {$/;"	f	class:Persisters
get	dict/dict0dict.cc	/^std::string *DDTableBuffer::get(table_id_t id, uint64 *version) {$/;"	f	class:DDTableBuffer
get	include/buf0buf.h	/^  buf_page_t *get() const {$/;"	f	class:Cache_hint::HazardPointer
get	include/buf0stats.h	/^  uint64_t get(const index_id_t &id) {$/;"	f	class:buf_stat_per_index_t
get	include/ut0lock_free_hash.h	/^  int64_t get() const {$/;"	f	class:ut_lock_free_cnt_t
get	include/ut0pool.h	/^  Type *get() {$/;"	f	struct:Pool
get	include/ut0pool.h	/^  value_type *get() {$/;"	f	struct:PoolManager
get	srv/srv0tmp.cc	/^Tablespace *Tablespace_pool::get(my_thread_id id, enum tbsp_purpose purpose) {$/;"	f	class:ibt::Tablespace_pool
getLevel	include/btr0bulk.h	/^  ulint getLevel() const { return (m_level); }$/;"	f	class:PageBulk
getMetadata	log/log0recv.cc	/^PersistentTableMetadata *MetadataRecover::getMetadata(table_id_t id) {$/;"	f	class:MetadataRecover
getNodePtr	btr/btr0bulk.cc	/^dtuple_t *PageBulk::getNodePtr() {$/;"	f	class:PageBulk
getPage	include/btr0bulk.h	/^  const page_t *getPage() const { return (m_page); }$/;"	f	class:PageBulk
getPageNo	include/btr0bulk.h	/^  page_no_t getPageNo() const { return (m_page_no); }$/;"	f	class:PageBulk
getRecNo	include/btr0bulk.h	/^  ulint getRecNo() const { return (m_rec_no); }$/;"	f	class:PageBulk
getSplitRec	btr/btr0bulk.cc	/^PageBulk::SplitPoint PageBulk::getSplitRec() {$/;"	f	class:PageBulk
get_AIO_mode	fil/fil0fil.cc	/^AIO_mode Fil_shard::get_AIO_mode(const IORequest &req_type, bool sync) {$/;"	f	class:Fil_shard
get_active	include/trx0purge.h	/^  trx_rseg_t *get_active(ulint slot) {$/;"	f	struct:undo::Tablespace
get_active_list	include/clone0repl.h	/^  Gitd_info_list &get_active_list() {$/;"	f	class:Clone_persist_gtid
get_affected_index_entries	lob/lob0util.cc	/^dberr_t get_affected_index_entries(const ref_t &ref, dict_index_t *index,$/;"	f	namespace:lob
get_arch_group	include/arch0arch.h	/^  Arch_Group *get_arch_group() { return (m_current_group); }$/;"	f	class:Arch_Log_Sys
get_archived_lsn	include/arch0arch.h	/^  lsn_t get_archived_lsn() { return (m_archived_lsn.load()); }$/;"	f	class:Arch_Log_Sys
get_array_and_local_segment	os/os0file.cc	/^ulint AIO::get_array_and_local_segment(AIO *&array, ulint segment) {$/;"	f	class:AIO
get_auto_increment	handler/ha_innodb.cc	/^void ha_innobase::get_auto_increment($/;"	f	class:ha_innobase
get_auto_increment	handler/ha_innopart.cc	/^void ha_innopart::get_auto_increment(ulonglong offset, ulonglong increment,$/;"	f	class:ha_innopart
get_autoextend_increment	include/fsp0sysspace.h	/^  page_no_t get_autoextend_increment() const {$/;"	f	class:SysTablespace
get_autoextend_size	include/fsp0space.h	/^  uint64_t get_autoextend_size() const { return m_autoextend_size; }$/;"	f	class:Tablespace
get_autoinc	include/dict0mem.h	/^  uint64_t get_autoinc() const { return (m_autoinc); }$/;"	f	class:PersistentTableMetadata
get_basename	fil/fil0fil.cc	/^std::string Fil_path::get_basename(const std::string &filepath) {$/;"	f	class:Fil_path
get_begin_lsn	include/arch0arch.h	/^  lsn_t get_begin_lsn() const { return (m_begin_lsn); }$/;"	f	class:Arch_Group
get_big_free_len	include/lob0impl.h	/^  ulint get_big_free_len() const {$/;"	f	struct:lob::z_frag_entry_t
get_big_free_len	lob/lob0impl.cc	/^ulint z_frag_page_t::get_big_free_len() const {$/;"	f	class:lob::z_frag_page_t
get_big_rec_vec	include/lob0lob.h	/^  const big_rec_t *get_big_rec_vec() { return (m_big_rec_vec); }$/;"	f	struct:lob::InsertContext
get_big_rec_vec_size	include/lob0lob.h	/^  ulint get_big_rec_vec_size() { return (m_big_rec_vec->n_fields); }$/;"	f	struct:lob::InsertContext
get_binary_diff_by_field_no	row/row0upd.cc	/^const Binary_diff_vector *upd_t::get_binary_diff_by_field_no($/;"	f	class:upd_t
get_block	arch/arch0page.cc	/^Arch_Block *ArchPageData::get_block(Arch_Page_Pos *pos, Arch_Blk_Type type) {$/;"	f	class:ArchPageData
get_block	include/btr0pcur.h	/^inline buf_block_t *btr_pcur_t::get_block() {$/;"	f	class:btr_pcur_t
get_block	include/btr0pcur.h	/^inline const buf_block_t *btr_pcur_t::get_block() const {$/;"	f	class:btr_pcur_t
get_block	include/lob0first.h	/^  buf_block_t *get_block() { return (m_block); }$/;"	f	struct:lob::first_page_t
get_block	include/lob0index.h	/^  buf_block_t *get_block() const { return (m_block); }$/;"	f	struct:lob::index_entry_t
get_block	include/zlob0first.h	/^  buf_block_t *get_block() const { return (m_block); }$/;"	f	struct:lob::z_first_page_t
get_block	mtr/mtr0mtr.cc	/^  buf_block_t *get_block() const {$/;"	f	struct:Find_page
get_block_number	arch/arch0page.cc	/^uint64_t Arch_Block::get_block_number(byte *block) {$/;"	f	class:Arch_Block
get_blocks	include/arch0recv.h	/^  Arch_Dblwr_Blocks get_blocks() { return (m_blocks); }$/;"	f	class:Arch_Dblwr_Ctx
get_btr_cur	include/btr0pcur.h	/^inline btr_cur_t *btr_pcur_t::get_btr_cur() {$/;"	f	class:btr_pcur_t
get_btr_cur	include/btr0pcur.h	/^inline const btr_cur_t *btr_pcur_t::get_btr_cur() const { return (&m_btr_cur); }$/;"	f	class:btr_pcur_t
get_btr_page_no	include/lob0lob.h	/^  page_no_t get_btr_page_no() const {$/;"	f	class:lob::BtrContext
get_buf_dump_dir	buf/buf0dump.cc	/^static const char *get_buf_dump_dir() {$/;"	f	file:
get_checksum	arch/arch0page.cc	/^uint32_t Arch_Block::get_checksum(byte *block) {$/;"	f	class:Arch_Block
get_clone_by_index	clone/clone0clone.cc	/^Clone_Handle *Clone_Sys::get_clone_by_index(const byte *loc, uint loc_len) {$/;"	f	class:Clone_Sys
get_clone_monitor	include/clone0snapshot.h	/^  Clone_Monitor &get_clone_monitor() { return (m_monitor); }$/;"	f	class:Clone_Snapshot
get_clustered_index_size	dict/dict0stats.cc	/^ulint TableStatsRecord::get_clustered_index_size() const {$/;"	f	class:TableStatsRecord
get_col	include/dict0mem.h	/^  const dict_col_t *get_col(ulint pos) const { return (get_field(pos)->col); }$/;"	f	struct:dict_index_t
get_col	include/dict0mem.h	/^  dict_col_t *get_col(ulint pos) const {$/;"	f	struct:dict_table_t
get_col_list_to_be_dropped	handler/handler0alter.cc	/^static void get_col_list_to_be_dropped(const ha_innobase_inplace_ctx *ctx,$/;"	f	file:
get_col_name	include/dict0mem.h	/^  const char *get_col_name(ulint col_nr) const {$/;"	f	struct:dict_table_t
get_col_no	dict/dict0mem.cc	/^ulint dict_index_t::get_col_no(ulint pos) const {$/;"	f	class:dict_index_t
get_col_pos	dict/dict0mem.cc	/^ulint dict_index_t::get_col_pos(ulint n, bool inc_prefix,$/;"	f	class:dict_index_t
get_comp_len	include/dict0sdi.h	/^  uint32_t get_comp_len() const { return (m_comp_len); }$/;"	f	class:Sdi_Compressor
get_corrupted_indexes	include/dict0mem.h	/^  const corrupted_ids_t &get_corrupted_indexes() const {$/;"	f	class:PersistentTableMetadata
get_count	include/arch0arch.h	/^  uint get_count() const { return (m_count); }$/;"	f	class:Arch_File_Ctx
get_count	include/sync0sync.h	/^  static int get_count() { return s_count; }$/;"	f	struct:mysql_pfs_key_t
get_counter	include/sync0types.h	/^  Counter *get_counter() { return (&m_counter); }$/;"	f	class:LatchMeta
get_curr_size	include/trx0types.h	/^  page_no_t get_curr_size() const { return (curr_size); }$/;"	f	struct:trx_rseg_t
get_current_version	fil/fil0fil.cc	/^uint32_t fil_space_t::get_current_version() const {$/;"	f	class:fil_space_t
get_data	arch/arch0page.cc	/^bool Arch_Block::get_data(Arch_Page_Pos *read_pos, uint read_len,$/;"	f	class:Arch_Block
get_data	include/dict0sdi-decompress.h	/^  byte *get_data() const { return (m_uncomp_sdi); }$/;"	f	class:Sdi_Decompressor
get_data	include/dict0sdi.h	/^  const byte *get_data() const { return (m_comp_sdi); }$/;"	f	class:Sdi_Compressor
get_data_len	arch/arch0page.cc	/^uint Arch_Block::get_data_len(byte *block) {$/;"	f	class:Arch_Block
get_data_len	include/arch0arch.h	/^  uint get_data_len() const { return (m_data_len); }$/;"	f	class:Arch_Block
get_data_len	include/lob0first.h	/^  ulint get_data_len() const {$/;"	f	struct:lob::first_page_t
get_data_len	include/lob0impl.h	/^  ulint get_data_len() const {$/;"	f	struct:lob::z_data_page_t
get_data_len	include/lob0index.h	/^  ulint get_data_len() const {$/;"	f	struct:lob::index_entry_t
get_data_len	include/lob0pages.h	/^  ulint get_data_len() const {$/;"	f	struct:lob::data_page_t
get_data_len	include/zlob0first.h	/^  ulint get_data_len() const {$/;"	f	struct:lob::z_first_page_t
get_data_len	include/zlob0index.h	/^  ulint get_data_len() const {$/;"	f	struct:lob::z_index_entry_t
get_datadir	include/clone0clone.h	/^  const char *get_datadir() const { return (m_clone_dir); }$/;"	f	class:Clone_Handle
get_datalen_ptr	include/lob0index.h	/^  byte *get_datalen_ptr() const { return (m_node + OFFSET_DATA_LEN); }$/;"	f	struct:lob::index_entry_t
get_db_name	dict/dict0stats.cc	/^char *TableStatsRecord::get_db_name() const { return (m_db_name); }$/;"	f	class:TableStatsRecord
get_dd_index	handler/handler0alter.cc	/^const dd::Index *get_dd_index<dd::Index>(const dd::Index *dd_index) {$/;"	f
get_dd_index	handler/handler0alter.cc	/^const dd::Index *get_dd_index<dd::Partition_index>($/;"	f
get_deletable	include/log0ddl.h	/^  bool get_deletable() const { return (m_deletable); }$/;"	f	class:Log_Type::DDL_Record
get_dir_name	include/arch0arch.h	/^  void get_dir_name(char *name_buf, uint buf_len) {$/;"	f	class:Arch_Group
get_dirs	fil/fil0fil.cc	/^  std::string get_dirs() const { return m_dirs.get_dirs(); }$/;"	f	class:Fil_system
get_dirs	fil/fil0fil.cc	/^  std::string get_dirs() const {$/;"	f	class:Tablespace_dirs
get_disk_estimate	include/clone0snapshot.h	/^  uint64_t get_disk_estimate() const { return (m_data_bytes_disk); }$/;"	f	class:Clone_Snapshot
get_docs	include/fts0types.h	/^  ib_vector_t *get_docs; \/*!< information required to read$/;"	m	struct:fts_cache_t
get_document_graph	include/fts0types.h	/^  que_t *get_document_graph;$/;"	m	struct:fts_get_doc_t
get_donor_timeout	clone/clone0api.cc	/^static Clone_Min get_donor_timeout(THD *thd) {$/;"	f	file:
get_dyn_buffer_length	include/clone0snapshot.h	/^  uint get_dyn_buffer_length() {$/;"	f	class:Clone_Snapshot
get_encryption_op_str	fsp/fsp0fsp.cc	/^static inline const std::string &get_encryption_op_str(encryption_op_type op) {$/;"	f	file:
get_encryption_progress	fsp/fsp0fsp.cc	/^static uint32_t get_encryption_progress(fil_space_t *space, byte &operation) {$/;"	f	file:
get_encryption_type	include/log0ddl.h	/^  encryption_op_type get_encryption_type() const {$/;"	f	class:Log_Type::DDL_Record
get_end_lsn	include/arch0arch.h	/^  lsn_t get_end_lsn() const { return (m_end_lsn); }$/;"	f	class:Arch_Group
get_error_key_name	handler/handler0alter.cc	/^static const char *get_error_key_name(ulint error_key_num,$/;"	f	file:
get_error_message	handler/ha_innodb.cc	/^bool ha_innobase::get_error_message(int error, String *buf) {$/;"	f	class:ha_innobase
get_estimate	include/clone0monitor.h	/^  uint64_t get_estimate() {$/;"	f	class:Clone_Monitor
get_existing_path	fil/fil0fil.cc	/^std::string Fil_path::get_existing_path(const std::string &path,$/;"	f	class:Fil_path
get_expected_log_size	include/mtr0mtr.h	/^  size_t get_expected_log_size() const {$/;"	f	struct:mtr_t
get_extra_columns_and_keys	handler/ha_innodb.cc	/^int ha_innobase::get_extra_columns_and_keys(const HA_CREATE_INFO *,$/;"	f	class:ha_innobase
get_field	include/dict0mem.h	/^  dict_field_t *get_field(ulint pos) const {$/;"	f	struct:dict_index_t
get_field_by_field_no	row/row0upd.cc	/^upd_field_t *upd_t::get_field_by_field_no(ulint field_no,$/;"	f	class:upd_t
get_field_no	include/lob0undo.h	/^  ulint get_field_no() const { return (m_field_no); }$/;"	f	struct:lob::undo_seq_t
get_field_offset	handler/ha_innodb.cc	/^static inline uint get_field_offset(const TABLE *table, const Field *field) {$/;"	f	file:
get_field_ref	include/lob0lob.h	/^  byte *get_field_ref(ulint field_no) const {$/;"	f	class:lob::BtrContext
get_file	clone/clone0snapshot.cc	/^Clone_File_Meta *Clone_Snapshot::get_file(Clone_File_Vec &file_vector,$/;"	f	class:Clone_Snapshot
get_file_by_index	clone/clone0snapshot.cc	/^Clone_File_Meta *Clone_Snapshot::get_file_by_index(uint index) {$/;"	f	class:Clone_Snapshot
get_file_count	include/arch0arch.h	/^  uint get_file_count() const { return (m_file_ctx.get_count()); }$/;"	f	class:Arch_Group
get_file_for_io	fil/fil0fil.cc	/^dberr_t Fil_shard::get_file_for_io(const IORequest &req_type,$/;"	f	class:Fil_shard
get_file_from_desc	clone/clone0apply.cc	/^int Clone_Snapshot::get_file_from_desc(Clone_File_Meta *&file_desc,$/;"	f	class:Clone_Snapshot
get_file_index	arch/arch0page.cc	/^uint Arch_Block::get_file_index(uint64_t block_num) {$/;"	f	class:Arch_Block
get_file_name	include/arch0arch.h	/^  void get_file_name(uint idx, char *name_buf, uint buf_len) {$/;"	f	class:Arch_Group
get_file_offset	arch/arch0page.cc	/^uint64_t Arch_Block::get_file_offset(uint64_t block_num, Arch_Blk_Type type) {$/;"	f	class:Arch_Block
get_file_size	fil/fil0fil.cc	/^dberr_t Fil_shard::get_file_size(fil_node_t *file, bool read_only_mode) {$/;"	f	class:Fil_shard
get_file_size	include/arch0arch.h	/^  uint64_t get_file_size() const { return (m_file_ctx.get_size()); }$/;"	f	class:Arch_Group
get_file_state	clone/clone0api.cc	/^static int get_file_state(std::string data_file) {$/;"	f	file:
get_file_type	fil/fil0fil.cc	/^os_file_type_t Fil_path::get_file_type(const std::string &path) {$/;"	f	class:Fil_path
get_file_type_string	fil/fil0fil.cc	/^const char *Fil_path::get_file_type_string(const std::string &path) {$/;"	f	class:Fil_path
get_file_type_string	fil/fil0fil.cc	/^const char *Fil_path::get_file_type_string(os_file_type_t type) {$/;"	f	class:Fil_path
get_files	arch/arch0log.cc	/^int Log_Arch_Client_Ctx::get_files(Log_Arch_Cbk *cbk_func, void *ctx) {$/;"	f	class:Log_Arch_Client_Ctx
get_first	include/lob0impl.h	/^  paddr_t get_first() const {$/;"	f	struct:lob::plist_base_node_t
get_first_format	include/ut0ut.h	/^static inline const char *get_first_format(const char *fmt) {$/;"	f	namespace:ib
get_first_node	include/lob0impl.h	/^  plist_node_t get_first_node() const {$/;"	f	struct:lob::plist_base_node_t
get_fixed_size	include/dict0mem.h	/^  ulint get_fixed_size(ulint comp) const {$/;"	f	struct:dict_col_t
get_flags	include/lob0first.h	/^  uint8_t get_flags() { return (mach_read_from_1(frame() + OFFSET_FLAGS)); }$/;"	f	struct:lob::first_page_t
get_flags	include/zlob0first.h	/^  uint8_t get_flags() { return (mach_read_from_1(frame() + OFFSET_FLAGS)); }$/;"	f	struct:lob::z_first_page_t
get_flst_node	include/lob0util.h	/^  flst_node_t *get_flst_node(const fil_addr_t &addr) {$/;"	f	struct:lob::basic_page_t
get_flush_lsn	include/fsp0file.h	/^  lsn_t get_flush_lsn() {$/;"	f	class:Datafile
get_flush_observer	include/lob0lob.h	/^  FlushObserver *get_flush_observer() const {$/;"	f	class:lob::BtrContext
get_foreign_dup_key	handler/ha_innodb.cc	/^bool ha_innobase::get_foreign_dup_key(char *child_table_name,$/;"	f	class:ha_innobase
get_frag_entry	include/lob0impl.h	/^  fil_addr_t get_frag_entry() const {$/;"	f	struct:lob::z_frag_page_t
get_frag_entry_addr	include/lob0impl.h	/^  fil_addr_t get_frag_entry_addr() const {$/;"	f	struct:lob::z_frag_page_t
get_frag_entry_s	lob/lob0impl.cc	/^z_frag_entry_t z_frag_page_t::get_frag_entry_s() {$/;"	f	class:lob::z_frag_page_t
get_frag_entry_x	lob/lob0impl.cc	/^z_frag_entry_t z_frag_page_t::get_frag_entry_x() {$/;"	f	class:lob::z_frag_page_t
get_frag_id	include/lob0impl.h	/^  ulint get_frag_id() const {$/;"	f	struct:lob::frag_node_t
get_frag_node	include/lob0impl.h	/^  frag_node_t get_frag_node(frag_id_t id) const {$/;"	f	struct:lob::z_frag_page_t
get_frag_node_page_no	include/zlob0first.h	/^  page_no_t get_frag_node_page_no() {$/;"	f	struct:lob::z_first_page_t
get_frag_page_no	include/zlob0first.h	/^  page_no_t get_frag_page_no() const { return (m_block->get_prev_page_no()); }$/;"	f	struct:lob::z_first_page_t
get_frag_page_no	include/zlob0first.h	/^  page_no_t get_frag_page_no(mtr_t *mtr) const {$/;"	f	struct:lob::z_first_page_t
get_frame	include/lob0impl.h	/^  byte *get_frame() const { return (m_frame); }$/;"	f	class:lob::plist_node_t
get_gtid_info	clone/clone0repl.cc	/^void Clone_persist_gtid::get_gtid_info(trx_t *trx, Gtid_desc &gtid_desc) {$/;"	f	class:Clone_persist_gtid
get_gtid_persistor	include/clone0clone.h	/^  Clone_persist_gtid &get_gtid_persistor() { return (m_gtid_persister); }$/;"	f	class:Clone_Sys
get_header_size	arch/arch0log.cc	/^void Log_Arch_Client_Ctx::get_header_size(ib_uint64_t &file_sz, uint &header_sz,$/;"	f	class:Log_Arch_Client_Ctx
get_id	include/clone0snapshot.h	/^  ib_uint64_t get_id() { return (m_snapshot_id); }$/;"	f	class:Clone_Snapshot
get_id	include/log0ddl.h	/^  ulint get_id() const { return (m_id); }$/;"	f	class:Log_Type::DDL_Record
get_id	include/sync0policy.h	/^  latch_id_t get_id() const { return (m_id); }$/;"	f	class:BlockMutexPolicy
get_id	include/sync0types.h	/^  latch_id_t get_id() const { return (m_id); }$/;"	f	class:LatchMeta
get_id	include/sync0types.h	/^  latch_id_t get_id() const { return (m_id); }$/;"	f	struct:latch_t
get_increment	fsp/fsp0sysspace.cc	/^page_no_t SysTablespace::get_increment() const {$/;"	f	class:SysTablespace
get_index	handler/ha_innopart.cc	/^inline dict_index_t *Ha_innopart_share::get_index(uint part_id, uint keynr) {$/;"	f	class:Ha_innopart_share
get_index	include/clone0clone.h	/^  uint get_index() { return (m_clone_arr_index); }$/;"	f	class:Clone_Handle
get_index	include/clone0snapshot.h	/^  uint get_index() { return (m_snapshot_arr_idx); }$/;"	f	class:Clone_Snapshot
get_index_id	include/log0ddl.h	/^  ulint get_index_id() const { return (m_index_id); }$/;"	f	class:Log_Type::DDL_Record
get_index_list_length	include/zlob0first.h	/^  ulint get_index_list_length() const {$/;"	f	struct:lob::z_first_page_t
get_index_page_no	include/zlob0first.h	/^  page_no_t get_index_page_no() const {$/;"	f	struct:lob::z_first_page_t
get_info	lob/lob0util.cc	/^dberr_t get_info(ref_t &ref, dict_index_t *index, ulint &lob_version,$/;"	f	namespace:lob
get_info_about_prepared_transaction	trx/trx0trx.cc	/^static bool get_info_about_prepared_transaction(XA_recover_txn *txn_list,$/;"	f	file:
get_initial_vector	os/os0enc.cc	/^byte *Encryption::get_initial_vector() const { return m_iv; }$/;"	f	class:Encryption
get_innobase_type_from_mysql_dd_type	handler/ha_innodb.cc	/^ulint get_innobase_type_from_mysql_dd_type(ulint *unsigned_flag,$/;"	f
get_innobase_type_from_mysql_type	handler/ha_innodb.cc	/^ulint get_innobase_type_from_mysql_type(ulint *unsigned_flag, const void *f) {$/;"	f
get_instant_cols	include/dict0mem.h	/^  uint16_t get_instant_cols() const {$/;"	f	struct:dict_table_t
get_instrinsic_temp_tblsp	include/sess0sess.h	/^  ibt::Tablespace *get_instrinsic_temp_tblsp() {$/;"	f	class:innodb_session_t
get_io_fix	include/buf0buf.h	/^  buf_io_fix get_io_fix() const {$/;"	f	class:Cache_hint::buf_page_t
get_io_fix_snapshot	include/buf0buf.h	/^  buf_io_fix get_io_fix_snapshot() const {$/;"	f	class:Cache_hint::buf_page_t
get_is_reading_range_guard	include/row0mysql.h	/^  row_is_reading_range_guard_t get_is_reading_range_guard() {$/;"	f	struct:row_prebuilt_t
get_key	os/os0enc.cc	/^byte *Encryption::get_key() const { return m_key; }$/;"	f	class:Encryption
get_key_length	os/os0enc.cc	/^ulint Encryption::get_key_length() const { return m_klen; }$/;"	f	class:Encryption
get_keys_capacity	data/data0data.cc	/^uint32_t Multi_value_logger::get_keys_capacity(uint32_t log_size,$/;"	f	class:Multi_value_logger
get_labeled_directory	log/log0meb.cc	/^static bool get_labeled_directory(const char *label, std::string *dir) {$/;"	f	namespace:meb
get_last	include/lob0impl.h	/^  paddr_t get_last() const { return (mach_read_from_2(m_base + OFFSET_LAST)); }$/;"	f	struct:lob::plist_base_node_t
get_last_node	include/lob0impl.h	/^  plist_node_t get_last_node() const {$/;"	f	struct:lob::plist_base_node_t
get_last_stop_point	include/arch0arch.h	/^  lsn_t get_last_stop_point() const {$/;"	f	class:Arch_File_Ctx
get_last_trx_id	include/lob0first.h	/^  trx_id_t get_last_trx_id() const {$/;"	f	struct:lob::first_page_t
get_last_trx_id	include/zlob0first.h	/^  trx_id_t get_last_trx_id() const {$/;"	f	struct:lob::z_first_page_t
get_last_trx_undo_no	include/lob0first.h	/^  undo_no_t get_last_trx_undo_no() const {$/;"	f	struct:lob::first_page_t
get_last_trx_undo_no	include/zlob0first.h	/^  undo_no_t get_last_trx_undo_no() const {$/;"	f	struct:lob::z_first_page_t
get_latest_stop_lsn	include/arch0arch.h	/^  lsn_t get_latest_stop_lsn() const { return (m_latest_stop_lsn); }$/;"	f	class:Arch_Page_Sys
get_len	include/lob0impl.h	/^  ulint get_len() const { return (mach_read_from_4(m_base + OFFSET_LEN)); }$/;"	f	struct:lob::plist_base_node_t
get_level	include/sync0types.h	/^  latch_level_t get_level() const { return (m_level); }$/;"	f	class:LatchMeta
get_level	sync/sync0debug.cc	/^  latch_level_t get_level() const { return (m_level); }$/;"	f	struct:Latched
get_level_name	include/sync0types.h	/^  const char *get_level_name() const { return (m_level_name); }$/;"	f	class:LatchMeta
get_list	include/clone0repl.h	/^  Gitd_info_list &get_list(uint64_t list_number) {$/;"	f	class:Clone_persist_gtid
get_lob_page_info	lob/lob0lob.cc	/^ulint ref_t::get_lob_page_info(const dict_index_t *index,$/;"	f	class:lob::ref_t
get_lob_undo	include/row0mysql.h	/^  lob::undo_vers_t *get_lob_undo() { return (&m_lob_undo); }$/;"	f	struct:row_prebuilt_t
get_lob_version	include/lob0first.h	/^  uint32_t get_lob_version() {$/;"	f	struct:lob::first_page_t
get_lob_version	include/lob0index.h	/^  uint32_t get_lob_version() const {$/;"	f	struct:lob::index_entry_t
get_lob_version	include/zlob0first.h	/^  uint32_t get_lob_version() {$/;"	f	struct:lob::z_first_page_t
get_lob_version	include/zlob0index.h	/^  uint32_t get_lob_version() const {$/;"	f	struct:lob::z_index_entry_t
get_lob_version_ptr	include/lob0index.h	/^  byte *get_lob_version_ptr() const { return (m_node + OFFSET_LOB_VERSION); }$/;"	f	struct:lob::index_entry_t
get_locator	clone/clone0clone.cc	/^byte *Clone_Handle::get_locator(uint &loc_len) {$/;"	f	class:Clone_Handle
get_log_len	data/data0data.cc	/^uint32_t Multi_value_logger::get_log_len(bool precise) const {$/;"	f	class:Multi_value_logger
get_log_mode	include/lob0lob.h	/^  mtr_log_t get_log_mode() { return (m_mtr->get_log_mode()); }$/;"	f	class:lob::BtrContext
get_low_match	include/btr0pcur.h	/^inline ulint btr_pcur_t::get_low_match() const {$/;"	f	class:btr_pcur_t
get_marked_space_num	include/trx0purge.h	/^  space_id_t get_marked_space_num() const {$/;"	f	class:undo::Truncate
get_master_key_id	os/os0enc.cc	/^uint32_t Encryption::get_master_key_id() { return s_master_key_id; }$/;"	f	class:Encryption
get_max_file_name_length	include/clone0snapshot.h	/^  size_t get_max_file_name_length() { return (m_max_file_name_len); }$/;"	f	class:Clone_Snapshot
get_max_set_bit	clone/clone0desc.cc	/^uint32_t Chnunk_Bitmap::get_max_set_bit() {$/;"	f	class:Chnunk_Bitmap
get_max_size	include/dict0mem.h	/^  ulint get_max_size() const { return (dtype_get_max_size_low(mtype, len)); }$/;"	f	struct:dict_col_t
get_max_space_id	fil/fil0fil.cc	/^  space_id_t get_max_space_id() const { return m_max_assigned_id; }$/;"	f	class:Fil_system
get_mbmaxlen	include/dict0mem.h	/^  ulint get_mbmaxlen() const { return (DATA_MBMAXLEN(mbminmaxlen)); }$/;"	f	struct:dict_col_t
get_mbminlen	include/dict0mem.h	/^  ulint get_mbminlen() const { return (DATA_MBMINLEN(mbminmaxlen)); }$/;"	f	struct:dict_col_t
get_mem_GlobalMemoryStatus	handler/ha_innodb.cc	/^static double get_mem_GlobalMemoryStatus() {$/;"	f	file:
get_mem_heap	include/mem0mem.h	/^  mem_heap_t *get_mem_heap() const { return (m_heap); }$/;"	f	class:mem_heap_allocator
get_mem_key	include/ut0new.h	/^  PSI_memory_key get_mem_key() const {$/;"	f	class:ut_allocator
get_mem_sysconf	handler/ha_innodb.cc	/^static double get_mem_sysconf() {$/;"	f	file:
get_memory_buffer_size	handler/ha_innodb.cc	/^longlong ha_innobase::get_memory_buffer_size() const {$/;"	f	class:ha_innobase
get_min_size	include/dict0mem.h	/^  ulint get_min_size() const {$/;"	f	struct:dict_col_t
get_min_size	include/dict0mem.h	/^  ulint get_min_size() const {$/;"	f	struct:dict_index_t
get_min_unset_bit	clone/clone0desc.cc	/^uint32_t Chnunk_Bitmap::get_min_unset_bit() {$/;"	f	class:Chnunk_Bitmap
get_mlog_string	log/log0recv.cc	/^const char *get_mlog_string(mlog_id_t type) {$/;"	f
get_mtr	include/lob0lob.h	/^  mtr_t *get_mtr() { return (m_mtr); }$/;"	f	class:lob::BtrContext
get_mutex	include/arch0arch.h	/^  ib_mutex_t *get_mutex() { return (&m_mutex); }$/;"	f	class:Arch_Page_Sys
get_mutex	include/clone0clone.h	/^  ib_mutex_t *get_mutex() { return (&m_clone_sys_mutex); }$/;"	f	class:Clone_Sys
get_mutex	include/clone0clone.h	/^  ib_mutex_t *get_mutex() { return (&m_state_mutex); }$/;"	f	class:Clone_Task_Manager
get_mutex	lock/lock0latches.cc	/^Lock_mutex &Latches::Page_shards::get_mutex(const page_id_t &page_id) {$/;"	f	class:locksys::Latches::Page_shards
get_mutex	lock/lock0latches.cc	/^Lock_mutex &Latches::Table_shards::get_mutex(const dict_table_t &table) {$/;"	f	class:locksys::Latches::Table_shards
get_mutex	lock/lock0latches.cc	/^const Lock_mutex &Latches::Page_shards::get_mutex($/;"	f	class:locksys::Latches::Page_shards
get_mutex	lock/lock0latches.cc	/^const Lock_mutex &Latches::Table_shards::get_mutex($/;"	f	class:locksys::Latches::Table_shards
get_my_dd_index	handler/ha_innodb.cc	/^const dd::Index *get_my_dd_index<dd::Index>(const dd::Index *dd_index) {$/;"	f
get_my_dd_index	handler/ha_innodb.cc	/^const dd::Index *get_my_dd_index<dd::Partition_index>($/;"	f
get_mysql_key	handler/ha_innopart.cc	/^inline uint Ha_innopart_share::get_mysql_key(uint part_id,$/;"	f	class:Ha_innopart_share
get_n_cols	include/dict0mem.h	/^  ulint get_n_cols() const {$/;"	f	struct:dict_table_t
get_n_dir_entries	include/lob0impl.h	/^  ulint get_n_dir_entries() const {$/;"	f	struct:lob::z_frag_page_t
get_n_ext	include/data0data.h	/^  inline ulint get_n_ext() const {$/;"	f	struct:dtuple_t
get_n_frag_entries	include/lob0impl.h	/^  ulint get_n_frag_entries() const {$/;"	f	struct:lob::z_frag_node_page_t
get_n_frag_entries	lob/zlob0first.cc	/^ulint z_first_page_t::get_n_frag_entries() const {$/;"	f	class:lob::z_first_page_t
get_n_frags	include/lob0impl.h	/^  ulint get_n_frags() const {$/;"	f	struct:lob::z_frag_entry_t
get_n_frags	include/lob0impl.h	/^  ulint get_n_frags() const {$/;"	f	struct:lob::z_frag_page_t
get_n_index_entries	lob/lob0impl.cc	/^ulint z_index_page_t::get_n_index_entries() const {$/;"	f	class:lob::z_index_page_t
get_n_index_entries	lob/zlob0first.cc	/^ulint z_first_page_t::get_n_index_entries() const {$/;"	f	class:lob::z_first_page_t
get_n_nullable_before	include/dict0mem.h	/^  uint32_t get_n_nullable_before(uint32_t nth) const {$/;"	f	struct:dict_index_t
get_n_rows	dict/dict0stats.cc	/^ib_uint64_t TableStatsRecord::get_n_rows() const { return (m_n_rows); }$/;"	f	class:TableStatsRecord
get_n_sys_cols	include/dict0mem.h	/^  uint16_t get_n_sys_cols() const {$/;"	f	struct:dict_table_t
get_n_user_cols	include/dict0mem.h	/^  uint16_t get_n_user_cols() const {$/;"	f	struct:dict_table_t
get_name	include/sync0types.h	/^  const char *get_name() const { return (m_name); }$/;"	f	class:LatchMeta
get_new_file_path	include/log0ddl.h	/^  const char *get_new_file_path() const { return (m_new_file_path); }$/;"	f	class:Log_Type::DDL_Record
get_next	include/lob0impl.h	/^  fil_addr_t get_next() const {$/;"	f	struct:lob::z_frag_entry_t
get_next	include/lob0impl.h	/^  paddr_t get_next() const { return (mach_read_from_2(m_node + OFFSET_NEXT)); }$/;"	f	class:lob::plist_node_t
get_next	include/lob0index.h	/^  fil_addr_t get_next() const {$/;"	f	struct:lob::index_entry_t
get_next	include/zlob0index.h	/^  fil_addr_t get_next() const {$/;"	f	struct:lob::z_index_entry_t
get_next_available_space_num	trx/trx0purge.cc	/^space_id_t get_next_available_space_num() {$/;"	f	namespace:undo
get_next_block	clone/clone0snapshot.cc	/^int Clone_Snapshot::get_next_block(uint chunk_num, uint &block_num,$/;"	f	class:Clone_Snapshot
get_next_chunk	clone/clone0clone.cc	/^uint32_t Clone_Task_Manager::get_next_chunk() {$/;"	f	class:Clone_Task_Manager
get_next_frag	include/lob0impl.h	/^  frag_node_t get_next_frag() {$/;"	f	struct:lob::frag_node_t
get_next_id	clone/clone0clone.cc	/^ib_uint64_t Clone_Sys::get_next_id() {$/;"	f	class:Clone_Sys
get_next_incomplete_chunk	clone/clone0clone.cc	/^uint32_t Clone_Task_Manager::get_next_incomplete_chunk(uint32 &block_num) {$/;"	f	class:Clone_Task_Manager
get_next_node	include/lob0impl.h	/^  frag_node_t get_next_node() { return (get_next_frag()); }$/;"	f	struct:lob::frag_node_t
get_next_node	include/lob0impl.h	/^  plist_node_t get_next_node() const {$/;"	f	class:lob::plist_node_t
get_next_page	clone/clone0snapshot.cc	/^int Clone_Snapshot::get_next_page(uint chunk_num, uint &block_num,$/;"	f	class:Clone_Snapshot
get_next_page	include/lob0util.h	/^  page_no_t get_next_page() {$/;"	f	struct:lob::basic_page_t
get_next_page_no	include/buf0buf.h	/^  page_no_t get_next_page_no() const {$/;"	f	struct:Cache_hint::buf_block_t
get_next_page_no	include/lob0impl.h	/^  page_no_t get_next_page_no() const { return (m_block->get_next_page_no()); }$/;"	f	struct:lob::z_frag_page_t
get_next_page_no	include/lob0impl.h	/^  page_no_t get_next_page_no() const {$/;"	f	struct:lob::z_frag_node_page_t
get_next_page_no	include/lob0impl.h	/^  page_no_t get_next_page_no() const {$/;"	f	struct:lob::z_index_page_t
get_next_redo_rseg	trx/trx0trx.cc	/^static trx_rseg_t *get_next_redo_rseg() {$/;"	f	file:
get_next_redo_rseg_from_trx_sys	trx/trx0trx.cc	/^static trx_rseg_t *get_next_redo_rseg_from_trx_sys() {$/;"	f	file:
get_next_redo_rseg_from_undo_spaces	trx/trx0trx.cc	/^static trx_rseg_t *get_next_redo_rseg_from_undo_spaces() {$/;"	f	file:
get_next_state	clone/clone0snapshot.cc	/^Snapshot_State Clone_Snapshot::get_next_state() {$/;"	f	class:Clone_Snapshot
get_next_temp_rseg	trx/trx0trx.cc	/^static trx_rseg_t *get_next_temp_rseg() {$/;"	f	file:
get_next_trx	handler/p_s.cc	/^inline trx_t *get_next_trx(const trx_t *trx, bool read_write) {$/;"	f
get_node	include/lob0impl.h	/^  plist_node_t get_node(paddr_t addr) {$/;"	f	struct:lob::plist_base_node_t
get_node	include/lob0index.h	/^  byte *get_node() const { return (m_node); }$/;"	f	struct:lob::index_entry_t
get_node	include/zlob0index.h	/^  flst_node_t *get_node() { return (m_node); }$/;"	f	struct:lob::z_index_entry_t
get_node_ptr	include/lob0index.h	/^  byte *get_node_ptr() const { return (m_node); }$/;"	f	struct:lob::index_entry_t
get_nolog_flush_loop	include/mtr0mtr.h	/^    uint32_t get_nolog_flush_loop() const { return (NOLOG_MAX_FLUSH_LOOP); }$/;"	f	class:mtr_t::Logging
get_nth_default	include/dict0mem.h	/^  const byte *get_nth_default(ulint nth, ulint *length) const {$/;"	f	struct:dict_index_t
get_nth_dir_entry	include/lob0impl.h	/^  ulint get_nth_dir_entry(ulint frag_id) {$/;"	f	struct:lob::z_frag_page_t
get_null_size	include/dict0mem.h	/^  ulint get_null_size(ulint comp) const { return (get_fixed_size(comp)); }$/;"	f	struct:dict_col_t
get_num_chunks	include/clone0snapshot.h	/^  uint get_num_chunks() { return (m_num_current_chunks); }$/;"	f	class:Clone_Snapshot
get_num_pages	arch/arch0page.cc	/^bool Arch_Page_Sys::get_num_pages(Arch_Page_Pos start_pos,$/;"	f	class:Arch_Page_Sys
get_num_pages	arch/arch0page.cc	/^int Arch_Page_Sys::get_num_pages(lsn_t &start_id, lsn_t &stop_id,$/;"	f	class:Arch_Page_Sys
get_num_parts	handler/ha_innopart.h	/^  uint get_num_parts() const {$/;"	f	class:Ha_innopart_share
get_num_tasks	clone/clone0api.cc	/^  size_t get_num_tasks() const { return (m_num_tasks); }$/;"	f	class:__anon2::Fixup_data	file:
get_number	include/arch0arch.h	/^  uint64_t get_number() const { return (m_number); }$/;"	f	class:Arch_Block
get_offset	include/arch0arch.h	/^  uint64_t get_offset() const { return (m_offset); }$/;"	f	class:Arch_File_Ctx
get_offsets	include/lob0lob.h	/^  ulint *get_offsets() const { return (m_offsets); }$/;"	f	class:lob::BtrContext
get_old_file_path	include/log0ddl.h	/^  const char *get_old_file_path() const { return (m_old_file_path); }$/;"	f	class:Log_Type::DDL_Record
get_oldest_lsn	include/arch0arch.h	/^  lsn_t get_oldest_lsn() const { return (m_oldest_lsn); }$/;"	f	class:Arch_Block
get_oldest_trx_no	include/clone0repl.h	/^  trx_id_t get_oldest_trx_no() {$/;"	f	class:Clone_persist_gtid
get_oldest_view	read/read0read.cc	/^ReadView *MVCC::get_oldest_view() const {$/;"	f	class:MVCC
get_oper_mutex	include/arch0arch.h	/^  ib_mutex_t *get_oper_mutex() { return (&m_oper_mutex); }$/;"	f	class:Arch_Page_Sys
get_owned_latches	buf/buf0buf.cc	/^  static Buf_io_fix_latching_rules::latches_set_t get_owned_latches($/;"	f	class:buf_page_t::Latching_rules_helpers
get_page	include/btr0pcur.h	/^inline const page_t *btr_pcur_t::get_page() const {$/;"	f	class:btr_pcur_t
get_page	include/btr0pcur.h	/^inline page_t *btr_pcur_t::get_page() {$/;"	f	class:btr_pcur_t
get_page_cur	include/btr0pcur.h	/^inline const page_cur_t *btr_pcur_t::get_page_cur() const {$/;"	f	class:btr_pcur_t
get_page_cur	include/btr0pcur.h	/^inline page_cur_t *btr_pcur_t::get_page_cur() { return (&m_btr_cur.page_cur); }$/;"	f	class:btr_pcur_t
get_page_cur	include/btr0pcur.h	/^inline page_cur_t *btr_pcur_t::get_page_cur() {$/;"	f	class:btr_pcur_t
get_page_for_write	clone/clone0snapshot.cc	/^int Clone_Snapshot::get_page_for_write(const page_id_t &page_id,$/;"	f	class:Clone_Snapshot
get_page_id	include/buf0buf.h	/^  const page_id_t &get_page_id() const { return page.id; }$/;"	f	struct:Cache_hint::buf_block_t
get_page_id	include/lob0util.h	/^  page_id_t get_page_id() const {$/;"	f	struct:lob::basic_page_t
get_page_id	include/lock0priv.h	/^  const page_id_t &get_page_id() const { return m_page_id; }$/;"	f	struct:RecID
get_page_id	include/zlob0first.h	/^  page_id_t get_page_id() const {$/;"	f	struct:lob::z_first_page_t
get_page_no	include/buf0buf.h	/^  page_no_t get_page_no() const { return (page.id.page_no()); }$/;"	f	struct:Cache_hint::buf_block_t
get_page_no	include/lob0impl.h	/^  page_no_t get_page_no() const { return (m_block->get_page_no()); }$/;"	f	struct:lob::z_frag_page_t
get_page_no	include/lob0impl.h	/^  page_no_t get_page_no() const {$/;"	f	struct:lob::z_data_page_t
get_page_no	include/lob0impl.h	/^  page_no_t get_page_no() const {$/;"	f	struct:lob::z_frag_entry_t
get_page_no	include/lob0impl.h	/^  page_no_t get_page_no() const {$/;"	f	struct:lob::z_frag_node_page_t
get_page_no	include/lob0impl.h	/^  page_no_t get_page_no() const {$/;"	f	struct:lob::z_index_page_t
get_page_no	include/lob0index.h	/^  page_no_t get_page_no() const { return (m_page_no); }$/;"	f	struct:lob::index_entry_mem_t
get_page_no	include/lob0index.h	/^  page_no_t get_page_no() const {$/;"	f	struct:lob::index_entry_t
get_page_no	include/lob0lob.h	/^  page_no_t get_page_no() const {$/;"	f	class:lob::BtrContext
get_page_no	include/lob0util.h	/^  page_no_t get_page_no() const {$/;"	f	struct:lob::basic_page_t
get_page_no	include/log0ddl.h	/^  page_no_t get_page_no() const { return (m_page_no); }$/;"	f	class:Log_Type::DDL_Record
get_page_no	include/zlob0first.h	/^  page_no_t get_page_no() const { return (m_block->page.id.page_no()); }$/;"	f	struct:lob::z_first_page_t
get_page_size	dict/dict0mem.cc	/^page_size_t dict_index_t::get_page_size() const {$/;"	f	class:dict_index_t
get_page_size	include/lob0impl.h	/^  ulint get_page_size() const {$/;"	f	struct:lob::z_frag_page_t
get_page_size	include/lob0lob.h	/^  page_size_t get_page_size() const {$/;"	f	struct:lob::DeleteContext
get_page_type	include/buf0buf.h	/^  page_type_t get_page_type() const {$/;"	f	struct:Cache_hint::buf_block_t
get_page_type	include/lob0first.h	/^  page_type_t get_page_type() { return (basic_page_t::get_page_type()); }$/;"	f	struct:lob::first_page_t
get_page_type	include/lob0first.h	/^  static page_type_t get_page_type(dict_index_t *index,$/;"	f	struct:lob::first_page_t
get_page_type	include/lob0impl.h	/^  page_type_t get_page_type() const {$/;"	f	struct:lob::z_frag_page_t
get_page_type	include/lob0util.h	/^  page_type_t get_page_type() const {$/;"	f	struct:lob::basic_page_t
get_page_type	include/zlob0first.h	/^  page_type_t get_page_type() const {$/;"	f	struct:lob::z_first_page_t
get_page_type_str	include/lob0impl.h	/^  const char *get_page_type_str() const {$/;"	f	struct:lob::z_frag_page_t
get_page_zip	include/lob0lob.h	/^  page_zip_des_t *get_page_zip() const {$/;"	f	class:lob::BtrContext
get_pageno_ptr	include/lob0index.h	/^  byte *get_pageno_ptr() const { return (m_node + OFFSET_PAGE_NO); }$/;"	f	struct:lob::index_entry_t
get_pages	arch/arch0page.cc	/^bool Arch_Page_Sys::get_pages(Arch_Group *group, Arch_Page_Pos *read_pos,$/;"	f	class:Arch_Page_Sys
get_pages	arch/arch0page.cc	/^int Arch_Page_Sys::get_pages(MYSQL_THD thd, Page_Track_Callback cbk_func,$/;"	f	class:Arch_Page_Sys
get_pages	arch/arch0page.cc	/^int Page_Arch_Client_Ctx::get_pages(Page_Arch_Cbk *cbk_func, void *cbk_ctx,$/;"	f	class:Page_Arch_Client_Ctx
get_pages_from_size	include/fsp0sysspace.h	/^  page_no_t get_pages_from_size(os_offset_t size) {$/;"	f	class:SysTablespace
get_part_from_dd	dict/dict0dd.cc	/^static void get_part_from_dd(const dd::Partition *dd_part, bool lower_case,$/;"	f	namespace:dict_name
get_partial_flush_block	include/arch0arch.h	/^  Arch_Block *get_partial_flush_block() const {$/;"	f	struct:ArchPageData
get_partition	dict/dict0dd.cc	/^void get_partition(const std::string &partition, bool convert,$/;"	f	namespace:dict_name
get_partition_row_type	handler/ha_innopart.cc	/^enum row_type ha_innopart::get_partition_row_type($/;"	f	class:ha_innopart
get_partition_separators	dict/dict0dd.cc	/^static void get_partition_separators(bool is_57, std::string &part_sep,$/;"	f	namespace:dict_name
get_pass	handler/p_s.cc	/^  scan_pass get_pass() { return m_scan_pass; }$/;"	f	class:Innodb_trx_scan_state
get_pct_for_dirty	buf/buf0flu.cc	/^ulint get_pct_for_dirty() {$/;"	f	namespace:Adaptive_flush
get_pct_for_lsn	buf/buf0flu.cc	/^ulint get_pct_for_lsn(lsn_t age) \/*!< in: current age of LSN. *\/$/;"	f	namespace:Adaptive_flush
get_pfs_key	include/sync0types.h	/^  pfs_key_t get_pfs_key() const { return (m_pfs_key); }$/;"	f	class:LatchMeta
get_phy_size	include/arch0arch.h	/^  uint64_t get_phy_size() const {$/;"	f	class:Arch_File_Ctx
get_prev	include/lob0impl.h	/^  fil_addr_t get_prev() const {$/;"	f	struct:lob::z_frag_entry_t
get_prev	include/lob0impl.h	/^  paddr_t get_prev() const { return (mach_read_from_2(m_node + OFFSET_PREV)); }$/;"	f	class:lob::plist_node_t
get_prev	include/lob0index.h	/^  fil_addr_t get_prev() const {$/;"	f	struct:lob::index_entry_t
get_prev	include/zlob0index.h	/^  fil_addr_t get_prev() const {$/;"	f	struct:lob::z_index_entry_t
get_prev_frag	include/lob0impl.h	/^  frag_node_t get_prev_frag() {$/;"	f	struct:lob::frag_node_t
get_prev_node	include/lob0impl.h	/^  frag_node_t get_prev_node() { return (get_prev_frag()); }$/;"	f	struct:lob::frag_node_t
get_prev_node	include/lob0impl.h	/^  plist_node_t get_prev_node() const {$/;"	f	class:lob::plist_node_t
get_prev_page_no	include/buf0buf.h	/^  page_no_t get_prev_page_no() const {$/;"	f	struct:Cache_hint::buf_block_t
get_prev_page_no	include/lob0impl.h	/^  page_no_t get_prev_page_no() const { return (get_prev_page_no(m_mtr)); }$/;"	f	struct:lob::z_frag_page_t
get_prev_page_no	include/lob0impl.h	/^  page_no_t get_prev_page_no(mtr_t *mtr) const {$/;"	f	struct:lob::z_frag_page_t
get_previous_blob_block	lob/lob0ins.cc	/^buf_block_t *BaseInserter::get_previous_blob_block() {$/;"	f	class:lob::BaseInserter
get_previous_blob_page	lob/lob0ins.cc	/^page_t *BaseInserter::get_previous_blob_page() {$/;"	f	class:lob::BaseInserter
get_real_path	fil/fil0fil.cc	/^std::string Fil_path::get_real_path(const std::string &path, bool force) {$/;"	f	class:Fil_path
get_real_row_type	handler/ha_innodb.cc	/^enum row_type ha_innobase::get_real_row_type($/;"	f	class:ha_innobase
get_rec	include/btr0pcur.h	/^inline const rec_t *btr_pcur_t::get_rec() const {$/;"	f	class:btr_pcur_t
get_rec	include/btr0pcur.h	/^inline rec_t *btr_pcur_t::get_rec() { return (m_btr_cur.page_cur.rec); }$/;"	f	class:btr_pcur_t
get_rec	include/btr0pcur.h	/^inline rec_t *btr_pcur_t::get_rec() {$/;"	f	class:btr_pcur_t
get_rec_offset	include/lob0lob.h	/^  ulint get_rec_offset() const { return (page_offset(m_rec)); }$/;"	f	class:lob::BtrContext
get_recent_version	fil/fil0fil.cc	/^uint32_t fil_space_t::get_recent_version() const {$/;"	f	class:fil_space_t
get_redo_file_size	include/clone0snapshot.h	/^  ib_uint64_t get_redo_file_size() { return (m_redo_file_size); }$/;"	f	class:Clone_Snapshot
get_reference_count	fil/fil0fil.cc	/^size_t fil_space_t::get_reference_count() const {$/;"	f	class:fil_space_t
get_rel_pos	include/btr0pcur.h	/^inline ulint btr_pcur_t::get_rel_pos() const {$/;"	f	class:btr_pcur_t
get_reserved_space	fil/fil0fil.cc	/^fil_space_t *Fil_shard::get_reserved_space(space_id_t space_id) {$/;"	f	class:Fil_shard
get_reset_lsn	arch/arch0page.cc	/^lsn_t Arch_Block::get_reset_lsn(byte *block) {$/;"	f	class:Arch_Block
get_row_format	handler/ha_innodb.cc	/^static rec_format_t get_row_format(ulong row_format) {$/;"	f	file:
get_rpl_slave_tblsp	srv/srv0tmp.cc	/^Tablespace *get_rpl_slave_tblsp() {$/;"	f	namespace:ibt
get_sanity_check_status	include/fsp0sysspace.h	/^  bool get_sanity_check_status() { return (m_sanity_checks_done); }$/;"	f	class:SysTablespace
get_saved_rec	include/log0recv.h	/^  bool get_saved_rec(size_t rec_num, space_id_t &space_id, page_no_t &page_no,$/;"	f	struct:recv_sys_t
get_scan_space_num	include/trx0purge.h	/^  space_id_t get_scan_space_num() const {$/;"	f	class:undo::Truncate
get_se_private_data	handler/ha_innodb.cc	/^bool ha_innobase::get_se_private_data(dd::Table *dd_table, bool reset) {$/;"	f	class:ha_innobase
get_seg_id	include/fsp0fsp.h	/^  uint64_t get_seg_id() const {$/;"	f	class:File_segment_inode
get_segment_no_from_slot	os/os0file.cc	/^ulint AIO::get_segment_no_from_slot(const AIO *array, const Slot *slot) {$/;"	f	class:AIO
get_self	lob/lob0index.cc	/^fil_addr_t index_entry_t::get_self() const {$/;"	f	class:lob::index_entry_t
get_self	lob/zlob0index.cc	/^fil_addr_t z_index_entry_t::get_self() const {$/;"	f	class:lob::z_index_entry_t
get_self_addr	include/lob0impl.h	/^  fil_addr_t get_self_addr() const {$/;"	f	struct:lob::z_data_page_t
get_self_addr	include/lob0impl.h	/^  fil_addr_t get_self_addr() const {$/;"	f	struct:lob::z_frag_entry_t
get_self_addr	include/zlob0first.h	/^  fil_addr_t get_self_addr() const {$/;"	f	struct:lob::z_first_page_t
get_serialized_length	clone/clone0desc.cc	/^size_t Chnunk_Bitmap::get_serialized_length() {$/;"	f	class:Chnunk_Bitmap
get_serialized_length	clone/clone0desc.cc	/^size_t Chunk_Info::get_serialized_length(uint32_t num_tasks) {$/;"	f	class:Chunk_Info
get_shard	lock/lock0latches.cc	/^size_t Latches::Page_shards::get_shard(const page_id_t &page_id) {$/;"	f	class:locksys::Latches::Page_shards
get_shard	lock/lock0latches.cc	/^size_t Latches::Table_shards::get_shard(const dict_table_t &table) {$/;"	f	class:locksys::Latches::Table_shards
get_share	handler/ha_innodb.cc	/^static INNOBASE_SHARE *get_share(const char *table_name) {$/;"	f	file:
get_size	include/arch0arch.h	/^  uint64_t get_size() const { return (m_size); }$/;"	f	class:Arch_File_Ctx
get_slot	mtr/mtr0mtr.cc	/^  mtr_memo_slot_t *get_slot() const {$/;"	f	struct:Find_page
get_snapshot	include/clone0clone.h	/^  Clone_Snapshot *get_snapshot() { return (m_clone_snapshot); }$/;"	f	class:Clone_Task_Manager
get_space	include/buf0buf.h	/^  inline fil_space_t *get_space() const { return m_space; }$/;"	f	class:Cache_hint::buf_page_t
get_space_id	include/log0ddl.h	/^  space_id_t get_space_id() const { return (m_space_id); }$/;"	f	class:Log_Type::DDL_Record
get_space_max_id	handler/ha_innodb.cc	/^  space_id_t get_space_max_id() const { return (m_space_max_id); }$/;"	f	class:Validate_files	file:
get_spatial_status	include/dict0mem.h	/^  spatial_status_t get_spatial_status() const {$/;"	f	struct:dict_col_t
get_src_len	include/dict0sdi.h	/^  uint32_t get_src_len() const { return (m_src_len); }$/;"	f	class:Sdi_Compressor
get_state	include/arch0arch.h	/^  Arch_Blk_State get_state() const { return (m_state); }$/;"	f	class:Arch_Block
get_state	include/clone0clone.h	/^  Snapshot_State get_state() { return (m_current_state); }$/;"	f	class:Clone_Task_Manager
get_state	include/clone0snapshot.h	/^  Snapshot_State get_state() { return (m_snapshot_state); }$/;"	f	class:Clone_Snapshot
get_state_info	clone/clone0snapshot.cc	/^void Clone_Snapshot::get_state_info(bool do_estimate,$/;"	f	class:Clone_Snapshot
get_status	include/arch0arch.h	/^  void get_status(std::vector<std::pair<lsn_t, bool>> &status) {$/;"	f	class:Arch_File_Ctx
get_status	include/arch0arch.h	/^  void get_status(std::vector<std::pair<lsn_t, bool>> &status) {$/;"	f	class:Arch_Group
get_status	include/arch0arch.h	/^  void get_status(std::vector<std::pair<lsn_t, bool>> &status) {$/;"	f	class:Arch_Page_Sys
get_stop_lsn	arch/arch0page.cc	/^lsn_t Arch_Block::get_stop_lsn(byte *block) {$/;"	f	class:Arch_Block
get_stop_lsn	include/arch0arch.h	/^  lsn_t get_stop_lsn() const { return (m_stop_lsn); }$/;"	f	class:Arch_Block
get_stop_pos	include/arch0arch.h	/^  Arch_Page_Pos get_stop_pos() const { return (m_stop_pos); }$/;"	f	class:Arch_Group
get_sum_of_other_index_size	dict/dict0stats.cc	/^ulint TableStatsRecord::get_sum_of_other_index_size() const {$/;"	f	class:TableStatsRecord
get_sum_of_sizes	include/fsp0space.h	/^  page_no_t get_sum_of_sizes() const {$/;"	f	class:Tablespace
get_sys_client	include/arch0arch.h	/^  Page_Arch_Client_Ctx *get_sys_client() const { return (m_ctx); }$/;"	f	class:Arch_Page_Sys
get_sys_col	include/dict0mem.h	/^  dict_col_t *get_sys_col(ulint sys) const {$/;"	f	struct:dict_table_t
get_sys_col_pos	dict/dict0mem.cc	/^ulint dict_index_t::get_sys_col_pos(ulint type) const {$/;"	f	class:dict_index_t
get_sys_mem	handler/ha_innodb.cc	342;"	d	file:
get_sys_mem	handler/ha_innodb.cc	343;"	d	file:
get_sys_mem	handler/ha_innodb.cc	349;"	d	file:
get_sys_mem	handler/ha_innodb.cc	350;"	d	file:
get_table	dict/dict0dd.cc	/^void get_table(const std::string &dict_name, bool convert, std::string &schema,$/;"	f	namespace:dict_name
get_table	dict/dict0dd.cc	/^void get_table(const std::string &dict_name, std::string &schema,$/;"	f	namespace:dict_name
get_table_id	include/dict0mem.h	/^  table_id_t get_table_id() const { return (m_id); }$/;"	f	class:PersistentTableMetadata
get_table_id	include/log0ddl.h	/^  table_id_t get_table_id() const { return (m_table_id); }$/;"	f	class:Log_Type::DDL_Record
get_table_name	dict/dict0dd.cc	/^void dict_table_t::get_table_name(std::string &schema, std::string &table) {$/;"	f	class:dict_table_t
get_table_name_info	trx/trx0trx.cc	/^static bool get_table_name_info(st_handler_tablename *table,$/;"	f	file:
get_table_part	handler/ha_innopart.h	/^  inline dict_table_t *get_table_part(uint part_id) const {$/;"	f	class:Ha_innopart_share
get_table_part_ref	handler/ha_innopart.h	/^  inline dict_table_t **get_table_part_ref(uint part_id) {$/;"	f	class:Ha_innopart_share
get_table_parts	dict/dict0dd.cc	/^static void get_table_parts(const std::string &dict_name, std::string &schema,$/;"	f	namespace:dict_name
get_table_share	handler/ha_innopart.h	/^  const TABLE_SHARE *get_table_share() const { return (m_table_share); }$/;"	f	class:Ha_innopart_share
get_tablespace_full_status	include/fsp0sysspace.h	/^  bool get_tablespace_full_status() { return (m_is_tablespace_full); }$/;"	f	class:SysTablespace
get_tablespace_id	fil/fil0fil.cc	/^space_id_t Fil_system::get_tablespace_id(const std::string &filename) {$/;"	f	class:Fil_system
get_task_by_index	include/clone0clone.h	/^  Clone_Task *get_task_by_index(uint index) {$/;"	f	class:Clone_Task_Manager
get_tbl_name	dict/dict0stats.cc	/^char *TableStatsRecord::get_tbl_name() const { return (m_tbl_name); }$/;"	f	class:TableStatsRecord
get_thread_id	include/log0ddl.h	/^  ulint get_thread_id() const { return (m_thread_id); }$/;"	f	class:Log_Type::DDL_Record
get_total_free_len	include/lob0impl.h	/^  ulint get_total_free_len() const {$/;"	f	struct:lob::z_frag_entry_t
get_total_free_len	lob/lob0impl.cc	/^ulint z_frag_page_t::get_total_free_len() const {$/;"	f	class:lob::z_frag_page_t
get_total_len	include/lob0impl.h	/^  ulint get_total_len() const {$/;"	f	struct:lob::frag_node_t
get_total_modified_bytes	include/row0upd.h	/^  static size_t get_total_modified_bytes(const Binary_diff_vector &bdv) {$/;"	f	struct:upd_t
get_total_stored_data	lob/lob0impl.cc	/^ulint z_frag_page_t::get_total_stored_data() const {$/;"	f	class:lob::z_frag_page_t
get_trx_id	data/data0data.cc	/^trx_id_t dtuple_t::get_trx_id() const {$/;"	f	class:dtuple_t
get_trx_id	include/lob0index.h	/^  trx_id_t get_trx_id() const {$/;"	f	struct:lob::index_entry_t
get_trx_id	include/zlob0index.h	/^  trx_id_t get_trx_id() const {$/;"	f	struct:lob::z_index_entry_t
get_trx_id_modifier	include/lob0index.h	/^  trx_id_t get_trx_id_modifier() const {$/;"	f	struct:lob::index_entry_t
get_trx_id_modifier	include/zlob0index.h	/^  trx_id_t get_trx_id_modifier() const {$/;"	f	struct:lob::z_index_entry_t
get_trx_no	include/trx0types.h	/^  trx_id_t get_trx_no() const { return (m_trx_no); }$/;"	f	class:TrxUndoRsegs
get_trx_undo_no	include/lob0index.h	/^  undo_no_t get_trx_undo_no() const {$/;"	f	struct:lob::index_entry_t
get_trx_undo_no	include/zlob0index.h	/^  undo_no_t get_trx_undo_no() const {$/;"	f	struct:lob::z_index_entry_t
get_trx_undo_no_modifier	include/lob0index.h	/^  undo_no_t get_trx_undo_no_modifier() const {$/;"	f	struct:lob::index_entry_t
get_trx_undo_no_modifier	include/zlob0index.h	/^  undo_no_t get_trx_undo_no_modifier() const {$/;"	f	struct:lob::z_index_entry_t
get_trx_undo_no_modifier_ptr	include/lob0index.h	/^  byte *get_trx_undo_no_modifier_ptr() const {$/;"	f	struct:lob::index_entry_t
get_trx_undo_no_ptr	include/lob0index.h	/^  byte *get_trx_undo_no_ptr() const { return (m_node + OFFSET_TRX_UNDO_NO); }$/;"	f	struct:lob::index_entry_t
get_trxid_modifier_ptr	include/lob0index.h	/^  byte *get_trxid_modifier_ptr() const {$/;"	f	struct:lob::index_entry_t
get_trxid_ptr	include/lob0index.h	/^  byte *get_trxid_ptr() const { return (m_node + OFFSET_TRXID); }$/;"	f	struct:lob::index_entry_t
get_tuple	include/ut0lock_free_hash.h	/^  key_val_t *get_tuple(uint64_t key, arr_node_t **arr) const {$/;"	f	class:ut_lock_free_hash_t
get_tuple_from_array	include/ut0lock_free_hash.h	/^  key_val_t *get_tuple_from_array(key_val_t *arr, size_t arr_size,$/;"	f	class:ut_lock_free_hash_t
get_type	arch/arch0page.cc	/^uint Arch_Block::get_type(byte *block) {$/;"	f	class:Arch_Block
get_type	include/log0ddl.h	/^  Log_Type get_type() const { return (m_type); }$/;"	f	class:Log_Type::DDL_Record
get_type	os/os0enc.cc	/^Encryption::Type Encryption::get_type() const { return m_type; }$/;"	f	class:Encryption
get_undo_sequence	include/lob0undo.h	/^  undo_seq_t *get_undo_sequence(ulint field_no) {$/;"	f	struct:lob::undo_vers_t
get_undo_sequence_if_exists	include/lob0undo.h	/^  undo_seq_t *get_undo_sequence_if_exists(ulint field_no) {$/;"	f	struct:lob::undo_vers_t
get_up_match	include/btr0pcur.h	/^inline ulint btr_pcur_t::get_up_match() const {$/;"	f	class:btr_pcur_t
get_used_len	include/lob0impl.h	/^  ulint get_used_len() const {$/;"	f	struct:lob::z_frag_entry_t
get_usr_temp_tblsp	include/sess0sess.h	/^  ibt::Tablespace *get_usr_temp_tblsp() {$/;"	f	class:innodb_session_t
get_version	include/clone0clone.h	/^  uint get_version() { return (m_clone_desc_version); }$/;"	f	class:Clone_Handle
get_version	include/dict0mem.h	/^  uint64_t get_version() const { return (m_version); }$/;"	f	class:PersistentTableMetadata
get_versions_list	include/lob0index.h	/^  flst_base_node_t *get_versions_list() const { return (get_versions_ptr()); }$/;"	f	struct:lob::index_entry_t
get_versions_list	include/zlob0index.h	/^  flst_base_node_t *get_versions_list() const {$/;"	f	struct:lob::z_index_entry_t
get_versions_mem	include/lob0index.h	/^  flst_bnode_t get_versions_mem() const {$/;"	f	struct:lob::index_entry_t
get_versions_mem	include/zlob0index.h	/^  flst_bnode_t get_versions_mem() const {$/;"	f	struct:lob::z_index_entry_t
get_versions_ptr	include/lob0index.h	/^  byte *get_versions_ptr() const { return (m_node + OFFSET_VERSIONS); }$/;"	f	struct:lob::index_entry_t
get_view	read/read0read.cc	/^ReadView *MVCC::get_view() {$/;"	f	class:MVCC
get_view_created_by_trx_id	read/read0read.cc	/^ReadView *MVCC::get_view_created_by_trx_id(trx_id_t trx_id) const {$/;"	f	class:MVCC
get_wait_timelimit	os/os0event.cc	/^struct timespec os_event::get_wait_timelimit(ulint time_in_usec) {$/;"	f	class:os_event
get_write_size	dict/dict0dict.cc	/^ulint CorruptedIndexPersister::get_write_size($/;"	f	class:CorruptedIndexPersister
get_z_frag_id	include/zlob0index.h	/^  page_no_t get_z_frag_id() const {$/;"	f	struct:lob::z_index_entry_t
get_z_page_no	include/zlob0index.h	/^  page_no_t get_z_page_no() const {$/;"	f	struct:lob::z_index_entry_t
get_zdata_len	include/zlob0index.h	/^  ulint get_zdata_len() const {$/;"	f	struct:lob::z_index_entry_t
get_zip_shift_size	handler/ha_innodb.cc	/^static uint32_t get_zip_shift_size(ulint key_block_size) {$/;"	f	file:
gis0rtree_h	include/gis0rtree.h	34;"	d
gis0type_h	include/gis0type.h	34;"	d
global_initialized	os/os0event.cc	/^  static bool global_initialized;$/;"	m	struct:os_event	file:
global_latch	include/lock0latches.h	/^  Unique_sharded_rw_lock global_latch;$/;"	m	class:locksys::Latches
gnuc64	ut/crc32.cc	99;"	d	file:
go_up	include/fts0ast.h	/^  bool go_up;              \/*!< Flag if go one level up *\/$/;"	m	struct:fts_ast_node_t
graph	fts/fts0opt.cc	/^      graph;           \/*optimize *\/$/;"	m	struct:fts_optimize_t	file:
graph	include/que0que.h	/^  que_t *graph;          \/*!< graph where this node belongs *\/$/;"	m	struct:que_thr_t
graph	include/que0que.h	/^  que_t *graph;        \/*!< query graph of this node *\/$/;"	m	struct:que_fork_t
graph	include/trx0trx.h	/^  que_t *graph;                    \/*!< query currently run in the session,$/;"	m	struct:trx_t
graph_owns_us	include/pars0pars.h	/^  ibool graph_owns_us; \/*!< if TRUE (which is the default),$/;"	m	struct:pars_info_t
graphs	include/que0que.h	/^  graphs; \/*!< list of query graphs of a session$/;"	m	struct:que_fork_t
grow	include/ut0lock_free_hash.h	/^  next_t grow(int64_t deleted_val, bool *grown_by_this_thread) {$/;"	f	class:ut_lock_free_list_node_t
grph	api/api0api.cc	/^  ib_qry_grph_t grph; \/*!< Query graph *\/$/;"	m	struct:ib_qry_proc_t	file:
gtid_allocated	trx/trx0undo.cc	/^bool trx_undo_t::gtid_allocated(bool is_prepare) const {$/;"	f	class:trx_undo_t
gtid_get_details	trx/trx0undo.cc	/^std::tuple<int, size_t> trx_undo_t::gtid_get_details(bool is_prepare) const {$/;"	f	class:trx_undo_t
guess_block	include/trx0undo.h	/^  buf_block_t *guess_block; \/*!< guess for the buffer block where$/;"	m	struct:trx_undo_t
guess_position	include/ut0lock_free_hash.h	/^  size_t guess_position(uint64_t key, size_t arr_size) const {$/;"	f	class:ut_lock_free_hash_t
ha0ha_h	include/ha0ha.h	34;"	d
ha0storage_h	include/ha0storage.h	36;"	d
ha_btr_search_latch_x_locked	ha/ha0ha.cc	/^static void ha_btr_search_latch_x_locked(const hash_table_t *table) {$/;"	f	file:
ha_clear	ha/ha0ha.cc	/^void ha_clear(hash_table_t *table) \/*!< in, own: hash table *\/$/;"	f
ha_delete_hash_node	ha/ha0ha.cc	/^void ha_delete_hash_node(hash_table_t *table, \/*!< in: hash table *\/$/;"	f
ha_innobase	handler/ha_innodb.cc	/^ha_innobase::ha_innobase(handlerton *hton, TABLE_SHARE *table_arg)$/;"	f	class:ha_innobase
ha_innobase	handler/ha_innodb.h	/^class ha_innobase : public handler {$/;"	c
ha_innobase_exts	handler/ha_innodb.cc	/^static const char *ha_innobase_exts[] = {dot_ext[IBD], NullS};$/;"	v	file:
ha_innobase_inplace_ctx	handler/handler0alter.cc	/^  ha_innobase_inplace_ctx(row_prebuilt_t *prebuilt_arg, dict_index_t **drop_arg,$/;"	f	struct:ha_innobase_inplace_ctx
ha_innobase_inplace_ctx	handler/handler0alter.cc	/^struct ha_innobase_inplace_ctx : public inplace_alter_handler_ctx {$/;"	s	file:
ha_innodb_h	handler/ha_innodb.h	28;"	d
ha_innopart	handler/ha_innopart.cc	/^ha_innopart::ha_innopart(handlerton *hton, TABLE_SHARE *table_arg)$/;"	f	class:ha_innopart
ha_innopart	handler/ha_innopart.h	/^class ha_innopart : public ha_innobase,$/;"	c
ha_innopart_h	handler/ha_innopart.h	30;"	d
ha_innopart_inplace_ctx	handler/handler0alter.cc	/^  ha_innopart_inplace_ctx(THD *thd, uint tot_parts)$/;"	f	class:ha_innopart_inplace_ctx
ha_innopart_inplace_ctx	handler/handler0alter.cc	/^class ha_innopart_inplace_ctx : public inplace_alter_handler_ctx {$/;"	c	file:
ha_insert_for_fold	include/ha0ha.h	135;"	d
ha_insert_for_fold	include/ha0ha.h	150;"	d
ha_insert_for_fold_func	ha/ha0ha.cc	/^ibool ha_insert_for_fold_func($/;"	f
ha_node_t	include/ha0ha.h	/^struct ha_node_t {$/;"	s
ha_print_info	ha/ha0ha.cc	/^void ha_print_info(FILE *file, hash_table_t *table) {$/;"	f
ha_remove_all_nodes_to_page	ha/ha0ha.cc	/^void ha_remove_all_nodes_to_page(hash_table_t *table, ulint fold,$/;"	f
ha_search_and_update_if_found	include/ha0ha.h	71;"	d
ha_search_and_update_if_found	include/ha0ha.h	81;"	d
ha_search_and_update_if_found_func	ha/ha0ha.cc	/^ibool ha_search_and_update_if_found_func($/;"	f
ha_storage_get	ha/ha0storage.cc	/^static const void *ha_storage_get($/;"	f	file:
ha_storage_put	include/ha0storage.h	81;"	d
ha_storage_put_memlim	ha/ha0storage.cc	/^const void *ha_storage_put_memlim($/;"	f
ha_storage_put_str	include/ha0storage.h	90;"	d
ha_storage_put_str_memlim	include/ha0storage.h	101;"	d
ha_validate	ha/ha0ha.cc	/^ibool ha_validate(hash_table_t *table, \/*!< in: hash table *\/$/;"	f
handle	include/fil0fil.h	/^  pfs_os_file_t handle;$/;"	m	struct:fil_node_t
handle	include/fsp0file.h	/^  pfs_os_file_t handle() const { return (m_handle); }$/;"	f	class:Datafile
handle_error_other_task	clone/clone0clone.cc	/^int Clone_Task_Manager::handle_error_other_task(bool set_error) {$/;"	f	class:Clone_Task_Manager
handle_existing_file	clone/clone0apply.cc	/^int Clone_Snapshot::handle_existing_file(bool replace,$/;"	f	class:Clone_Snapshot
handle_write_error	log/log0meb.cc	/^static void handle_write_error(uint64_t file_offset) {$/;"	f	namespace:meb
handler0alter_h	include/handler0alter.h	32;"	d
handler_name	include/dict0dd.h	/^static constexpr char handler_name[] = "InnoDB";$/;"	v
has	data/data0data.cc	/^bool multi_value_data::has(const dtype_t *type, const byte *data,$/;"	f	class:multi_value_data
has	data/data0data.cc	/^bool multi_value_data::has(ulint mtype, ulint prtype, const byte *data,$/;"	f	class:multi_value_data
has_atomic_blobs	include/lob0lob.h	/^  bool has_atomic_blobs() const {$/;"	f	struct:lob::DeleteContext
has_clust_rec_x_lock	include/row0upd.h	/^  ibool has_clust_rec_x_lock;$/;"	m	struct:upd_node_t
has_correct_io_fix_value	include/buf0buf.h	/^  bool has_correct_io_fix_value() const {$/;"	f	class:Cache_hint::buf_page_t
has_discarded_tablespaces	dict/dict0load.cc	/^bool has_discarded_tablespaces = false;$/;"	v
has_ext	include/data0data.h	/^  inline bool has_ext() const {$/;"	f	struct:dtuple_t
has_gtid	clone/clone0repl.cc	/^bool Clone_persist_gtid::has_gtid(trx_t *trx, THD *&thd, bool &passed_check) {$/;"	f	class:Clone_persist_gtid
has_instant_cols	include/dict0mem.h	/^  bool has_instant_cols() const { return (instant_cols); }$/;"	f	struct:dict_index_t
has_instant_cols	include/dict0mem.h	/^  bool has_instant_cols() const {$/;"	f	struct:dict_table_t
has_multi_value_col	include/dict0mem.h	/^  uint32_t has_multi_value_col(const dict_v_col_t *mv_col) const {$/;"	f	struct:dict_index_t
has_new_v_col	include/dict0mem.h	/^  bool has_new_v_col;$/;"	m	struct:dict_index_t
has_no_references	fil/fil0fil.cc	/^bool fil_space_t::has_no_references() const {$/;"	f	class:fil_space_t
has_search_latch	include/trx0trx.h	/^  bool has_search_latch;$/;"	m	struct:trx_t
has_space	include/dyn0buf.h	/^  bool has_space(ulint size) const {$/;"	f	class:dyn_buf_t
has_space	include/dyn0buf.h	/^  bool has_space(ulint size) {$/;"	f	class:dyn_buf_t
has_space	include/ut0link_buf.h	/^inline bool Link_buf<Position>::has_space(Position position) {$/;"	f	class:Link_buf
has_suffix	include/fil0fil.h	/^  static bool has_suffix(ib_file_suffix sfx, const std::string &path) {$/;"	f	class:Fil_path
has_table_parts	handler/ha_innopart.h	/^  bool has_table_parts() const { return (m_table_parts != nullptr); }$/;"	f	class:Ha_innopart_share
hash	include/buf0buf.h	/^  buf_page_t *hash;$/;"	m	class:Cache_hint::buf_page_t
hash	include/lock0priv.h	/^  lock_t *hash;$/;"	m	struct:lock_t
hash0hash_h	include/hash0hash.h	34;"	d
hash_analysis	include/btr0sea.h	/^  ulint hash_analysis;     \/*!< when this exceeds$/;"	m	struct:btr_search_t
hash_assert_can_modify	include/ha0ha.h	220;"	d
hash_assert_can_search	include/ha0ha.h	221;"	d
hash_cell_t	include/hash0hash.h	/^struct hash_cell_t {$/;"	s
hash_create	ha/hash0hash.cc	/^hash_table_t *hash_create(ulint n) \/*!< in: number of array cells *\/$/;"	f
hash_create	include/hash0hash.h	50;"	d
hash_create_sync_obj	ha/hash0hash.cc	/^void hash_create_sync_obj(hash_table_t *table, enum hash_table_sync_t type,$/;"	f
hash_get_heap	include/hash0hash.h	394;"	d
hash_lock_x_all	ha/hash0hash.cc	/^void hash_lock_x_all(hash_table_t *table) \/*!< in: hash table *\/$/;"	f
hash_lock_x_all	include/hash0hash.h	395;"	d
hash_node_t	include/hash0hash.h	/^typedef void *hash_node_t;$/;"	t
hash_table	include/lock0priv.h	/^  hash_table_t *hash_table() const { return (lock_hash_get(type_mode)); }$/;"	f	struct:lock_t
hash_table_free	ha/hash0hash.cc	/^void hash_table_free(hash_table_t *table) \/*!< in, own: hash table *\/$/;"	f
hash_table_locks_key	sync/sync0sync.cc	/^mysql_pfs_key_t hash_table_locks_key;$/;"	v
hash_table_mutex_key	sync/sync0sync.cc	/^mysql_pfs_key_t hash_table_mutex_key;$/;"	v
hash_table_sync_t	include/hash0hash.h	/^enum hash_table_sync_t {$/;"	g
hash_table_t	include/hash0hash.h	/^struct hash_table_t {$/;"	s
hash_tables	include/btr0sea.h	/^  hash_table_t **hash_tables; \/*!< the adaptive hash tables,$/;"	m	struct:btr_search_sys_t
hash_unlock_x_all	ha/hash0hash.cc	/^void hash_unlock_x_all(hash_table_t *table) \/*!< in: hash table *\/$/;"	f
hash_unlock_x_all	include/hash0hash.h	396;"	d
hash_unlock_x_all_but	ha/hash0hash.cc	/^void hash_unlock_x_all_but(hash_table_t *table,  \/*!< in: hash table *\/$/;"	f
hash_unlock_x_all_but	include/hash0hash.h	397;"	d
hdr_offset	include/trx0purge.h	/^  ulint hdr_offset;$/;"	m	struct:trx_purge_t
hdr_offset	include/trx0undo.h	/^  ulint hdr_offset;       \/*!< header offset of the undo log on$/;"	m	struct:trx_undo_t
hdr_page_no	include/trx0purge.h	/^  page_no_t hdr_page_no;$/;"	m	struct:trx_purge_t
hdr_page_no	include/trx0undo.h	/^  page_no_t hdr_page_no;  \/*!< page number of the header page in$/;"	m	struct:trx_undo_t
head	include/fts0ast.h	/^  fts_ast_node_t *head; \/*!< Children list head *\/$/;"	m	struct:fts_ast_list_t
head	row/row0log.cc	/^  row_log_buf_t head;   \/*!< reader context; protected by MDL only;$/;"	m	struct:row_log_t	file:
header_size	include/lob0impl.h	/^  static ulint header_size() { return (OFFSET_DATA); }$/;"	f	struct:lob::frag_node_t
heap	api/api0api.cc	/^  mem_heap_t *heap; \/*!< Heap used to build this and all$/;"	m	struct:ib_index_def_t	file:
heap	api/api0api.cc	/^  mem_heap_t *heap; \/*!< Heap used to build this and all$/;"	m	struct:ib_table_def_t	file:
heap	api/api0api.cc	/^  mem_heap_t *heap; \/*!< Heap used to build$/;"	m	struct:ib_tuple_t	file:
heap	api/api0api.cc	/^  mem_heap_t *heap; \/*!< Instance heap *\/$/;"	m	struct:ib_cursor_t	file:
heap	fts/fts0opt.cc	/^  mem_heap_t *heap; \/*!< The heap used to allocate this$/;"	m	struct:fts_msg_t	file:
heap	fts/fts0que.cc	/^  mem_heap_t *heap;     \/*!< Heap for word processing *\/$/;"	m	struct:fts_phrase_param_t	file:
heap	fts/fts0que.cc	/^  mem_heap_t *heap; \/*!< Heap to use for allocations *\/$/;"	m	struct:fts_query_t	file:
heap	fts/fts0que.cc	/^  mem_heap_t *heap;$/;"	m	struct:fts_phrase_t	file:
heap	handler/handler0alter.cc	/^  mem_heap_t *heap;$/;"	m	struct:ha_innobase_inplace_ctx	file:
heap	include/data0data.h	/^  mem_heap_t *heap;        \/*!< memory heap from which$/;"	m	struct:big_rec_t
heap	include/dict0crea.h	/^  mem_heap_t *heap;              \/*!< memory heap used as auxiliary$/;"	m	struct:ind_node_t
heap	include/dict0crea.h	/^  mem_heap_t *heap;  \/*!< memory heap used as auxiliary$/;"	m	struct:tab_node_t
heap	include/dict0mem.h	/^  mem_heap_t *heap;         \/*!< this object is allocated from$/;"	m	struct:dict_foreign_t
heap	include/dict0mem.h	/^  mem_heap_t *heap;       \/*!< memory heap *\/$/;"	m	struct:dict_index_t
heap	include/dict0mem.h	/^  mem_heap_t *heap;$/;"	m	struct:dict_table_t
heap	include/fts0ast.h	/^  mem_heap_t *heap;     \/*!< Heap to use for alloc *\/$/;"	m	struct:fts_ast_state_t
heap	include/fts0fts.h	/^  mem_heap_t *heap; \/*!< heap *\/$/;"	m	struct:fts_trx_t
heap	include/fts0types.h	/^  ib_alloc_t *heap;          \/*!< The memory allocator to use *\/$/;"	m	struct:fts_stopword_t
heap	include/gis0type.h	/^  mem_heap_t *heap;    \/*!< memory heap *\/$/;"	m	struct:rtr_info
heap	include/hash0hash.h	/^  mem_heap_t *heap;$/;"	m	struct:hash_table_t
heap	include/pars0pars.h	/^  mem_heap_t *heap; \/*!< our own memory heap *\/$/;"	m	struct:pars_info_t
heap	include/pars0sym.h	/^  mem_heap_t *heap; \/*!< memory heap from which we can$/;"	m	struct:sym_tab_t
heap	include/que0que.h	/^  mem_heap_t *heap; \/*!< memory heap where the fork was$/;"	m	struct:que_fork_t
heap	include/row0ftsort.h	/^  mem_heap_t *heap;      \/*!< heap *\/$/;"	m	struct:fts_psort_insert
heap	include/row0merge.h	/^  mem_heap_t *heap;     \/*!< memory heap where allocated *\/$/;"	m	struct:row_merge_buf_t
heap	include/row0mysql.h	/^  mem_heap_t *heap;$/;"	m	struct:row_prebuilt_t
heap	include/row0purge.h	/^  mem_heap_t *heap;$/;"	m	struct:purge_node_t
heap	include/row0undo.h	/^  mem_heap_t *heap;         \/*!< memory heap used as auxiliary storage for$/;"	m	struct:undo_node_t
heap	include/row0upd.h	/^  mem_heap_t *heap;    \/*!< heap from which memory allocated *\/$/;"	m	struct:upd_t
heap	include/row0upd.h	/^  mem_heap_t *heap;    \/*!< memory heap used as auxiliary storage;$/;"	m	struct:upd_node_t
heap	include/row0upd.h	/^  mem_heap_t *heap;$/;"	m	struct:Lob_diff
heap	include/row0upd.h	/^  mem_heap_t *heap;$/;"	m	struct:upd_field_t
heap	include/trx0purge.h	/^  mem_heap_t *heap;$/;"	m	struct:trx_purge_t
heap	include/ut0list.h	/^  mem_heap_t *heap; \/*!< memory heap *\/$/;"	m	struct:ib_list_helper_t
heap_alloc	fts/fts0opt.cc	/^  ib_alloc_t *heap_alloc; \/*!< Heap to use for allocations *\/$/;"	m	struct:fts_zip_t	file:
heap_alloc	include/fts0types.h	/^  ib_alloc_t *heap_alloc; \/*!< For handling all allocations *\/$/;"	m	struct:fts_word_t
heaps	include/hash0hash.h	/^  mem_heap_t **heaps; \/*!< if this is non-NULL, hash$/;"	m	struct:hash_table_t
hex	include/ut0ut.h	/^  explicit hex(uintmax_t t) : m_val(t) {}$/;"	f	struct:ib::hex
hex	include/ut0ut.h	/^struct hex {$/;"	s	namespace:ib
hidden	include/dict0mem.h	/^  bool hidden; \/*!< if the index is an hidden index *\/$/;"	m	struct:dict_index_t
high_level_read_only	srv/srv0srv.cc	/^bool high_level_read_only;$/;"	v
hint_need_to_fetch_extra_cols	include/row0mysql.h	/^  ulint hint_need_to_fetch_extra_cols;$/;"	m	struct:row_prebuilt_t
hit_list_t	include/trx0types.h	/^typedef std::vector<TrxVersion, ut_allocator<TrxVersion>> hit_list_t;$/;"	t
hollow_alloc_t	include/ut0lock_free_hash.h	/^  typedef ut_allocator<arr_node_t *> hollow_alloc_t;$/;"	t	class:ut_lock_free_hash_t
hollow_t	include/ut0lock_free_hash.h	/^  typedef std::list<arr_node_t *, hollow_alloc_t> hollow_t;$/;"	t	class:ut_lock_free_hash_t
i_s_h	handler/i_s.h	34;"	d
i_s_innodb_plugin_version	handler/i_s.cc	/^constexpr uint64_t i_s_innodb_plugin_version =$/;"	v
i_s_innodb_plugin_version_postfix	handler/i_s.cc	/^constexpr uint8_t i_s_innodb_plugin_version_postfix = 2;$/;"	v
i_s_locks_row_t	include/trx0i_s.h	/^struct i_s_locks_row_t {$/;"	s
i_s_locks_row_validate	trx/trx0i_s.cc	/^static ibool i_s_locks_row_validate($/;"	f	file:
i_s_mem_chunk_t	trx/trx0i_s.cc	/^struct i_s_mem_chunk_t {$/;"	s	file:
i_s_table	include/trx0i_s.h	/^enum i_s_table {$/;"	g
i_s_table_cache_t	trx/trx0i_s.cc	/^struct i_s_table_cache_t {$/;"	s	file:
i_s_trx_row_t	include/trx0i_s.h	/^struct i_s_trx_row_t {$/;"	s
ib	include/ut0test.h	/^namespace ib {$/;"	n
ib	include/ut0ut.h	/^namespace ib {$/;"	n
ib	ut/ut0test.cc	/^namespace ib {$/;"	n	file:
ib	ut/ut0ut.cc	/^namespace ib {$/;"	n	file:
ib0mutex_h	include/ib0mutex.h	34;"	d
ib_alloc_t	include/ut0vec.h	/^struct ib_alloc_t {$/;"	s
ib_binlog_enabled	api/api0api.cc	/^bool ib_binlog_enabled = FALSE;$/;"	v
ib_bk_commit_interval	api/api0api.cc	/^ulong ib_bk_commit_interval = 0;$/;"	v
ib_bool_t	include/api0api.h	/^typedef ib_ulint_t ib_bool_t;$/;"	t
ib_bpmutex_t	include/ut0mutex.h	/^typedef BlockFutexMutex ib_bpmutex_t;$/;"	t
ib_bpmutex_t	include/ut0mutex.h	/^typedef OSMutex ib_bpmutex_t;$/;"	t
ib_bpmutex_t	include/ut0mutex.h	/^typedef meb::Mutex ib_bpmutex_t;$/;"	t
ib_btr_cursor_is_positioned	api/api0api.cc	/^ib_bool_t ib_btr_cursor_is_positioned($/;"	f
ib_byte_t	include/api0api.h	/^typedef unsigned char ib_byte_t;$/;"	t
ib_calc_diff	api/api0api.cc	/^static ib_err_t ib_calc_diff($/;"	f	file:
ib_cb_t	include/api0api.h	/^typedef void (*ib_cb_t)(void);$/;"	t
ib_cfg_bk_commit_interval	api/api0api.cc	/^ib_ulint_t ib_cfg_bk_commit_interval() {$/;"	f
ib_cfg_get_cfg	api/api0api.cc	/^int ib_cfg_get_cfg() {$/;"	f
ib_cfg_trx_level	api/api0api.cc	/^ib_trx_level_t ib_cfg_trx_level() {$/;"	f
ib_cfg_type_t	include/api0api.h	/^} ib_cfg_type_t;$/;"	t	typeref:enum:__anon18
ib_charset_t	include/api0api.h	/^typedef ib_opaque_t ib_charset_t;$/;"	t
ib_client_cmp_t	include/api0api.h	/^typedef int (*ib_client_cmp_t)(const ib_col_meta_t *col_meta,$/;"	t
ib_clust_read_tuple_create	api/api0api.cc	/^ib_tpl_t ib_clust_read_tuple_create($/;"	f
ib_clust_search_tuple_create	api/api0api.cc	/^ib_tpl_t ib_clust_search_tuple_create($/;"	f
ib_col_attr	api/api0api.cc	/^  ib_col_attr_t ib_col_attr; \/*!< Column attributes *\/$/;"	m	struct:ib_col_t	file:
ib_col_attr_t	include/api0api.h	/^} ib_col_attr_t;$/;"	t	typeref:enum:__anon21
ib_col_copy_value	api/api0api.cc	/^ib_ulint_t ib_col_copy_value($/;"	f
ib_col_copy_value_low	api/api0api.cc	/^ib_ulint_t ib_col_copy_value_low($/;"	f
ib_col_get_attr	api/api0api.cc	/^ib_col_attr_t ib_col_get_attr(ulint prtype) \/*!< in: column definition *\/$/;"	f
ib_col_get_dfield	api/api0api.cc	/^dfield_t *ib_col_get_dfield(ib_tuple_t *tuple, \/*!< in: tuple instance *\/$/;"	f
ib_col_get_len	api/api0api.cc	/^ib_ulint_t ib_col_get_len(ib_tpl_t ib_tpl, \/*!< in: tuple instance *\/$/;"	f
ib_col_get_meta	api/api0api.cc	/^ib_ulint_t ib_col_get_meta($/;"	f
ib_col_get_meta_low	api/api0api.cc	/^ib_ulint_t ib_col_get_meta_low($/;"	f
ib_col_get_name	api/api0api.cc	/^const char *ib_col_get_name($/;"	f
ib_col_get_value	api/api0api.cc	/^const void *ib_col_get_value(ib_tpl_t ib_tpl, \/*!< in: tuple instance *\/$/;"	f
ib_col_is_capped	api/api0api.cc	/^ib_err_t ib_col_is_capped(const dtype_t *dtype) \/*!< in: column type *\/$/;"	f
ib_col_meta_t	include/api0api.h	/^} ib_col_meta_t;$/;"	t	typeref:struct:__anon26
ib_col_set_value	api/api0api.cc	/^ib_err_t ib_col_set_value(ib_tpl_t ib_tpl,    \/*!< in: tuple instance *\/$/;"	f
ib_col_t	api/api0api.cc	/^struct ib_col_t {$/;"	s	file:
ib_col_type	api/api0api.cc	/^  ib_col_type_t ib_col_type; \/*!< Main type of the column *\/$/;"	m	struct:ib_col_t	file:
ib_col_type_t	include/api0api.h	/^} ib_col_type_t;$/;"	t	typeref:enum:__anon19
ib_compare_t	include/ut0vec.h	/^typedef int (*ib_compare_t)(const void *, const void *);$/;"	t
ib_counter_t	include/ut0counter.h	/^  ib_counter_t() { memset(m_counter, 0x0, sizeof(m_counter)); }$/;"	f	class:ib_counter_t
ib_counter_t	include/ut0counter.h	/^class ib_counter_t {$/;"	c
ib_create	ha/ha0ha.cc	/^hash_table_t *ib_create(ulint n,       \/*!< in: number of array cells *\/$/;"	f
ib_create_cursor	api/api0api.cc	/^static ib_err_t ib_create_cursor(ib_crsr_t *ib_crsr,  \/*!< out: InnoDB cursor *\/$/;"	f	file:
ib_create_cursor_with_clust_index	api/api0api.cc	/^static ib_err_t ib_create_cursor_with_clust_index(ib_crsr_t *ib_crsr,$/;"	f	file:
ib_crsr_t	include/api0api.h	/^typedef struct ib_cursor_t *ib_crsr_t;$/;"	t	typeref:struct:ib_cursor_t
ib_cursor_close	api/api0api.cc	/^ib_err_t ib_cursor_close(ib_crsr_t ib_crsr) \/*!< in,own: InnoDB cursor *\/$/;"	f
ib_cursor_commit_trx	api/api0api.cc	/^ib_err_t ib_cursor_commit_trx(ib_crsr_t ib_crsr, \/*!< in\/out: InnoDB cursor *\/$/;"	f
ib_cursor_delete_row	api/api0api.cc	/^ib_err_t ib_cursor_delete_row($/;"	f
ib_cursor_first	api/api0api.cc	/^ib_err_t ib_cursor_first(ib_crsr_t ib_crsr) \/*!< in: InnoDB cursor instance *\/$/;"	f
ib_cursor_insert_row	api/api0api.cc	/^ib_err_t ib_cursor_insert_row($/;"	f
ib_cursor_is_positioned	api/api0api.cc	/^ib_bool_t ib_cursor_is_positioned($/;"	f
ib_cursor_lock	api/api0api.cc	/^ib_err_t ib_cursor_lock(ib_crsr_t ib_crsr,         \/*!< in\/out: InnoDB cursor *\/$/;"	f
ib_cursor_moveto	api/api0api.cc	/^ib_err_t ib_cursor_moveto(ib_crsr_t ib_crsr, \/*!< in: InnoDB cursor instance *\/$/;"	f
ib_cursor_new_trx	api/api0api.cc	/^ib_err_t ib_cursor_new_trx(ib_crsr_t ib_crsr, \/*!< in\/out: InnoDB cursor *\/$/;"	f
ib_cursor_next	api/api0api.cc	/^ib_err_t ib_cursor_next(ib_crsr_t ib_crsr) \/*!< in: InnoDB cursor instance *\/$/;"	f
ib_cursor_open_index_using_name	api/api0api.cc	/^ib_err_t ib_cursor_open_index_using_name($/;"	f
ib_cursor_open_table	api/api0api.cc	/^ib_err_t ib_cursor_open_table(const char *name,   \/*!< in: table name *\/$/;"	f
ib_cursor_open_table_using_id	api/api0api.cc	/^static ib_err_t ib_cursor_open_table_using_id($/;"	f	file:
ib_cursor_position	api/api0api.cc	/^ib_err_t ib_cursor_position($/;"	f
ib_cursor_read_row	api/api0api.cc	/^ib_err_t ib_cursor_read_row($/;"	f
ib_cursor_reset	api/api0api.cc	/^ib_err_t ib_cursor_reset(ib_crsr_t ib_crsr) \/*!< in\/out: InnoDB cursor *\/$/;"	f
ib_cursor_set_cluster_access	api/api0api.cc	/^void ib_cursor_set_cluster_access($/;"	f
ib_cursor_set_lock_mode	api/api0api.cc	/^ib_err_t ib_cursor_set_lock_mode($/;"	f
ib_cursor_set_match_mode	api/api0api.cc	/^void ib_cursor_set_match_mode($/;"	f
ib_cursor_stmt_begin	api/api0api.cc	/^void ib_cursor_stmt_begin(ib_crsr_t ib_crsr) \/*!< in: cursor *\/$/;"	f
ib_cursor_t	api/api0api.cc	/^struct ib_cursor_t {$/;"	s	file:
ib_cursor_update_row	api/api0api.cc	/^ib_err_t ib_cursor_update_row($/;"	f
ib_dec_counter	row/row0mysql.cc	/^  ib_dec_counter() {}$/;"	f	class:ib_dec_counter
ib_dec_counter	row/row0mysql.cc	/^class ib_dec_counter {$/;"	c	file:
ib_dec_in_dtor	row/row0ins.cc	/^  ib_dec_in_dtor(std::atomic<ulint> &c) : counter(c) {}$/;"	f	class:ib_dec_in_dtor
ib_dec_in_dtor	row/row0ins.cc	/^class ib_dec_in_dtor {$/;"	c	file:
ib_delete_row	api/api0api.cc	/^static ib_err_t ib_delete_row($/;"	f	file:
ib_disable_row_lock	api/api0api.cc	/^bool ib_disable_row_lock = FALSE;$/;"	v
ib_err_t	include/api0api.h	/^typedef enum dberr_t ib_err_t;$/;"	t	typeref:enum:dberr_t
ib_errf	handler/ha_innodb.cc	/^void ib_errf(THD *thd,             \/*!< in\/out: session *\/$/;"	f
ib_execute_insert_query_graph	api/api0api.cc	/^static ib_err_t ib_execute_insert_query_graph($/;"	f	file:
ib_execute_update_query_graph	api/api0api.cc	/^ib_err_t ib_execute_update_query_graph($/;"	f
ib_file_suffix	include/fil0fil.h	/^enum ib_file_suffix {$/;"	g
ib_get_idx_field_name	api/api0api.cc	/^const char *ib_get_idx_field_name($/;"	f
ib_handle_errors	api/api0misc.cc	/^ibool ib_handle_errors(dberr_t *new_err, trx_t *trx, que_thr_t *thr,$/;"	f
ib_i16_t	include/api0api.h	/^typedef __int16 ib_i16_t;$/;"	t
ib_i16_t	include/api0api.h	/^typedef int16_t ib_i16_t;$/;"	t
ib_i32_t	include/api0api.h	/^typedef __int32 ib_i32_t;$/;"	t
ib_i32_t	include/api0api.h	/^typedef int32_t ib_i32_t;$/;"	t
ib_i64_t	include/api0api.h	/^typedef __int64 ib_i64_t;$/;"	t
ib_i64_t	include/api0api.h	/^typedef int64_t ib_i64_t;$/;"	t
ib_i8_t	include/api0api.h	/^typedef __int8 ib_i8_t;$/;"	t
ib_i8_t	include/api0api.h	/^typedef int8_t ib_i8_t;$/;"	t
ib_id_u64_t	include/api0api.h	/^typedef ib_u64_t ib_id_u64_t;$/;"	t
ib_index_def_t	api/api0api.cc	/^struct ib_index_def_t {$/;"	s	file:
ib_index_type_t	include/api0api.h	/^} ib_index_type_t;$/;"	t	typeref:enum:__anon23
ib_insert_query_graph_create	api/api0api.cc	/^static void ib_insert_query_graph_create($/;"	f	file:
ib_insert_row_with_lock_retry	api/api0api.cc	/^ib_err_t ib_insert_row_with_lock_retry($/;"	f
ib_interpreter_check	ut/ut0test.cc	/^int ib_interpreter_check(THD *thd, SYS_VAR *var, void *save,$/;"	f
ib_interpreter_update	ut/ut0test.cc	/^void ib_interpreter_update(MYSQL_THD thd, SYS_VAR *var, void *var_ptr,$/;"	f
ib_is_virtual_table	api/api0api.cc	/^ib_bool_t ib_is_virtual_table(ib_crsr_t crsr) {$/;"	f
ib_key_col_t	api/api0api.cc	/^struct ib_key_col_t {$/;"	s	file:
ib_key_tuple_new	api/api0api.cc	/^static ib_tpl_t ib_key_tuple_new($/;"	f	file:
ib_key_tuple_new_low	api/api0api.cc	/^static ib_tpl_t ib_key_tuple_new_low($/;"	f	file:
ib_lck_mode_t	include/api0api.h	/^} ib_lck_mode_t;$/;"	t	typeref:enum:__anon22
ib_like_t	include/data0type.h	/^enum ib_like_t {$/;"	g
ib_list_add_after	ut/ut0list.cc	/^static ib_list_node_t *ib_list_add_after($/;"	f	file:
ib_list_add_last	ut/ut0list.cc	/^ib_list_node_t *ib_list_add_last($/;"	f
ib_list_create	ut/ut0list.cc	/^ib_list_t *ib_list_create(void) {$/;"	f
ib_list_free	ut/ut0list.cc	/^void ib_list_free(ib_list_t *list) \/*!< in: list *\/$/;"	f
ib_list_helper_t	include/ut0list.h	/^struct ib_list_helper_t {$/;"	s
ib_list_node_t	include/ut0list.h	/^struct ib_list_node_t {$/;"	s
ib_list_remove	ut/ut0list.cc	/^void ib_list_remove(ib_list_t *list, ib_list_node_t *node) {$/;"	f
ib_list_t	include/ut0list.h	/^struct ib_list_t {$/;"	s
ib_log_level_t	include/ha_prototypes.h	/^enum ib_log_level_t {$/;"	g
ib_logfile_basename	include/log0log.h	/^constexpr const char *const ib_logfile_basename = "ib_logfile";$/;"	v
ib_lookup_table_by_name	api/api0api.cc	/^static dict_table_t *ib_lookup_table_by_name($/;"	f	file:
ib_match_mode_t	include/api0api.h	/^} ib_match_mode_t;$/;"	t	typeref:enum:__anon25
ib_mdl_enabled	api/api0api.cc	/^bool ib_mdl_enabled = FALSE;$/;"	v
ib_mem_alloc_t	include/ut0vec.h	/^typedef void *(*ib_mem_alloc_t)($/;"	t
ib_mem_free_t	include/ut0vec.h	/^typedef void (*ib_mem_free_t)($/;"	t
ib_mem_resize_t	include/ut0vec.h	/^typedef void *(*ib_mem_resize_t)($/;"	t
ib_memc_sdi_create	api/api0api.cc	/^ib_err_t ib_memc_sdi_create(ib_crsr_t crsr) {$/;"	f
ib_memc_sdi_delete	api/api0api.cc	/^ib_err_t ib_memc_sdi_delete(ib_crsr_t crsr, const char *key_str) {$/;"	f
ib_memc_sdi_drop	api/api0api.cc	/^ib_err_t ib_memc_sdi_drop(ib_crsr_t crsr) {$/;"	f
ib_memc_sdi_get	api/api0api.cc	/^ib_err_t ib_memc_sdi_get(ib_crsr_t crsr, const char *key_str, void *sdi,$/;"	f
ib_memc_sdi_get_keys	api/api0api.cc	/^ib_err_t ib_memc_sdi_get_keys(ib_crsr_t crsr, const char *key_str, void *sdi,$/;"	f
ib_memc_sdi_set	api/api0api.cc	/^ib_err_t ib_memc_sdi_set(ib_crsr_t crsr, const char *key_str, const void *sdi,$/;"	f
ib_msg_log_t	include/api0api.h	/^typedef int (*ib_msg_log_t)(ib_msg_stream_t, const char *, ...);$/;"	t
ib_msg_stream_t	include/api0api.h	/^typedef FILE *ib_msg_stream_t;$/;"	t
ib_mutex_t	include/ut0mutex.h	/^typedef FutexMutex ib_mutex_t;$/;"	t
ib_mutex_t	include/ut0mutex.h	/^typedef OSMutex ib_mutex_t;$/;"	t
ib_mutex_t	include/ut0mutex.h	/^typedef meb::Mutex ib_mutex_t;$/;"	t
ib_normalize_table_name	api/api0api.cc	/^static void ib_normalize_table_name($/;"	f	file:
ib_opaque_t	include/api0api.h	/^typedef void *ib_opaque_t;$/;"	t
ib_qry_grph_t	api/api0api.cc	/^struct ib_qry_grph_t {$/;"	s	file:
ib_qry_node_t	api/api0api.cc	/^struct ib_qry_node_t {$/;"	s	file:
ib_qry_proc_free	api/api0api.cc	/^static void ib_qry_proc_free($/;"	f	file:
ib_qry_proc_t	api/api0api.cc	/^struct ib_qry_proc_t {$/;"	s	file:
ib_qry_type_t	api/api0api.cc	/^enum ib_qry_type_t {$/;"	g	file:
ib_quiesce_t	include/dict0types.h	/^enum ib_quiesce_t {$/;"	g
ib_rbt_arg_compare	include/ut0rbt.h	/^typedef int (*ib_rbt_arg_compare)(const void *, const void *p1, const void *p2);$/;"	t
ib_rbt_bound_t	include/ut0rbt.h	/^struct ib_rbt_bound_t {$/;"	s
ib_rbt_color_t	include/ut0rbt.h	/^enum ib_rbt_color_t { IB_RBT_RED, IB_RBT_BLACK };$/;"	g
ib_rbt_compare	include/ut0rbt.h	/^typedef int (*ib_rbt_compare)(const void *p1, const void *p2);$/;"	t
ib_rbt_node_t	include/ut0rbt.h	/^struct ib_rbt_node_t {$/;"	s
ib_rbt_print_node	include/ut0rbt.h	/^typedef void (*ib_rbt_print_node)(const ib_rbt_node_t *node);$/;"	t
ib_rbt_t	include/ut0rbt.h	/^struct ib_rbt_t {$/;"	s
ib_read_tuple	api/api0api.cc	/^static ib_err_t ib_read_tuple($/;"	f	file:
ib_recreate	ha/ha0ha.cc	/^hash_table_t *ib_recreate(hash_table_t *table, ulint n) {$/;"	f
ib_row_tuple_new	api/api0api.cc	/^static ib_tpl_t ib_row_tuple_new($/;"	f	file:
ib_row_tuple_new_low	api/api0api.cc	/^static ib_tpl_t ib_row_tuple_new_low($/;"	f	file:
ib_schema_lock_is_exclusive	api/api0api.cc	/^ib_bool_t ib_schema_lock_is_exclusive($/;"	f
ib_sdi_create	api/api0api.cc	/^ib_err_t ib_sdi_create(space_id_t tablespace_id) {$/;"	f
ib_sdi_create_insert_tuple	api/api0api.cc	/^static ib_tpl_t ib_sdi_create_insert_tuple(ib_crsr_t ib_crsr,$/;"	f	file:
ib_sdi_create_search_tuple	api/api0api.cc	/^static ib_tpl_t ib_sdi_create_search_tuple(ib_crsr_t ib_crsr,$/;"	f	file:
ib_sdi_delete	api/api0api.cc	/^ib_err_t ib_sdi_delete(uint32_t tablespace_id, const ib_sdi_key_t *ib_sdi_key,$/;"	f
ib_sdi_drop	api/api0api.cc	/^ib_err_t ib_sdi_drop(space_id_t tablespace_id) {$/;"	f
ib_sdi_flush	api/api0api.cc	/^ib_err_t ib_sdi_flush(space_id_t space_id) { return (DB_SUCCESS); }$/;"	f
ib_sdi_get	api/api0api.cc	/^dberr_t ib_sdi_get(uint32_t tablespace_id, const ib_sdi_key_t *ib_sdi_key,$/;"	f
ib_sdi_get_keys	api/api0api.cc	/^dberr_t ib_sdi_get_keys(uint32_t tablespace_id, ib_sdi_vector_t *ib_sdi_vector,$/;"	f
ib_sdi_key	include/api0misc.h	/^struct ib_sdi_key {$/;"	s
ib_sdi_key_t	include/api0api.h	/^typedef struct ib_sdi_key ib_sdi_key_t;$/;"	t	typeref:struct:ib_sdi_key
ib_sdi_open_table	api/api0api.cc	/^static ib_err_t ib_sdi_open_table(uint32_t tablespace_id, trx_t *trx,$/;"	f	file:
ib_sdi_set	api/api0api.cc	/^dberr_t ib_sdi_set(uint32_t tablespace_id, const ib_sdi_key_t *ib_sdi_key,$/;"	f
ib_sdi_vector	include/api0misc.h	/^struct ib_sdi_vector {$/;"	s
ib_sdi_vector_t	include/api0api.h	/^typedef struct ib_sdi_vector ib_sdi_vector_t;$/;"	t	typeref:struct:ib_sdi_vector
ib_sec_read_tuple_create	api/api0api.cc	/^ib_tpl_t ib_sec_read_tuple_create(ib_crsr_t ib_crsr) \/*!< in: Cursor instance *\/$/;"	f
ib_sec_search_tuple_create	api/api0api.cc	/^ib_tpl_t ib_sec_search_tuple_create($/;"	f
ib_senderrf	handler/ha_innodb.cc	/^void ib_senderrf(THD *thd,             \/*!< in\/out: session *\/$/;"	f
ib_sequence_t	handler/handler0alter.cc	/^ib_sequence_t::ib_sequence_t(THD *thd, ulonglong start_value,$/;"	f	class:ib_sequence_t
ib_sequence_t	include/handler0alter.h	/^struct ib_sequence_t {$/;"	s
ib_srch_mode_t	include/api0api.h	/^} ib_srch_mode_t;$/;"	t	typeref:enum:__anon24
ib_table_def_t	api/api0api.cc	/^struct ib_table_def_t {$/;"	s	file:
ib_table_get_id	api/api0api.cc	/^ib_err_t ib_table_get_id(const char *table_name, \/*!< in: table to find *\/$/;"	f
ib_table_get_id_low	api/api0api.cc	/^static ib_err_t ib_table_get_id_low($/;"	f	file:
ib_tbl_fmt	api/api0api.cc	/^  ib_tbl_fmt_t ib_tbl_fmt; \/*!< Row format *\/$/;"	m	struct:ib_table_def_t	file:
ib_tbl_fmt_t	include/api0api.h	/^} ib_tbl_fmt_t;$/;"	t	typeref:enum:__anon20
ib_time_monotonic_ms_t	include/ut0ut.h	/^typedef int64_t ib_time_monotonic_ms_t;$/;"	t
ib_time_monotonic_t	include/ut0ut.h	/^typedef int64_t ib_time_monotonic_t;$/;"	t
ib_time_monotonic_us_t	include/ut0ut.h	/^typedef int64_t ib_time_monotonic_us_t;$/;"	t
ib_time_t	include/ut0ut.h	/^typedef time_t ib_time_t;$/;"	t
ib_to_lower_case	api/api0api.cc	/^static void ib_to_lower_case(char *ptr) \/*!< string to convert to lower case *\/$/;"	f	file:
ib_tpl_t	include/api0api.h	/^typedef struct ib_tuple_t *ib_tpl_t;$/;"	t	typeref:struct:ib_tuple_t
ib_trx_begin	api/api0api.cc	/^ib_trx_t ib_trx_begin($/;"	f
ib_trx_commit	api/api0api.cc	/^ib_err_t ib_trx_commit(ib_trx_t ib_trx) \/*!< in: trx handle *\/$/;"	f
ib_trx_get_start_time	api/api0api.cc	/^ib_u64_t ib_trx_get_start_time(ib_trx_t ib_trx) \/*!< in: transaction *\/$/;"	f
ib_trx_level_setting	api/api0api.cc	/^ulong ib_trx_level_setting = IB_TRX_READ_UNCOMMITTED;$/;"	v
ib_trx_level_t	include/api0api.h	/^} ib_trx_level_t;$/;"	t	typeref:enum:__anon27
ib_trx_lock_table_with_retry	api/api0misc.cc	/^dberr_t ib_trx_lock_table_with_retry($/;"	f
ib_trx_read_only	api/api0api.cc	/^ib_u32_t ib_trx_read_only(ib_trx_t ib_trx) \/*!< in: trx handle *\/$/;"	f
ib_trx_release	api/api0api.cc	/^ib_err_t ib_trx_release(ib_trx_t ib_trx) \/*!< in: trx handle *\/$/;"	f
ib_trx_rollback	api/api0api.cc	/^ib_err_t ib_trx_rollback(ib_trx_t ib_trx) \/*!< in: trx handle *\/$/;"	f
ib_trx_start	api/api0api.cc	/^ib_err_t ib_trx_start($/;"	f
ib_trx_t	include/api0api.h	/^typedef struct trx_t *ib_trx_t;$/;"	t	typeref:struct:trx_t
ib_tuple_check_int	api/api0api.cc	/^ib_err_t ib_tuple_check_int(ib_tpl_t ib_tpl, \/*!< in: InnoDB tuple *\/$/;"	f
ib_tuple_clear	api/api0api.cc	/^ib_tpl_t ib_tuple_clear(ib_tpl_t ib_tpl) \/*!< in,own: tuple (will be freed) *\/$/;"	f
ib_tuple_delete	api/api0api.cc	/^void ib_tuple_delete(ib_tpl_t ib_tpl) \/*!< in,own: Tuple instance to delete *\/$/;"	f
ib_tuple_get_cluster_key	api/api0api.cc	/^ib_err_t ib_tuple_get_cluster_key($/;"	f
ib_tuple_get_n_cols	api/api0api.cc	/^ib_ulint_t ib_tuple_get_n_cols($/;"	f
ib_tuple_get_n_user_cols	api/api0api.cc	/^ib_ulint_t ib_tuple_get_n_user_cols($/;"	f
ib_tuple_read_double	api/api0api.cc	/^ib_err_t ib_tuple_read_double(ib_tpl_t ib_tpl,   \/*!< in: InnoDB tuple *\/$/;"	f
ib_tuple_read_float	api/api0api.cc	/^ib_err_t ib_tuple_read_float(ib_tpl_t ib_tpl,   \/*!< in: InnoDB tuple *\/$/;"	f
ib_tuple_read_i16	api/api0api.cc	/^ib_err_t ib_tuple_read_i16(ib_tpl_t ib_tpl, \/*!< in: InnoDB tuple *\/$/;"	f
ib_tuple_read_i32	api/api0api.cc	/^ib_err_t ib_tuple_read_i32(ib_tpl_t ib_tpl, \/*!< in: InnoDB tuple *\/$/;"	f
ib_tuple_read_i64	api/api0api.cc	/^ib_err_t ib_tuple_read_i64(ib_tpl_t ib_tpl, \/*!< in: InnoDB tuple *\/$/;"	f
ib_tuple_read_i8	api/api0api.cc	/^ib_err_t ib_tuple_read_i8(ib_tpl_t ib_tpl, \/*!< in: InnoDB tuple *\/$/;"	f
ib_tuple_read_u16	api/api0api.cc	/^ib_err_t ib_tuple_read_u16(ib_tpl_t ib_tpl, \/*!< in: InnoDB tuple *\/$/;"	f
ib_tuple_read_u32	api/api0api.cc	/^ib_err_t ib_tuple_read_u32(ib_tpl_t ib_tpl, \/*!< in: InnoDB tuple *\/$/;"	f
ib_tuple_read_u64	api/api0api.cc	/^ib_err_t ib_tuple_read_u64(ib_tpl_t ib_tpl, \/*!< in: InnoDB tuple *\/$/;"	f
ib_tuple_read_u8	api/api0api.cc	/^ib_err_t ib_tuple_read_u8(ib_tpl_t ib_tpl, \/*!< in: InnoDB tuple *\/$/;"	f
ib_tuple_t	api/api0api.cc	/^struct ib_tuple_t {$/;"	s	file:
ib_tuple_type_t	api/api0api.cc	/^enum ib_tuple_type_t {$/;"	g	file:
ib_tuple_write_double	api/api0api.cc	/^ib_err_t ib_tuple_write_double($/;"	f
ib_tuple_write_float	api/api0api.cc	/^ib_err_t ib_tuple_write_float(ib_tpl_t ib_tpl, \/*!< in\/out: tuple to write to *\/$/;"	f
ib_u16_t	include/api0api.h	/^typedef uint16_t ib_u16_t;$/;"	t
ib_u16_t	include/api0api.h	/^typedef unsigned __int16 ib_u16_t;$/;"	t
ib_u32_t	include/api0api.h	/^typedef uint32_t ib_u32_t;$/;"	t
ib_u32_t	include/api0api.h	/^typedef unsigned __int32 ib_u32_t;$/;"	t
ib_u64_t	include/api0api.h	/^typedef uint64_t ib_u64_t;$/;"	t
ib_u64_t	include/api0api.h	/^typedef unsigned __int64 ib_u64_t;$/;"	t
ib_u8_t	include/api0api.h	/^typedef uint8_t ib_u8_t;$/;"	t
ib_u8_t	include/api0api.h	/^typedef unsigned __int8 ib_u8_t;$/;"	t
ib_uc_t	include/fts0fts.h	/^typedef unsigned short ib_uc_t;$/;"	t
ib_ulint_t	include/api0api.h	/^typedef unsigned __int64 ib_ulint_t;$/;"	t
ib_ulint_t	include/api0api.h	/^typedef unsigned long int ib_ulint_t;$/;"	t
ib_update_col	api/api0api.cc	/^static void ib_update_col($/;"	f	file:
ib_update_row_with_lock_retry	api/api0api.cc	/^ib_err_t ib_update_row_with_lock_retry($/;"	f
ib_update_vector_create	api/api0api.cc	/^upd_t *ib_update_vector_create(ib_cursor_t *cursor) \/*!< in: current cursor *\/$/;"	f
ib_ut_strerr	api/api0api.cc	/^const char *ib_ut_strerr(ib_err_t num) \/*!< in: error number *\/$/;"	f
ib_vector_allocator	include/ut0vec.h	70;"	d
ib_vector_create	ut/ut0vec.cc	/^ib_vector_t *ib_vector_create($/;"	f
ib_vector_getp	include/ut0vec.h	67;"	d
ib_vector_getp_const	include/ut0vec.h	68;"	d
ib_vector_resize	ut/ut0vec.cc	/^void ib_vector_resize(ib_vector_t *vec) \/* in: vector *\/$/;"	f
ib_vector_t	include/ut0vec.h	/^struct ib_vector_t {$/;"	s
ib_wake_master_thread	api/api0api.cc	/^void ib_wake_master_thread(void) {$/;"	f
ib_warn_row_too_big	handler/ha_innodb.cc	/^void ib_warn_row_too_big(const dict_table_t *table) {$/;"	f
ib_wqueue_add	ut/ut0wqueue.cc	/^void ib_wqueue_add(ib_wqueue_t *wq, void *item, mem_heap_t *heap) {$/;"	f
ib_wqueue_create	ut/ut0wqueue.cc	/^ib_wqueue_t *ib_wqueue_create(void) {$/;"	f
ib_wqueue_free	ut/ut0wqueue.cc	/^void ib_wqueue_free(ib_wqueue_t *wq) \/*!< in: work queue *\/$/;"	f
ib_wqueue_is_empty	ut/ut0wqueue.cc	/^ibool ib_wqueue_is_empty($/;"	f
ib_wqueue_t	ut/ut0wqueue.cc	/^struct ib_wqueue_t {$/;"	s	file:
ib_wqueue_timedwait	ut/ut0wqueue.cc	/^void *ib_wqueue_timedwait($/;"	f
ibd_file_missing	include/dict0mem.h	/^  unsigned ibd_file_missing : 1;$/;"	m	struct:dict_table_t
ibd_open_for_recovery	fil/fil0fil.cc	/^fil_load_status Fil_shard::ibd_open_for_recovery(space_id_t space_id,$/;"	f	class:Fil_shard
ibd_open_for_recovery	fil/fil0fil.cc	/^fil_load_status Fil_system::ibd_open_for_recovery(space_id_t space_id,$/;"	f	class:Fil_system
ibool	include/ut0rbt.h	49;"	d
ibt	include/srv0tmp.h	/^namespace ibt {$/;"	n
ibt	srv/srv0tmp.cc	/^namespace ibt {$/;"	n	file:
ibuf	ibuf/ibuf0ibuf.cc	/^ibuf_t *ibuf = nullptr;$/;"	v
ibuf0ibuf_h	include/ibuf0ibuf.h	34;"	d
ibuf0types_h	include/ibuf0types.h	34;"	d
ibuf_add_free_page	ibuf/ibuf0ibuf.cc	/^static ibool ibuf_add_free_page(void) {$/;"	f	file:
ibuf_add_ops	ibuf/ibuf0ibuf.cc	/^static void ibuf_add_ops($/;"	f	file:
ibuf_bitmap_get_map_page	ibuf/ibuf0ibuf.cc	762;"	d	file:
ibuf_bitmap_get_map_page_func	ibuf/ibuf0ibuf.cc	/^static page_t *ibuf_bitmap_get_map_page_func(const page_id_t &page_id,$/;"	f	file:
ibuf_bitmap_mutex	ibuf/ibuf0ibuf.cc	/^static ib_mutex_t ibuf_bitmap_mutex;$/;"	v	file:
ibuf_bitmap_mutex_key	sync/sync0sync.cc	/^mysql_pfs_key_t ibuf_bitmap_mutex_key;$/;"	v
ibuf_bitmap_page_get_bits	ibuf/ibuf0ibuf.cc	597;"	d	file:
ibuf_bitmap_page_get_bits	ibuf/ibuf0ibuf.cc	609;"	d	file:
ibuf_bitmap_page_get_bits_low	ibuf/ibuf0ibuf.cc	/^ulint ibuf_bitmap_page_get_bits_low(const page_t *page,$/;"	f
ibuf_bitmap_page_init	ibuf/ibuf0ibuf.cc	/^void ibuf_bitmap_page_init(buf_block_t *block, \/*!< in: bitmap page *\/$/;"	f
ibuf_bitmap_page_no_calc	ibuf/ibuf0ibuf.cc	/^const page_id_t ibuf_bitmap_page_no_calc(const page_id_t &page_id,$/;"	f
ibuf_bitmap_page_set_bits	ibuf/ibuf0ibuf.cc	/^static void ibuf_bitmap_page_set_bits(page_t *page, const page_id_t &page_id,$/;"	f	file:
ibuf_btr_pcur_commit_specify_mtr	ibuf/ibuf0ibuf.cc	/^void ibuf_btr_pcur_commit_specify_mtr($/;"	f
ibuf_build_entry_from_ibuf_rec	ibuf/ibuf0ibuf.cc	1391;"	d	file:
ibuf_build_entry_from_ibuf_rec	ibuf/ibuf0ibuf.cc	1394;"	d	file:
ibuf_build_entry_from_ibuf_rec_func	ibuf/ibuf0ibuf.cc	/^static dtuple_t *ibuf_build_entry_from_ibuf_rec_func($/;"	f	file:
ibuf_check_bitmap_on_import	ibuf/ibuf0ibuf.cc	/^dberr_t ibuf_check_bitmap_on_import($/;"	f
ibuf_close	ibuf/ibuf0ibuf.cc	/^void ibuf_close(void) {$/;"	f
ibuf_contract	ibuf/ibuf0ibuf.cc	/^static ulint ibuf_contract(bool sync) {$/;"	f	file:
ibuf_contract_after_insert	ibuf/ibuf0ibuf.cc	/^void ibuf_contract_after_insert($/;"	f
ibuf_count_check	ibuf/ibuf0ibuf.cc	/^void ibuf_count_check(const page_id_t &page_id) {$/;"	f
ibuf_count_get	ibuf/ibuf0ibuf.cc	/^ulint ibuf_count_get(const page_id_t &page_id) {$/;"	f
ibuf_count_set	ibuf/ibuf0ibuf.cc	/^static void ibuf_count_set(const page_id_t &page_id, ulint val) {$/;"	f	file:
ibuf_counts	ibuf/ibuf0ibuf.cc	/^static ulint ibuf_counts[IBUF_COUNT_N_SPACES][IBUF_COUNT_N_PAGES];$/;"	v	file:
ibuf_data_enough_free_for_insert	ibuf/ibuf0ibuf.cc	/^ibool ibuf_data_enough_free_for_insert(void) {$/;"	f
ibuf_data_too_much_free	ibuf/ibuf0ibuf.cc	/^ibool ibuf_data_too_much_free(void) {$/;"	f
ibuf_debug	ibuf/ibuf0ibuf.cc	/^uint ibuf_debug;$/;"	v
ibuf_delete	ibuf/ibuf0ibuf.cc	/^static void ibuf_delete(const dtuple_t *entry, \/*!< in: entry *\/$/;"	f	file:
ibuf_delete_for_discarded_space	ibuf/ibuf0ibuf.cc	/^void ibuf_delete_for_discarded_space(space_id_t space) \/*!< in: space id *\/$/;"	f
ibuf_delete_rec	ibuf/ibuf0ibuf.cc	/^static MY_ATTRIBUTE((warn_unused_result)) ibool ibuf_delete_rec($/;"	f
ibuf_dummy_index_add_col	ibuf/ibuf0ibuf.cc	/^static void ibuf_dummy_index_add_col($/;"	f	file:
ibuf_dummy_index_create	ibuf/ibuf0ibuf.cc	/^static dict_index_t *ibuf_dummy_index_create($/;"	f	file:
ibuf_dummy_index_free	ibuf/ibuf0ibuf.cc	/^static void ibuf_dummy_index_free($/;"	f	file:
ibuf_enter	ibuf/ibuf0ibuf.cc	/^void ibuf_enter(mtr_t *mtr) \/*!< in\/out: mini-transaction *\/$/;"	f
ibuf_entry_build	ibuf/ibuf0ibuf.cc	/^static dtuple_t *ibuf_entry_build($/;"	f	file:
ibuf_exit	ibuf/ibuf0ibuf.cc	/^void ibuf_exit(mtr_t *mtr) \/*!< in\/out: mini-transaction *\/$/;"	f
ibuf_fixed_addr_page	ibuf/ibuf0ibuf.cc	/^ibool ibuf_fixed_addr_page(const page_id_t &page_id,$/;"	f
ibuf_free_excess_pages	ibuf/ibuf0ibuf.cc	/^void ibuf_free_excess_pages(void) {$/;"	f
ibuf_get_entry_counter	ibuf/ibuf0ibuf.cc	2996;"	d	file:
ibuf_get_entry_counter	ibuf/ibuf0ibuf.cc	2999;"	d	file:
ibuf_get_entry_counter_func	ibuf/ibuf0ibuf.cc	/^static ulint ibuf_get_entry_counter_func($/;"	f	file:
ibuf_get_entry_counter_low	ibuf/ibuf0ibuf.cc	2928;"	d	file:
ibuf_get_entry_counter_low	ibuf/ibuf0ibuf.cc	2931;"	d	file:
ibuf_get_entry_counter_low_func	ibuf/ibuf0ibuf.cc	/^static ulint ibuf_get_entry_counter_low_func($/;"	f	file:
ibuf_get_merge_page_nos	ibuf/ibuf0ibuf.cc	2067;"	d	file:
ibuf_get_merge_page_nos	ibuf/ibuf0ibuf.cc	2070;"	d	file:
ibuf_get_merge_page_nos_func	ibuf/ibuf0ibuf.cc	/^static ulint ibuf_get_merge_page_nos_func($/;"	f	file:
ibuf_get_merge_pages	ibuf/ibuf0ibuf.cc	/^    ibuf_get_merge_pages(btr_pcur_t *pcur, \/*!< in\/out: cursor *\/$/;"	f
ibuf_get_user_rec	ibuf/ibuf0ibuf.cc	/^static MY_ATTRIBUTE((warn_unused_result)) const rec_t *ibuf_get_user_rec($/;"	f
ibuf_get_volume_buffered	ibuf/ibuf0ibuf.cc	/^static ulint ibuf_get_volume_buffered($/;"	f	file:
ibuf_get_volume_buffered_count	ibuf/ibuf0ibuf.cc	2586;"	d	file:
ibuf_get_volume_buffered_count	ibuf/ibuf0ibuf.cc	2589;"	d	file:
ibuf_get_volume_buffered_count_func	ibuf/ibuf0ibuf.cc	/^static ulint ibuf_get_volume_buffered_count_func($/;"	f	file:
ibuf_get_volume_buffered_hash	ibuf/ibuf0ibuf.cc	/^static ibool ibuf_get_volume_buffered_hash($/;"	f	file:
ibuf_header_page_get	ibuf/ibuf0ibuf.cc	/^static page_t *ibuf_header_page_get(mtr_t *mtr) \/*!< in\/out: mini-transaction *\/$/;"	f	file:
ibuf_init_at_db_start	ibuf/ibuf0ibuf.cc	/^void ibuf_init_at_db_start(void) {$/;"	f
ibuf_insert	ibuf/ibuf0ibuf.cc	/^ibool ibuf_insert(ibuf_op_t op, const dtuple_t *entry, dict_index_t *index,$/;"	f
ibuf_insert_low	ibuf/ibuf0ibuf.cc	/^    ibuf_insert_low(ulint mode, ibuf_op_t op, ibool no_counter,$/;"	f
ibuf_insert_to_index_page	ibuf/ibuf0ibuf.cc	/^static void ibuf_insert_to_index_page($/;"	f	file:
ibuf_insert_to_index_page_low	ibuf/ibuf0ibuf.cc	/^static rec_t *ibuf_insert_to_index_page_low($/;"	f	file:
ibuf_is_empty	ibuf/ibuf0ibuf.cc	/^bool ibuf_is_empty(void) {$/;"	f
ibuf_max_size_update	ibuf/ibuf0ibuf.cc	/^void ibuf_max_size_update(ulint new_val) \/*!< in: new value in terms of$/;"	f
ibuf_merge	ibuf/ibuf0ibuf.cc	/^    ibuf_merge(ulint *n_pages, bool sync) {$/;"	f
ibuf_merge_in_background	ibuf/ibuf0ibuf.cc	/^ulint ibuf_merge_in_background(bool full) {$/;"	f
ibuf_merge_or_delete_for_page	ibuf/ibuf0ibuf.cc	/^void ibuf_merge_or_delete_for_page(buf_block_t *block, const page_id_t &page_id,$/;"	f
ibuf_merge_pages	ibuf/ibuf0ibuf.cc	/^static ulint ibuf_merge_pages($/;"	f	file:
ibuf_merge_space	ibuf/ibuf0ibuf.cc	/^ulint ibuf_merge_space(space_id_t space) \/*!< in: tablespace id to merge *\/$/;"	f
ibuf_mutex	ibuf/ibuf0ibuf.cc	/^static ib_mutex_t ibuf_mutex;$/;"	v	file:
ibuf_mutex_key	sync/sync0sync.cc	/^mysql_pfs_key_t ibuf_mutex_key;$/;"	v
ibuf_op_t	include/ibuf0ibuf.h	/^} ibuf_op_t;$/;"	t	typeref:enum:__anon8
ibuf_page	include/ibuf0ibuf.h	244;"	d
ibuf_page	include/ibuf0ibuf.h	255;"	d
ibuf_page_low	ibuf/ibuf0ibuf.cc	/^ibool ibuf_page_low(const page_id_t &page_id, const page_size_t &page_size,$/;"	f
ibuf_parse_bitmap_init	ibuf/ibuf0ibuf.cc	/^byte *ibuf_parse_bitmap_init(byte *ptr, \/*!< in: buffer *\/$/;"	f
ibuf_pessimistic_insert_mutex	ibuf/ibuf0ibuf.cc	/^static ib_mutex_t ibuf_pessimistic_insert_mutex;$/;"	v	file:
ibuf_pessimistic_insert_mutex_key	sync/sync0sync.cc	/^mysql_pfs_key_t ibuf_pessimistic_insert_mutex_key;$/;"	v
ibuf_print	ibuf/ibuf0ibuf.cc	/^void ibuf_print(FILE *file) \/*!< in: file where to print *\/$/;"	f
ibuf_print_ops	ibuf/ibuf0ibuf.cc	/^static void ibuf_print_ops($/;"	f	file:
ibuf_rec_get_counter	ibuf/ibuf0ibuf.cc	/^ulint ibuf_rec_get_counter(const rec_t *rec) \/*!< in: ibuf record *\/$/;"	f
ibuf_rec_get_info	ibuf/ibuf0ibuf.cc	1144;"	d	file:
ibuf_rec_get_info	ibuf/ibuf0ibuf.cc	1147;"	d	file:
ibuf_rec_get_info_func	ibuf/ibuf0ibuf.cc	/^static void ibuf_rec_get_info_func($/;"	f	file:
ibuf_rec_get_op_type	ibuf/ibuf0ibuf.cc	1233;"	d	file:
ibuf_rec_get_op_type	ibuf/ibuf0ibuf.cc	1235;"	d	file:
ibuf_rec_get_op_type_func	ibuf/ibuf0ibuf.cc	/^static ibuf_op_t ibuf_rec_get_op_type_func($/;"	f	file:
ibuf_rec_get_page_no	ibuf/ibuf0ibuf.cc	1077;"	d	file:
ibuf_rec_get_page_no	ibuf/ibuf0ibuf.cc	1079;"	d	file:
ibuf_rec_get_page_no_func	ibuf/ibuf0ibuf.cc	/^static page_no_t ibuf_rec_get_page_no_func($/;"	f	file:
ibuf_rec_get_size	ibuf/ibuf0ibuf.cc	/^ulint ibuf_rec_get_size(const rec_t *rec,  \/*!< in: ibuf record *\/$/;"	f
ibuf_rec_get_space	ibuf/ibuf0ibuf.cc	1110;"	d	file:
ibuf_rec_get_space	ibuf/ibuf0ibuf.cc	1112;"	d	file:
ibuf_rec_get_space_func	ibuf/ibuf0ibuf.cc	/^static space_id_t ibuf_rec_get_space_func($/;"	f	file:
ibuf_rec_get_volume	ibuf/ibuf0ibuf.cc	1521;"	d	file:
ibuf_rec_get_volume	ibuf/ibuf0ibuf.cc	1523;"	d	file:
ibuf_rec_get_volume_func	ibuf/ibuf0ibuf.cc	/^static ulint ibuf_rec_get_volume_func($/;"	f	file:
ibuf_rec_has_multi_value	ibuf/ibuf0ibuf.cc	/^bool ibuf_rec_has_multi_value(const rec_t *rec) {$/;"	f
ibuf_remove_free_page	ibuf/ibuf0ibuf.cc	/^static void ibuf_remove_free_page(void) {$/;"	f	file:
ibuf_reset_free_bits	ibuf/ibuf0ibuf.cc	/^void ibuf_reset_free_bits($/;"	f
ibuf_restore_pos	ibuf/ibuf0ibuf.cc	/^static ibool ibuf_restore_pos($/;"	f	file:
ibuf_search_tuple_build	ibuf/ibuf0ibuf.cc	/^static dtuple_t *ibuf_search_tuple_build($/;"	f	file:
ibuf_set_bitmap_for_bulk_load	ibuf/ibuf0ibuf.cc	/^void ibuf_set_bitmap_for_bulk_load(buf_block_t *block, bool reset) {$/;"	f
ibuf_set_del_mark	ibuf/ibuf0ibuf.cc	/^static void ibuf_set_del_mark($/;"	f	file:
ibuf_set_free_bits_func	ibuf/ibuf0ibuf.cc	/^void ibuf_set_free_bits_func($/;"	f
ibuf_set_free_bits_low	ibuf/ibuf0ibuf.cc	/^void ibuf_set_free_bits_low($/;"	f
ibuf_size_update	ibuf/ibuf0ibuf.cc	/^static void ibuf_size_update(const page_t *root) \/*!< in: ibuf tree root *\/$/;"	f	file:
ibuf_tree_root_get	ibuf/ibuf0ibuf.cc	/^static page_t *ibuf_tree_root_get(mtr_t *mtr) \/*!< in: mtr *\/$/;"	f	file:
ibuf_update_free_bits_for_two_pages_low	ibuf/ibuf0ibuf.cc	/^void ibuf_update_free_bits_for_two_pages_low($/;"	f
ibuf_update_free_bits_low	ibuf/ibuf0ibuf.cc	/^void ibuf_update_free_bits_low(const buf_block_t *block, \/*!< in: index page *\/$/;"	f
ibuf_update_free_bits_zip	ibuf/ibuf0ibuf.cc	/^void ibuf_update_free_bits_zip(buf_block_t *block, \/*!< in\/out: index page *\/$/;"	f
ibuf_update_max_tablespace_id	ibuf/ibuf0ibuf.cc	/^void ibuf_update_max_tablespace_id(void) {$/;"	f
ibuf_use_t	include/ibuf0ibuf.h	/^enum ibuf_use_t {$/;"	g
icp_rec_field_no	include/row0mysql.h	/^  ulint icp_rec_field_no;       \/*!< field number of the column in an$/;"	m	struct:mysql_row_templ_t
id	dict/dict0upgrade.cc	/^  space_id_t id;$/;"	m	struct:__anon1	file:
id	fil/fil0fil.cc	/^  size_t id() const { return m_id; }$/;"	f	class:Fil_shard
id	include/buf0buf.h	/^  page_id_t id;$/;"	m	class:Cache_hint::buf_page_t
id	include/dict0mem.h	/^  char *id;                 \/*!< id of the constraint as a$/;"	m	struct:dict_foreign_t
id	include/dict0mem.h	/^  space_index_t id;       \/*!< id of the index *\/$/;"	m	struct:dict_index_t
id	include/dict0mem.h	/^  table_id_t id;$/;"	m	struct:dict_table_t
id	include/fil0fil.h	/^  space_id_t id;$/;"	m	struct:fil_space_t
id	include/fts0fts.h	/^  table_id_t id;$/;"	m	struct:fts_aux_table_t
id	include/pars0pars.h	/^  const char *id;   \/*!< identifier *\/$/;"	m	struct:pars_bound_id_t
id	include/trx0purge.h	/^  space_id_t id() { return (m_id); }$/;"	f	struct:undo::Tablespace
id	include/trx0trx.h	/^  trx_id_t id; \/*!< transaction id *\/$/;"	m	struct:trx_t
id	include/trx0undo.h	/^  ulint id;        \/*!< undo log slot number within the$/;"	m	struct:trx_undo_t
id	pars/lexyy.cc	961;"	d	file:
id	trx/trx0undo.cc	/^    ulint *id,             \/*!< out: slot index within rseg header *\/$/;"	v
id2next_id	include/trx0purge.h	/^inline space_id_t id2next_id(space_id_t space_id) {$/;"	f	namespace:undo
id2num	include/trx0purge.h	/^inline space_id_t id2num(space_id_t space_id) {$/;"	f	namespace:undo
id_hash	include/dict0mem.h	/^  hash_node_t id_hash;$/;"	m	struct:dict_table_t
id_name_t	include/dict0mem.h	/^  explicit id_name_t(const char *name) : m_name(name) {}$/;"	f	class:id_name_t
id_name_t	include/dict0mem.h	/^  id_name_t() : m_name() {}$/;"	f	class:id_name_t
id_name_t	include/dict0mem.h	/^class id_name_t {$/;"	c
idf	fts/fts0que.cc	/^  double idf;            \/*!< Inverse document frequency *\/$/;"	m	struct:fts_word_freq_t	file:
ids_t	include/read0types.h	/^    ids_t() : m_ptr(), m_size(), m_reserved() {}$/;"	f	class:ReadView::ids_t
ids_t	include/read0types.h	/^  class ids_t {$/;"	c	class:ReadView
idx_cond	include/row0mysql.h	/^  bool idx_cond;         \/*!< True if index condition pushdown$/;"	m	struct:row_prebuilt_t
idx_cond_n_cols	include/row0mysql.h	/^  ulint idx_cond_n_cols; \/*!< Number of fields in idx_cond_cols.$/;"	m	struct:row_prebuilt_t
idx_cond_push	handler/ha_innodb.cc	/^class Item *ha_innobase::idx_cond_push(uint keyno, class Item *idx_cond) {$/;"	f	class:ha_innobase
idx_trans_tbl	handler/ha_innodb.h	/^  innodb_idx_translate_t idx_trans_tbl; \/*!< index translation table between$/;"	m	struct:INNOBASE_SHARE
idx_tuple_vec	row/row0merge.cc	/^  typedef std::vector<dtuple_t *, ut_allocator<dtuple_t *>> idx_tuple_vec;$/;"	t	class:index_tuple_info_t	file:
if_node_t	include/pars0pars.h	/^struct if_node_t {$/;"	s
if_statement	pars/pars0grm.y	/^if_statement:$/;"	l
if_step	eval/eval0proc.cc	/^que_thr_t *if_step(que_thr_t *thr) \/*!< in: query thread *\/$/;"	f
ignore_trailing_default	data/data0data.cc	/^void dtuple_t::ignore_trailing_default(const dict_index_t *index) {$/;"	f	class:dtuple_t
ilist	include/fts0types.h	/^  byte *ilist; \/*!< Binary list of documents & word$/;"	m	struct:fts_node_t
ilist_size	include/fts0types.h	/^  ulint ilist_size; \/*!< Used size of ilist in bytes. *\/$/;"	m	struct:fts_node_t
ilist_size_alloc	include/fts0types.h	/^  ulint ilist_size_alloc;$/;"	m	struct:fts_node_t
import	lob/lob0first.cc	/^void first_page_t::import(trx_id_t trx_id) {$/;"	f	class:lob::first_page_t
import	lob/lob0impl.cc	/^void node_page_t::import(trx_id_t trx_id) {$/;"	f	class:lob::node_page_t
import	lob/lob0impl.cc	/^void z_index_page_t::import(trx_id_t trx_id) {$/;"	f	class:lob::z_index_page_t
import	lob/zlob0first.cc	/^void z_first_page_t::import(trx_id_t trx_id) {$/;"	f	class:lob::z_first_page_t
import_ctx_t	include/btr0pcur.h	/^struct import_ctx_t {$/;"	s
import_page_status_t	row/row0import.cc	/^  enum import_page_status_t {$/;"	g	class:PageConverter	file:
in_LRU_list	include/buf0buf.h	/^  bool in_LRU_list;$/;"	m	class:Cache_hint::buf_page_t
in_depth	include/trx0trx.h	/^  ib_uint32_t in_depth; \/*!< Track nested TrxInInnoDB$/;"	m	struct:trx_t
in_dirty_dict_tables_list	include/dict0mem.h	/^  bool in_dirty_dict_tables_list;$/;"	m	struct:dict_table_t
in_flush_list	include/buf0buf.h	/^  bool in_flush_list;$/;"	m	class:Cache_hint::buf_page_t
in_free_list	include/buf0buf.h	/^  bool in_free_list;$/;"	m	class:Cache_hint::buf_page_t
in_fts_query	include/row0mysql.h	/^  bool in_fts_query;                  \/*!< Whether we are in a FTS query *\/$/;"	m	struct:row_prebuilt_t
in_innodb	include/trx0trx.h	/^  ib_uint32_t in_innodb; \/*!< if the thread is executing$/;"	m	struct:trx_t
in_mysql_interface	include/row0upd.h	/^  ibool in_mysql_interface;$/;"	m	struct:upd_node_t
in_mysql_trx_list	include/trx0trx.h	/^  bool in_mysql_trx_list;$/;"	m	struct:trx_t
in_page_hash	include/buf0buf.h	/^  bool in_page_hash;$/;"	m	class:Cache_hint::buf_page_t
in_progress	include/fts0types.h	/^  bool in_progress;  \/*!< flag whether sync is in progress.*\/$/;"	m	struct:fts_sync_t
in_rollback	include/trx0trx.h	/^  bool in_rollback;   \/*!< true when the transaction is$/;"	m	struct:trx_t
in_rollback	include/trx0trx.h	/^  bool in_rollback;$/;"	m	struct:trx_lock_t
in_rw_trx_list	include/trx0trx.h	/^  bool in_rw_trx_list; \/*!< true if in trx_sys->rw_trx_list *\/$/;"	m	struct:trx_t
in_transit_state	include/clone0clone.h	/^  bool in_transit_state() { return (m_next_state != CLONE_SNAPSHOT_NONE); }$/;"	f	class:Clone_Task_Manager
in_transit_state	include/clone0snapshot.h	/^  bool in_transit_state() {$/;"	f	class:Clone_Snapshot
in_truncate	include/trx0trx.h	/^  bool in_truncate;    \/* This trx is doing truncation *\/$/;"	m	struct:trx_t
in_unzip_LRU_list	include/buf0buf.h	/^  bool in_unzip_LRU_list;$/;"	m	struct:Cache_hint::buf_block_t
in_use	include/fil0fil.h	/^  size_t in_use;$/;"	m	struct:fil_node_t
in_use	include/srv0srv.h	/^  bool in_use;$/;"	m	struct:srv_slot_t
in_use	include/trx0purge.h	/^  bool in_use;$/;"	m	struct:undo::space_id_account
in_withdraw_list	include/buf0buf.h	/^  bool in_withdraw_list;$/;"	m	struct:Cache_hint::buf_block_t
in_zip_hash	include/buf0buf.h	/^  bool in_zip_hash;$/;"	m	class:Cache_hint::buf_page_t
inc	include/buf0stats.h	/^  void inc(const index_id_t &id) {$/;"	f	class:buf_stat_per_index_t
inc	include/ut0counter.h	/^inline Type inc(Shards<COUNT> &shards, size_t id) {$/;"	f	namespace:Counter
inc	include/ut0lock_free_hash.h	/^  void inc() {$/;"	f	class:ut_lock_free_cnt_t
inc	include/ut0stage.h	/^  void inc(ulint inc_val = 1) {}$/;"	f	class:ut_stage_alter_t
inc	include/ut0stage.h	/^inline void ut_stage_alter_t::inc(ulint inc_val \/* = 1 *\/) {$/;"	f	class:ut_stage_alter_t
includes_supremum	include/lock0priv.h	/^  bool includes_supremum() const {$/;"	f	struct:lock_t
incr_LRU_size_in_bytes	buf/buf0lru.cc	/^static inline void incr_LRU_size_in_bytes(buf_page_t *bpage,$/;"	f	file:
incr_curr_size	include/trx0types.h	/^  void incr_curr_size() { ++curr_size; }$/;"	f	struct:trx_rseg_t
incr_flush_list_size_in_bytes	buf/buf0flu.cc	/^static inline void incr_flush_list_size_in_bytes($/;"	f	file:
incr_len	include/lob0impl.h	/^  void incr_len() {$/;"	f	struct:lob::plist_base_node_t
incr_length_by_2	include/lob0impl.h	/^  void incr_length_by_2() {$/;"	f	struct:lob::frag_node_t
incr_lob_version	lob/lob0first.cc	/^uint32_t first_page_t::incr_lob_version() {$/;"	f	class:lob::first_page_t
incr_lob_version	lob/zlob0first.cc	/^uint32_t z_first_page_t::incr_lob_version() {$/;"	f	class:lob::z_first_page_t
incr_n_dir_entries	include/lob0impl.h	/^  void incr_n_dir_entries() const {$/;"	f	struct:lob::z_frag_page_t
increment_ref_counts	handler/ha_innopart.cc	/^void Ha_innopart_share::increment_ref_counts() {$/;"	f	class:Ha_innopart_share
increment_scan	include/trx0purge.h	/^  space_id_t increment_scan() const {$/;"	f	class:undo::Truncate
ind	include/dict0mem.h	/^  unsigned ind : 10;        \/*!< table column position$/;"	m	struct:dict_col_t
ind_def	include/dict0crea.h	/^  ins_node_t *ind_def;   \/*!< child node which does the insert of$/;"	m	struct:ind_node_t
ind_node_t	include/dict0crea.h	/^struct ind_node_t {$/;"	s
ind_row	include/dict0crea.h	/^  dtuple_t *ind_row;             \/* index definition row built *\/$/;"	m	struct:ind_node_t
ind_type	include/row0merge.h	/^  ulint ind_type;            \/*!< 0, DICT_UNIQUE,$/;"	m	struct:index_def_t
index	api/api0api.cc	/^  const dict_index_t *index; \/*!< Index for tuple can be either$/;"	m	struct:ib_tuple_t	file:
index	fts/fts0opt.cc	/^  dict_index_t *index; \/*!< The FTS index to be optimized *\/$/;"	m	struct:fts_optimize_t	file:
index	fts/fts0que.cc	/^  dict_index_t *index; \/*!< The FTS index to search *\/$/;"	m	struct:fts_query_t	file:
index	include/btr0pcur.h	/^  dict_index_t *index() { return (m_btr_cur.index); }$/;"	f	struct:btr_pcur_t
index	include/buf0buf.h	/^  dict_index_t *index;$/;"	m	struct:Cache_hint::buf_block_t
index	include/dict0crea.h	/^  dict_index_t *index;   \/*!< index to create, built as a$/;"	m	struct:ind_node_t
index	include/dict0mem.h	/^  dict_index_t *index;$/;"	m	struct:dict_v_idx_t
index	include/fts0types.h	/^  dict_index_t *index; \/*!< The FTS index instance *\/$/;"	m	struct:fts_index_cache_t
index	include/gis0type.h	/^  dict_index_t *index; \/*!< index it is searching *\/$/;"	m	struct:rtr_info
index	include/lob0lob.h	/^  dict_index_t *index() const { return (m_index); }$/;"	f	class:lob::BtrContext
index	include/lob0lob.h	/^  dict_index_t *index() { return (m_index); }$/;"	f	struct:lob::ReadContext
index	include/lock0priv.h	/^  dict_index_t *index;$/;"	m	struct:lock_t
index	include/row0ext.h	/^  const dict_index_t *index;$/;"	m	struct:row_ext_t
index	include/row0ins.h	/^  dict_index_t *index;     \/*!< NULL, or the next index where the index$/;"	m	struct:ins_node_t
index	include/row0merge.h	/^  dict_index_t *index;  \/*!< index being sorted *\/$/;"	m	struct:row_merge_dup_t
index	include/row0merge.h	/^  dict_index_t *index;  \/*!< the index the tuples belong to *\/$/;"	m	struct:row_merge_buf_t
index	include/row0mysql.h	/^  dict_index_t *index;         \/*!< current index for a search, if$/;"	m	struct:row_prebuilt_t
index	include/row0purge.h	/^  dict_index_t *index;$/;"	m	struct:purge_node_t
index	include/row0sel.h	/^  dict_index_t *index; \/*!< table index used in the search *\/$/;"	m	struct:plan_t
index	include/row0undo.h	/^  dict_index_t *index;      \/*!< the next index whose record should be$/;"	m	struct:undo_node_t
index	include/row0upd.h	/^  dict_index_t *index; \/*!< NULL, or the next index whose record should$/;"	m	struct:upd_node_t
index_cache	include/fts0types.h	/^  fts_index_cache_t *index_cache; \/*!< The index cache instance *\/$/;"	m	struct:fts_get_doc_t
index_count	handler/ha_innodb.h	/^  ulint index_count; \/*!< number of valid index entries$/;"	m	struct:innodb_idx_translate_t
index_def_t	include/row0merge.h	/^struct index_def_t {$/;"	s
index_end	handler/ha_innodb.cc	/^int ha_innobase::index_end(void) {$/;"	f	class:ha_innobase
index_end	handler/ha_innopart.cc	/^int ha_innopart::index_end() {$/;"	f	class:ha_innopart
index_entry_mem_t	include/lob0index.h	/^  index_entry_mem_t() { reset(); }$/;"	f	struct:lob::index_entry_mem_t
index_entry_mem_t	include/lob0index.h	/^struct index_entry_mem_t {$/;"	s	namespace:lob
index_entry_t	include/lob0index.h	/^  index_entry_t(flst_node_t *node)$/;"	f	struct:lob::index_entry_t
index_entry_t	include/lob0index.h	/^  index_entry_t(flst_node_t *node, mtr_t *mtr)$/;"	f	struct:lob::index_entry_t
index_entry_t	include/lob0index.h	/^  index_entry_t(flst_node_t *node, mtr_t *mtr, dict_index_t *index)$/;"	f	struct:lob::index_entry_t
index_entry_t	include/lob0index.h	/^  index_entry_t(mtr_t *mtr, const dict_index_t *index)$/;"	f	struct:lob::index_entry_t
index_entry_t	include/lob0index.h	/^struct index_entry_t {$/;"	s	namespace:lob
index_fetch_t	dict/dict0stats.cc	/^struct index_fetch_t {$/;"	s	file:
index_field_t	include/row0merge.h	/^struct index_field_t {$/;"	s
index_first	handler/ha_innodb.cc	/^int ha_innobase::index_first(uchar *buf) \/*!< in\/out: buffer for the row *\/$/;"	f	class:ha_innobase
index_first_in_part	handler/ha_innopart.cc	/^int ha_innopart::index_first_in_part(uint part, uchar *record) {$/;"	f	class:ha_innopart
index_flags	handler/ha_innodb.cc	/^ulong ha_innobase::index_flags(uint key, uint, bool) const {$/;"	f	class:ha_innobase
index_id	include/fts0fts.h	/^  space_index_t index_id; \/*!< The index id *\/$/;"	m	struct:fts_table_t
index_id	include/fts0fts.h	/^  table_id_t index_id;$/;"	m	struct:fts_aux_table_t
index_id_t	include/dict0types.h	/^  index_id_t(space_id_t space_id, space_index_t index_id)$/;"	f	class:index_id_t
index_id_t	include/dict0types.h	/^class index_id_t {$/;"	c
index_init	handler/ha_innodb.cc	/^int ha_innobase::index_init(uint keynr,  \/*!< in: key (index) number *\/$/;"	f	class:ha_innobase
index_init	handler/ha_innopart.cc	/^int ha_innopart::index_init(uint keynr, bool sorted) {$/;"	f	class:ha_innopart
index_last	handler/ha_innodb.cc	/^int ha_innobase::index_last(uchar *buf) \/*!< in\/out: buffer for the row *\/$/;"	f	class:ha_innobase
index_last_in_part	handler/ha_innopart.cc	/^int ha_innopart::index_last_in_part(uint part, uchar *record) {$/;"	f	class:ha_innopart
index_list	include/lob0first.h	/^  flst_base_node_t *index_list() const { return (frame() + OFFSET_INDEX_LIST); }$/;"	f	struct:lob::first_page_t
index_list	include/zlob0first.h	/^  flst_base_node_t *index_list() const { return (frame() + OFFSET_INDEX_LIST); }$/;"	f	struct:lob::z_first_page_t
index_load_list	log/log0recv.cc	/^std::list<std::pair<space_id_t, lsn_t>> index_load_list;$/;"	v
index_map_t	dict/dict0stats.cc	/^    index_map_t;$/;"	t	file:
index_map_t_allocator	dict/dict0stats.cc	/^    index_map_t_allocator;$/;"	t	file:
index_mapping	handler/ha_innodb.h	/^  dict_index_t **index_mapping; \/*!< index pointer array directly$/;"	m	struct:innodb_idx_translate_t
index_next	handler/ha_innodb.cc	/^int ha_innobase::index_next(uchar *buf) \/*!< in\/out: buffer for next row in$/;"	f	class:ha_innobase
index_next_in_part	handler/ha_innopart.cc	/^int ha_innopart::index_next_in_part(uint part, uchar *record) {$/;"	f	class:ha_innopart
index_next_same	handler/ha_innodb.cc	/^int ha_innobase::index_next_same(uchar *buf, \/*!< in\/out: buffer for the row *\/$/;"	f	class:ha_innobase
index_next_same_in_part	handler/ha_innopart.cc	/^int ha_innopart::index_next_same_in_part(uint part, uchar *record,$/;"	f	class:ha_innopart
index_online_log_key	sync/sync0sync.cc	/^mysql_pfs_key_t index_online_log_key;$/;"	v
index_pct_cached	handler/ha_innodb.cc	/^inline double index_pct_cached(const dict_index_t *index) {$/;"	f
index_prev	handler/ha_innodb.cc	/^int ha_innobase::index_prev($/;"	f	class:ha_innobase
index_prev_in_part	handler/ha_innopart.cc	/^int ha_innopart::index_prev_in_part(uint part, uchar *record) {$/;"	f	class:ha_innopart
index_read	handler/ha_innodb.cc	/^int ha_innobase::index_read($/;"	f	class:ha_innobase
index_read_idx_map_in_part	handler/ha_innopart.cc	/^int ha_innopart::index_read_idx_map_in_part(uint part, uchar *record,$/;"	f	class:ha_innopart
index_read_last	handler/ha_innodb.cc	/^int ha_innobase::index_read_last($/;"	f	class:ha_innobase
index_read_last_map_in_part	handler/ha_innopart.cc	/^int ha_innopart::index_read_last_map_in_part(uint part, uchar *record,$/;"	f	class:ha_innopart
index_read_map_in_part	handler/ha_innopart.cc	/^int ha_innopart::index_read_map_in_part(uint part, uchar *record,$/;"	f	class:ha_innopart
index_s_lock	row/row0pread.cc	/^void Parallel_reader::Scan_ctx::index_s_lock() {$/;"	f	class:Parallel_reader::Scan_ctx
index_s_unlock	row/row0pread.cc	/^void Parallel_reader::Scan_ctx::index_s_unlock() {$/;"	f	class:Parallel_reader::Scan_ctx
index_sequence_with_offset	include/ut0tuple.h	/^struct index_sequence_with_offset<N, std::index_sequence<Ints...>> {$/;"	s
index_stats	include/dict0dict.h	/^  dict_table_t *index_stats;$/;"	m	struct:dict_sys_t
index_tree_rw_lock_key	sync/sync0sync.cc	/^mysql_pfs_key_t index_tree_rw_lock_key;$/;"	v
index_tuple_info_t	row/row0merge.cc	/^class index_tuple_info_t {$/;"	c	file:
index_usable	include/row0mysql.h	/^  unsigned index_usable : 1;               \/*!< caches the value of$/;"	m	struct:row_prebuilt_t
indexes	api/api0api.cc	/^  ib_vector_t *indexes; \/*!< Vector of indexes *\/$/;"	m	struct:ib_table_def_t	file:
indexes	include/dict0mem.h	/^  UT_LIST_BASE_NODE_T(dict_index_t) indexes;$/;"	m	struct:dict_table_t
indexes	include/dict0mem.h	/^  indexes; \/*!< list of indexes of the table *\/$/;"	m	struct:dict_index_t
indexes	include/fts0fts.h	/^  ib_vector_t *indexes;$/;"	m	class:fts_t
indexes	include/fts0types.h	/^  ib_vector_t *indexes; \/*!< We store the stats and inverted$/;"	m	struct:fts_cache_t
indirection	include/pars0sym.h	/^  sym_node_t *indirection; \/*!< pointer to$/;"	m	struct:sym_node_t
infimum_data	include/page0page.h	/^static const byte infimum_data[] = {$/;"	v
infimum_extra	include/page0page.h	/^static const byte infimum_extra[] = {$/;"	v
infimum_supremum_compact	page/page0page.cc	/^static const byte infimum_supremum_compact[] = {$/;"	v	file:
infimum_supremum_redundant	page/page0page.cc	/^static const byte infimum_supremum_redundant[] = {$/;"	v	file:
info	handler/ha_innodb.cc	/^int ha_innobase::info(uint flag) \/*!< in: what information is requested *\/$/;"	f	class:ha_innobase
info	include/pars0sym.h	/^  pars_info_t *info; \/*!< extra information, or NULL *\/$/;"	m	struct:sym_tab_t
info	include/que0que.h	/^  pars_info_t *info;  \/*!< info struct, or NULL *\/$/;"	m	struct:que_fork_t
info	include/ut0ut.h	/^  explicit info(int err, Args &&... args)$/;"	f	class:ib::info
info	include/ut0ut.h	/^  info() : logger(INFORMATION_LEVEL) {}$/;"	f	class:ib::info
info	include/ut0ut.h	/^class info : public logger {$/;"	c	namespace:ib
info_bits	include/data0data.h	/^  ulint info_bits;$/;"	m	struct:dtuple_t
info_bits	include/row0upd.h	/^  ulint info_bits;     \/*!< new value of info bits to record;$/;"	m	struct:upd_t
info_low	handler/ha_innodb.cc	/^int ha_innobase::info_low(uint flag, bool is_analyze) {$/;"	f	class:ha_innobase
info_low	handler/ha_innopart.cc	/^int ha_innopart::info_low(uint flag, bool is_analyze) {$/;"	f	class:ha_innopart
inherit_all	include/trx0trx.h	/^  std::atomic<bool> inherit_all;$/;"	m	struct:trx_lock_t
init	arch/arch0arch.cc	/^dberr_t Arch_File_Ctx::init(const char *path, const char *base_dir,$/;"	f	class:Arch_File_Ctx
init	arch/arch0page.cc	/^bool ArchPageData::init() {$/;"	f	class:ArchPageData
init	arch/arch0page.cc	/^void Arch_Page_Pos::init() {$/;"	f	class:Arch_Page_Pos
init	arch/arch0page.cc	/^void Arch_Reset_File::init() {$/;"	f	class:Arch_Reset_File
init	arch/arch0recv.cc	/^dberr_t Arch_Dblwr_Ctx::init(const char *dblwr_path,$/;"	f	class:Arch_Dblwr_Ctx
init	arch/arch0recv.cc	/^dberr_t Arch_Page_Sys::Recv::init() {$/;"	f	class:Arch_Page_Sys::Recv
init	btr/btr0bulk.cc	/^dberr_t BtrBulk::init() {$/;"	f	class:BtrBulk
init	btr/btr0bulk.cc	/^dberr_t PageBulk::init() {$/;"	f	class:PageBulk
init	clone/clone0clone.cc	/^int Clone_Handle::init(const byte *ref_loc, uint ref_len, Ha_clone_type type,$/;"	f	class:Clone_Handle
init	clone/clone0clone.cc	/^void Clone_Task_Manager::init(Clone_Snapshot *snapshot) {$/;"	f	class:Clone_Task_Manager
init	clone/clone0desc.cc	/^void Clone_Desc_Locator::init(ib_uint64_t id, ib_uint64_t snap_id,$/;"	f	class:Clone_Desc_Locator
init	dict/dict0dict.cc	/^void DDTableBuffer::init() {$/;"	f	class:DDTableBuffer
init	fsp/fsp0file.cc	/^void Datafile::init(const char *name, uint32_t flags) {$/;"	f	class:Datafile
init	include/btr0pcur.h	/^inline void btr_pcur_t::init(size_t read_level) {$/;"	f	class:btr_pcur_t
init	include/dyn0buf.h	/^    void init() {$/;"	f	class:dyn_buf_t::block_t
init	include/lob0impl.h	/^  void init() {$/;"	f	class:lob::plist_node_t
init	include/lob0impl.h	/^  void init() {$/;"	f	struct:lob::plist_base_node_t
init	include/lob0impl.h	/^  void init() {$/;"	f	struct:lob::z_data_page_t
init	include/lob0impl.h	/^  void init() {$/;"	f	struct:lob::z_frag_entry_t
init	include/lob0impl.h	/^  void init(flst_base_node_t *free_lst) {$/;"	f	struct:lob::z_frag_node_page_t
init	include/lob0index.h	/^  void init() {$/;"	f	struct:lob::index_entry_t
init	include/lock0priv.h	/^  void init(const page_t *page) {$/;"	f	class:RecLock
init	include/mtr0mtr.h	/^    void init() {$/;"	f	class:mtr_t::Logging
init	include/os0thread-create.h	/^  void init() { m_thread.init(m_promise); }$/;"	f	class:Runnable
init	include/ut0bitset.h	/^  void init(byte *bitset, size_t size) {$/;"	f	class:Bitset
init	include/ut0pool.h	/^  void init(size_t n_elems) {$/;"	f	struct:Pool
init	include/ut0stage.h	/^  void init(int key) {$/;"	f	class:ut_stage_alter_ts
init	include/ut0stage.h	/^  void init(int key) {}$/;"	f	class:ut_stage_alter_ts
init	include/zlob0first.h	/^  void init() {$/;"	f	struct:lob::z_first_page_t
init	include/zlob0index.h	/^  void init() {$/;"	f	struct:lob::z_index_entry_t
init	lob/lob0impl.cc	/^void z_index_page_t::init(flst_base_node_t *free_lst, mtr_t *mtr) {$/;"	f	class:lob::z_index_page_t
init	log/log0meb.cc	/^  void init(const int size) {$/;"	f	class:meb::Queue
init	mtr/mtr0mtr.cc	/^  void init(mtr_t *mtr) {$/;"	f	class:mtr_t::Command
init	os/os0file.cc	/^  void init(ulint n_slots) {$/;"	f	class:SimulatedAIOHandler
init	os/os0file.cc	/^dberr_t AIO::init() {$/;"	f	class:AIO
init	os/os0thread.cc	/^void IB_thread::init(std::promise<void> &promise) {$/;"	f	class:IB_thread
init	row/row0pread-adapter.cc	/^dberr_t Parallel_reader_adapter::init($/;"	f	class:Parallel_reader_adapter
init	row/row0pread-histogram.cc	/^bool Histogram_sampler::init(trx_t *trx, dict_index_t *index,$/;"	f	class:Histogram_sampler
init	trx/trx0purge.cc	/^void undo::Tablespaces::init() {$/;"	f	class:undo::Tablespaces
init	trx/trx0rseg.cc	/^void Rsegs::init() {$/;"	f	class:Rsegs
init	trx/trx0trx.cc	/^  static void init(trx_t *trx) {$/;"	f	struct:TrxFactory
init_apply_state	clone/clone0apply.cc	/^int Clone_Snapshot::init_apply_state(Clone_Desc_State *state_desc) {$/;"	f	class:Clone_Snapshot
init_before_decrypt_processing	fsp/fsp0fsp.cc	/^static dberr_t init_before_decrypt_processing(fil_space_t *space,$/;"	f	file:
init_before_encrypt_processing	fsp/fsp0fsp.cc	/^static dberr_t init_before_encrypt_processing(fil_space_t *space,$/;"	f	file:
init_before_processing	fsp/fsp0fsp.cc	/^static inline dberr_t init_before_processing(fil_space_t *space,$/;"	f	file:
init_chunk_nums	include/clone0desc.h	/^  void init_chunk_nums() {$/;"	f	struct:Chunk_Info
init_dblwr_file_ctx	arch/arch0page.cc	/^dberr_t Arch_Group::init_dblwr_file_ctx(const char *path, const char *base_file,$/;"	f	class:Arch_Group
init_disk_estimate	include/clone0snapshot.h	/^  void init_disk_estimate() {$/;"	f	class:Clone_Snapshot
init_during_recovery	arch/arch0page.cc	/^int Page_Arch_Client_Ctx::init_during_recovery(Arch_Group *group,$/;"	f	class:Page_Arch_Client_Ctx
init_file_copy	clone/clone0copy.cc	/^int Clone_Snapshot::init_file_copy() {$/;"	f	class:Clone_Snapshot
init_file_ctx	include/arch0arch.h	/^  dberr_t init_file_ctx(const char *path, const char *base_dir,$/;"	f	class:Arch_Group
init_file_info	fsp/fsp0file.cc	/^void Datafile::init_file_info() {$/;"	f	class:Datafile
init_flush	include/buf0buf.h	/^  bool init_flush[BUF_FLUSH_N_TYPES];$/;"	m	struct:Cache_hint::buf_pool_t
init_frag_entries	include/zlob0first.h	/^  void init_frag_entries() {$/;"	f	struct:lob::z_first_page_t
init_fts_doc_id_for_ref	row/row0mysql.cc	/^static void init_fts_doc_id_for_ref($/;"	f	file:
init_header	clone/clone0desc.cc	/^void Clone_Desc_Data::init_header(uint version) {$/;"	f	class:Clone_Desc_Data
init_header	clone/clone0desc.cc	/^void Clone_Desc_File_MetaData::init_header(uint version) {$/;"	f	class:Clone_Desc_File_MetaData
init_header	clone/clone0desc.cc	/^void Clone_Desc_State::init_header(uint version) {$/;"	f	class:Clone_Desc_State
init_header	clone/clone0desc.cc	/^void Clone_Desc_Task_Meta::init_header(uint version) {$/;"	f	class:Clone_Desc_Task_Meta
init_index_entries	lob/zlob0first.cc	/^void z_first_page_t::init_index_entries() {$/;"	f	class:lob::z_first_page_t
init_io_fix	include/buf0buf.h	/^  void init_io_fix() {$/;"	f	class:Cache_hint::buf_page_t
init_last_dir_entry	include/lob0impl.h	/^  ulint init_last_dir_entry() {$/;"	f	struct:lob::z_frag_page_t
init_linux_native_aio	os/os0file.cc	/^dberr_t AIO::init_linux_native_aio() {$/;"	f	class:AIO
init_lob_version	include/lob0first.h	/^  void init_lob_version() {$/;"	f	struct:lob::first_page_t
init_lob_version	include/zlob0first.h	/^  void init_lob_version() {$/;"	f	struct:lob::z_first_page_t
init_lock	include/fts0types.h	/^  rw_lock_t init_lock; \/*!< lock used for the cache$/;"	m	struct:fts_cache_t
init_page_copy	clone/clone0copy.cc	/^int Clone_Snapshot::init_page_copy(byte *page_buffer, uint page_buffer_len) {$/;"	f	class:Clone_Snapshot
init_record_priority_queue_for_parts	handler/ha_innopart.cc	/^int ha_innopart::init_record_priority_queue_for_parts(uint used_parts) {$/;"	f	class:ha_innopart
init_redo_copy	clone/clone0copy.cc	/^int Clone_Snapshot::init_redo_copy(Clone_Alert_Func cbk) {$/;"	f	class:Clone_Snapshot
init_search_tuples_types	include/row0mysql.h	/^  void init_search_tuples_types() {$/;"	f	struct:row_prebuilt_t
init_size	include/fil0fil.h	/^  page_no_t init_size;$/;"	m	struct:fil_node_t
init_slots	os/os0file.cc	/^dberr_t AIO::init_slots() {$/;"	f	class:AIO
init_space_id_bank	trx/trx0purge.cc	/^void init_space_id_bank() {$/;"	f	namespace:undo
init_state	clone/clone0clone.cc	/^void Clone_Task_Manager::init_state() {$/;"	f	class:Clone_Task_Manager
init_state	clone/clone0snapshot.cc	/^int Clone_Snapshot::init_state(Clone_Desc_State *state_desc, byte *temp_buffer,$/;"	f	class:Clone_Snapshot
init_state	include/clone0monitor.h	/^  void init_state(PSI_stage_key key, bool enable) {$/;"	f	class:Clone_Monitor
init_table_handle_for_HANDLER	handler/ha_innodb.cc	/^void ha_innobase::init_table_handle_for_HANDLER(void) {$/;"	f	class:ha_innobase
init_tuple_types	include/row0mysql.h	/^  void init_tuple_types(dtuple_t *tuple) {$/;"	f	struct:row_prebuilt_t
init_tuple_with_id	dict/dict0dict.cc	/^void DDTableBuffer::init_tuple_with_id(dtuple_t *tuple, table_id_t id) {$/;"	f	class:DDTableBuffer
initialize	buf/buf0flu.cc	/^bool initialize(ulint n_pages_last) {$/;"	f	namespace:Adaptive_flush
initialize	handler/ha_innodb.cc	/^int create_table_info_t::initialize() {$/;"	f	class:create_table_info_t
initialize	handler/handler0alter.cc	/^bool Altered_partitions::initialize() {$/;"	f	class:Altered_partitions
initialize	srv/srv0tmp.cc	/^dberr_t Tablespace_pool::initialize(bool create_new_db) {$/;"	f	class:ibt::Tablespace_pool
initialize_auto_increment	handler/ha_innopart.cc	/^inline int ha_innopart::initialize_auto_increment($/;"	f	class:ha_innopart
initialize_autoinc	handler/ha_innodb.cc	/^void create_table_info_t::initialize_autoinc() {$/;"	f	class:create_table_info_t
initialize_partitioning	handler/ha_innopart.h	/^  void initialize_partitioning(partition_info *part_info, bool early) {$/;"	f	class:ha_innopart
inject_crash	trx/trx0purge.cc	/^void inject_crash(const char *injection_point_name) {$/;"	f	namespace:undo
innobase	handler/ha_innodb.cc	/^namespace innobase {$/;"	n	file:
innobase	include/os0enc.h	/^namespace innobase {$/;"	n
innobase	os/os0enc.cc	/^namespace innobase {$/;"	n	file:
innobase_active_counter	handler/ha_innodb.cc	/^static ulong innobase_active_counter = 0;$/;"	v	file:
innobase_active_small	handler/ha_innodb.cc	/^inline void innobase_active_small(void) {$/;"	f
innobase_alter_autoextend_size_tablespace	handler/ha_innodb.cc	/^static int innobase_alter_autoextend_size_tablespace($/;"	f	file:
innobase_alter_encrypt_tablespace	handler/ha_innodb.cc	/^static int innobase_alter_encrypt_tablespace(handlerton *hton, THD *thd,$/;"	f	file:
innobase_alter_tablespace	handler/ha_innodb.cc	/^static int innobase_alter_tablespace(handlerton *hton, THD *thd,$/;"	f	file:
innobase_autoinc_lock_mode	handler/ha_innodb.cc	/^static long innobase_autoinc_lock_mode;$/;"	v	file:
innobase_basename	handler/ha_innodb.cc	/^const char *innobase_basename(const char *path_name) {$/;"	f
innobase_basic_ddl	handler/ha_innodb.h	/^class innobase_basic_ddl {$/;"	c
innobase_build_col_map	handler/handler0alter.cc	/^static MY_ATTRIBUTE((warn_unused_result)) const ulint *innobase_build_col_map($/;"	f
innobase_build_col_map_add	handler/handler0alter.cc	/^static void innobase_build_col_map_add(mem_heap_t *heap, dfield_t *dfield,$/;"	f	file:
innobase_build_index_translation	handler/ha_innodb.cc	/^static bool innobase_build_index_translation($/;"	f	file:
innobase_build_v_templ	handler/ha_innodb.cc	/^void innobase_build_v_templ(const TABLE *table, const dict_table_t *ib_table,$/;"	f
innobase_build_v_templ_callback	handler/ha_innodb.cc	/^void innobase_build_v_templ_callback(const TABLE *table, void *ib_table) {$/;"	f
innobase_casedn_path	handler/ha_innodb.cc	/^void innobase_casedn_path(char *a) \/*!< in\/out: string to put in lower case *\/$/;"	f
innobase_casedn_str	handler/ha_innodb.cc	/^void innobase_casedn_str(char *a) \/*!< in\/out: string to put in lower case *\/$/;"	f
innobase_check_column_length	handler/handler0alter.cc	/^static MY_ATTRIBUTE((warn_unused_result)) bool innobase_check_column_length($/;"	f
innobase_check_fk_base_col	handler/ha_innodb.cc	/^static dberr_t innobase_check_fk_base_col(const dd::Table *dd_table,$/;"	f	file:
innobase_check_fk_option	handler/handler0alter.cc	/^static MY_ATTRIBUTE((warn_unused_result)) bool innobase_check_fk_option($/;"	f
innobase_check_fk_stored	handler/handler0alter.cc	/^static bool innobase_check_fk_stored(const dict_foreign_t *foreign,$/;"	f	file:
innobase_check_foreign_key_index	handler/handler0alter.cc	/^static MY_ATTRIBUTE((warn_unused_result)) bool innobase_check_foreign_key_index($/;"	f
innobase_check_gis_columns	handler/handler0alter.cc	/^static dberr_t innobase_check_gis_columns(Alter_inplace_info *ha_alter_info,$/;"	f	file:
innobase_check_identifier_length	handler/ha_innodb.cc	/^bool innobase_check_identifier_length($/;"	f
innobase_check_index_keys	handler/handler0alter.cc	/^static MY_ATTRIBUTE((warn_unused_result)) int innobase_check_index_keys($/;"	f
innobase_check_index_len	handler/handler0alter.cc	/^static bool innobase_check_index_len(const TABLE *form, ulint max_len) {$/;"	f	file:
innobase_check_reserved_file_name	handler/ha_innodb.cc	/^static bool innobase_check_reserved_file_name($/;"	f	file:
innobase_close_connection	handler/ha_innodb.cc	/^static int innobase_close_connection($/;"	f	file:
innobase_col_check_fk	handler/handler0alter.cc	/^static bool innobase_col_check_fk(const char *col_name,$/;"	f	file:
innobase_col_to_mysql	handler/handler0alter.cc	/^static void innobase_col_to_mysql($/;"	f	file:
innobase_collect_hton_log_info	handler/ha_innodb.cc	/^static bool innobase_collect_hton_log_info(handlerton *hton, Json_dom *json) {$/;"	f	file:
innobase_commit	handler/ha_innodb.cc	/^static int innobase_commit(handlerton *hton, \/*!< in: InnoDB handlerton *\/$/;"	f	file:
innobase_commit_by_xid	handler/ha_innodb.cc	/^static xa_status_code innobase_commit_by_xid($/;"	f	file:
innobase_commit_concurrency	handler/ha_innodb.cc	/^static ulong innobase_commit_concurrency = 0;$/;"	v	file:
innobase_commit_concurrency_init_default	handler/ha_innodb.cc	/^static void innobase_commit_concurrency_init_default() {$/;"	f	file:
innobase_commit_concurrency_validate	handler/ha_innodb.cc	/^static int innobase_commit_concurrency_validate($/;"	f	file:
innobase_commit_low	handler/ha_innodb.cc	/^void innobase_commit_low(trx_t *trx) \/*!< in: transaction handle *\/$/;"	f
innobase_convert_identifier	handler/ha_innodb.cc	/^static char *innobase_convert_identifier(char *buf, ulint buflen,$/;"	f	file:
innobase_convert_name	handler/ha_innodb.cc	/^char *innobase_convert_name($/;"	f
innobase_convert_string	handler/ha_innodb.cc	/^static ulint innobase_convert_string($/;"	f	file:
innobase_convert_to_filename_charset	handler/ha_innodb.cc	/^uint innobase_convert_to_filename_charset($/;"	f
innobase_convert_to_system_charset	handler/ha_innodb.cc	/^uint innobase_convert_to_system_charset($/;"	f
innobase_copy_frm_flags_from_create_info	handler/ha_innodb.cc	/^static void innobase_copy_frm_flags_from_create_info($/;"	f	file:
innobase_copy_frm_flags_from_table_share	handler/ha_innodb.cc	/^void innobase_copy_frm_flags_from_table_share($/;"	f
innobase_create_handler	handler/ha_innodb.cc	/^static handler *innobase_create_handler(handlerton *hton, TABLE_SHARE *table,$/;"	f	file:
innobase_create_index_def	handler/handler0alter.cc	/^static void innobase_create_index_def(const TABLE *altered_table,$/;"	f	file:
innobase_create_index_field_def	handler/handler0alter.cc	/^static void innobase_create_index_field_def(const TABLE *altered_table,$/;"	f	file:
innobase_create_key_defs	handler/handler0alter.cc	/^    *innobase_create_key_defs(mem_heap_t *heap,$/;"	f
innobase_create_status_file	handler/ha_innodb.cc	/^static bool innobase_create_status_file = FALSE;$/;"	v	file:
innobase_data_file_path	handler/ha_innodb.cc	/^static char *innobase_data_file_path = nullptr;$/;"	v	file:
innobase_data_home_dir	handler/ha_innodb.cc	/^static char *innobase_data_home_dir = nullptr;$/;"	v	file:
innobase_ddse_dict_init	handler/ha_innodb.cc	/^static bool innobase_ddse_dict_init($/;"	f	file:
innobase_deadlock_detect	lock/lock0lock.cc	/^bool innobase_deadlock_detect = true;$/;"	v
innobase_deadlock_detect_update	handler/ha_innodb.cc	/^static void innobase_deadlock_detect_update(THD *thd, SYS_VAR *var,$/;"	f	file:
innobase_dict_cache_reset	handler/ha_innodb.cc	/^static void innobase_dict_cache_reset(const char *schema_name,$/;"	f	file:
innobase_dict_cache_reset_tables_and_tablespaces	handler/ha_innodb.cc	/^static void innobase_dict_cache_reset_tables_and_tablespaces() {$/;"	f	file:
innobase_dict_get_server_version	handler/ha_innodb.cc	/^static bool innobase_dict_get_server_version(uint *version) {$/;"	f	file:
innobase_dict_recover	handler/ha_innodb.cc	/^static bool innobase_dict_recover(dict_recovery_mode_t dict_recovery_mode,$/;"	f	file:
innobase_dict_register_dd_table_id	handler/ha_innodb.cc	/^static void innobase_dict_register_dd_table_id(dd::Object_id dd_table_id) {$/;"	f	file:
innobase_dict_set_server_version	handler/ha_innodb.cc	/^static bool innobase_dict_set_server_version() {$/;"	f	file:
innobase_disable_core_dump	handler/ha_innodb.cc	/^void innobase_disable_core_dump() {$/;"	f
innobase_disable_monitor_counter	handler/ha_innodb.cc	/^static char *innobase_disable_monitor_counter = nullptr;$/;"	v	file:
innobase_discard_table	handler/handler0alter.cc	/^static void innobase_discard_table(THD *thd, dict_table_t *table) {$/;"	f	file:
innobase_doublewrite_dir	handler/ha_innodb.cc	/^static char *innobase_doublewrite_dir = nullptr;$/;"	v	file:
innobase_drop_fts_index_table	handler/handler0alter.cc	/^static dberr_t innobase_drop_fts_index_table(dict_table_t *table, trx_t *trx) {$/;"	f	file:
innobase_dropping_foreign	handler/handler0alter.cc	/^inline MY_ATTRIBUTE((warn_unused_result)) bool innobase_dropping_foreign($/;"	f
innobase_enable_monitor_counter	handler/ha_innodb.cc	/^static char *innobase_enable_monitor_counter = nullptr;$/;"	v	file:
innobase_encryption_key_rotation	handler/ha_innodb.cc	/^bool innobase_encryption_key_rotation() {$/;"	f
innobase_fields_to_mysql	handler/handler0alter.cc	/^void innobase_fields_to_mysql(struct TABLE *table, const dict_index_t *index,$/;"	f
innobase_fill_factor	btr/btr0bulk.cc	/^long innobase_fill_factor;$/;"	v
innobase_find_equiv_index	handler/handler0alter.cc	/^static MY_ATTRIBUTE((warn_unused_result)) const KEY *innobase_find_equiv_index($/;"	f
innobase_find_fk_index	handler/handler0alter.cc	/^static MY_ATTRIBUTE((warn_unused_result)) dict_index_t *innobase_find_fk_index($/;"	f
innobase_flush_logs	handler/ha_innodb.cc	/^static bool innobase_flush_logs(handlerton *hton, bool binlog_group_flush) {$/;"	f	file:
innobase_format_name	handler/ha_innodb.cc	/^void innobase_format_name(char *buf, ulint buflen, const char *name) {$/;"	f
innobase_fts_casedn_str	handler/ha_innodb.cc	/^extern size_t innobase_fts_casedn_str(CHARSET_INFO *cs, char *src,$/;"	f
innobase_fts_check_doc_id_col	handler/handler0alter.cc	/^bool innobase_fts_check_doc_id_col($/;"	f
innobase_fts_check_doc_id_index	handler/handler0alter.cc	/^enum fts_doc_id_index_enum innobase_fts_check_doc_id_index($/;"	f
innobase_fts_check_doc_id_index_in_def	handler/handler0alter.cc	/^enum fts_doc_id_index_enum innobase_fts_check_doc_id_index_in_def($/;"	f
innobase_fts_close_ranking	handler/ha_innodb.cc	/^static void innobase_fts_close_ranking(FT_INFO *fts_hdl) {$/;"	f	file:
innobase_fts_count_matches	handler/ha_innodb.cc	/^static ulonglong innobase_fts_count_matches($/;"	f	file:
innobase_fts_create_doc_id_key	handler/ha_innodb.cc	/^static void innobase_fts_create_doc_id_key($/;"	f	file:
innobase_fts_find_ranking	handler/ha_innodb.cc	/^static float innobase_fts_find_ranking(FT_INFO *fts_hdl, uchar *, uint) {$/;"	f	file:
innobase_fts_flags	handler/ha_innodb.cc	/^static ulonglong innobase_fts_flags() {$/;"	f	file:
innobase_fts_get_version	handler/ha_innodb.cc	/^static uint innobase_fts_get_version() {$/;"	f	file:
innobase_fts_load_stopword	handler/ha_innodb.cc	/^ibool innobase_fts_load_stopword($/;"	f
innobase_fts_nocase_compare	handler/ha_innodb.cc	/^int innobase_fts_nocase_compare(const CHARSET_INFO *cs, const fts_string_t *s1,$/;"	f
innobase_fts_retrieve_docid	handler/ha_innodb.cc	/^static ulonglong innobase_fts_retrieve_docid(FT_INFO_EXT *fts_hdl) {$/;"	f	file:
innobase_fts_retrieve_ranking	handler/ha_innodb.cc	/^static float innobase_fts_retrieve_ranking(FT_INFO *fts_hdl) {$/;"	f	file:
innobase_fts_store_docid	handler/ha_innodb.cc	/^static void innobase_fts_store_docid(TABLE *tbl, ulonglong doc_id) {$/;"	f	file:
innobase_fts_text_cmp	handler/ha_innodb.cc	/^extern int innobase_fts_text_cmp(const void *cs, const void *p1,$/;"	f
innobase_fts_text_cmp_prefix	handler/ha_innodb.cc	/^extern int innobase_fts_text_cmp_prefix(const void *cs, const void *p1,$/;"	f
innobase_fulltext_exist	handler/handler0alter.cc	/^static bool innobase_fulltext_exist(const TABLE *table) {$/;"	f	file:
innobase_get_at_most_n_mbchars	handler/ha_innodb.cc	/^ulint innobase_get_at_most_n_mbchars($/;"	f
innobase_get_autoinc	handler/ha_innodb.cc	/^dberr_t ha_innobase::innobase_get_autoinc($/;"	f	class:ha_innobase
innobase_get_charset	handler/ha_innodb.cc	/^const CHARSET_INFO *innobase_get_charset($/;"	f
innobase_get_col_names	handler/handler0alter.cc	/^static MY_ATTRIBUTE((warn_unused_result)) const char **innobase_get_col_names($/;"	f
innobase_get_computed_value	handler/ha_innodb.cc	/^dfield_t *innobase_get_computed_value($/;"	f
innobase_get_cset_width	handler/ha_innodb.cc	/^void innobase_get_cset_width(ulint cset, ulint *mbminlen, ulint *mbmaxlen) {$/;"	f
innobase_get_err_msg	handler/ha_innodb.cc	/^const char *innobase_get_err_msg(int error_code) \/*!< in: MySQL error code *\/$/;"	f
innobase_get_field_from_update_vector	handler/ha_innodb.cc	/^static dfield_t *innobase_get_field_from_update_vector(dict_foreign_t *foreign,$/;"	f	file:
innobase_get_foreign_key_info	handler/handler0alter.cc	/^static MY_ATTRIBUTE((warn_unused_result)) bool innobase_get_foreign_key_info($/;"	f
innobase_get_index	handler/ha_innodb.cc	/^dict_index_t *ha_innobase::innobase_get_index($/;"	f	class:ha_innobase
innobase_get_index	handler/ha_innopart.cc	/^inline dict_index_t *ha_innopart::innobase_get_index(uint keynr) {$/;"	f	class:ha_innopart
innobase_get_index_column_cardinality	handler/ha_innodb.cc	/^static bool innobase_get_index_column_cardinality($/;"	f	file:
innobase_get_lower_case_table_names	handler/ha_innodb.cc	/^ulint innobase_get_lower_case_table_names(void) {$/;"	f
innobase_get_multi_value	handler/ha_innodb.cc	/^void innobase_get_multi_value(const TABLE *mysql_table, ulint f_idx,$/;"	f
innobase_get_multi_value_and_diff	handler/ha_innodb.cc	/^static void innobase_get_multi_value_and_diff($/;"	f	file:
innobase_get_mysql_key_number_for_index	handler/ha_innodb.cc	/^static int innobase_get_mysql_key_number_for_index($/;"	f	file:
innobase_get_stmt_safe	handler/ha_innodb.cc	/^size_t innobase_get_stmt_safe(THD *thd, char *buf, size_t buflen) {$/;"	f
innobase_get_stmt_unsafe	handler/ha_innodb.cc	/^const char *innobase_get_stmt_unsafe(THD *thd, size_t *length) {$/;"	f
innobase_get_table_cache_size	handler/ha_innodb.cc	/^ulint innobase_get_table_cache_size(void) { return (table_def_size); }$/;"	f
innobase_get_table_statistics	handler/ha_innodb.cc	/^static bool innobase_get_table_statistics($/;"	f	file:
innobase_get_tablespace_filename_ext	handler/ha_innodb.cc	/^static const char *innobase_get_tablespace_filename_ext() { return ".ibd"; }$/;"	f	file:
innobase_get_tablespace_statistics	handler/ha_innodb.cc	/^static bool innobase_get_tablespace_statistics($/;"	f	file:
innobase_get_tablespace_type	handler/ha_innodb.cc	/^static bool innobase_get_tablespace_type(const dd::Tablespace &space,$/;"	f	file:
innobase_get_tablespace_type_by_name	handler/ha_innodb.cc	/^static bool innobase_get_tablespace_type_by_name(const char *tablespace_name,$/;"	f	file:
innobase_hton_name	include/dict0dd.h	/^static const char innobase_hton_name[] = "InnoDB";$/;"	v
innobase_index_cond	handler/ha_innodb.cc	/^innobase_index_cond(ha_innobase *h) \/*!< in\/out: pointer to ha_innobase *\/$/;"	f
innobase_index_lookup	handler/ha_innodb.cc	/^static dict_index_t *innobase_index_lookup($/;"	f	file:
innobase_index_name_is_reserved	handler/ha_innodb.cc	/^bool innobase_index_name_is_reserved($/;"	f
innobase_index_reserve_name	include/dict0mem.h	/^const char innobase_index_reserve_name[] = "GEN_CLUST_INDEX";$/;"	v
innobase_init_files	handler/ha_innodb.cc	/^static int innobase_init_files(dict_init_mode_t dict_init_mode,$/;"	f	file:
innobase_init_foreign	handler/handler0alter.cc	/^static bool innobase_init_foreign($/;"	f	file:
innobase_init_vc_templ	handler/ha_innodb.cc	/^void innobase_init_vc_templ(dict_table_t *table) {$/;"	f
innobase_initialize_autoinc	handler/ha_innodb.cc	/^void ha_innobase::innobase_initialize_autoinc() {$/;"	f	class:ha_innobase
innobase_initialize_autoinc	handler/ha_innopart.cc	/^int ha_innopart::innobase_initialize_autoinc() {$/;"	f	class:ha_innopart
innobase_is_base_s_col	handler/ha_innodb.cc	/^static bool innobase_is_base_s_col(const TABLE *table, const char *name) {$/;"	f	file:
innobase_is_dict_readonly	handler/ha_innodb.cc	/^static bool innobase_is_dict_readonly() {$/;"	f	file:
innobase_is_multi_value_fld	handler/ha_innodb.h	1258;"	d
innobase_is_s_fld	handler/ha_innodb.h	1248;"	d
innobase_is_supported_system_table	handler/ha_innodb.cc	/^static bool innobase_is_supported_system_table(const char *, const char *,$/;"	f	file:
innobase_is_v_fld	handler/ha_innodb.h	1251;"	d
innobase_is_valid_tablespace_name	handler/ha_innodb.cc	/^bool innobase_is_valid_tablespace_name(ts_command_type ts_cmd,$/;"	f
innobase_kill_connection	handler/ha_innodb.cc	/^static void innobase_kill_connection($/;"	f	file:
innobase_lock_autoinc	handler/ha_innodb.cc	/^dberr_t ha_innobase::innobase_lock_autoinc(void) {$/;"	f	class:ha_innobase
innobase_lock_hton_log	handler/ha_innodb.cc	/^static bool innobase_lock_hton_log(handlerton *hton) {$/;"	f	file:
innobase_match_index_columns	handler/ha_innodb.cc	/^bool innobase_match_index_columns(const KEY *key_info,$/;"	f
innobase_mysql_cmp	rem/rem0cmp.cc	/^int innobase_mysql_cmp(ulint prtype, const byte *a, size_t a_length,$/;"	f
innobase_mysql_fts_get_token	handler/ha_innodb.cc	/^ulint innobase_mysql_fts_get_token($/;"	f
innobase_mysql_print_thd	handler/ha_innodb.cc	/^void innobase_mysql_print_thd($/;"	f
innobase_mysql_tmpdir	handler/ha_innodb.cc	/^char *innobase_mysql_tmpdir() { return (mysql_tmpdir); }$/;"	f
innobase_mysql_tmpfile	handler/ha_innodb.cc	/^int innobase_mysql_tmpfile(const char *path) {$/;"	f
innobase_need_rebuild	handler/handler0alter.cc	/^static MY_ATTRIBUTE((warn_unused_result)) bool innobase_need_rebuild($/;"	f
innobase_next_autoinc	handler/ha_innodb.cc	/^ulonglong innobase_next_autoinc($/;"	f
innobase_nocase_compare	handler/ha_innodb.cc	/^int innobase_nocase_compare(const void *cs, const char *s1, const char *s2) {$/;"	f
innobase_old_blocks_pct	handler/ha_innodb.cc	/^static uint innobase_old_blocks_pct;$/;"	v	file:
innobase_online_rebuild_log_free	handler/handler0alter.cc	/^static void innobase_online_rebuild_log_free(dict_table_t *table) {$/;"	f	file:
innobase_open_files	handler/ha_innodb.cc	/^static long innobase_open_files;$/;"	v	file:
innobase_open_tables	handler/ha_innodb.cc	/^static hash_table_t *innobase_open_tables;$/;"	v	file:
innobase_page_track_get_num_page_ids	handler/ha_innodb.cc	/^static int innobase_page_track_get_num_page_ids(uint64_t *start_id,$/;"	f	file:
innobase_page_track_get_page_ids	handler/ha_innodb.cc	/^static int innobase_page_track_get_page_ids(Page_Track_Callback cbk_func,$/;"	f	file:
innobase_page_track_get_status	handler/ha_innodb.cc	/^static void innobase_page_track_get_status($/;"	f	file:
innobase_page_track_purge	handler/ha_innodb.cc	/^static int innobase_page_track_purge(uint64_t *purge_id) {$/;"	f	file:
innobase_page_track_start	handler/ha_innodb.cc	/^static int innobase_page_track_start(uint64_t *start_id) {$/;"	f	file:
innobase_page_track_stop	handler/ha_innodb.cc	/^static int innobase_page_track_stop(uint64_t *stop_id) {$/;"	f	file:
innobase_parse_hint_from_comment	handler/ha_innodb.cc	/^void innobase_parse_hint_from_comment(THD *thd, dict_table_t *table,$/;"	f
innobase_parse_merge_threshold	handler/ha_innodb.cc	/^static ulint innobase_parse_merge_threshold(THD *thd, const char *str) {$/;"	f	file:
innobase_partition_flags	handler/ha_innodb.cc	/^static uint innobase_partition_flags() {$/;"	f	file:
innobase_peek_autoinc	handler/ha_innodb.cc	/^static ulonglong innobase_peek_autoinc(dict_table_t *innodb_table,$/;"	f	file:
innobase_pk_col_is_existing	handler/handler0alter.cc	/^static inline bool innobase_pk_col_is_existing(const ulint new_col_no,$/;"	f	file:
innobase_pk_col_prefix_compare	handler/handler0alter.cc	/^static inline lint innobase_pk_col_prefix_compare(ulint new_prefix_len,$/;"	f	file:
innobase_pk_order_preserved	handler/handler0alter.cc	/^static MY_ATTRIBUTE((warn_unused_result)) bool innobase_pk_order_preserved($/;"	f
innobase_post_ddl	handler/ha_innodb.cc	/^static void innobase_post_ddl(THD *thd) {$/;"	f	file:
innobase_post_recover	handler/ha_innodb.cc	/^static void innobase_post_recover() {$/;"	f	file:
innobase_quote_identifier	handler/ha_innodb.cc	/^void innobase_quote_identifier(FILE *file, trx_t *trx, const char *id) {$/;"	f
innobase_raw_format	handler/ha_innodb.cc	/^ulint innobase_raw_format(const char *data,   \/*!< in: raw data *\/$/;"	f
innobase_read_from_2_little_endian	handler/ha_innodb.cc	/^static inline uint innobase_read_from_2_little_endian($/;"	f	file:
innobase_rec_reset	handler/handler0alter.cc	/^void innobase_rec_reset(TABLE *table) \/*!< in\/out: MySQL table *\/$/;"	f
innobase_rec_to_mysql	handler/handler0alter.cc	/^void innobase_rec_to_mysql(struct TABLE *table, const rec_t *rec,$/;"	f
innobase_redo_set_state	handler/ha_innodb.cc	/^static bool innobase_redo_set_state(THD *thd, bool enable) {$/;"	f	file:
innobase_register_trx	handler/ha_innodb.cc	/^void innobase_register_trx(handlerton *hton, \/* in: Innobase handlerton *\/$/;"	f
innobase_release_savepoint	handler/ha_innodb.cc	/^static int innobase_release_savepoint($/;"	f	file:
innobase_rename_col_discard_foreign	handler/handler0alter.cc	/^static void innobase_rename_col_discard_foreign($/;"	f	file:
innobase_rename_or_enlarge_columns_cache	handler/handler0alter.cc	/^static void innobase_rename_or_enlarge_columns_cache($/;"	f	file:
innobase_rename_vc_templ	handler/ha_innodb.cc	/^void innobase_rename_vc_templ(dict_table_t *table) {$/;"	f
innobase_reset_all_monitor_counter	handler/ha_innodb.cc	/^static char *innobase_reset_all_monitor_counter = nullptr;$/;"	v	file:
innobase_reset_monitor_counter	handler/ha_innodb.cc	/^static char *innobase_reset_monitor_counter = nullptr;$/;"	v	file:
innobase_rollback	handler/ha_innodb.cc	/^static int innobase_rollback(handlerton *hton, \/*!< in: InnoDB handlerton *\/$/;"	f	file:
innobase_rollback_by_xid	handler/ha_innodb.cc	/^static xa_status_code innobase_rollback_by_xid($/;"	f	file:
innobase_rollback_on_timeout	handler/ha_innodb.cc	/^static bool innobase_rollback_on_timeout = FALSE;$/;"	v	file:
innobase_rollback_sec_index	handler/handler0alter.cc	/^static void innobase_rollback_sec_index(dict_table_t *user_table,$/;"	f	file:
innobase_rollback_to_savepoint	handler/ha_innodb.cc	/^static int innobase_rollback_to_savepoint($/;"	f	file:
innobase_rollback_to_savepoint_can_release_mdl	handler/ha_innodb.cc	/^static bool innobase_rollback_to_savepoint_can_release_mdl($/;"	f	file:
innobase_rollback_trx	handler/ha_innodb.cc	/^static int innobase_rollback_trx(trx_t *trx) \/*!< in: transaction *\/$/;"	f	file:
innobase_row_to_mysql	handler/handler0alter.cc	/^void innobase_row_to_mysql(struct TABLE *table, const dict_table_t *itab,$/;"	f
innobase_savepoint	handler/ha_innodb.cc	/^static int innobase_savepoint($/;"	f	file:
innobase_server_stopword_table	handler/ha_innodb.cc	/^static char *innobase_server_stopword_table = nullptr;$/;"	v	file:
innobase_set_foreign_key_option	handler/handler0alter.cc	/^static MY_ATTRIBUTE((warn_unused_result)) bool innobase_set_foreign_key_option($/;"	f
innobase_set_max_autoinc	handler/ha_innodb.cc	/^dberr_t ha_innobase::innobase_set_max_autoinc($/;"	f	class:ha_innobase
innobase_share_mutex	handler/ha_innodb.cc	/^static mysql_mutex_t innobase_share_mutex;$/;"	v	file:
innobase_share_mutex_key	handler/ha_innodb.cc	/^static mysql_pfs_key_t innobase_share_mutex_key;$/;"	v	file:
innobase_should_madvise_buf_pool	handler/ha_innodb.cc	/^bool innobase_should_madvise_buf_pool() {$/;"	f
innobase_show_status	handler/ha_innodb.cc	/^static bool innobase_show_status(handlerton *hton, THD *thd,$/;"	f	file:
innobase_spatial_exist	handler/handler0alter.cc	/^static bool innobase_spatial_exist(const TABLE *table) {$/;"	f	file:
innobase_srv_conc_enter_innodb	handler/ha_innodb.cc	/^static inline dberr_t innobase_srv_conc_enter_innodb(row_prebuilt_t *prebuilt) {$/;"	f	file:
innobase_srv_conc_exit_innodb	handler/ha_innodb.cc	/^static inline void innobase_srv_conc_exit_innodb(row_prebuilt_t *prebuilt) {$/;"	f	file:
innobase_srv_conc_force_exit_innodb	handler/ha_innodb.cc	/^static inline void innobase_srv_conc_force_exit_innodb($/;"	f	file:
innobase_start_trx_and_assign_read_view	handler/ha_innodb.cc	/^static int innobase_start_trx_and_assign_read_view($/;"	f	file:
innobase_stats_on_metadata	handler/ha_innodb.cc	/^bool innobase_stats_on_metadata = TRUE;$/;"	v
innobase_storage_engine	handler/ha_innodb.cc	/^static struct st_mysql_storage_engine innobase_storage_engine = {$/;"	v	typeref:struct:st_mysql_storage_engine	file:
innobase_store_multi_value	handler/ha_innodb.cc	/^static inline bool innobase_store_multi_value(json_binary::Value &v,$/;"	f	file:
innobase_store_multi_value_low	handler/ha_innodb.cc	/^static void innobase_store_multi_value_low(json_binary::Value *bv,$/;"	f	file:
innobase_strcasecmp	handler/ha_innodb.cc	/^int innobase_strcasecmp(const char *a, \/*!< in: first string to compare *\/$/;"	f
innobase_strnxfrm	handler/ha_innodb.cc	/^ulint innobase_strnxfrm(const CHARSET_INFO *cs, \/*!< in: Character set *\/$/;"	f
innobase_support_instant	handler/handler0alter.cc	/^static inline Instant_Type innobase_support_instant($/;"	f	file:
innobase_sys_files	handler/ha_innodb.cc	/^    innobase_sys_files;$/;"	v	file:
innobase_system_databases	dict/mem.cc	/^static std::string innobase_system_databases[] = {$/;"	v	file:
innobase_system_variables	handler/ha_innodb.cc	/^static SYS_VAR *innobase_system_variables[] = {$/;"	v	file:
innobase_table_flags	handler/ha_innodb.cc	/^bool create_table_info_t::innobase_table_flags() {$/;"	f	class:create_table_info_t
innobase_temp_data_file_path	handler/ha_innodb.cc	/^static char *innobase_temp_data_file_path = nullptr;$/;"	v	file:
innobase_truncate	handler/ha_innodb.h	/^  innobase_truncate(THD *thd, const char *name, TABLE *form, Table *dd_table,$/;"	f	class:innobase_truncate
innobase_truncate	handler/ha_innodb.h	/^class innobase_truncate {$/;"	c
innobase_trx_allocate	handler/ha_innodb.cc	/^trx_t *innobase_trx_allocate(THD *thd) \/*!< in: user thread handle *\/$/;"	f
innobase_trx_init	handler/ha_innodb.cc	/^static void innobase_trx_init($/;"	f	file:
innobase_trx_map_isolation_level	handler/ha_innodb.cc	/^trx_t::isolation_level_t innobase_trx_map_isolation_level($/;"	f
innobase_unlock_hton_log	handler/ha_innodb.cc	/^static bool innobase_unlock_hton_log(handlerton *hton) {$/;"	f	file:
innobase_update_foreign_cache	handler/handler0alter.cc	/^    innobase_update_foreign_cache(ha_innobase_inplace_ctx *ctx, THD *user_thd,$/;"	f
innobase_update_foreign_try	handler/handler0alter.cc	/^static MY_ATTRIBUTE((warn_unused_result)) bool innobase_update_foreign_try($/;"	f
innobase_vcol_build_templ	handler/ha_innodb.cc	/^static void innobase_vcol_build_templ(const TABLE *table,$/;"	f	file:
innobase_wildcasecmp	handler/ha_innodb.cc	/^static int innobase_wildcasecmp($/;"	f	file:
innobase_xa_prepare	handler/ha_innodb.cc	/^static int innobase_xa_prepare(handlerton *hton, \/*!< in: InnoDB handlerton *\/$/;"	f	file:
innobase_xa_recover	handler/ha_innodb.cc	/^static int innobase_xa_recover($/;"	f	file:
innodb_adaptive_hash_index_update	handler/ha_innodb.cc	/^static void innodb_adaptive_hash_index_update($/;"	f	file:
innodb_ahi_drop_lookups	include/srv0srv.h	/^  ulint innodb_ahi_drop_lookups;      \/*!< number of adaptive hash$/;"	m	struct:export_var_t
innodb_alter_tablespace	handler/ha_innodb.cc	/^static int innodb_alter_tablespace(handlerton *hton, THD *thd,$/;"	f	file:
innodb_alter_undo_tablespace	handler/ha_innodb.cc	/^static int innodb_alter_undo_tablespace(handlerton *hton, THD *thd,$/;"	f	file:
innodb_alter_undo_tablespace_active	handler/ha_innodb.cc	/^static int innodb_alter_undo_tablespace_active(handlerton *hton, THD *thd,$/;"	f	file:
innodb_alter_undo_tablespace_inactive	handler/ha_innodb.cc	/^static int innodb_alter_undo_tablespace_inactive(handlerton *hton, THD *thd,$/;"	f	file:
innodb_api	include/row0mysql.h	/^  unsigned innodb_api : 1;     \/*!< whether this is a InnoDB API$/;"	m	struct:row_prebuilt_t
innodb_api_buf	include/row0mysql.h	/^  void *innodb_api_buf;        \/*!< Buffer holding copy of the physical$/;"	m	struct:row_prebuilt_t
innodb_api_cb	handler/ha_innodb.cc	/^static ib_cb_t innodb_api_cb[] = {$/;"	v	file:
innodb_api_rec	include/row0mysql.h	/^  const rec_t *innodb_api_rec; \/*!< InnoDB API search result *\/$/;"	m	struct:row_prebuilt_t
innodb_api_rec_size	include/row0mysql.h	/^  ulint innodb_api_rec_size;   \/*!< Size of the Innodb API record *\/$/;"	m	struct:row_prebuilt_t
innodb_arch_file_key	os/os0file.cc	/^mysql_pfs_key_t innodb_arch_file_key;$/;"	v
innodb_background_drop_list_empty	handler/ha_innodb.cc	/^static bool innodb_background_drop_list_empty = true;$/;"	v	file:
innodb_base_col_setup	handler/ha_innodb.cc	/^void innodb_base_col_setup(dict_table_t *table, const Field *field,$/;"	f
innodb_base_col_setup_for_stored	handler/ha_innodb.cc	/^void innodb_base_col_setup_for_stored(const dict_table_t *table,$/;"	f
innodb_buf_flush_list_now	handler/ha_innodb.cc	/^static bool innodb_buf_flush_list_now = true;$/;"	v	file:
innodb_buffer_pool_bytes_data	include/srv0srv.h	/^  ulint innodb_buffer_pool_bytes_data;        \/*!< File bytes used *\/$/;"	m	struct:export_var_t
innodb_buffer_pool_bytes_dirty	include/srv0srv.h	/^  ulint innodb_buffer_pool_bytes_dirty;       \/*!< File bytes modified *\/$/;"	m	struct:export_var_t
innodb_buffer_pool_dump_now	handler/ha_innodb.cc	/^static bool innodb_buffer_pool_dump_now = FALSE;$/;"	v	file:
innodb_buffer_pool_dump_status	include/srv0srv.h	/^  char innodb_buffer_pool_dump_status[OS_FILE_MAX_PATH +$/;"	m	struct:export_var_t
innodb_buffer_pool_evict_uncompressed	handler/ha_innodb.cc	/^    (warn_unused_result)) bool innodb_buffer_pool_evict_uncompressed(void) {$/;"	f
innodb_buffer_pool_evict_update	handler/ha_innodb.cc	/^static void innodb_buffer_pool_evict_update(THD *thd, SYS_VAR *var,$/;"	f	file:
innodb_buffer_pool_load_abort	handler/ha_innodb.cc	/^static bool innodb_buffer_pool_load_abort = FALSE;$/;"	v	file:
innodb_buffer_pool_load_now	handler/ha_innodb.cc	/^static bool innodb_buffer_pool_load_now = FALSE;$/;"	v	file:
innodb_buffer_pool_load_status	include/srv0srv.h	/^  char innodb_buffer_pool_load_status[OS_FILE_MAX_PATH +$/;"	m	struct:export_var_t
innodb_buffer_pool_pages_data	include/srv0srv.h	/^  ulint innodb_buffer_pool_pages_data;        \/*!< Data pages *\/$/;"	m	struct:export_var_t
innodb_buffer_pool_pages_dirty	include/srv0srv.h	/^  ulint innodb_buffer_pool_pages_dirty;       \/*!< Dirty data pages *\/$/;"	m	struct:export_var_t
innodb_buffer_pool_pages_flushed	include/srv0srv.h	/^  ulint innodb_buffer_pool_pages_flushed;  \/*!< srv_buf_pool_flushed *\/$/;"	m	struct:export_var_t
innodb_buffer_pool_pages_free	include/srv0srv.h	/^  ulint innodb_buffer_pool_pages_free;        \/*!< Free pages *\/$/;"	m	struct:export_var_t
innodb_buffer_pool_pages_latched	include/srv0srv.h	/^  ulint innodb_buffer_pool_pages_latched;  \/*!< Latched pages *\/$/;"	m	struct:export_var_t
innodb_buffer_pool_pages_misc	include/srv0srv.h	/^  ulint innodb_buffer_pool_pages_misc;        \/*!< Miscellanous pages *\/$/;"	m	struct:export_var_t
innodb_buffer_pool_pages_total	include/srv0srv.h	/^  ulint innodb_buffer_pool_pages_total;       \/*!< Buffer pool size *\/$/;"	m	struct:export_var_t
innodb_buffer_pool_read_ahead	include/srv0srv.h	/^  ulint innodb_buffer_pool_read_ahead;     \/*!< srv_read_ahead *\/$/;"	m	struct:export_var_t
innodb_buffer_pool_read_ahead_evicted	include/srv0srv.h	/^  ulint innodb_buffer_pool_read_ahead_evicted; \/*!< srv_read_ahead evicted*\/$/;"	m	struct:export_var_t
innodb_buffer_pool_read_ahead_rnd	include/srv0srv.h	/^  ulint innodb_buffer_pool_read_ahead_rnd; \/*!< srv_read_ahead_rnd *\/$/;"	m	struct:export_var_t
innodb_buffer_pool_read_requests	include/srv0srv.h	/^  ulint innodb_buffer_pool_read_requests;  \/*!< buf_pool->stat.n_page_gets *\/$/;"	m	struct:export_var_t
innodb_buffer_pool_reads	include/srv0srv.h	/^  ulint innodb_buffer_pool_reads;          \/*!< srv_buf_pool_reads *\/$/;"	m	struct:export_var_t
innodb_buffer_pool_resize_status	include/srv0srv.h	/^  char innodb_buffer_pool_resize_status[512]; \/*!< Buf pool resize status *\/$/;"	m	struct:export_var_t
innodb_buffer_pool_size_init	handler/ha_innodb.cc	/^static void innodb_buffer_pool_size_init() {$/;"	f	file:
innodb_buffer_pool_size_update	handler/ha_innodb.cc	/^static void innodb_buffer_pool_size_update(THD *thd, SYS_VAR *var,$/;"	f	file:
innodb_buffer_pool_size_validate	handler/ha_innodb.cc	/^static bool innodb_buffer_pool_size_validate(THD *thd,$/;"	f	file:
innodb_buffer_pool_wait_free	include/srv0srv.h	/^  ulint innodb_buffer_pool_wait_free;      \/*!< srv_buf_pool_wait_free *\/$/;"	m	struct:export_var_t
innodb_buffer_pool_write_requests	include/srv0srv.h	/^  ulint innodb_buffer_pool_write_requests; \/*!< srv_buf_pool_write_requests *\/$/;"	m	struct:export_var_t
innodb_calling_exit	srv/srv0srv.cc	/^bool innodb_calling_exit;$/;"	v
innodb_change_buffer_max_size_update	handler/ha_innodb.cc	/^static void innodb_change_buffer_max_size_update($/;"	f	file:
innodb_change_buffering	ibuf/ibuf0ibuf.cc	/^ulong innodb_change_buffering = IBUF_USE_ALL;$/;"	v
innodb_change_buffering_names	handler/ha_innodb.cc	/^static const char *innodb_change_buffering_names[] = {$/;"	v	file:
innodb_change_buffering_typelib	handler/ha_innodb.cc	/^static TYPELIB innodb_change_buffering_typelib = {$/;"	v	file:
innodb_check_fk_column_compat	handler/ha_innodb.cc	/^static bool innodb_check_fk_column_compat($/;"	f	file:
innodb_checksum_algorithm_names	handler/ha_innodb.cc	/^static const char *innodb_checksum_algorithm_names[] = {$/;"	v	file:
innodb_checksum_algorithm_typelib	handler/ha_innodb.cc	/^static TYPELIB innodb_checksum_algorithm_typelib = {$/;"	v	file:
innodb_clone_ack	clone/clone0api.cc	/^int innodb_clone_ack(handlerton *hton, THD *thd, const byte *loc, uint loc_len,$/;"	f
innodb_clone_apply	clone/clone0api.cc	/^int innodb_clone_apply(handlerton *hton, THD *thd, const byte *loc,$/;"	f
innodb_clone_apply_begin	clone/clone0api.cc	/^int innodb_clone_apply_begin(handlerton *hton, THD *thd, const byte *&loc,$/;"	f
innodb_clone_apply_end	clone/clone0api.cc	/^int innodb_clone_apply_end(handlerton *hton, THD *thd, const byte *loc,$/;"	f
innodb_clone_begin	clone/clone0api.cc	/^int innodb_clone_begin(handlerton *hton, THD *thd, const byte *&loc,$/;"	f
innodb_clone_copy	clone/clone0api.cc	/^int innodb_clone_copy(handlerton *hton, THD *thd, const byte *loc, uint loc_len,$/;"	f
innodb_clone_end	clone/clone0api.cc	/^int innodb_clone_end(handlerton *hton, THD *thd, const byte *loc, uint loc_len,$/;"	f
innodb_clone_file_key	os/os0file.cc	/^mysql_pfs_key_t innodb_clone_file_key;$/;"	v
innodb_clone_get_capability	clone/clone0api.cc	/^void innodb_clone_get_capability(Ha_clone_flagset &flags) {$/;"	f
innodb_cmp_per_index_update	handler/ha_innodb.cc	/^static void innodb_cmp_per_index_update($/;"	f	file:
innodb_counter_info	srv/srv0mon.cc	/^static monitor_info_t innodb_counter_info[] = {$/;"	v	file:
innodb_counter_value	srv/srv0mon.cc	/^monitor_value_t innodb_counter_value[NUM_MONITOR];$/;"	v
innodb_create_tablespace	handler/ha_innodb.cc	/^static int innodb_create_tablespace(handlerton *hton, THD *thd,$/;"	f	file:
innodb_create_undo_tablespace	handler/ha_innodb.cc	/^static int innodb_create_undo_tablespace(handlerton *hton, THD *thd,$/;"	f	file:
innodb_data_file_key	os/os0file.cc	/^mysql_pfs_key_t innodb_data_file_key;$/;"	v
innodb_data_fsyncs	include/srv0srv.h	/^  ulint innodb_data_fsyncs;         \/*!< Number of fsyncs so far *\/$/;"	m	struct:export_var_t
innodb_data_lock_inspector	handler/ha_innodb.cc	/^static Innodb_data_lock_inspector innodb_data_lock_inspector;$/;"	v	file:
innodb_data_pending_fsyncs	include/srv0srv.h	/^  ulint innodb_data_pending_fsyncs; \/*!< Pending fsyncs *\/$/;"	m	struct:export_var_t
innodb_data_pending_reads	include/srv0srv.h	/^  ulint innodb_data_pending_reads;  \/*!< Pending reads *\/$/;"	m	struct:export_var_t
innodb_data_pending_writes	include/srv0srv.h	/^  ulint innodb_data_pending_writes; \/*!< Pending writes *\/$/;"	m	struct:export_var_t
innodb_data_read	include/srv0srv.h	/^  ulint innodb_data_read;           \/*!< Data bytes read *\/$/;"	m	struct:export_var_t
innodb_data_reads	include/srv0srv.h	/^  ulint innodb_data_reads;          \/*!< I\/O read requests *\/$/;"	m	struct:export_var_t
innodb_data_writes	include/srv0srv.h	/^  ulint innodb_data_writes;         \/*!< I\/O write requests *\/$/;"	m	struct:export_var_t
innodb_data_written	include/srv0srv.h	/^  ulint innodb_data_written;        \/*!< Data bytes written *\/$/;"	m	struct:export_var_t
innodb_dblwr_file_key	os/os0file.cc	/^mysql_pfs_key_t innodb_dblwr_file_key;$/;"	v
innodb_dblwr_pages_written	include/srv0srv.h	/^  ulint innodb_dblwr_pages_written;            \/*!< srv_dblwr_pages_written *\/$/;"	m	struct:export_var_t
innodb_dblwr_writes	include/srv0srv.h	/^  ulint innodb_dblwr_writes;                   \/*!< srv_dblwr_writes *\/$/;"	m	struct:export_var_t
innodb_dd_table	include/dict0dd.h	/^const innodb_dd_table_t innodb_dd_table[] = {$/;"	v
innodb_dd_table_size	include/dict0dd.h	/^static constexpr size_t innodb_dd_table_size = UT_ARR_SIZE(innodb_dd_table);$/;"	v
innodb_dd_table_t	include/dict0dd.h	/^struct innodb_dd_table_t {$/;"	s
innodb_ddl_log_crash_reset_debug	log/log0ddl.cc	/^bool innodb_ddl_log_crash_reset_debug;$/;"	v
innodb_debug_compress_names	handler/ha_innodb.cc	/^static const char *innodb_debug_compress_names[] = {"none", "zlib", "lz4",$/;"	v	file:
innodb_debug_compress_typelib	handler/ha_innodb.cc	/^static TYPELIB innodb_debug_compress_typelib = {$/;"	v	file:
innodb_default_row_format	handler/ha_innodb.cc	/^static ulong innodb_default_row_format = DEFAULT_ROW_FORMAT_DYNAMIC;$/;"	v	file:
innodb_default_row_format_names	handler/ha_innodb.cc	/^static const char *innodb_default_row_format_names[] = {"redundant", "compact",$/;"	v	file:
innodb_default_row_format_typelib	handler/ha_innodb.cc	/^static TYPELIB innodb_default_row_format_typelib = {$/;"	v	file:
innodb_deinit	handler/ha_innodb.cc	/^static int innodb_deinit(MYSQL_PLUGIN plugin_info MY_ATTRIBUTE((unused))) {$/;"	f	file:
innodb_dict_stats_disabled_debug	dict/dict0stats_bg.cc	/^bool innodb_dict_stats_disabled_debug;$/;"	v
innodb_disable_monitor_update	handler/ha_innodb.cc	/^static void innodb_disable_monitor_update(THD *thd, SYS_VAR *var, void *var_ptr,$/;"	f	file:
innodb_drop_tablespace	handler/ha_innodb.cc	/^static int innodb_drop_tablespace(handlerton *hton, THD *thd,$/;"	f	file:
innodb_drop_undo_tablespace	handler/ha_innodb.cc	/^static int innodb_drop_undo_tablespace(handlerton *hton, THD *thd,$/;"	f	file:
innodb_enable_monitor_at_startup	handler/ha_innodb.cc	/^static void innodb_enable_monitor_at_startup($/;"	f	file:
innodb_enable_monitor_update	handler/ha_innodb.cc	/^static void innodb_enable_monitor_update(THD *thd, SYS_VAR *var, void *var_ptr,$/;"	f	file:
innodb_export_status	handler/ha_innodb.cc	/^static void innodb_export_status() {$/;"	f	file:
innodb_extend_and_initialize_update	handler/ha_innodb.cc	/^static void innodb_extend_and_initialize_update(THD *thd, SYS_VAR *var,$/;"	f	file:
innodb_fill_fake_column_struct	handler/ha_innodb.cc	/^static void innodb_fill_fake_column_struct($/;"	f	file:
innodb_fill_old_vcol_val	handler/ha_innodb.cc	/^static byte *innodb_fill_old_vcol_val(row_prebuilt_t *prebuilt,$/;"	f	file:
innodb_flush_method	handler/ha_innodb.cc	/^static ulong innodb_flush_method;$/;"	v	file:
innodb_flush_method_names	handler/ha_innodb.cc	/^static const char *innodb_flush_method_names[] = {$/;"	v	file:
innodb_flush_method_typelib	handler/ha_innodb.cc	/^static TYPELIB innodb_flush_method_typelib = {$/;"	v	file:
innodb_get_auto_increment_for_uncached	handler/ha_innodb.cc	/^static ib_uint64_t innodb_get_auto_increment_for_uncached($/;"	f	file:
innodb_get_table_statistics_for_uncached	handler/ha_innodb.cc	/^static bool innodb_get_table_statistics_for_uncached($/;"	f	file:
innodb_hton_ptr	handler/ha_innodb.cc	/^static struct handlerton *innodb_hton_ptr;$/;"	v	typeref:struct:handlerton	file:
innodb_idx_translate_t	handler/ha_innodb.h	/^struct innodb_idx_translate_t {$/;"	s
innodb_init	handler/ha_innodb.cc	/^static int innodb_init(void *p) {$/;"	f	file:
innodb_init_abort	handler/ha_innodb.cc	/^static int innodb_init_abort() {$/;"	f	file:
innodb_init_params	handler/ha_innodb.cc	/^static int innodb_init_params() {$/;"	f	file:
innodb_inited	handler/ha_innodb.cc	/^static bool innodb_inited = false;$/;"	v	file:
innodb_internal_table_validate	handler/ha_innodb.cc	/^static int innodb_internal_table_validate(THD *thd, SYS_VAR *var, void *save,$/;"	f	file:
innodb_io_capacity_max_update	handler/ha_innodb.cc	/^static void innodb_io_capacity_max_update($/;"	f	file:
innodb_io_capacity_update	handler/ha_innodb.cc	/^static void innodb_io_capacity_update($/;"	f	file:
innodb_key_type	os/os0enc.cc	/^constexpr char innodb_key_type[] = "AES";$/;"	v
innodb_locks	trx/trx0i_s.cc	/^  i_s_table_cache_t innodb_locks;   \/*!< innodb_locks table *\/$/;"	m	struct:trx_i_s_cache_t	file:
innodb_log_buffer_size_update	handler/ha_innodb.cc	/^static void innodb_log_buffer_size_update(THD *thd, SYS_VAR *var, void *var_ptr,$/;"	f	file:
innodb_log_checkpoint_fuzzy_now	handler/ha_innodb.cc	/^static bool innodb_log_checkpoint_fuzzy_now = true;$/;"	v	file:
innodb_log_checkpoint_now	handler/ha_innodb.cc	/^static bool innodb_log_checkpoint_now = true;$/;"	v	file:
innodb_log_checksums_func_update	handler/ha_innodb.cc	/^    innodb_log_checksums_func_update(bool check) {$/;"	f	file:
innodb_log_checksums_update	handler/ha_innodb.cc	/^static void innodb_log_checksums_update(THD *thd, SYS_VAR *var, void *var_ptr,$/;"	f	file:
innodb_log_file_key	os/os0file.cc	/^mysql_pfs_key_t innodb_log_file_key;$/;"	v
innodb_log_file_size_init	handler/ha_innodb.cc	/^static int innodb_log_file_size_init() {$/;"	f	file:
innodb_log_flush_now	handler/ha_innodb.cc	/^static bool innodb_log_flush_now = true;$/;"	v	file:
innodb_log_waits	include/srv0srv.h	/^  ulint innodb_log_waits;                      \/*!< srv_log_waits *\/$/;"	m	struct:export_var_t
innodb_log_write_ahead_size_update	handler/ha_innodb.cc	/^static void innodb_log_write_ahead_size_update(THD *thd, SYS_VAR *var,$/;"	f	file:
innodb_log_write_requests	include/srv0srv.h	/^  ulint innodb_log_write_requests;             \/*!< srv_log_write_requests *\/$/;"	m	struct:export_var_t
innodb_log_writer_threads_update	handler/ha_innodb.cc	/^static void innodb_log_writer_threads_update(THD *thd, SYS_VAR *var,$/;"	f	file:
innodb_log_writes	include/srv0srv.h	/^  ulint innodb_log_writes;                     \/*!< srv_log_writes *\/$/;"	m	struct:export_var_t
innodb_make_page_dirty	handler/ha_innodb.cc	/^static void innodb_make_page_dirty($/;"	f	file:
innodb_max_dirty_pages_pct_lwm_update	handler/ha_innodb.cc	/^static void innodb_max_dirty_pages_pct_lwm_update($/;"	f	file:
innodb_max_dirty_pages_pct_update	handler/ha_innodb.cc	/^static void innodb_max_dirty_pages_pct_update($/;"	f	file:
innodb_merge_threshold_set_all_debug	handler/ha_innodb.cc	/^static uint innodb_merge_threshold_set_all_debug =$/;"	v	file:
innodb_merge_threshold_set_all_debug_update	handler/ha_innodb.cc	/^static void innodb_merge_threshold_set_all_debug_update(THD *thd, SYS_VAR *var,$/;"	f	file:
innodb_monitor_id_by_name_get	handler/ha_innodb.cc	/^static ulint innodb_monitor_id_by_name_get($/;"	f	file:
innodb_monitor_set_option	handler/ha_innodb.cc	/^static void innodb_monitor_set_option($/;"	f	file:
innodb_monitor_update	handler/ha_innodb.cc	/^static void innodb_monitor_update($/;"	f	file:
innodb_monitor_update_wildcard	handler/ha_innodb.cc	/^static void innodb_monitor_update_wildcard($/;"	f	file:
innodb_monitor_valid_byname	handler/ha_innodb.cc	/^static int innodb_monitor_valid_byname($/;"	f	file:
innodb_monitor_validate	handler/ha_innodb.cc	/^static int innodb_monitor_validate($/;"	f	file:
innodb_monitor_validate_wildcard_name	handler/ha_innodb.cc	/^static ibool innodb_monitor_validate_wildcard_name($/;"	f	file:
innodb_num_open_files	include/srv0srv.h	/^  ulint innodb_num_open_files;            \/*!< fil_n_files_open *\/$/;"	m	struct:export_var_t
innodb_old_blocks_pct_update	handler/ha_innodb.cc	/^static void innodb_old_blocks_pct_update($/;"	f	file:
innodb_optimize_fulltext_only	handler/ha_innodb.cc	/^static bool innodb_optimize_fulltext_only = FALSE;$/;"	v	file:
innodb_os_log_fsyncs	include/srv0srv.h	/^  ulint innodb_os_log_fsyncs;                  \/*!< fil_n_log_flushes *\/$/;"	m	struct:export_var_t
innodb_os_log_pending_fsyncs	include/srv0srv.h	/^  ulint innodb_os_log_pending_fsyncs;          \/*!< fil_n_pending_log_flushes *\/$/;"	m	struct:export_var_t
innodb_os_log_pending_writes	include/srv0srv.h	/^  ulint innodb_os_log_pending_writes;          \/*!< srv_os_log_pending_writes *\/$/;"	m	struct:export_var_t
innodb_os_log_written	include/srv0srv.h	/^  lsn_t innodb_os_log_written;                 \/*!< srv_os_log_written *\/$/;"	m	struct:export_var_t
innodb_page_cleaner_disabled_debug	buf/buf0flu.cc	/^bool innodb_page_cleaner_disabled_debug;$/;"	v
innodb_page_size	include/srv0srv.h	/^  ulint innodb_page_size;                      \/*!< UNIV_PAGE_SIZE *\/$/;"	m	struct:export_var_t
innodb_pages_created	include/srv0srv.h	/^  ulint innodb_pages_created;          \/*!< buf_pool->stat.n_pages_created *\/$/;"	m	struct:export_var_t
innodb_pages_read	include/srv0srv.h	/^  ulint innodb_pages_read;             \/*!< buf_pool->stat.n_pages_read *\/$/;"	m	struct:export_var_t
innodb_pages_written	include/srv0srv.h	/^  ulint innodb_pages_written;          \/*!< buf_pool->stat.n_pages_written *\/$/;"	m	struct:export_var_t
innodb_pre_dd_shutdown	handler/ha_innodb.cc	/^static void innodb_pre_dd_shutdown(handlerton *) {$/;"	f	file:
innodb_purge_run_now	handler/ha_innodb.cc	/^static bool innodb_purge_run_now = true;$/;"	v	file:
innodb_purge_stop_now	handler/ha_innodb.cc	/^static bool innodb_purge_stop_now = true;$/;"	v	file:
innodb_purge_trx_id_age	include/srv0srv.h	/^  ulint innodb_purge_trx_id_age;      \/*!< rw_max_trx_no - purged trx_no *\/$/;"	m	struct:export_var_t
innodb_purge_view_trx_id_age	include/srv0srv.h	/^  ulint innodb_purge_view_trx_id_age; \/*!< rw_max_trx_no$/;"	m	struct:export_var_t
innodb_rec_per_key	handler/ha_innodb.cc	/^rec_per_key_t innodb_rec_per_key(const dict_index_t *index, ulint i,$/;"	f
innodb_redo_log_archive_flush_deinit	log/log0meb.cc	/^void innodb_redo_log_archive_flush_deinit($/;"	f	namespace:meb
innodb_redo_log_archive_start_deinit	log/log0meb.cc	/^void innodb_redo_log_archive_start_deinit($/;"	f	namespace:meb
innodb_redo_log_archive_stop_deinit	log/log0meb.cc	/^void innodb_redo_log_archive_stop_deinit($/;"	f	namespace:meb
innodb_redo_log_enabled	include/srv0srv.h	/^  bool innodb_redo_log_enabled;        \/*!< srv_redo_log *\/$/;"	m	struct:export_var_t
innodb_replace_trx_in_thd	handler/ha_innodb.cc	/^static void innodb_replace_trx_in_thd(THD *thd, void *new_trx_arg,$/;"	f	file:
innodb_reset_all_monitor_update	handler/ha_innodb.cc	/^static void innodb_reset_all_monitor_update(THD *thd, SYS_VAR *var,$/;"	f	file:
innodb_reset_monitor_update	handler/ha_innodb.cc	/^static void innodb_reset_monitor_update(THD *thd, SYS_VAR *var, void *var_ptr,$/;"	f	file:
innodb_rollback_segments_update	handler/ha_innodb.cc	/^static void innodb_rollback_segments_update(THD *thd, SYS_VAR *var,$/;"	f	file:
innodb_row_lock_current_waits	include/srv0srv.h	/^  ulint innodb_row_lock_current_waits; \/*!< srv_n_lock_wait_current_count *\/$/;"	m	struct:export_var_t
innodb_row_lock_time	include/srv0srv.h	/^  int64_t innodb_row_lock_time;        \/*!< srv_n_lock_wait_time$/;"	m	struct:export_var_t
innodb_row_lock_time_avg	include/srv0srv.h	/^  ulint innodb_row_lock_time_avg;      \/*!< srv_n_lock_wait_time$/;"	m	struct:export_var_t
innodb_row_lock_time_max	include/srv0srv.h	/^  ulint innodb_row_lock_time_max;      \/*!< srv_n_lock_max_wait_time$/;"	m	struct:export_var_t
innodb_row_lock_waits	include/srv0srv.h	/^  ulint innodb_row_lock_waits;         \/*!< srv_n_lock_wait_count *\/$/;"	m	struct:export_var_t
innodb_rows_deleted	include/srv0srv.h	/^  ulint innodb_rows_deleted;           \/*!< srv_n_rows_deleted *\/$/;"	m	struct:export_var_t
innodb_rows_inserted	include/srv0srv.h	/^  ulint innodb_rows_inserted;          \/*!< srv_n_rows_inserted *\/$/;"	m	struct:export_var_t
innodb_rows_read	include/srv0srv.h	/^  ulint innodb_rows_read;              \/*!< srv_n_rows_read *\/$/;"	m	struct:export_var_t
innodb_rows_updated	include/srv0srv.h	/^  ulint innodb_rows_updated;           \/*!< srv_n_rows_updated *\/$/;"	m	struct:export_var_t
innodb_sampled_pages_read	include/srv0srv.h	/^  ulint innodb_sampled_pages_read;$/;"	m	struct:export_var_t
innodb_sampled_pages_skipped	include/srv0srv.h	/^  ulint innodb_sampled_pages_skipped;$/;"	m	struct:export_var_t
innodb_save_page_no	handler/ha_innodb.cc	/^static void innodb_save_page_no(THD *thd,         \/*!< in: thread handle *\/$/;"	f	file:
innodb_session_t	include/sess0sess.h	/^  innodb_session_t()$/;"	f	class:innodb_session_t
innodb_session_t	include/sess0sess.h	/^class innodb_session_t {$/;"	c
innodb_set_buf_pool_size	handler/ha_innodb.cc	/^void innodb_set_buf_pool_size(long long buf_pool_size) {$/;"	f
innodb_show_latch_status	handler/ha_innodb.cc	/^static int innodb_show_latch_status(handlerton *hton, THD *thd,$/;"	f	file:
innodb_show_mutex_status	handler/ha_innodb.cc	/^static int innodb_show_mutex_status(handlerton *hton, THD *thd,$/;"	f	file:
innodb_show_rwlock_status	handler/ha_innodb.cc	/^static int innodb_show_rwlock_status(handlerton *hton, THD *thd,$/;"	f	file:
innodb_show_status	handler/ha_innodb.cc	/^static int innodb_show_status(handlerton *hton, THD *thd,$/;"	f	file:
innodb_shutdown	handler/ha_innodb.cc	/^static int innodb_shutdown(handlerton *, ha_panic_function) {$/;"	f	file:
innodb_space_shutdown	handler/ha_innodb.cc	/^static void innodb_space_shutdown() {$/;"	f	file:
innodb_srv_buf_dump_filename_validate	handler/ha_innodb.cc	/^static int innodb_srv_buf_dump_filename_validate(THD *thd, SYS_VAR *var,$/;"	f	file:
innodb_srv_buffer_pool_in_core_file_update	handler/ha_innodb.cc	/^static void innodb_srv_buffer_pool_in_core_file_update(THD *thd, SYS_VAR *var,$/;"	f	file:
innodb_stats_method_names	handler/ha_innodb.cc	/^static const char *innodb_stats_method_names[] = {$/;"	v	file:
innodb_stats_method_typelib	handler/ha_innodb.cc	/^static TYPELIB innodb_stats_method_typelib = {$/;"	v	file:
innodb_status_output_update	handler/ha_innodb.cc	/^static void innodb_status_output_update(THD *, SYS_VAR *, void *var_ptr,$/;"	f	file:
innodb_status_variables	handler/ha_innodb.cc	/^static SHOW_VAR innodb_status_variables[] = {$/;"	v	file:
innodb_status_variables_export	handler/ha_innodb.cc	/^static SHOW_VAR innodb_status_variables_export[] = {$/;"	v	file:
innodb_stopword_table_validate	handler/ha_innodb.cc	/^static int innodb_stopword_table_validate(THD *thd, SYS_VAR *var, void *save,$/;"	f	file:
innodb_system_rows_deleted	include/srv0srv.h	/^  ulint innodb_system_rows_deleted;    \/*!< srv_n_system_rows_deleted*\/$/;"	m	struct:export_var_t
innodb_system_rows_inserted	include/srv0srv.h	/^  ulint innodb_system_rows_inserted;   \/*!< srv_n_system_rows_inserted *\/$/;"	m	struct:export_var_t
innodb_system_rows_read	include/srv0srv.h	/^  ulint innodb_system_rows_read;       \/*!< srv_n_system_rows_read *\/$/;"	m	struct:export_var_t
innodb_system_rows_updated	include/srv0srv.h	/^  ulint innodb_system_rows_updated;    \/*!< srv_n_system_rows_updated *\/$/;"	m	struct:export_var_t
innodb_temp_file_key	os/os0file.cc	/^mysql_pfs_key_t innodb_temp_file_key;$/;"	v
innodb_thread_concurrency_update	handler/ha_innodb.cc	/^static void innodb_thread_concurrency_update(THD *thd, SYS_VAR *var,$/;"	f	file:
innodb_tmpdir_validate	handler/ha_innodb.cc	/^static int innodb_tmpdir_validate(THD *thd, SYS_VAR *var, void *save,$/;"	f	file:
innodb_truncated_status_writes	include/srv0srv.h	/^  ulint innodb_truncated_status_writes;   \/*!< srv_truncated_status_writes *\/$/;"	m	struct:export_var_t
innodb_trx	trx/trx0i_s.cc	/^  i_s_table_cache_t innodb_trx;     \/*!< innodb_trx table *\/$/;"	m	struct:trx_i_s_cache_t	file:
innodb_undo_tablespaces_active	include/srv0srv.h	/^  ulint innodb_undo_tablespaces_active;   \/*!< number of active undo$/;"	m	struct:export_var_t
innodb_undo_tablespaces_deprecate	handler/ha_innodb.cc	/^static void innodb_undo_tablespaces_deprecate() {$/;"	f	file:
innodb_undo_tablespaces_explicit	include/srv0srv.h	/^  ulint innodb_undo_tablespaces_explicit; \/*!< number of undo tablespaces$/;"	m	struct:export_var_t
innodb_undo_tablespaces_implicit	include/srv0srv.h	/^  ulint innodb_undo_tablespaces_implicit; \/*!< number of undo tablespaces$/;"	m	struct:export_var_t
innodb_undo_tablespaces_total	include/srv0srv.h	/^  ulint innodb_undo_tablespaces_total;    \/*!< total number of undo tablespaces$/;"	m	struct:export_var_t
innodb_v_adjust_idx_col	handler/handler0alter.cc	/^static void innodb_v_adjust_idx_col(const Alter_inplace_info *ha_alter_info,$/;"	f	file:
innodb_version_str	handler/ha_innodb.cc	/^static char *innodb_version_str = (char *)INNODB_VERSION_STR;$/;"	v	file:
innopart_get_index	handler/ha_innopart.cc	/^inline dict_index_t *ha_innopart::innopart_get_index(uint part_id, uint keynr) {$/;"	f	class:ha_innopart
innopart_support_instant	handler/handler0alter.cc	/^static inline Instant_Type innopart_support_instant($/;"	f	file:
inplace_alter_partition	handler/handler0alter.cc	/^bool ha_innopart::inplace_alter_partition(TABLE *altered_table,$/;"	f	class:ha_innopart
inplace_alter_table	handler/handler0alter.cc	/^bool ha_innobase::inplace_alter_table(TABLE *altered_table,$/;"	f	class:ha_innobase
inplace_alter_table	handler/handler0alter.cc	/^bool ha_innopart::inplace_alter_table(TABLE *altered_table,$/;"	f	class:ha_innopart
inplace_alter_table_impl	handler/handler0alter.cc	/^bool ha_innobase::inplace_alter_table_impl(TABLE *altered_table,$/;"	f	class:ha_innobase
ins	api/api0api.cc	/^  ins_node_t *ins; \/*!< Innobase SQL insert node$/;"	m	struct:ib_qry_node_t	file:
ins	api/api0api.cc	/^  que_fork_t *ins; \/*!< Innobase SQL query graph used$/;"	m	struct:ib_qry_grph_t	file:
ins_graph	include/fts0types.h	/^  que_t **ins_graph; \/*!< Insert query graphs *\/$/;"	m	struct:fts_index_cache_t
ins_graph	include/row0mysql.h	/^  que_fork_t *ins_graph;  \/*!< Innobase SQL query graph used$/;"	m	struct:row_prebuilt_t
ins_multi_val_pos	include/row0ins.h	/^  uint32_t ins_multi_val_pos;$/;"	m	struct:ins_node_t
ins_node	include/row0mysql.h	/^  ins_node_t *ins_node;$/;"	m	struct:row_prebuilt_t
ins_node_create	row/row0ins.cc	/^ins_node_t *ins_node_create($/;"	f
ins_node_create_entry_list	row/row0ins.cc	/^static void ins_node_create_entry_list($/;"	f	file:
ins_node_set_new_row	row/row0ins.cc	/^void ins_node_set_new_row($/;"	f
ins_node_t	include/row0ins.h	/^struct ins_node_t {$/;"	s
ins_sel_stmt	include/row0mysql.h	/^  bool ins_sel_stmt; \/*!< if true then ins_sel_statement. *\/$/;"	m	struct:row_prebuilt_t
ins_type	include/row0ins.h	/^  ulint ins_type;          \/* INS_VALUES, INS_SEARCHED, or INS_DIRECT *\/$/;"	m	struct:ins_node_t
ins_upd_rec_buff	include/row0mysql.h	/^  byte *ins_upd_rec_buff;$/;"	m	struct:row_prebuilt_t
insert	btr/btr0bulk.cc	/^dberr_t BtrBulk::insert(PageBulk *page_bulk, dtuple_t *tuple,$/;"	f	class:BtrBulk
insert	btr/btr0bulk.cc	/^dberr_t BtrBulk::insert(dtuple_t *tuple, ulint level) {$/;"	f	class:BtrBulk
insert	btr/btr0bulk.cc	/^dberr_t PageBulk::insert(const dtuple_t *tuple, const big_rec_t *big_rec,$/;"	f	class:PageBulk
insert	btr/btr0bulk.cc	/^void PageBulk::insert(const rec_t *rec, ulint *offsets) {$/;"	f	class:PageBulk
insert	lob/lob0impl.cc	/^dberr_t insert(InsertContext *ctx, trx_t *trx, ref_t &ref,$/;"	f	namespace:lob
insert	log/log0ddl.cc	/^dberr_t DDL_Log_Table::insert(const DDL_Record &record) {$/;"	f	class:DDL_Log_Table
insert	read/read0read.cc	/^void ReadView::ids_t::insert(value_type value) {$/;"	f	class:ReadView::ids_t
insert	row/row0merge.cc	/^  dberr_t insert(trx_id_t trx_id, mem_heap_t *row_heap, btr_pcur_t *pcur,$/;"	f	class:index_tuple_info_t
insert_after	include/lob0impl.h	/^  void insert_after(plist_node_t &node1, plist_node_t &node2) {$/;"	f	struct:lob::plist_base_node_t
insert_after	include/lob0index.h	/^  void insert_after(flst_base_node_t *base, index_entry_t &entry) {$/;"	f	struct:lob::index_entry_t
insert_after	include/zlob0index.h	/^  void insert_after(flst_base_node_t *base, z_index_entry_t &entry) {$/;"	f	struct:lob::z_index_entry_t
insert_alter_encrypt_space_log	log/log0ddl.cc	/^dberr_t Log_DDL::insert_alter_encrypt_space_log(uint64_t id, ulint thread_id,$/;"	f	class:Log_DDL
insert_before	include/lob0impl.h	/^  void insert_before(plist_node_t &node3, plist_node_t &node2) {$/;"	f	struct:lob::plist_base_node_t
insert_before	include/lob0index.h	/^  void insert_before(flst_base_node_t *base, index_entry_t &entry) {$/;"	f	struct:lob::index_entry_t
insert_before	include/zlob0index.h	/^  void insert_before(flst_base_node_t *base, z_index_entry_t &entry) {$/;"	f	struct:lob::z_index_entry_t
insert_delete_space_log	log/log0ddl.cc	/^dberr_t Log_DDL::insert_delete_space_log(trx_t *trx, uint64_t id,$/;"	f	class:Log_DDL
insert_drop_log	log/log0ddl.cc	/^dberr_t Log_DDL::insert_drop_log(trx_t *trx, uint64_t id, ulint thread_id,$/;"	f	class:Log_DDL
insert_free_tree_log	log/log0ddl.cc	/^dberr_t Log_DDL::insert_free_tree_log(trx_t *trx, const dict_index_t *index,$/;"	f	class:Log_DDL
insert_into_frag_list	include/lob0impl.h	/^  void insert_into_frag_list(frag_node_t &frag) {$/;"	f	struct:lob::z_frag_page_t
insert_into_free_list	include/lob0impl.h	/^  void insert_into_free_list(frag_node_t &frag) {$/;"	f	struct:lob::z_frag_page_t
insert_or_get_position_in_array	include/ut0lock_free_hash.h	/^  key_val_t *insert_or_get_position_in_array(key_val_t *arr, size_t arr_size,$/;"	f	class:ut_lock_free_hash_t
insert_or_update	include/ut0lock_free_hash.h	/^  void insert_or_update(uint64_t key, int64_t val, bool is_delta,$/;"	f	class:ut_lock_free_hash_t
insert_remove_cache_log	log/log0ddl.cc	/^dberr_t Log_DDL::insert_remove_cache_log(uint64_t id, ulint thread_id,$/;"	f	class:Log_DDL
insert_rename_space_log	log/log0ddl.cc	/^dberr_t Log_DDL::insert_rename_space_log(uint64_t id, ulint thread_id,$/;"	f	class:Log_DDL
insert_rename_table_log	log/log0ddl.cc	/^dberr_t Log_DDL::insert_rename_table_log(uint64_t id, ulint thread_id,$/;"	f	class:Log_DDL
insert_statement	pars/pars0grm.y	/^insert_statement:$/;"	l
insert_statement_start	pars/pars0grm.y	/^insert_statement_start:$/;"	l
insert_undo	include/trx0trx.h	/^  trx_undo_t *insert_undo; \/*!< pointer to the insert undo log, or$/;"	m	struct:trx_undo_ptr_t
insert_undo_cached	include/trx0types.h	/^  UT_LIST_BASE_NODE_T(trx_undo_t) insert_undo_cached;$/;"	m	struct:trx_rseg_t
insert_undo_list	include/trx0types.h	/^  UT_LIST_BASE_NODE_T(trx_undo_t) insert_undo_list;$/;"	m	struct:trx_rseg_t
instance_no	include/buf0buf.h	/^  ulint instance_no;$/;"	m	struct:Cache_hint::buf_pool_t
instant_cols	include/dict0mem.h	/^  unsigned instant_cols : 1;$/;"	m	struct:dict_index_t
instant_default	include/dict0mem.h	/^  dict_col_default_t *instant_default;$/;"	m	struct:dict_col_t
instant_type_to_int	handler/handler0alter.cc	/^inline uint16_t instant_type_to_int(Instant_Type type) {$/;"	f
int64_ctr_1_t	include/srv0srv.h	/^  typedef ib_counter_t<int64_t, 1, single_indexer_t> int64_ctr_1_t;$/;"	t	struct:srv_stats_t
internal	include/trx0trx.h	/^  bool internal; \/*!< true if it is a system\/internal$/;"	m	struct:trx_t
interrupted	include/buf0flu.h	/^  void interrupted() { m_interrupted = true; }$/;"	f	class:FlushObserver
interrupted	include/fts0types.h	/^  ibool interrupted;    \/*!< TRUE if SYNC was interrupted *\/$/;"	m	struct:fts_sync_t
intersection	fsp/fsp0space.cc	/^bool Tablespace::intersection(const Tablespace *other_space) {$/;"	f	class:Tablespace
intersection	fts/fts0que.cc	/^  ib_rbt_t *intersection; \/*!< The doc ids that were found in$/;"	m	struct:fts_query_t	file:
interval_time	fts/fts0opt.cc	/^  int64_t interval_time; \/*!< Minimum time to wait before$/;"	m	struct:fts_slot_t	file:
intitialize_service_handles	handler/ha_innodb.cc	/^static bool intitialize_service_handles() {$/;"	f	namespace:innobase::component_services
into_list	include/row0sel.h	/^  sym_node_t *into_list;     \/*!< variables list or NULL *\/$/;"	m	struct:sel_node_t
into_list	include/row0sel.h	/^  sym_node_t *into_list;  \/*!< variables to set *\/$/;"	m	struct:fetch_node_t
intrinsic_table_write_row	handler/ha_innodb.cc	/^int ha_innobase::intrinsic_table_write_row(uchar *record) {$/;"	f	class:ha_innobase
invalid	include/dict0mem.h	/^  bool invalid;$/;"	m	class:last_ops_cur_t
invalid	include/fil0fil.h	/^  enum path_type { absolute, relative, file_name_only, invalid };$/;"	e	enum:Fil_path::path_type
invoke_placement_new	include/detail/ut0new.h	/^inline void invoke_placement_new(void *mem, size_t offset, Tuple &&args,$/;"	f	namespace:ut::detail
io	include/buf0lru.h	/^  ulint io;    \/**< Counter of buffer pool I\/O operations. *\/$/;"	m	struct:buf_LRU_stat_t
io	os/os0file.cc	/^  void io() {$/;"	f	class:SimulatedAIOHandler
io_complete	os/os0file.cc	/^  static dberr_t io_complete(const Slot *slot) {$/;"	f	class:AIOHandler
io_complete	os/os0file.cc	/^  void io_complete() {$/;"	f	class:SimulatedAIOHandler
io_cur	include/buf0buf.h	/^  ulint io_cur;    \/*!< buf_LRU_stat_cur.io, num of IO$/;"	m	struct:Cache_hint::buf_pool_info_t
io_fix	include/buf0buf.h	/^  copyable_atomic_t<buf_io_fix> io_fix;$/;"	m	class:Cache_hint::buf_page_t
io_handler_thread	srv/srv0start.cc	/^static void io_handler_thread(ulint segment) {$/;"	f	file:
io_handler_thread_key	srv/srv0start.cc	/^mysql_pfs_key_t io_handler_thread_key;$/;"	v
io_ibuf_thread_key	srv/srv0start.cc	/^mysql_pfs_key_t io_ibuf_thread_key;$/;"	v
io_log_thread_key	srv/srv0start.cc	/^mysql_pfs_key_t io_log_thread_key;$/;"	v
io_read_thread_key	srv/srv0start.cc	/^mysql_pfs_key_t io_read_thread_key;$/;"	v
io_responsibility	include/buf0buf.h	/^  io_responsibility_t io_responsibility;$/;"	m	class:Cache_hint::buf_page_t
io_responsibility_t	include/buf0buf.h	/^  class io_responsibility_t {$/;"	c	class:Cache_hint::buf_page_t
io_sum	include/buf0buf.h	/^  ulint io_sum;    \/*!< buf_LRU_stat_sum.io *\/$/;"	m	struct:Cache_hint::buf_pool_info_t
io_write_thread_key	srv/srv0start.cc	/^mysql_pfs_key_t io_write_thread_key;$/;"	v
irla_dirs	log/log0meb.cc	/^  const char *irla_dirs = value->val_str(value, buff, &len);$/;"	m	struct:meb::value	file:
isIndexXLocked	btr/btr0bulk.cc	/^bool PageBulk::isIndexXLocked() {$/;"	f	class:PageBulk
isSpaceAvailable	btr/btr0bulk.cc	/^bool PageBulk::isSpaceAvailable(ulint rec_size) const {$/;"	f	class:PageBulk
isTableCompressed	include/btr0bulk.h	/^  bool isTableCompressed() const { return (m_page_zip != nullptr); }$/;"	f	class:PageBulk
is_abort	include/arch0arch.h	/^  bool is_abort() const { return (m_state == ARCH_STATE_ABORT); }$/;"	f	class:Arch_Page_Sys
is_abort	include/clone0clone.h	/^  bool is_abort() { return (m_clone_handle_state == CLONE_STATE_ABORT); }$/;"	f	class:Clone_Handle
is_aborted	include/trx0trx.h	/^  bool is_aborted() const { return (is_aborted(m_trx)); }$/;"	f	class:TrxInInnoDB
is_aborted	include/trx0trx.h	/^  static bool is_aborted(const trx_t *trx) {$/;"	f	class:TrxInInnoDB
is_active	include/arch0arch.h	/^  bool is_active() const { return (m_is_active); }$/;"	f	class:Arch_Group
is_active	include/arch0arch.h	/^  bool is_active() const { return (m_state == ARCH_BLOCK_ACTIVE); }$/;"	f	class:Arch_Block
is_active	include/arch0arch.h	/^  bool is_active() const {$/;"	f	class:Arch_Page_Sys
is_active	include/arch0arch.h	/^  bool is_active() {$/;"	f	class:Arch_Log_Sys
is_active	include/arch0page.h	/^  bool is_active() const { return (m_state == ARCH_CLIENT_STATE_STARTED); }$/;"	f	class:Page_Arch_Client_Ctx
is_active	include/clone0clone.h	/^  bool is_active() { return (m_clone_handle_state == CLONE_STATE_ACTIVE); }$/;"	f	class:Clone_Handle
is_active	include/clone0repl.h	/^  bool is_active() const { return (m_active.load()); }$/;"	f	class:Clone_persist_gtid
is_active	include/que0que.h	/^  ibool is_active;       \/*!< TRUE if the thread has been set$/;"	m	struct:que_thr_t
is_active	include/trx0purge.h	/^  bool is_active() {$/;"	f	struct:undo::Tablespace
is_active	include/trx0types.h	/^  bool is_active() { return (m_state == ACTIVE); }$/;"	f	class:Rsegs
is_active	trx/trx0purge.cc	/^bool is_active(space_id_t space_id, bool get_latch) {$/;"	f	namespace:undo
is_active_no_latch	include/trx0purge.h	/^  bool is_active_no_latch() {$/;"	f	struct:undo::Tablespace
is_active_truncate_log_present	trx/trx0purge.cc	/^bool is_active_truncate_log_present(space_id_t space_num) {$/;"	f	namespace:undo
is_after_last_in_tree	include/btr0pcur.h	/^inline bool btr_pcur_t::is_after_last_in_tree(mtr_t *mtr) const {$/;"	f	class:btr_pcur_t
is_after_last_on_page	include/btr0pcur.h	/^inline bool btr_pcur_t::is_after_last_on_page() const {$/;"	f	class:btr_pcur_t
is_aggregate	include/row0sel.h	/^  ibool is_aggregate;        \/*!< TRUE if the select list consists of$/;"	m	struct:sel_node_t
is_allowed_to_be_on_cycle	lock/lock0lock.cc	/^bool Deadlock_notifier::is_allowed_to_be_on_cycle(const lock_t *lock) {$/;"	f	class:Deadlock_notifier
is_ancestor	fil/fil0fil.cc	/^bool Fil_path::is_ancestor(const Fil_path &other) const {$/;"	f	class:Fil_path
is_ancestor	fil/fil0fil.cc	/^bool Fil_path::is_ancestor(const std::string &other) const {$/;"	f	class:Fil_path
is_ascending	include/dict0mem.h	/^  unsigned is_ascending : 1; \/*!< 0=DESC, 1=ASC *\/$/;"	m	struct:dict_field_t
is_ascending	include/row0merge.h	/^  bool is_ascending;   \/*!< true=ASC, false=DESC *\/$/;"	m	struct:index_field_t
is_async	include/mtr0mtr.h	/^  bool is_async() const { return (!m_sync); }$/;"	f	struct:mtr_t
is_async_rollback	include/trx0trx.h	/^  static bool is_async_rollback(const trx_t *trx) {$/;"	f	class:TrxInInnoDB
is_before	include/lob0impl.h	/^  bool is_before(const frag_node_t &frag) const {$/;"	f	struct:lob::frag_node_t
is_before	include/lob0impl.h	/^  bool is_before(const plist_node_t &node) const {$/;"	f	class:lob::plist_node_t
is_before_first_in_tree	include/btr0pcur.h	/^inline bool btr_pcur_t::is_before_first_in_tree(mtr_t *mtr) const {$/;"	f	class:btr_pcur_t
is_before_first_on_page	include/btr0pcur.h	/^inline bool btr_pcur_t::is_before_first_on_page() const {$/;"	f	class:btr_pcur_t
is_being_modified	include/lob0lob.h	/^  bool is_being_modified() const { return (is_being_modified(m_ref)); }$/;"	f	struct:lob::ref_t
is_being_modified	include/lob0lob.h	/^  bool static is_being_modified(const byte *field_ref) {$/;"	f	struct:lob::ref_t
is_big	include/lob0lob.h	/^  bool is_big(const page_size_t &page_size) const {$/;"	f	struct:lob::ref_t
is_big	include/lob0lob.h	/^  static bool is_big(const page_size_t &page_size, const ulint lob_length) {$/;"	f	struct:lob::ref_t
is_block_dirtied	mtr/mtr0mtr.cc	/^bool mtr_t::is_block_dirtied(const buf_block_t *block) {$/;"	f	class:mtr_t
is_block_lock	include/sync0rw.h	/^  bool is_block_lock;$/;"	m	struct:rw_lock_t
is_border_frag	include/lob0impl.h	/^  bool is_border_frag(const frag_node_t &node) const {$/;"	f	struct:lob::z_frag_page_t
is_bulk	include/lob0lob.h	/^  bool is_bulk() const { return (m_op == OPCODE_INSERT_BULK); }$/;"	f	class:lob::BtrContext
is_checksum_strict	include/buf0types.h	/^inline bool is_checksum_strict(srv_checksum_algorithm_t algo) {$/;"	f
is_checksum_strict	include/buf0types.h	/^inline bool is_checksum_strict(ulint algo) {$/;"	f
is_checksum_valid_crc32	buf/checksum.cc	/^bool BlockReporter::is_checksum_valid_crc32(ulint checksum_field1,$/;"	f	class:BlockReporter
is_checksum_valid_innodb	buf/checksum.cc	/^bool BlockReporter::is_checksum_valid_innodb($/;"	f	class:BlockReporter
is_checksum_valid_none	buf/checksum.cc	/^bool BlockReporter::is_checksum_valid_none($/;"	f	class:BlockReporter
is_circular	fil/fil0fil.cc	/^bool Fil_path::is_circular() const {$/;"	f	class:Fil_path
is_cloned_db	include/log0recv.h	/^  bool is_cloned_db;$/;"	m	struct:recv_sys_t
is_closed	include/arch0arch.h	/^  bool is_closed() const { return (m_file.m_file == OS_FILE_CLOSED); }$/;"	f	class:Arch_File_Ctx
is_closed	include/read0types.h	/^  bool is_closed() const { return (m_closed); }$/;"	f	class:ReadView
is_clustered	include/btr0pcur.h	/^  bool is_clustered() const { return (m_btr_cur.index->is_clustered()); }$/;"	f	struct:btr_pcur_t
is_clustered	include/dict0mem.h	/^  bool is_clustered() const {$/;"	f	struct:dict_index_t
is_committed	include/dict0mem.h	/^  bool is_committed() const {$/;"	f	struct:dict_index_t
is_committing	include/mtr0mtr.h	/^  bool is_committing() const {$/;"	f	struct:mtr_t
is_common_state	handler/handler0alter.cc	/^inline static bool is_common_state(partition_state s) {$/;"	f	file:
is_complete	include/buf0flu.h	/^  bool is_complete(size_t instance_no) {$/;"	f	class:FlushObserver
is_completed	include/ut0stage.h	/^  bool is_completed() {$/;"	f	class:ut_stage_alter_ts
is_compressed	include/dict0mem.h	/^  bool is_compressed() const { return (DICT_TF_GET_ZIP_SSIZE(flags) != 0); }$/;"	f	struct:dict_table_t
is_compressed	include/dict0mem.h	/^inline bool dict_index_t::is_compressed() const {$/;"	f	class:dict_index_t
is_compressed	include/lob0lob.h	/^  bool is_compressed() const { return (m_page_size.is_compressed()); }$/;"	f	struct:lob::DeleteContext
is_compressed	include/page0size.h	/^  inline bool is_compressed() const { return (m_is_compressed); }$/;"	f	class:page_size_t
is_compressed_encrypted_page	os/file.cc	/^bool Compression::is_compressed_encrypted_page(const byte *page) {$/;"	f	class:Compression
is_compressed_page	os/file.cc	/^bool Compression::is_compressed_page(const byte *page) {$/;"	f	class:Compression
is_compressed_page	os/os0file.cc	/^  static bool is_compressed_page(const Slot *slot) {$/;"	f	class:AIOHandler	file:
is_conflict	handler/handler0alter.cc	/^bool alter_part_factory::is_conflict(const partition_element *new_part,$/;"	f	class:alter_part_factory
is_copy	include/clone0snapshot.h	/^  bool is_copy() const { return (m_snapshot_handle_type == CLONE_HDL_COPY); }$/;"	f	class:Clone_Snapshot
is_copy_clone	include/clone0clone.h	/^  bool is_copy_clone() const { return (m_clone_handle_type == CLONE_HDL_COPY); }$/;"	f	class:Clone_Handle
is_correct_io_fix_value	include/buf0buf.h	/^  static bool is_correct_io_fix_value(buf_io_fix io_fix) {$/;"	f	class:Cache_hint::buf_page_t
is_corrupted	buf/checksum.cc	/^bool BlockReporter::is_corrupted() const {$/;"	f	class:BlockReporter
is_corrupted	include/dict0mem.h	/^  bool is_corrupted() const {$/;"	f	struct:dict_index_t
is_corrupted	include/dict0mem.h	/^  bool is_corrupted() const {$/;"	f	struct:dict_table_t
is_dd_table	include/dict0mem.h	/^  bool is_dd_table;$/;"	m	struct:dict_table_t
is_dd_table_id	include/dict0dict.h	/^  static bool is_dd_table_id(table_id_t id) {$/;"	f	struct:dict_sys_t
is_dd_trx	include/trx0trx.h	/^  bool is_dd_trx; \/*!< True if the transaction is used for$/;"	m	struct:trx_t
is_ddl_temp_table	clone/clone0copy.cc	/^static bool is_ddl_temp_table(fil_node_t *node) {$/;"	f	file:
is_delete	include/row0upd.h	/^  ibool is_delete;     \/* TRUE if delete, FALSE if update *\/$/;"	m	struct:upd_node_t
is_delete_marked	include/lob0lob.h	/^  bool is_delete_marked() const {$/;"	f	struct:lob::DeleteContext
is_deleted	fil/fil0fil.cc	/^  bool is_deleted(space_id_t space_id) {$/;"	f	class:Fil_shard
is_deleted	fil/fil0fil.cc	/^bool fil_space_t::is_deleted() const {$/;"	f	class:fil_space_t
is_directory	os/os0file.cc	/^bool Dir_Walker::is_directory(const Path &path) {$/;"	f	class:Dir_Walker
is_directory_and_exists	fil/fil0fil.cc	/^bool Fil_path::is_directory_and_exists() const {$/;"	f	class:Fil_path
is_disabled	include/mtr0mtr.h	/^    bool is_disabled() const { return (m_state.load() == DISABLED); }$/;"	f	class:mtr_t::Logging
is_drop	clone/clone0api.cc	/^  bool is_drop() const { return (m_drop); }$/;"	f	class:__anon2::Fixup_data	file:
is_drop_state	handler/handler0alter.cc	/^inline static bool is_drop_state(partition_state s) {$/;"	f	file:
is_dup	include/gis0type.h	/^  bool *is_dup;$/;"	m	struct:rtr_info
is_durable	include/arch0arch.h	/^  bool is_durable() const { return (m_dur_ref_count > 0); }$/;"	f	class:Arch_Group
is_durable_client_active	include/arch0arch.h	/^  bool is_durable_client_active() const {$/;"	f	class:Arch_Group
is_early_redo_undo_encryption_done	srv/srv0start.cc	/^bool is_early_redo_undo_encryption_done() {$/;"	f
is_empty	include/lob0first.h	/^  bool is_empty() const {$/;"	f	struct:lob::first_page_t
is_empty	include/lob0undo.h	/^  bool is_empty() const { return (m_versions->empty()); }$/;"	f	struct:lob::undo_vers_t
is_empty	include/trx0purge.h	/^  bool is_empty() {$/;"	f	struct:undo::Tablespace
is_empty	include/trx0trx.h	/^  bool is_empty() { return (insert_undo == nullptr && update_undo == nullptr); }$/;"	f	struct:trx_undo_ptr_t
is_empty	include/trx0types.h	/^  bool is_empty() { return (m_state == EMPTY); }$/;"	f	class:Rsegs
is_empty	include/zlob0first.h	/^  bool is_empty() const {$/;"	f	struct:lob::z_first_page_t
is_enabled	include/mtr0mtr.h	/^    bool is_enabled() const { return (m_state.load() == ENABLED); }$/;"	f	class:mtr_t::Logging
is_encrypted_page	os/os0file.cc	/^  static bool is_encrypted_page(const Slot *slot) {$/;"	f	class:AIOHandler	file:
is_equal	include/fil0fil.h	/^  bool is_equal(const fil_addr_t &rhs) const {$/;"	f	struct:fil_addr_t
is_equal	include/lob0impl.h	/^  bool is_equal(const frag_node_t &that) const {$/;"	f	struct:lob::frag_node_t
is_equal	include/lob0impl.h	/^  bool is_equal(const plist_node_t &node) const {$/;"	f	struct:lob::frag_node_t
is_equal	include/lob0impl.h	/^  bool is_equal(const plist_node_t &that) const {$/;"	f	class:lob::plist_node_t
is_equal	include/lob0lob.h	/^  bool is_equal(const byte *ptr) const { return (m_ref == ptr); }$/;"	f	struct:lob::ref_t
is_equal	include/trx0purge.h	/^  bool is_equal(space_id_t space_id) const {$/;"	f	class:undo::Truncate
is_estimation_phase	include/clone0monitor.h	/^  bool is_estimation_phase() const { return (m_cur_phase == ESTIMATE_WORK); }$/;"	f	class:Clone_Monitor
is_explicit	include/trx0purge.h	/^  bool is_explicit() { return (!m_implicit); }$/;"	f	struct:undo::Tablespace
is_fast	include/ut0counter.h	/^  static bool is_fast() { return (Indexer<Type, N>::fast); }$/;"	f	class:ib_counter_t
is_file_and_exists	fil/fil0fil.cc	/^bool Fil_path::is_file_and_exists() const {$/;"	f	class:Fil_path
is_file_metadata_transferred	include/clone0clone.h	/^  bool is_file_metadata_transferred() const {$/;"	f	class:Clone_Task_Manager
is_finished	buf/buf0flu.cc	/^  os_event_t is_finished;  \/*!< event to signal that all$/;"	m	struct:page_cleaner_t	file:
is_flushable	include/arch0arch.h	/^  bool is_flushable() const { return (m_state != ARCH_BLOCK_READY_TO_FLUSH); }$/;"	f	class:Arch_Block
is_forced_rollback	include/trx0trx.h	/^  static bool is_forced_rollback(const trx_t *trx) {$/;"	f	class:TrxInInnoDB
is_freed	row/row0log.cc	/^  bool is_freed(ulonglong offset_arg) const {$/;"	f	class:row_log_table_blob_t
is_fts_aux	include/dict0mem.h	/^  bool is_fts_aux() const {$/;"	f	struct:dict_table_t
is_gap	include/lock0priv.h	/^  bool is_gap() const { return (type_mode & LOCK_GAP); }$/;"	f	struct:lock_t
is_gap_small	arch/arch0page.cc	/^bool Arch_Page_Sys::is_gap_small() {$/;"	f	class:Arch_Page_Sys
is_hidden	fil/fil0fil.cc	/^bool Fil_path::is_hidden(WIN32_FIND_DATA &dirent) {$/;"	f	class:Fil_path
is_hidden	fil/fil0fil.cc	/^bool Fil_path::is_hidden(std::string path) {$/;"	f	class:Fil_path
is_hp	buf/buf0buf.cc	/^bool HazardPointer::is_hp(const buf_page_t *bpage) {$/;"	f	class:HazardPointer
is_ibuf	include/dict0types.h	/^  bool is_ibuf() const {$/;"	f	class:index_id_t
is_idle	include/clone0clone.h	/^  bool is_idle() { return (m_clone_handle_state == CLONE_STATE_IDLE); }$/;"	f	class:Clone_Handle
is_ignorable_error	handler/ha_innopart.cc	/^bool ha_innopart::is_ignorable_error(int error) {$/;"	f	class:ha_innopart
is_implicit	include/trx0purge.h	/^  bool is_implicit() { return (m_implicit); }$/;"	f	struct:undo::Tablespace
is_in_recovery	include/log0ddl.h	/^  static bool is_in_recovery() { return (s_in_recovery); }$/;"	f	class:Log_Type::Log_DDL
is_inactive_explicit	include/trx0purge.h	/^  bool is_inactive_explicit() {$/;"	f	struct:undo::Tablespace
is_inactive_explicit	include/trx0types.h	/^  bool is_inactive_explicit() { return (m_state == INACTIVE_EXPLICIT); }$/;"	f	class:Rsegs
is_inactive_implicit	include/trx0purge.h	/^  bool is_inactive_implicit() {$/;"	f	struct:undo::Tablespace
is_inactive_implicit	include/trx0types.h	/^  bool is_inactive_implicit() { return (m_state == INACTIVE_IMPLICIT); }$/;"	f	class:Rsegs
is_index_sdi	include/lob0ins.h	/^  bool is_index_sdi() { return (dict_index_is_sdi(m_ctx->index())); }$/;"	f	struct:lob::BaseInserter
is_inherited	include/lob0lob.h	/^  bool is_inherited() const {$/;"	f	struct:lob::ref_t
is_init	include/arch0arch.h	/^  bool is_init() const { return (m_state == ARCH_BLOCK_INIT); }$/;"	f	class:Arch_Block
is_init	include/arch0arch.h	/^  bool is_init() const { return (m_state == ARCH_STATE_INIT); }$/;"	f	class:Arch_Page_Sys
is_init	include/arch0arch.h	/^  bool is_init() { return (m_state == ARCH_STATE_INIT); }$/;"	f	class:Arch_Log_Sys
is_init	include/clone0clone.h	/^  bool is_init() { return (m_clone_handle_state == CLONE_STATE_INIT); }$/;"	f	class:Clone_Handle
is_init	include/trx0types.h	/^  bool is_init() { return (m_state == INIT); }$/;"	f	class:Rsegs
is_insert_intention	include/lock0priv.h	/^  bool is_insert_intention() const {$/;"	f	struct:lock_t
is_insert_only	include/trx0trx.h	/^  bool is_insert_only() {$/;"	f	struct:trx_undo_ptr_t
is_instant	handler/handler0alter.cc	/^static inline bool is_instant(const Alter_inplace_info *ha_alter_info) {$/;"	f	file:
is_interrupted	include/clone0clone.h	/^  bool is_interrupted() {$/;"	f	class:Clone_Handle
is_intrinsic	include/dict0mem.h	/^  bool is_intrinsic() const {$/;"	f	struct:dict_table_t
is_intrinsic_temp_table	handler/ha_innodb.h	/^  inline bool is_intrinsic_temp_table() const {$/;"	f	class:create_table_info_t
is_io_fix_read	buf/buf0buf.cc	/^bool buf_page_t::is_io_fix_read() const {$/;"	f	class:buf_page_t
is_io_fix_read_as_opposed_to_write	buf/buf0buf.cc	/^bool buf_page_t::is_io_fix_read_as_opposed_to_write() const {$/;"	f	class:buf_page_t
is_io_fix_write	buf/buf0buf.cc	/^bool buf_page_t::is_io_fix_write() const {$/;"	f	class:buf_page_t
is_last_frag	include/lob0impl.h	/^  bool is_last_frag(const frag_node_t &node) const {$/;"	f	struct:lob::z_frag_page_t
is_linux_native_aio_supported	os/os0file.cc	/^bool AIO::is_linux_native_aio_supported() {$/;"	f	class:AIO
is_lob_partially_updatable	lob/lob0lob.cc	/^bool ref_t::is_lob_partially_updatable(const dict_index_t *index) const {$/;"	f	class:lob::ref_t
is_lob_undo	include/trx0rec.h	/^  bool is_lob_undo() const {$/;"	f	struct:type_cmpl_t
is_lob_updated	include/trx0rec.h	/^  bool is_lob_updated() {$/;"	f	struct:type_cmpl_t
is_marked	include/trx0purge.h	/^  bool is_marked() const { return (m_space_id_marked != SPACE_UNKNOWN); }$/;"	f	class:undo::Truncate
is_marked_space_empty	include/trx0purge.h	/^  bool is_marked_space_empty() const { return (m_marked_space_is_empty); }$/;"	f	class:undo::Truncate
is_meb_recovery	include/log0recv.h	/^  bool is_meb_recovery;$/;"	m	struct:recv_sys_t
is_modified	include/row0upd.h	/^  bool is_modified(const ulint field_no) const {$/;"	f	struct:upd_t
is_multi_val	include/row0mysql.h	/^  ulint is_multi_val;           \/*!< if a column is a Multi-Value Array virtual$/;"	m	struct:mysql_row_templ_t
is_multi_value	include/dict0mem.h	/^  bool is_multi_value() const { return ((prtype & DATA_MULTI_VALUE) != 0); }$/;"	f	struct:dict_col_t
is_multi_value	include/dict0mem.h	/^  bool is_multi_value() const {$/;"	f	struct:dict_index_t
is_multi_value	include/row0merge.h	/^  bool is_multi_value; \/*!< whether it has multi-value *\/$/;"	m	struct:index_field_t
is_multi_value_clust_and_sec_equal	data/data0data.cc	/^bool is_multi_value_clust_and_sec_equal(const byte *clust_field,$/;"	f
is_multi_value_log	include/data0data.h	/^  static bool is_multi_value_log(const byte *ptr) {$/;"	f	class:Multi_value_logger
is_network_error	include/clone0clone.h	/^  bool is_network_error(int err) {$/;"	f	class:Clone_Task_Manager
is_new	include/trx0purge.h	/^  bool is_new() { return (m_new); }$/;"	f	struct:undo::Tablespace
is_next_key_lock	include/lock0priv.h	/^  bool is_next_key_lock() const {$/;"	f	struct:lock_t
is_ngram	include/dict0mem.h	/^  bool is_ngram;$/;"	m	struct:dict_index_t
is_ngram	include/fts0types.h	/^  bool is_ngram; \/*!< Whether it is a ngram parser *\/$/;"	m	struct:fts_doc_t
is_ngram	include/row0merge.h	/^  bool is_ngram;             \/*!< true if it's ngram parser *\/$/;"	m	struct:index_def_t
is_none	handler/ha_innodb.cc	/^bool Compression::is_none(const char *algorithm) {$/;"	f	class:Compression
is_null	include/fil0fil.h	/^  bool is_null() const { return (page == FIL_NULL && boffset == 0); }$/;"	f	struct:fil_addr_t
is_null	include/lob0impl.h	/^  bool is_null() const { return (m_node == nullptr); }$/;"	f	class:lob::plist_node_t
is_null	include/lob0impl.h	/^  bool is_null() const { return (m_node == nullptr); }$/;"	f	struct:lob::z_frag_entry_t
is_null	include/lob0impl.h	/^  bool is_null() const { return (m_node.is_null()); }$/;"	f	struct:lob::frag_node_t
is_null	include/lob0index.h	/^  bool is_null() const {$/;"	f	struct:lob::index_entry_t
is_null	include/lob0index.h	/^  bool is_null() { return (m_self.is_equal(fil_addr_null)); }$/;"	f	struct:lob::index_entry_mem_t
is_null	include/lob0lob.h	/^  bool is_null() const { return (memcmp(field_ref_zero, m_ref, SIZE) == 0); }$/;"	f	struct:lob::ref_t
is_null	include/lob0lob.h	/^  static bool is_null(const byte *ref) {$/;"	f	struct:lob::ref_t
is_null	include/zlob0index.h	/^  bool is_null() const { return (m_node == nullptr); }$/;"	f	struct:lob::z_index_entry_t
is_null	include/zlob0index.h	/^  bool is_null() { return (m_self.is_equal(fil_addr_null)); }$/;"	f	struct:lob::z_index_entry_mem_t
is_null_relaxed	include/lob0lob.h	/^  bool is_null_relaxed() const {$/;"	f	struct:lob::ref_t
is_null_relaxed	include/lob0lob.h	/^  static bool is_null_relaxed(const byte *ref) {$/;"	f	struct:lob::ref_t
is_nullable	include/dict0mem.h	/^  bool is_nullable() const { return ((prtype & DATA_NOT_NULL) == 0); }$/;"	f	struct:dict_col_t
is_object_empty	include/ut0new.h	/^  bool is_object_empty() const { return m_object == nullptr; }$/;"	f	class:aligned_memory
is_ok	include/lob0ins.h	/^  bool is_ok() const { return (m_err == DB_SUCCESS); }$/;"	f	class:lob::Inserter
is_on_user_rec	include/btr0pcur.h	/^inline bool btr_pcur_t::is_on_user_rec() const {$/;"	f	class:btr_pcur_t
is_on_watch	buf/buf0buf.cc	/^buf_block_t *Buf_fetch<T>::is_on_watch() {$/;"	f	class:Buf_fetch
is_oom_fatal	include/ut0new.h	/^  bool is_oom_fatal() const { return (m_oom_fatal); }$/;"	f	class:ut_allocator
is_open	include/fil0fil.h	/^  bool is_open;$/;"	m	struct:fil_node_t
is_open	include/fsp0file.h	/^  bool is_open() const { return (m_handle.m_file != OS_FILE_CLOSED); }$/;"	f	class:Datafile
is_optimistic	buf/buf0buf.cc	/^bool Buf_fetch<T>::is_optimistic() const {$/;"	f	class:Buf_fetch
is_owned	include/sync0types.h	/^  bool is_owned() {$/;"	f	struct:OSMutex
is_owner	include/lob0lob.h	/^  bool is_owner() const {$/;"	f	struct:lob::ref_t
is_partially_updated	row/row0upd.cc	/^bool upd_t::is_partially_updated(ulint field_no) const {$/;"	f	class:upd_t
is_partition	dict/dict0dd.cc	/^bool is_partition(const std::string &dict_name) {$/;"	f	namespace:dict_name
is_performance_schema	clone/clone0api.cc	/^  bool is_performance_schema(const char *schema_name) const {$/;"	f	class:__anon2::Fixup_data	file:
is_positioned	include/btr0pcur.h	/^  bool is_positioned() const {$/;"	f	struct:btr_pcur_t
is_predicate	include/lock0priv.h	/^  bool is_predicate() const {$/;"	f	struct:lock_t
is_predicate_lock	include/lock0priv.h	/^  static bool is_predicate_lock(ulint mode) {$/;"	f	class:RecLock
is_punch_hole_supported	include/os0file.h	/^  static bool is_punch_hole_supported() {$/;"	f	class:IORequest
is_purged	include/lob0lob.h	/^  bool is_purged() const {$/;"	f	struct:lob::ref_mem_t
is_queue_empty	row/row0pread.cc	/^bool Parallel_reader::is_queue_empty() const {$/;"	f	class:Parallel_reader
is_raw_disk	include/fil0fil.h	/^  bool is_raw_disk;$/;"	m	struct:fil_node_t
is_raw_type	include/fsp0file.h	/^  bool is_raw_type() {$/;"	f	class:Datafile
is_read_uncommitted	include/trx0trx.h	/^  bool is_read_uncommitted() const {$/;"	f	struct:trx_t
is_reading_range	include/row0mysql.h	/^  bool is_reading_range() const { return m_is_reading_range; }$/;"	f	struct:row_prebuilt_t
is_record_buffer_wanted	handler/ha_innodb.cc	/^bool ha_innobase::is_record_buffer_wanted(ha_rows *const max_rows) const {$/;"	f	class:ha_innobase
is_record_lock	include/lock0priv.h	/^  bool is_record_lock() const { return (type() == LOCK_REC); }$/;"	f	struct:lock_t
is_record_not_gap	include/lock0priv.h	/^  bool is_record_not_gap() const { return (type_mode & LOCK_REC_NOT_GAP); }$/;"	f	struct:lock_t
is_recovered	include/trx0trx.h	/^  bool is_recovered; \/*!< 0=normal transaction,$/;"	m	struct:trx_t
is_ref_valid	include/lob0lob.h	/^  bool is_ref_valid() const {$/;"	f	struct:lob::DeleteContext
is_referenced	include/arch0arch.h	/^  bool is_referenced() const {$/;"	f	class:Arch_Group
is_registered	include/trx0trx.h	/^  bool is_registered; \/* This flag is set to true after the$/;"	m	struct:trx_t
is_requested	buf/buf0flu.cc	/^  os_event_t is_requested; \/*!< event to activate worker$/;"	m	struct:page_cleaner_t	file:
is_reserved	include/dict0dict.h	/^  static bool is_reserved(space_id_t space) {$/;"	f	struct:dict_sys_t
is_reserved	include/trx0purge.h	/^inline bool is_reserved(space_id_t space_id) {$/;"	f	namespace:undo
is_restart_metadata	include/clone0clone.h	/^  bool is_restart_metadata(Clone_Task *task) {$/;"	f	class:Clone_Task_Manager
is_restarted	include/clone0clone.h	/^  bool is_restarted() { return (m_restart_count > 0); }$/;"	f	class:Clone_Task_Manager
is_rollback_disabled	include/trx0trx.h	/^  bool is_rollback_disabled() const {$/;"	f	class:TrxInInnoDB
is_running	buf/buf0flu.cc	/^  bool is_running;            \/*!< false if attempt$/;"	m	struct:page_cleaner_t	file:
is_same	include/lob0index.h	/^  bool is_same(const index_entry_t &that) { return (m_node == that.m_node); }$/;"	f	struct:lob::index_entry_t
is_same_as	fil/fil0fil.cc	/^bool Fil_path::is_same_as(const Fil_path &other) const {$/;"	f	class:Fil_path
is_same_as	fil/fil0fil.cc	/^bool Fil_path::is_same_as(const std::string &other) const {$/;"	f	class:Fil_path
is_sdi	include/lob0lob.h	/^  bool is_sdi() const { return (m_is_sdi); }$/;"	f	struct:lob::ReadContext
is_separator	include/fil0fil.h	/^  static bool is_separator(char c) { return (c == '\\\\' || c == '\/'); }$/;"	f	class:Fil_path
is_shared_tablespace	handler/ha_innodb.h	/^bool is_shared_tablespace(const char *tablespace_name) {$/;"	f
is_shutdown	os/os0file.cc	/^  bool is_shutdown() const {$/;"	f	class:LinuxAIOHandler	file:
is_space_initialized	include/clone0clone.h	/^  bool is_space_initialized() const { return m_space_initialized.load(); }$/;"	f	class:Clone_Sys
is_stale	include/buf0buf.h	/^  inline bool is_stale() const {$/;"	f	class:Cache_hint::buf_page_t
is_started	include/trx0trx.h	/^  static bool is_started(const trx_t *trx) {$/;"	f	class:TrxInInnoDB
is_supremum	include/lock0priv.h	/^  bool is_supremum() const { return (m_heap_no == PAGE_HEAP_NO_SUPREMUM); }$/;"	f	struct:RecID
is_system_schema	clone/clone0api.cc	/^  bool is_system_schema(const char *schema_name) const {$/;"	f	class:__anon2::Fixup_data	file:
is_system_table	include/dict0mem.h	/^  bool is_system_table;$/;"	m	struct:dict_table_t
is_table_id_exists	row/row0purge.cc	/^bool purge_node_t::is_table_id_exists(table_id_t table_id) const {$/;"	f	class:purge_node_t
is_temp_table	handler/ha_innodb.h	/^  inline bool is_temp_table() const {$/;"	f	class:create_table_info_t
is_temporary	include/dict0mem.h	/^  bool is_temporary() const {$/;"	f	struct:dict_table_t
is_thread_active	include/clone0repl.h	/^  bool is_thread_active() const { return (m_thread_active.load()); }$/;"	f	class:Clone_persist_gtid
is_transition_possible	include/ut0stateful_latching_rules.h	/^  bool is_transition_possible(const latches_set_t &forbiden_latches,$/;"	f	class:ut::Stateful_latching_rules
is_truncated	trx/trx0i_s.cc	/^  bool is_truncated;$/;"	m	struct:trx_i_s_cache_t	file:
is_tuple_instant_format	dict/dict0mem.cc	/^bool dict_index_t::is_tuple_instant_format($/;"	f	class:dict_index_t
is_under_construction	trx/trx0purge.cc	/^bool is_under_construction(space_id_t space_id) {$/;"	f	namespace:undo
is_undo_tablespace_name	fil/fil0fil.cc	/^bool Fil_path::is_undo_tablespace_name(const std::string &name) {$/;"	f	class:Fil_path
is_unsigned	include/row0mysql.h	/^  ulint is_unsigned;            \/*!< if a column type is an integer$/;"	m	struct:mysql_row_templ_t
is_update	include/trx0trx.h	/^  bool is_update() { return update_undo != nullptr; }$/;"	f	struct:trx_undo_ptr_t
is_usable	dict/dict0mem.cc	/^bool dict_index_t::is_usable(const trx_t *trx) const {$/;"	f	class:dict_index_t
is_v_col	include/row0merge.h	/^  bool is_v_col;       \/*!< whether this is a virtual column *\/$/;"	m	struct:index_field_t
is_valid	fil/fil0fil.cc	/^bool Fil_path::is_valid() const {$/;"	f	class:Fil_path
is_valid	include/fsp0file.h	/^  bool is_valid() const { return (m_is_valid); }$/;"	f	class:Datafile
is_valid	include/fsp0fsp.h	/^inline bool xdes_mem_t::is_valid() const {$/;"	f	class:xdes_mem_t
is_valid_blob	include/lob0lob.h	/^  bool is_valid_blob() const { return (m_blobref.length() > 0); }$/;"	f	struct:lob::ReadContext
is_valid_location	fil/fil0fil.cc	/^bool Fil_path::is_valid_location(const char *space_name, space_id_t space_id,$/;"	f	class:Fil_path
is_valid_location_within_db	fil/fil0fil.cc	/^bool Fil_path::is_valid_location_within_db(const char *space_name,$/;"	f	class:Fil_path
is_valid_page_version	os/file.cc	/^bool Compression::is_valid_page_version(uint8_t version) {$/;"	f	class:Compression
is_view_active	include/read0read.h	/^  static bool is_view_active(ReadView *view) {$/;"	f	class:MVCC
is_virtual	include/data0data.h	/^  bool is_virtual() const { return (type.is_virtual()); }$/;"	f	struct:dfield_t
is_virtual	include/data0type.h	/^  bool is_virtual() const { return ((prtype & DATA_VIRTUAL) == DATA_VIRTUAL); }$/;"	f	struct:dtype_t
is_virtual	include/dict0mem.h	/^  bool is_virtual() const { return (prtype & DATA_VIRTUAL); }$/;"	f	struct:dict_col_t
is_virtual	include/row0mysql.h	/^  ulint is_virtual;             \/*!< if a column is a virtual column *\/$/;"	m	struct:mysql_row_templ_t
is_virtual	include/row0upd.h	/^  bool is_virtual() const { return (new_val.is_virtual()); }$/;"	f	struct:upd_field_t
is_visible	include/dict0mem.h	/^  bool is_visible;$/;"	m	struct:dict_col_t
is_waiting	include/lock0priv.h	/^  bool is_waiting() const { return (type_mode & LOCK_WAIT); }$/;"	f	struct:lock_t
is_zeroes	arch/arch0page.cc	/^bool Arch_Block::is_zeroes(const byte *block) {$/;"	f	class:Arch_Block
isolation_level	include/trx0trx.h	/^  ulint isolation_level; \/*!< TRX_ISO_REPEATABLE_READ, ... *\/$/;"	m	struct:trx_t
isolation_level_t	include/trx0trx.h	/^  enum isolation_level_t {$/;"	g	struct:trx_t
items	ut/ut0wqueue.cc	/^  ib_list_t *items; \/*!< work item list *\/$/;"	m	struct:ib_wqueue_t	file:
iter	include/trx0purge.h	/^  purge_iter_t iter;$/;"	m	struct:trx_purge_t
iter_init	row/row0merge.cc	/^void index_tuple_info_t::iter_init() { m_iter = m_dtuple_vec->begin(); }$/;"	f	class:index_tuple_info_t
iterate	fil/fil0fil.cc	/^dberr_t Fil_iterator::iterate(bool include_log, Function &&f) {$/;"	f	class:Fil_iterator
iterate	fil/fil0fil.cc	/^dberr_t Fil_shard::iterate(bool include_log, Fil_iterator::Function &f) {$/;"	f	class:Fil_shard
iterate	fil/fil0fil.cc	/^dberr_t Fil_system::iterate(bool include_log, Fil_iterator::Function &f) {$/;"	f	class:Fil_system
iterate_files	clone/clone0snapshot.cc	/^int Clone_Snapshot::iterate_files(File_Cbk_Func &&func) {$/;"	f	class:Clone_Snapshot
iterate_tbsp	include/srv0tmp.h	/^  void iterate_tbsp(F &&f) {$/;"	f	class:ibt::Tablespace_pool
iv	include/log0recv.h	/^    byte *iv;$/;"	m	struct:recv_sys_t::Encryption_Key
join	include/row0pread.h	/^  void join() {$/;"	f
join	os/os0thread.cc	/^void IB_thread::join() { wait(State::STOPPED); }$/;"	f	class:IB_thread
keep_other_fields_on_keyread	include/row0mysql.h	/^  ibool keep_other_fields_on_keyread; \/*!< when using fetch$/;"	m	struct:row_prebuilt_t
key	include/gis0geo.h	/^  uchar *key;     \/* key. *\/$/;"	m	struct:rtr_split_node_t
key	include/log0test.h	/^    Key key;$/;"	m	struct:Log_test::Page
key_and_rowid_cmp	handler/ha_innopart.cc	/^int ha_innopart::key_and_rowid_cmp(KEY **key_info, uchar *a, uchar *b) {$/;"	f	class:ha_innopart
key_has_null_cols	include/dict0mem.h	/^  bool key_has_null_cols;$/;"	m	class:rec_cache_t
key_number	include/row0merge.h	/^  ulint key_number;          \/*!< MySQL key number,$/;"	m	struct:index_def_t
key_val_t	include/ut0lock_free_hash.h	/^    key_val_t() : m_key(UNUSED), m_val(NOT_FOUND) {}$/;"	f	struct:ut_lock_free_hash_t::key_val_t
key_val_t	include/ut0lock_free_hash.h	/^  struct key_val_t {$/;"	s	class:ut_lock_free_hash_t
keyring_generator_service	os/os0enc.cc	/^SERVICE_TYPE(keyring_generator) *keyring_generator_service = nullptr;$/;"	m	namespace:innobase::encryption	file:
keyring_reader_service	os/os0enc.cc	/^SERVICE_TYPE(keyring_reader_with_status) *keyring_reader_service = nullptr;$/;"	m	namespace:innobase::encryption	file:
keyring_writer_service	os/os0enc.cc	/^SERVICE_TYPE(keyring_writer) *keyring_writer_service = nullptr;$/;"	m	namespace:innobase::encryption	file:
keys	include/log0recv.h	/^  Encryption_Keys *keys;$/;"	m	struct:recv_sys_t
killed_by	include/trx0trx.h	/^  std::atomic<std::thread::id> killed_by; \/*!< The thread ID that wants to$/;"	m	struct:trx_t
last	include/fut0lst.h	/^  fil_addr_t last;$/;"	m	struct:flst_bnode_t
last	include/ut0list.h	/^  ib_list_node_t *last;  \/*!< last node *\/$/;"	m	struct:ib_list_t
last	include/ut0rbt.h	/^  const ib_rbt_node_t *last; \/* Last node visited *\/$/;"	m	struct:ib_rbt_bound_t
last_big_block	fts/fts0opt.cc	/^  ulint last_big_block; \/*!< Offset of last block in the$/;"	m	struct:fts_zip_t	file:
last_block	include/log0recv.h	/^  byte *last_block;$/;"	m	struct:recv_sys_t
last_block_buf_start	include/log0recv.h	/^  byte *last_block_buf_start;$/;"	m	struct:recv_sys_t
last_block_first_rec_group	include/log0recv.h	/^  uint32_t last_block_first_rec_group;$/;"	m	struct:recv_sys_t
last_check_sync_time	fts/fts0opt.cc	/^static ib_time_monotonic_t last_check_sync_time;$/;"	v	file:
last_doc_id	include/fts0types.h	/^  doc_id_t last_doc_id; \/*!< Last document id in ilist. *\/$/;"	m	struct:fts_node_t
last_file_size	include/fsp0sysspace.h	/^  page_no_t last_file_size() const {$/;"	f	class:SysTablespace
last_hash_succ	include/btr0sea.h	/^  ibool last_hash_succ;    \/*!< TRUE if the last search would have$/;"	m	struct:btr_search_t
last_ins_cur	include/dict0mem.h	/^  last_ops_cur_t *last_ins_cur;$/;"	m	struct:dict_index_t
last_multi_value_position	include/row0row.h	/^  uint32_t last_multi_value_position() const {$/;"	f	class:Multi_value_entry_builder
last_ops_cur_t	include/dict0mem.h	/^  last_ops_cur_t() : rec(), block(), mtr(), disable_caching(), invalid() {$/;"	f	class:last_ops_cur_t
last_ops_cur_t	include/dict0mem.h	/^class last_ops_cur_t {$/;"	c
last_os_error	include/fsp0file.h	/^  ulint last_os_error() const { return (m_last_os_error); }$/;"	f	class:Datafile
last_page_no	include/trx0undo.h	/^  page_no_t last_page_no; \/*!< page number of the last page in the$/;"	m	struct:trx_undo_t
last_printout_time	include/buf0buf.h	/^  ib_time_monotonic_t last_printout_time;$/;"	m	struct:Cache_hint::buf_pool_t
last_read	trx/trx0i_s.cc	/^  ib_time_monotonic_us_t last_read; \/*!< last time the cache was read;$/;"	m	struct:trx_i_s_cache_t	file:
last_read_mutex	trx/trx0i_s.cc	/^  ib_mutex_t last_read_mutex;       \/*!< mutex protecting the$/;"	m	struct:trx_i_s_cache_t	file:
last_run	fts/fts0opt.cc	/^  ib_time_monotonic_t last_run; \/*!< Time last run completed *\/$/;"	m	struct:fts_slot_t	file:
last_s_file_name	include/sync0rw.h	/^  const char *last_s_file_name;$/;"	m	struct:rw_lock_t
last_s_line	include/sync0rw.h	/^  uint16_t last_s_line;$/;"	m	struct:rw_lock_t
last_sel_cur	include/dict0mem.h	/^  last_ops_cur_t *last_sel_cur;$/;"	m	struct:dict_index_t
last_sel_node	include/que0que.h	/^  sel_node_t *last_sel_node; \/*!< last executed select node, or NULL$/;"	m	struct:que_fork_t
last_slot	include/lock0lock.h	/^  srv_slot_t *last_slot;$/;"	m	struct:lock_sys_t
last_sql_stat_start	include/trx0trx.h	/^  trx_savept_t last_sql_stat_start;$/;"	m	struct:trx_t
last_stmt	include/fts0fts.h	/^  ib_vector_t *last_stmt;  \/*!< last_stmt *\/$/;"	m	struct:fts_trx_t
last_trx_id	include/row0upd.h	/^  trx_id_t last_trx_id;$/;"	m	struct:upd_field_t
last_trx_no	include/trx0types.h	/^  trx_id_t last_trx_no;$/;"	m	struct:trx_rseg_t
last_undo_no	include/row0upd.h	/^  undo_no_t last_undo_no;$/;"	m	struct:upd_field_t
last_x_file_name	include/sync0rw.h	/^  const char *last_x_file_name;$/;"	m	struct:rw_lock_t
last_x_line	include/sync0rw.h	/^  uint16_t last_x_line;$/;"	m	struct:rw_lock_t
latch	btr/btr0bulk.cc	/^void BtrBulk::latch() {$/;"	f	class:BtrBulk
latch	btr/btr0bulk.cc	/^void PageBulk::latch() {$/;"	f	class:PageBulk
latch	include/fil0fil.h	/^  rw_lock_t latch;$/;"	m	struct:fil_space_t
latch	include/sync0arr_impl.h	/^  sync_object_t latch;         \/*!< pointer to the object the$/;"	m	struct:sync_cell_t
latch	include/trx0purge.h	/^  rw_lock_t latch;$/;"	m	struct:trx_purge_t
latch	include/trx0types.h	/^  void latch() {$/;"	f	struct:trx_rseg_t
latch_id_t	include/sync0types.h	/^enum latch_id_t {$/;"	g
latch_level_less	sync/sync0debug.cc	/^  struct latch_level_less {$/;"	s	struct:LatchDebug	file:
latch_level_t	include/sync0types.h	/^enum latch_level_t {$/;"	g
latch_meta	sync/sync0debug.cc	/^LatchMetaData latch_meta;$/;"	v
latch_meta_t	include/sync0types.h	/^typedef LatchMeta<LatchCounter> latch_meta_t;$/;"	t
latch_t	include/sync0types.h	/^struct latch_t {$/;"	s
latches	include/lock0lock.h	/^  locksys::Latches latches;$/;"	m	struct:lock_sys_t
latches_t	include/sync0types.h	/^  typedef std::vector<latch_level_t, ut_allocator<latch_level_t>> latches_t;$/;"	t	struct:sync_allowed_latches
le	include/read0types.h	/^  bool le(const ReadView *rhs) const {$/;"	f	class:ReadView
least_undo_no	include/trx0types.h	/^  undo_no_t least_undo_no; \/*!< least undo number to undo *\/$/;"	m	struct:trx_savept_t
left	include/ut0rbt.h	/^  ib_rbt_node_t *left;   \/* points left child *\/$/;"	m	struct:ib_rbt_node_t
left_side	include/btr0sea.h	/^  ibool left_side; \/*!< TRUE or FALSE, depending on whether$/;"	m	struct:btr_search_t
left_side	include/buf0buf.h	/^  volatile bool left_side;$/;"	m	struct:Cache_hint::buf_block_t
legacy_big_endian_checksum	buf/checksum.cc	/^static bool legacy_big_endian_checksum = false;$/;"	v	file:
len	api/api0api.cc	/^  ulint len; \/*!< Length of the column *\/$/;"	m	struct:ib_col_t	file:
len	include/data0data.h	/^  ulint len;      \/*!< stored data length, in bytes *\/$/;"	m	struct:big_rec_field_t
len	include/data0data.h	/^  unsigned len; \/*!< data length; UNIV_SQL_NULL if SQL null *\/$/;"	m	struct:dfield_t
len	include/data0type.h	/^  unsigned len : 16;        \/*!< length; for MySQL data this$/;"	m	struct:dtype_t
len	include/dict0mem.h	/^  size_t len;$/;"	m	struct:dict_col_default_t
len	include/dict0mem.h	/^  unsigned len : 16; \/*!< length; for MySQL data this$/;"	m	struct:dict_col_t
len	include/fts0ast.h	/^  ulint len;$/;"	m	struct:fts_ast_string_t
len	include/fts0tokenize.h	/^  uint len;      \/*!< word len *\/$/;"	m	struct:FT_WORD
len	include/fut0lst.h	/^  ulint len;$/;"	m	struct:flst_bnode_t
len	include/log0recv.h	/^  ulint len;$/;"	m	struct:recv_sys_t
len	include/log0recv.h	/^  ulint len;$/;"	m	struct:recv_t
len	include/mem0mem.h	/^  ulint len;        \/*!< physical length of this block in bytes *\/$/;"	m	struct:mem_block_info_t
len	include/row0ext.h	/^  ulint len[1]; \/*!< prefix lengths; 0 if not cached *\/$/;"	m	struct:row_ext_t
len	include/row0sel.h	/^  ulint len;  \/*!< data length or UNIV_SQL_NULL *\/$/;"	m	struct:sel_buf_t
len	log/log0meb.cc	/^  int len = sizeof(buff);$/;"	m	struct:meb::value	file:
length	include/lob0lob.h	/^  ulint length() const { return (m_stream.total_out); }$/;"	f	struct:lob::zReader
length	include/lob0lob.h	/^  ulint length() const {$/;"	f	struct:lob::ref_t
length	include/pars0pars.h	/^  ulint length;        \/*!< length of data *\/$/;"	m	struct:pars_bound_lit_t
level	dict/dict0stats.cc	/^  ulint level;$/;"	m	struct:n_diff_data_t	file:
level	include/gis0type.h	/^  ulint level;        \/*!< the page's index level *\/$/;"	m	struct:node_visit
level	include/sync0rw.h	/^  latch_level_t level;$/;"	m	struct:rw_lock_t
lexer	include/fts0ast.h	/^  fts_lexer_t *lexer;    \/*!< Lexer callback + arg *\/$/;"	m	struct:fts_ast_state_t
like_node	include/pars0sym.h	/^  sym_node_t *like_node; \/* LIKE operator node*\/$/;"	m	struct:sym_node_t
limit	fts/fts0que.cc	/^  ulonglong limit;$/;"	m	struct:fts_query_t	file:
limit	include/trx0purge.h	/^  purge_iter_t limit;$/;"	m	struct:trx_purge_t
line	include/mem0mem.h	/^  ulint line;         \/*!< line number where the mem heap was created *\/$/;"	m	struct:mem_block_info_t
line	include/sync0arr_impl.h	/^  ulint line = 0;              \/*!< in debug version line where$/;"	m	struct:sync_cell_t
line	include/sync0rw.h	/^  ulint line;                \/*!< Line where the rw-lock was locked *\/$/;"	m	struct:rw_lock_debug_t
line	include/ut0ut.h	/^  size_t line;$/;"	m	struct:ut::Location
lint_ctr_1_t	include/srv0srv.h	/^  typedef ib_counter_t<lint, 1, single_indexer_t> lint_ctr_1_t;$/;"	t	struct:srv_stats_t
linux_create_io_ctx	os/os0file.cc	/^bool AIO::linux_create_io_ctx(ulint max_events, io_context_t *io_ctx) {$/;"	f	class:AIO
linux_dispatch	os/os0file.cc	/^bool AIO::linux_dispatch(Slot *slot) {$/;"	f	class:AIO
list	include/buf0buf.h	/^  UT_LIST_NODE_T(buf_buddy_free_t) list;$/;"	m	struct:Cache_hint::buf_buddy_free_t
list	include/buf0buf.h	/^  UT_LIST_NODE_T(buf_page_t) list;$/;"	m	class:Cache_hint::buf_page_t
list	include/fts0ast.h	/^  fts_ast_list_t list;        \/*!< Expression list *\/$/;"	m	struct:fts_ast_node_t
list	include/fts0ast.h	/^  fts_ast_list_t list; \/*!< List of nodes allocated *\/$/;"	m	struct:fts_ast_state_t
list	include/mem0mem.h	/^  list;             \/* This contains pointers to next$/;"	m	struct:mem_block_info_t
list	include/sync0rw.h	/^  UT_LIST_NODE_T(rw_lock_debug_t) list;$/;"	m	struct:rw_lock_debug_t
list	include/sync0rw.h	/^  UT_LIST_NODE_T(rw_lock_t) list;$/;"	m	struct:rw_lock_t
load_encryption_from_header	fsp/fsp0fsp.cc	/^static bool load_encryption_from_header(fil_space_t *space) {$/;"	f	file:
load_entry_s	lob/zlob0first.cc	/^void z_first_page_t::load_entry_s(fil_addr_t &addr, z_index_entry_t &entry) {$/;"	f	class:lob::z_first_page_t
load_entry_x	lob/zlob0first.cc	/^void z_first_page_t::load_entry_x(fil_addr_t &addr, z_index_entry_t &entry) {$/;"	f	class:lob::z_first_page_t
load_fk	handler/ha_innodb.cc	/^int innobase_truncate<Table>::load_fk() {$/;"	f	class:innobase_truncate
load_s	include/lob0first.h	/^  buf_block_t *load_s(page_id_t page_id, page_size_t page_size) {$/;"	f	struct:lob::first_page_t
load_s	include/zlob0first.h	/^  buf_block_t *load_s(page_no_t page_no) {$/;"	f	struct:lob::z_first_page_t
load_s	include/zlob0index.h	/^  buf_block_t *load_s() {$/;"	f	struct:lob::z_index_entry_t
load_s	include/zlob0index.h	/^  void load_s(fil_addr_t &addr) {$/;"	f	struct:lob::z_index_entry_t
load_s	lob/lob0index.cc	/^buf_block_t *index_entry_t::load_s(const fil_addr_t &addr) {$/;"	f	class:lob::index_entry_t
load_x	include/lob0first.h	/^  buf_block_t *load_x(const page_id_t &page_id, const page_size_t &page_size) {$/;"	f	struct:lob::first_page_t
load_x	include/lob0first.h	/^  buf_block_t *load_x(mtr_t *mtr) const {$/;"	f	struct:lob::first_page_t
load_x	include/lob0impl.h	/^  buf_block_t *load_x(page_id_t page_id, page_size_t page_size) {$/;"	f	struct:lob::node_page_t
load_x	include/lob0impl.h	/^  buf_block_t *load_x(page_no_t page_no) {$/;"	f	struct:lob::z_frag_node_page_t
load_x	include/lob0impl.h	/^  buf_block_t *load_x(page_no_t page_no) {$/;"	f	struct:lob::z_frag_page_t
load_x	include/lob0impl.h	/^  buf_block_t *load_x(page_no_t page_no) {$/;"	f	struct:lob::z_index_page_t
load_x	include/zlob0first.h	/^  buf_block_t *load_x(mtr_t *mtr) const {$/;"	f	struct:lob::z_first_page_t
load_x	include/zlob0first.h	/^  buf_block_t *load_x(page_no_t page_no) {$/;"	f	struct:lob::z_first_page_t
load_x	include/zlob0index.h	/^  void load_x(fil_addr_t &addr) {$/;"	f	struct:lob::z_index_entry_t
load_x	lob/lob0first.cc	/^buf_block_t *first_page_t::load_x(const page_id_t &page_id,$/;"	f	class:lob::first_page_t
load_x	lob/lob0index.cc	/^buf_block_t *index_entry_t::load_x(const fil_addr_t &addr) {$/;"	f	class:lob::index_entry_t
load_x	lob/lob0pages.cc	/^buf_block_t *data_page_t::load_x(page_no_t page_no) {$/;"	f	class:lob::data_page_t
load_x	lob/zlob0first.cc	/^buf_block_t *z_first_page_t::load_x(const page_id_t &page_id,$/;"	f	class:lob::z_first_page_t
lob	include/lob0del.h	/^namespace lob {$/;"	n
lob	include/lob0first.h	/^namespace lob {$/;"	n
lob	include/lob0impl.h	/^namespace lob {$/;"	n
lob	include/lob0index.h	/^namespace lob {$/;"	n
lob	include/lob0inf.h	/^namespace lob {$/;"	n
lob	include/lob0ins.h	/^namespace lob {$/;"	n
lob	include/lob0lob.h	/^namespace lob {$/;"	n
lob	include/lob0pages.h	/^namespace lob {$/;"	n
lob	include/lob0undo.h	/^namespace lob {$/;"	n
lob	include/lob0util.h	/^namespace lob {$/;"	n
lob	include/lob0zip.h	/^namespace lob {$/;"	n
lob	include/zlob0first.h	/^namespace lob {$/;"	n
lob	include/zlob0index.h	/^namespace lob {$/;"	n
lob	include/zlob0read.h	/^namespace lob {$/;"	n
lob	lob/lob0del.cc	/^namespace lob {$/;"	n	file:
lob	lob/lob0first.cc	/^namespace lob {$/;"	n	file:
lob	lob/lob0impl.cc	/^namespace lob {$/;"	n	file:
lob	lob/lob0index.cc	/^namespace lob {$/;"	n	file:
lob	lob/lob0ins.cc	/^namespace lob {$/;"	n	file:
lob	lob/lob0lob.cc	/^namespace lob {$/;"	n	file:
lob	lob/lob0pages.cc	/^namespace lob {$/;"	n	file:
lob	lob/lob0purge.cc	/^namespace lob {$/;"	n	file:
lob	lob/lob0undo.cc	/^namespace lob {$/;"	n	file:
lob	lob/lob0update.cc	/^namespace lob {$/;"	n	file:
lob	lob/lob0util.cc	/^namespace lob {$/;"	n	file:
lob	lob/zlob0first.cc	/^namespace lob {$/;"	n	file:
lob	lob/zlob0index.cc	/^namespace lob {$/;"	n	file:
lob	lob/zlob0ins.cc	/^namespace lob {$/;"	n	file:
lob	lob/zlob0read.cc	/^namespace lob {$/;"	n	file:
lob	lob/zlob0update.cc	/^namespace lob {$/;"	n	file:
lob0del_h	include/lob0del.h	27;"	d
lob0first_h	include/lob0first.h	28;"	d
lob0impl_h	include/lob0impl.h	27;"	d
lob0index_h	include/lob0index.h	27;"	d
lob0inf_h	include/lob0inf.h	27;"	d
lob0ins_h	include/lob0ins.h	27;"	d
lob0lob_h	include/lob0lob.h	27;"	d
lob0pages_h	include/lob0pages.h	27;"	d
lob0undo_h	include/lob0undo.h	31;"	d
lob0util_h	include/lob0util.h	27;"	d
lob0zip_h	include/lob0zip.h	27;"	d
lob_diffs	include/row0upd.h	/^  Lob_diff_vector *lob_diffs;$/;"	m	struct:upd_field_t
lob_first_page_no	include/row0upd.h	/^  page_no_t lob_first_page_no;$/;"	m	struct:upd_field_t
lob_index_diff_t	include/row0upd.h	/^struct lob_index_diff_t {$/;"	s
lob_undo_reset	include/row0mysql.h	/^  void lob_undo_reset() { m_lob_undo.reset(); }$/;"	f	struct:row_prebuilt_t
lob_version	data/data0data.cc	/^uint32_t dfield_t::lob_version() const {$/;"	f	class:dfield_t
lob_version	include/row0upd.h	/^  ulint lob_version;$/;"	m	struct:upd_field_t
locate_free_slot	include/lob0impl.h	/^  ulint locate_free_slot() {$/;"	f	struct:lob::z_frag_page_t
lock	include/buf0buf.h	/^  BPageLock lock;$/;"	m	struct:Cache_hint::buf_block_t
lock	include/dict0mem.h	/^  rw_lock_t lock;              \/*!< read-write lock protecting the$/;"	m	struct:dict_index_t
lock	include/fts0types.h	/^  rw_lock_t lock; \/*!< lock protecting all access to the$/;"	m	struct:fts_cache_t
lock	include/sync0arr_impl.h	/^  rw_lock_t *lock = nullptr;$/;"	m	union:sync_object_t
lock	include/trx0trx.h	/^  trx_lock_t lock;$/;"	m	struct:trx_t
lock0guards_h	include/lock0guards.h	28;"	d
lock0iter_h	include/lock0iter.h	34;"	d
lock0latches_h	include/lock0latches.h	27;"	d
lock0lock_h	include/lock0lock.h	34;"	d
lock0prdt_h	include/lock0prdt.h	33;"	d
lock0priv_h	include/lock0priv.h	34;"	d
lock0types_h	include/lock0types.h	36;"	d
lock_add	lock/lock0lock.cc	/^void RecLock::lock_add(lock_t *lock) {$/;"	f	class:RecLock
lock_alloc	lock/lock0lock.cc	/^lock_t *RecLock::lock_alloc(trx_t *trx, dict_index_t *index, ulint mode,$/;"	f	class:RecLock
lock_cached_lock_mode_names	lock/lock0lock.cc	/^static std::unordered_map<uint, const char *> lock_cached_lock_mode_names;$/;"	v	file:
lock_cancel_waiting_and_release	lock/lock0lock.cc	/^void lock_cancel_waiting_and_release(lock_t *lock) {$/;"	f
lock_check_trx_id_sanity	lock/lock0lock.cc	/^bool lock_check_trx_id_sanity($/;"	f
lock_clust_rec_cons_read_sees	lock/lock0lock.cc	/^bool lock_clust_rec_cons_read_sees($/;"	f
lock_clust_rec_modify_check_and_lock	lock/lock0lock.cc	/^dberr_t lock_clust_rec_modify_check_and_lock($/;"	f
lock_clust_rec_read_check_and_lock	lock/lock0lock.cc	/^dberr_t lock_clust_rec_read_check_and_lock($/;"	f
lock_clust_rec_read_check_and_lock_alt	lock/lock0lock.cc	/^dberr_t lock_clust_rec_read_check_and_lock_alt($/;"	f
lock_compatibility_matrix	include/lock0priv.h	/^static const byte lock_compatibility_matrix[5][5] = {$/;"	v
lock_count	handler/ha_innodb.cc	/^uint ha_innobase::lock_count(void) const { return 0; }$/;"	f	class:ha_innobase
lock_create_wait_for_edge	lock/lock0lock.cc	/^static void lock_create_wait_for_edge(trx_t *waiter, trx_t *blocker) {$/;"	f	file:
lock_deadlock_found	lock/lock0lock.cc	/^static bool lock_deadlock_found = false;$/;"	v	file:
lock_duration_t	include/lock0lock.h	/^enum class lock_duration_t {$/;"	c
lock_free_hash_mutex_key	sync/sync0sync.cc	/^mysql_pfs_key_t lock_free_hash_mutex_key;$/;"	v
lock_get_first_trx_locks	lock/lock0lock.cc	/^const lock_t *lock_get_first_trx_locks(const trx_lock_t *trx_lock) {$/;"	f
lock_get_immutable_id	lock/lock0lock.cc	/^uint64_t lock_get_immutable_id(const lock_t *lock) {$/;"	f
lock_get_mode_str	lock/lock0lock.cc	/^const char *lock_get_mode_str(const lock_t *lock) \/*!< in: lock *\/$/;"	f
lock_get_n_rec_locks	lock/lock0lock.cc	/^static ulint lock_get_n_rec_locks(void) {$/;"	f	file:
lock_get_next_trx_locks	lock/lock0lock.cc	/^const lock_t *lock_get_next_trx_locks(const lock_t *lock) {$/;"	f
lock_get_prdt_from_lock	lock/lock0prdt.cc	/^lock_prdt_t *lock_get_prdt_from_lock(const lock_t *lock) \/*!< in: the lock *\/$/;"	f
lock_get_psi_event	lock/lock0lock.cc	/^void lock_get_psi_event(const lock_t *lock, ulonglong *thread_id,$/;"	f
lock_get_size	lock/lock0lock.cc	/^ulint lock_get_size(void) { return ((ulint)sizeof(lock_t)); }$/;"	f
lock_get_table	lock/lock0lock.cc	/^dict_table_t *lock_get_table(const lock_t *lock) \/*!< in: lock *\/$/;"	f
lock_get_table_id	lock/lock0lock.cc	/^table_id_t lock_get_table_id(const lock_t *lock) \/*!< in: lock *\/$/;"	f
lock_get_table_name	lock/lock0lock.cc	/^const table_name_t &lock_get_table_name(const lock_t *lock) {$/;"	f
lock_get_trx_id	lock/lock0lock.cc	/^trx_id_t lock_get_trx_id(const lock_t *lock) {$/;"	f
lock_get_trx_immutable_id	lock/lock0lock.cc	/^uint64_t lock_get_trx_immutable_id(const lock_t *lock) {$/;"	f
lock_get_type	lock/lock0lock.cc	/^uint32_t lock_get_type(const lock_t *lock) \/*!< in: lock *\/$/;"	f
lock_get_type_str	lock/lock0lock.cc	/^const char *lock_get_type_str(const lock_t *lock) \/*!< in: lock *\/$/;"	f
lock_grant	lock/lock0lock.cc	/^static void lock_grant(lock_t *lock) {$/;"	f	file:
lock_grant_or_update_wait_for_edge	lock/lock0lock.cc	/^static void lock_grant_or_update_wait_for_edge(lock_t *lock) {$/;"	f	file:
lock_grant_or_update_wait_for_edge_if_waiting	lock/lock0lock.cc	/^static void lock_grant_or_update_wait_for_edge_if_waiting($/;"	f	file:
lock_has_to_wait	lock/lock0lock.cc	/^bool lock_has_to_wait(const lock_t *lock1, \/*!< in: waiting lock *\/$/;"	f
lock_has_to_wait_in_queue	lock/lock0lock.cc	/^static const lock_t *lock_has_to_wait_in_queue(const lock_t *wait_lock,$/;"	f	file:
lock_hash_val	include/buf0buf.h	/^  uint32_t lock_hash_val;$/;"	m	struct:Cache_hint::buf_block_t
lock_heap	include/clone0snapshot.h	/^  mem_heap_t *lock_heap() {$/;"	f	class:Clone_Snapshot
lock_heap	include/trx0trx.h	/^  mem_heap_t *lock_heap;$/;"	m	struct:trx_lock_t
lock_immutable_id	include/trx0i_s.h	/^  uint64_t lock_immutable_id; \/*!< lock address as integer. We need to identify$/;"	m	struct:i_s_locks_row_t
lock_init_prdt_from_mbr	lock/lock0prdt.cc	/^void lock_init_prdt_from_mbr($/;"	f
lock_iter	lock/lock0lock.cc	/^  TrxLockIterator &lock_iter() { return (m_lock_iter); }$/;"	f	class:TrxListIterator
lock_latest_err_file	lock/lock0lock.cc	/^static FILE *lock_latest_err_file;$/;"	v	file:
lock_make_trx_hit_list	lock/lock0lock.cc	/^void lock_make_trx_hit_list(trx_t *hp_trx, hit_list_t &hit_list) {$/;"	f
lock_mark_trx_for_rollback	lock/lock0lock.cc	/^static void lock_mark_trx_for_rollback(hit_list_t &hit_list, trx_id_t hp_trx_id,$/;"	f	file:
lock_mode	include/lock0types.h	/^enum lock_mode {$/;"	g
lock_mode_is_next_key_lock	include/lock0priv.h	/^bool lock_mode_is_next_key_lock(ulint mode) {$/;"	f
lock_mode_string	include/lock0types.h	/^inline const char *lock_mode_string(enum lock_mode mode) {$/;"	f
lock_move_rec_list_end	lock/lock0lock.cc	/^void lock_move_rec_list_end(const buf_block_t *new_block,$/;"	f
lock_move_rec_list_start	lock/lock0lock.cc	/^void lock_move_rec_list_start(const buf_block_t *new_block,$/;"	f
lock_move_reorganize_page	lock/lock0lock.cc	/^void lock_move_reorganize_page($/;"	f
lock_move_reorganize_page	page/page0zip.cc	66;"	d	file:
lock_notify_about_deadlock	lock/lock0lock.cc	/^void lock_notify_about_deadlock(const ut::vector<const trx_t *> &trxs_on_cycle,$/;"	f
lock_number_of_rows_locked	lock/lock0lock.cc	/^ulint lock_number_of_rows_locked(const trx_lock_t *trx_lock) {$/;"	f
lock_number_of_tables_locked	lock/lock0lock.cc	/^ulint lock_number_of_tables_locked(const trx_t *trx) {$/;"	f
lock_on_statement_end	lock/lock0lock.cc	/^void lock_on_statement_end(trx_t *trx) { trx->lock.inherit_all.store(false); }$/;"	f
lock_op_t	include/lock0lock.h	/^struct lock_op_t {$/;"	s
lock_page	include/trx0i_s.h	/^  page_no_t lock_page;   \/*!< page number within the_space *\/$/;"	m	struct:i_s_locks_row_t
lock_place_prdt_page_lock	lock/lock0prdt.cc	/^dberr_t lock_place_prdt_page_lock(const page_id_t &page_id, dict_index_t *index,$/;"	f
lock_pool_t	include/trx0trx.h	/^typedef std::vector<ib_lock_t *, ut_allocator<ib_lock_t *>> lock_pool_t;$/;"	t
lock_prdt	include/lock0prdt.h	/^typedef struct lock_prdt {$/;"	s
lock_prdt_add_to_queue	lock/lock0prdt.cc	/^static lock_t *lock_prdt_add_to_queue($/;"	f	file:
lock_prdt_consistent	lock/lock0prdt.cc	/^static bool lock_prdt_consistent(lock_prdt_t *prdt1, lock_prdt_t *prdt2,$/;"	f	file:
lock_prdt_enlarge_mbr	lock/lock0prdt.cc	/^static void lock_prdt_enlarge_mbr($/;"	f	file:
lock_prdt_enlarge_prdt	lock/lock0prdt.cc	/^static void lock_prdt_enlarge_prdt(lock_t *lock, \/*!< in\/out: lock to modify *\/$/;"	f	file:
lock_prdt_find_on_page	lock/lock0prdt.cc	/^static lock_t *lock_prdt_find_on_page($/;"	f	file:
lock_prdt_get_mbr_from_lock	lock/lock0prdt.cc	/^rtr_mbr_t *lock_prdt_get_mbr_from_lock(const lock_t *lock) \/*!< in: the lock *\/$/;"	f
lock_prdt_has_lock	lock/lock0prdt.cc	/^lock_t *lock_prdt_has_lock(ulint precise_mode, \/*!< in: LOCK_S or LOCK_X *\/$/;"	f
lock_prdt_has_to_wait	lock/lock0prdt.cc	/^bool lock_prdt_has_to_wait($/;"	f
lock_prdt_insert_check_and_lock	lock/lock0prdt.cc	/^dberr_t lock_prdt_insert_check_and_lock($/;"	f
lock_prdt_is_same	lock/lock0prdt.cc	/^static bool lock_prdt_is_same($/;"	f	file:
lock_prdt_lock	lock/lock0prdt.cc	/^dberr_t lock_prdt_lock(buf_block_t *block,  \/*!< in\/out: buffer block of rec *\/$/;"	f
lock_prdt_other_has_conflicting	lock/lock0prdt.cc	/^static const lock_t *lock_prdt_other_has_conflicting($/;"	f	file:
lock_prdt_page_free_from_discard	lock/lock0prdt.cc	/^void lock_prdt_page_free_from_discard(const buf_block_t *block,$/;"	f
lock_prdt_rec_move	lock/lock0prdt.cc	/^void lock_prdt_rec_move($/;"	f
lock_prdt_set_prdt	lock/lock0prdt.cc	/^void lock_prdt_set_prdt(lock_t *lock, const lock_prdt_t *prdt) {$/;"	f
lock_prdt_t	include/lock0prdt.h	/^} lock_prdt_t;$/;"	t	typeref:struct:lock_prdt
lock_prdt_update_parent	lock/lock0prdt.cc	/^void lock_prdt_update_parent(buf_block_t *left_block, buf_block_t *right_block,$/;"	f
lock_prdt_update_split	lock/lock0prdt.cc	/^void lock_prdt_update_split(buf_block_t *block, buf_block_t *new_block,$/;"	f
lock_prdt_update_split_low	lock/lock0prdt.cc	/^static void lock_prdt_update_split_low(buf_block_t *block,$/;"	f	file:
lock_print_info_all_transactions	lock/lock0lock.cc	/^void lock_print_info_all_transactions(FILE *file) {$/;"	f
lock_print_info_summary	lock/lock0lock.cc	/^void lock_print_info_summary(FILE *file) {$/;"	f
lock_protect_locks_till_statement_end	lock/lock0lock.cc	/^void lock_protect_locks_till_statement_end(que_thr_t *thr) {$/;"	f
lock_queue_iterator_get_prev	lock/lock0iter.cc	/^const lock_t *lock_queue_iterator_get_prev($/;"	f
lock_queue_iterator_reset	lock/lock0iter.cc	/^void lock_queue_iterator_reset($/;"	f
lock_queue_iterator_t	include/lock0iter.h	/^struct lock_queue_iterator_t {$/;"	s
lock_rec	include/trx0i_s.h	/^  ulint lock_rec;        \/*!< heap number of the record$/;"	m	struct:i_s_locks_row_t
lock_rec_add_to_queue	lock/lock0lock.cc	/^static void lock_rec_add_to_queue(ulint type_mode, const buf_block_t *block,$/;"	f	file:
lock_rec_bitmap_reset	lock/lock0lock.cc	/^static void lock_rec_bitmap_reset(lock_t *lock) \/*!< in: record lock *\/$/;"	f	file:
lock_rec_block_validate	lock/lock0lock.cc	/^static void lock_rec_block_validate(const page_id_t &page_id) {$/;"	f	file:
lock_rec_cancel	lock/lock0lock.cc	/^static void lock_rec_cancel($/;"	f	file:
lock_rec_convert_active_impl_to_expl	lock/lock0lock.cc	/^void lock_rec_convert_active_impl_to_expl(const buf_block_t *block,$/;"	f
lock_rec_convert_impl_to_expl	lock/lock0lock.cc	/^static void lock_rec_convert_impl_to_expl(const buf_block_t *block,$/;"	f	file:
lock_rec_convert_impl_to_expl_for_trx	lock/lock0lock.cc	/^static void lock_rec_convert_impl_to_expl_for_trx($/;"	f	file:
lock_rec_copy	lock/lock0lock.cc	/^static lock_t *lock_rec_copy(const lock_t *lock, \/*!< in: record lock *\/$/;"	f	file:
lock_rec_dequeue_from_page	lock/lock0lock.cc	/^static void lock_rec_dequeue_from_page(lock_t *in_lock) {$/;"	f	file:
lock_rec_discard	lock/lock0lock.cc	/^void lock_rec_discard(lock_t *in_lock) {$/;"	f
lock_rec_expl_exist_on_page	lock/lock0lock.cc	/^bool lock_rec_expl_exist_on_page(const page_id_t &page_id) {$/;"	f
lock_rec_fetch_page	lock/lock0lock.cc	/^static bool lock_rec_fetch_page(const lock_t *lock) {$/;"	f	file:
lock_rec_find_next_set_bit	lock/lock0lock.cc	/^ulint lock_rec_find_next_set_bit(const lock_t *lock, ulint heap_no) {$/;"	f
lock_rec_find_set_bit	lock/lock0lock.cc	/^ulint lock_rec_find_set_bit($/;"	f
lock_rec_find_similar_on_page	lock/lock0lock.cc	/^lock_t *lock_rec_find_similar_on_page(uint32_t type_mode, size_t heap_no,$/;"	f
lock_rec_free_all_from_discard_page	lock/lock0lock.cc	/^void lock_rec_free_all_from_discard_page($/;"	f
lock_rec_free_all_from_discard_page_low	lock/lock0lock.cc	/^static void lock_rec_free_all_from_discard_page_low(page_id_t page_id,$/;"	f	file:
lock_rec_get_gap	lock/lock0lock.cc	/^ulint lock_rec_get_gap(const lock_t *lock) \/*!< in: record lock *\/$/;"	f
lock_rec_get_index	lock/lock0lock.cc	/^const dict_index_t *lock_rec_get_index(const lock_t *lock) \/*!< in: lock *\/$/;"	f
lock_rec_get_index_name	lock/lock0lock.cc	/^const char *lock_rec_get_index_name(const lock_t *lock) \/*!< in: lock *\/$/;"	f
lock_rec_get_insert_intention	lock/lock0lock.cc	/^ulint lock_rec_get_insert_intention(const lock_t *lock) \/*!< in: record lock *\/$/;"	f
lock_rec_get_page_id	lock/lock0lock.cc	/^page_id_t lock_rec_get_page_id(const lock_t *lock) {$/;"	f
lock_rec_get_prev	lock/lock0lock.cc	/^const lock_t *lock_rec_get_prev($/;"	f
lock_rec_get_rec_not_gap	lock/lock0lock.cc	/^ulint lock_rec_get_rec_not_gap(const lock_t *lock) \/*!< in: record lock *\/$/;"	f
lock_rec_grant	lock/lock0lock.cc	/^static void lock_rec_grant(lock_t *in_lock) {$/;"	f	file:
lock_rec_grant_by_heap_no	lock/lock0lock.cc	/^static void lock_rec_grant_by_heap_no(lock_t *in_lock, ulint heap_no) {$/;"	f	file:
lock_rec_has_expl	lock/lock0lock.cc	/^const lock_t *lock_rec_has_expl(ulint precise_mode, const buf_block_t *block,$/;"	f
lock_rec_has_to_wait	lock/lock0lock.cc	/^bool lock_rec_has_to_wait($/;"	f
lock_rec_has_to_wait_for_granted	lock/lock0lock.cc	/^static const lock_t *lock_rec_has_to_wait_for_granted($/;"	f	file:
lock_rec_has_to_wait_in_queue	lock/lock0lock.cc	/^static const lock_t *lock_rec_has_to_wait_in_queue($/;"	f	file:
lock_rec_inherit_to_gap	lock/lock0lock.cc	/^static void lock_rec_inherit_to_gap($/;"	f	file:
lock_rec_inherit_to_gap_if_gap_lock	lock/lock0lock.cc	/^static void lock_rec_inherit_to_gap_if_gap_lock($/;"	f	file:
lock_rec_insert_check_and_lock	lock/lock0lock.cc	/^dberr_t lock_rec_insert_check_and_lock($/;"	f
lock_rec_insert_to_granted	lock/lock0lock.cc	/^static void lock_rec_insert_to_granted(hash_table_t *lock_hash, lock_t *lock,$/;"	f	file:
lock_rec_insert_to_waiting	lock/lock0lock.cc	/^static void lock_rec_insert_to_waiting(hash_table_t *lock_hash, lock_t *lock,$/;"	f	file:
lock_rec_lock	lock/lock0lock.cc	/^static dberr_t lock_rec_lock(bool impl, select_mode sel_mode, ulint mode,$/;"	f	file:
lock_rec_lock_fast	lock/lock0lock.cc	/^lock_rec_req_status lock_rec_lock_fast($/;"	f
lock_rec_lock_fold	lock/lock0lock.cc	/^static ulint lock_rec_lock_fold(const lock_t *lock) {$/;"	f	file:
lock_rec_lock_slow	lock/lock0lock.cc	/^static dberr_t lock_rec_lock_slow(bool impl, select_mode sel_mode, ulint mode,$/;"	f	file:
lock_rec_move	lock/lock0lock.cc	/^void lock_rec_move(const buf_block_t *receiver, \/*!< in: buffer block containing$/;"	f
lock_rec_move_granted_to_front	lock/lock0lock.cc	/^static void lock_rec_move_granted_to_front(lock_t *lock, const RecID &rec_id) {$/;"	f	file:
lock_rec_move_low	lock/lock0lock.cc	/^static void lock_rec_move_low($/;"	f	file:
lock_rec_other_has_conflicting	lock/lock0lock.cc	/^static const lock_t *lock_rec_other_has_conflicting($/;"	f	file:
lock_rec_other_has_expl_req	lock/lock0lock.cc	/^static const lock_t *lock_rec_other_has_expl_req($/;"	f	file:
lock_rec_other_trx_holds_expl	lock/lock0lock.cc	/^static bool lock_rec_other_trx_holds_expl(ulint precise_mode, const trx_t *trx,$/;"	f	file:
lock_rec_print	lock/lock0lock.cc	/^static void lock_rec_print(FILE *file,         \/*!< in: file where to print *\/$/;"	f	file:
lock_rec_release	lock/lock0lock.cc	/^static void lock_rec_release(lock_t *lock, ulint heap_no) {$/;"	f	file:
lock_rec_req_status	include/lock0priv.h	/^enum lock_rec_req_status {$/;"	g
lock_rec_reset_and_inherit_gap_locks	lock/lock0lock.cc	/^void lock_rec_reset_and_inherit_gap_locks(const buf_block_t *heir_block,$/;"	f
lock_rec_reset_and_release_wait	lock/lock0lock.cc	/^static void lock_rec_reset_and_release_wait($/;"	f	file:
lock_rec_reset_and_release_wait_low	lock/lock0lock.cc	/^static void lock_rec_reset_and_release_wait_low($/;"	f	file:
lock_rec_reset_nth_bit	lock/lock0lock.cc	/^byte lock_rec_reset_nth_bit(lock_t *lock, ulint i) {$/;"	f
lock_rec_restore_from_page_infimum	lock/lock0lock.cc	/^void lock_rec_restore_from_page_infimum(const buf_block_t *block,$/;"	f
lock_rec_store_on_page_infimum	lock/lock0lock.cc	/^void lock_rec_store_on_page_infimum($/;"	f
lock_rec_t	include/lock0priv.h	/^struct lock_rec_t {$/;"	s
lock_rec_trx_wait	lock/lock0lock.cc	/^void lock_rec_trx_wait(lock_t *lock, ulint i, ulint type) {$/;"	f
lock_rec_unlock	lock/lock0lock.cc	/^void lock_rec_unlock($/;"	f
lock_rec_validate_page	lock/lock0lock.cc	/^static bool lock_rec_validate_page($/;"	f	file:
lock_release	lock/lock0lock.cc	/^static void lock_release(trx_t *trx) {$/;"	f	file:
lock_release_autoinc_last_lock	lock/lock0lock.cc	/^void lock_release_autoinc_last_lock(trx_t *trx) {$/;"	f
lock_release_autoinc_locks	lock/lock0lock.cc	/^static void lock_release_autoinc_locks(trx_t *trx) \/*!< in\/out: transaction *\/$/;"	f	file:
lock_release_gap_lock	lock/lock0lock.cc	/^static void lock_release_gap_lock(lock_t *lock) {$/;"	f	file:
lock_release_read_lock	lock/lock0lock.cc	/^static void lock_release_read_lock(lock_t *lock, bool only_gap) {$/;"	f	file:
lock_remove_all_on_table	lock/lock0lock.cc	/^void lock_remove_all_on_table($/;"	f
lock_remove_all_on_table_for_trx	lock/lock0lock.cc	/^static void lock_remove_all_on_table_for_trx($/;"	f	file:
lock_remove_recovered_trx_record_locks	lock/lock0lock.cc	/^static ulint lock_remove_recovered_trx_record_locks($/;"	f	file:
lock_report_trx_id_insanity	lock/lock0lock.cc	/^void lock_report_trx_id_insanity(trx_id_t trx_id, const rec_t *rec,$/;"	f
lock_reset_wait_and_release_thread_if_suspended	lock/lock0wait.cc	/^void lock_reset_wait_and_release_thread_if_suspended(lock_t *lock) {$/;"	f
lock_reuse_for_next_key_lock	lock/lock0lock.cc	/^static void lock_reuse_for_next_key_lock(const lock_t *held_lock, ulint mode,$/;"	f	file:
lock_rtr_move_rec_list	lock/lock0lock.cc	/^void lock_rtr_move_rec_list(const buf_block_t *new_block,$/;"	f
lock_sec_rec_cons_read_sees	lock/lock0lock.cc	/^bool lock_sec_rec_cons_read_sees($/;"	f
lock_sec_rec_modify_check_and_lock	lock/lock0lock.cc	/^dberr_t lock_sec_rec_modify_check_and_lock($/;"	f
lock_sec_rec_read_check_and_lock	lock/lock0lock.cc	/^dberr_t lock_sec_rec_read_check_and_lock($/;"	f
lock_sec_rec_some_has_impl	lock/lock0lock.cc	/^static trx_t *lock_sec_rec_some_has_impl(const rec_t *rec, dict_index_t *index,$/;"	f	file:
lock_set_lock_and_trx_wait	lock/lock0lock.cc	/^void lock_set_lock_and_trx_wait(lock_t *lock) {$/;"	f
lock_set_timeout_event	lock/lock0lock.cc	/^void lock_set_timeout_event() { os_event_set(lock_sys->timeout_event); }$/;"	f
lock_shared_clause	pars/pars0grm.y	/^lock_shared_clause:$/;"	l
lock_size	include/lock0priv.h	/^  size_t lock_size() const { return (m_size); }$/;"	f	class:RecLock
lock_size	include/lock0priv.h	/^  static size_t lock_size(const page_t *page) {$/;"	f	class:RecLock
lock_size	include/lock0priv.h	/^  static size_t lock_size(ulint mode) {$/;"	f	class:RecLock
lock_space	include/trx0i_s.h	/^  space_id_t lock_space; \/*!< tablespace identifier *\/$/;"	m	struct:i_s_locks_row_t
lock_state	include/que0que.h	/^  ulint lock_state;      \/*!< lock state of thread (table or$/;"	m	struct:que_thr_t
lock_strength_matrix	include/lock0priv.h	/^static const byte lock_strength_matrix[5][5] = {$/;"	v
lock_sys	lock/lock0lock.cc	/^lock_sys_t *lock_sys = nullptr;$/;"	v
lock_sys_close	lock/lock0lock.cc	/^void lock_sys_close(void) {$/;"	f
lock_sys_create	lock/lock0lock.cc	/^void lock_sys_create($/;"	f
lock_sys_global_rw_lock_key	sync/sync0sync.cc	/^mysql_pfs_key_t lock_sys_global_rw_lock_key;$/;"	v
lock_sys_page_mutex_key	sync/sync0sync.cc	/^mysql_pfs_key_t lock_sys_page_mutex_key;$/;"	v
lock_sys_resize	lock/lock0lock.cc	/^void lock_sys_resize(ulint n_cells) {$/;"	f
lock_sys_t	include/lock0lock.h	/^struct lock_sys_t {$/;"	s
lock_sys_table_mutex_key	sync/sync0sync.cc	/^mysql_pfs_key_t lock_sys_table_mutex_key;$/;"	v
lock_t	include/lock0priv.h	/^struct lock_t {$/;"	s
lock_t	include/lock0types.h	38;"	d
lock_table	lock/lock0lock.cc	/^dberr_t lock_table(ulint flags, \/*!< in: if BTR_NO_LOCKING_FLAG bit is set,$/;"	f
lock_table_create	lock/lock0lock.cc	/^lock_t *lock_table_create(dict_table_t *table, \/*!< in\/out: database table$/;"	f
lock_table_dequeue	lock/lock0lock.cc	/^static void lock_table_dequeue($/;"	f	file:
lock_table_enqueue_waiting	lock/lock0lock.cc	/^static dberr_t lock_table_enqueue_waiting($/;"	f	file:
lock_table_for_trx	lock/lock0lock.cc	/^dberr_t lock_table_for_trx(dict_table_t *table, trx_t *trx,$/;"	f
lock_table_has_locks	lock/lock0lock.cc	/^bool lock_table_has_locks(const dict_table_t *table) {$/;"	f
lock_table_has_to_wait_in_queue	lock/lock0lock.cc	/^static const lock_t *lock_table_has_to_wait_in_queue($/;"	f	file:
lock_table_id	include/trx0i_s.h	/^  table_id_t lock_table_id;$/;"	m	struct:i_s_locks_row_t
lock_table_ix_resurrect	lock/lock0lock.cc	/^void lock_table_ix_resurrect(dict_table_t *table, trx_t *trx) {$/;"	f
lock_table_lock_list_init	lock/lock0lock.cc	/^void lock_table_lock_list_init(table_lock_list_t *lock_list) {$/;"	f
lock_table_locks_lookup	lock/lock0lock.cc	/^static const lock_t *lock_table_locks_lookup($/;"	f	file:
lock_table_other_has_incompatible	lock/lock0lock.cc	/^const lock_t *lock_table_other_has_incompatible($/;"	f
lock_table_pop_autoinc_locks	lock/lock0lock.cc	/^void lock_table_pop_autoinc_locks($/;"	f
lock_table_print	lock/lock0lock.cc	/^static void lock_table_print(FILE *file,         \/*!< in: file where to print *\/$/;"	f	file:
lock_table_queue_validate	lock/lock0lock.cc	/^static bool lock_table_queue_validate($/;"	f	file:
lock_table_remove_autoinc_lock	lock/lock0lock.cc	/^void lock_table_remove_autoinc_lock($/;"	f
lock_table_remove_low	lock/lock0lock.cc	/^void lock_table_remove_low(lock_t *lock) \/*!< in\/out: table lock *\/$/;"	f
lock_table_t	include/lock0priv.h	/^struct lock_table_t {$/;"	s
lock_test_prdt_page_lock	lock/lock0prdt.cc	/^bool lock_test_prdt_page_lock(const trx_t *trx, const page_id_t &page_id) {$/;"	f
lock_trx_alloc_locks	lock/lock0lock.cc	/^void lock_trx_alloc_locks(trx_t *trx) {$/;"	f
lock_trx_handle_wait	lock/lock0lock.cc	/^dberr_t lock_trx_handle_wait(trx_t *trx) \/*!< in\/out: trx lock state *\/$/;"	f
lock_trx_has_rec_x_lock	lock/lock0lock.cc	/^bool lock_trx_has_rec_x_lock(que_thr_t *thr, const dict_table_t *table,$/;"	f
lock_trx_holds_autoinc_locks	lock/lock0lock.cc	/^static bool lock_trx_holds_autoinc_locks($/;"	f	file:
lock_trx_immutable_id	include/trx0i_s.h	/^  uint64_t lock_trx_immutable_id; \/*!< transaction address as integer. We need$/;"	m	struct:i_s_locks_row_t
lock_trx_lock_list_init	lock/lock0lock.cc	/^void lock_trx_lock_list_init($/;"	f
lock_trx_print_locks	lock/lock0lock.cc	/^static bool lock_trx_print_locks($/;"	f	file:
lock_trx_print_wait_and_mvcc_state	lock/lock0lock.cc	/^void lock_trx_print_wait_and_mvcc_state(FILE *file, const trx_t *trx) {$/;"	f
lock_trx_release_locks	lock/lock0lock.cc	/^void lock_trx_release_locks(trx_t *trx) \/*!< in\/out: transaction *\/$/;"	f
lock_trx_release_read_locks	lock/lock0lock.cc	/^void lock_trx_release_read_locks(trx_t *trx, bool only_gap) {$/;"	f
lock_trx_release_read_locks_in_x_mode	lock/lock0lock.cc	/^static void lock_trx_release_read_locks_in_x_mode(trx_t *trx, bool only_gap) {$/;"	f	file:
lock_trx_table_locks_find	lock/lock0lock.cc	/^static bool lock_trx_table_locks_find(const trx_t *trx,$/;"	f	file:
lock_trx_table_locks_remove	lock/lock0lock.cc	/^static void lock_trx_table_locks_remove(const lock_t *lock_to_remove) {$/;"	f	file:
lock_type	include/sync0rw.h	/^  ulint lock_type;           \/*!< Type of the lock: RW_LOCK_X,$/;"	m	struct:rw_lock_debug_t
lock_types	include/lock0priv.h	/^static const ulint lock_types = UT_ARR_SIZE(lock_compatibility_matrix);$/;"	v
lock_unlock_table_autoinc	lock/lock0lock.cc	/^void lock_unlock_table_autoinc(trx_t *trx) \/*!< in\/out: transaction *\/$/;"	f
lock_update_copy_and_discard	lock/lock0lock.cc	/^void lock_update_copy_and_discard(const buf_block_t *new_block,$/;"	f
lock_update_delete	lock/lock0lock.cc	/^void lock_update_delete(const buf_block_t *block, const rec_t *rec) {$/;"	f
lock_update_discard	lock/lock0lock.cc	/^void lock_update_discard(const buf_block_t *heir_block, ulint heir_heap_no,$/;"	f
lock_update_insert	lock/lock0lock.cc	/^void lock_update_insert($/;"	f
lock_update_merge_left	lock/lock0lock.cc	/^void lock_update_merge_left(const buf_block_t *left_block,$/;"	f
lock_update_merge_right	lock/lock0lock.cc	/^void lock_update_merge_right(const buf_block_t *right_block,$/;"	f
lock_update_root_raise	lock/lock0lock.cc	/^void lock_update_root_raise($/;"	f
lock_update_split_left	lock/lock0lock.cc	/^void lock_update_split_left(const buf_block_t *right_block,$/;"	f
lock_update_split_right	lock/lock0lock.cc	/^void lock_update_split_right(const buf_block_t *right_block,$/;"	f
lock_update_wait_for_edge	lock/lock0lock.cc	/^static void lock_update_wait_for_edge(const lock_t *waiting_lock,$/;"	f	file:
lock_validate	lock/lock0lock.cc	/^bool lock_validate() {$/;"	f
lock_validate_table_locks	lock/lock0lock.cc	/^static bool lock_validate_table_locks($/;"	f	file:
lock_wait_accumulate_weights	lock/lock0wait.cc	/^static void lock_wait_accumulate_weights($/;"	f	file:
lock_wait_add_subtree_weight	lock/lock0wait.cc	/^static void lock_wait_add_subtree_weight($/;"	f	file:
lock_wait_build_wait_for_graph	lock/lock0wait.cc	/^static void lock_wait_build_wait_for_graph($/;"	f	file:
lock_wait_check_and_cancel	lock/lock0wait.cc	/^static void lock_wait_check_and_cancel($/;"	f	file:
lock_wait_check_candidate_cycle	lock/lock0wait.cc	/^static bool lock_wait_check_candidate_cycle($/;"	f	file:
lock_wait_check_slots_for_timeouts	lock/lock0wait.cc	/^static void lock_wait_check_slots_for_timeouts() {$/;"	f	file:
lock_wait_choose_victim	lock/lock0wait.cc	/^static trx_t *lock_wait_choose_victim($/;"	f	file:
lock_wait_compute_and_publish_weights_except_cycles	lock/lock0wait.cc	/^static void lock_wait_compute_and_publish_weights_except_cycles($/;"	f	file:
lock_wait_compute_incoming_count	lock/lock0wait.cc	/^static void lock_wait_compute_incoming_count(const ut::vector<int> &outgoing,$/;"	f	file:
lock_wait_compute_initial_weights	lock/lock0wait.cc	/^static void lock_wait_compute_initial_weights($/;"	f	file:
lock_wait_extract_cycle_ids	lock/lock0wait.cc	/^static void lock_wait_extract_cycle_ids(ut::vector<uint> &cycle_ids,$/;"	f	file:
lock_wait_find_and_handle_deadlocks	lock/lock0wait.cc	/^static void lock_wait_find_and_handle_deadlocks($/;"	f	file:
lock_wait_find_latest_pos_on_cycle	lock/lock0wait.cc	/^static size_t lock_wait_find_latest_pos_on_cycle($/;"	f	file:
lock_wait_get_slot_if_still_reserved	lock/lock0wait.cc	/^static const srv_slot_t *lock_wait_get_slot_if_still_reserved($/;"	f	file:
lock_wait_handle_deadlock	lock/lock0wait.cc	/^static void lock_wait_handle_deadlock($/;"	f	file:
lock_wait_map_ids_to_trxs	lock/lock0wait.cc	/^static ut::vector<T> lock_wait_map_ids_to_trxs($/;"	f	file:
lock_wait_mutex_enter	include/lock0lock.h	1039;"	d
lock_wait_mutex_exit	include/lock0lock.h	1045;"	d
lock_wait_mutex_key	sync/sync0sync.cc	/^mysql_pfs_key_t lock_wait_mutex_key;$/;"	v
lock_wait_mutex_own	include/lock0lock.h	1034;"	d
lock_wait_order_for_choosing_victim	lock/lock0wait.cc	/^static ut::vector<trx_t *> lock_wait_order_for_choosing_victim($/;"	f	file:
lock_wait_publish_new_weights	lock/lock0wait.cc	/^static void lock_wait_publish_new_weights($/;"	f	file:
lock_wait_release_thread_if_suspended	lock/lock0wait.cc	/^static void lock_wait_release_thread_if_suspended(que_thr_t *thr) {$/;"	f	file:
lock_wait_request_check_for_cycles	lock/lock0wait.cc	/^void lock_wait_request_check_for_cycles() { lock_set_timeout_event(); }$/;"	f
lock_wait_rollback_deadlock_victim	lock/lock0wait.cc	/^static void lock_wait_rollback_deadlock_victim(trx_t *chosen_victim) {$/;"	f	file:
lock_wait_rotate_cycle_ids_for_notification	lock/lock0wait.cc	/^static ut::vector<uint> lock_wait_rotate_cycle_ids_for_notification($/;"	f	file:
lock_wait_rotate_cycle_ids_to_so_trx_is_first	lock/lock0wait.cc	/^static ut::vector<uint> lock_wait_rotate_cycle_ids_to_so_trx_is_first($/;"	f	file:
lock_wait_rotate_so_pos_is_first	lock/lock0wait.cc	/^static ut::vector<uint> lock_wait_rotate_so_pos_is_first($/;"	f	file:
lock_wait_snapshot_waiting_threads	lock/lock0wait.cc	/^static uint64_t lock_wait_snapshot_waiting_threads($/;"	f	file:
lock_wait_suspend_thread	lock/lock0wait.cc	/^void lock_wait_suspend_thread(que_thr_t *thr) \/*!< in: query thread associated$/;"	f
lock_wait_table_print	lock/lock0wait.cc	/^static void lock_wait_table_print(void) {$/;"	f	file:
lock_wait_table_release_slot	lock/lock0wait.cc	/^static void lock_wait_table_release_slot($/;"	f	file:
lock_wait_table_reservations	lock/lock0wait.cc	/^static uint64_t lock_wait_table_reservations = 0;$/;"	v	file:
lock_wait_table_reserve_slot	lock/lock0wait.cc	/^static srv_slot_t *lock_wait_table_reserve_slot($/;"	f	file:
lock_wait_timeout_thread	lock/lock0wait.cc	/^void lock_wait_timeout_thread() {$/;"	f
lock_wait_trxs_are_still_in_slots	lock/lock0wait.cc	/^static bool lock_wait_trxs_are_still_in_slots($/;"	f	file:
lock_wait_trxs_are_still_waiting	lock/lock0wait.cc	/^static bool lock_wait_trxs_are_still_waiting($/;"	f	file:
lock_wait_trxs_rotated_for_notification	lock/lock0wait.cc	/^static ut::vector<const trx_t *> lock_wait_trxs_rotated_for_notification($/;"	f	file:
lock_wait_update_schedule_and_check_for_deadlocks	lock/lock0wait.cc	/^static void lock_wait_update_schedule_and_check_for_deadlocks() {$/;"	f	file:
lock_wait_update_weights_on_cycle	lock/lock0wait.cc	/^static void lock_wait_update_weights_on_cycle($/;"	f	file:
lock_word	include/sync0rw.h	/^  std::atomic<int32_t> lock_word;$/;"	m	struct:rw_lock_t
lock_word_t	include/os0atomic.h	/^typedef int lock_word_t;$/;"	t
locked	include/gis0type.h	/^  bool locked;                  \/*!< whether these recs locked *\/$/;"	m	struct:matched_rec
locked	include/gis0type.h	/^  bool locked;  \/*!< whether the record locked *\/$/;"	m	struct:rtr_rec
locked_from	sync/sync0rw.cc	/^std::string rw_lock_t::locked_from() const {$/;"	f	class:rw_lock_t
locks	include/dict0mem.h	/^  table_lock_list_t locks;$/;"	m	struct:dict_table_t
locks	include/lock0priv.h	/^  locks; \/*!< list of locks on the same$/;"	m	struct:lock_table_t
locks_hash	trx/trx0i_s.cc	/^  hash_table_t *locks_hash; \/*!< hash table used to eliminate$/;"	m	struct:trx_i_s_cache_t	file:
locksys	include/lock0guards.h	/^namespace locksys {$/;"	n
locksys	include/lock0latches.h	/^namespace locksys {$/;"	n
locksys	include/lock0lock.h	/^namespace locksys {$/;"	n
locksys	include/lock0priv.h	/^namespace locksys {$/;"	n
locksys	lock/lock0guards.cc	/^namespace locksys {$/;"	n	file:
locksys	lock/lock0latches.cc	/^namespace locksys {$/;"	n	file:
locksys	lock/lock0lock.cc	/^namespace locksys {$/;"	n	file:
log	data/data0data.cc	/^byte *Multi_value_logger::log(byte **ptr) {$/;"	f	class:Multi_value_logger
log	include/ut0ut.h	/^  logger &log(int err, Args &&... args) {$/;"	f	class:ib::logger
log0ddl_h	include/log0ddl.h	40;"	d
log0log_h	include/log0log.h	45;"	d
log0meb_h	include/log0meb.h	27;"	d
log0recv_h	include/log0recv.h	34;"	d
log0test_h	include/log0test.h	41;"	d
log0types_h	include/log0types.h	42;"	d
logFreeCheck	btr/btr0bulk.cc	/^void BtrBulk::logFreeCheck() {$/;"	f	class:BtrBulk
log_advance_ready_for_write_lsn	log/log0buf.cc	/^void log_advance_ready_for_write_lsn(log_t &log) {$/;"	f
log_allocate_buffer	log/log0log.cc	/^static void log_allocate_buffer(log_t &log) {$/;"	f	file:
log_allocate_checkpoint_buffer	log/log0log.cc	/^static void log_allocate_checkpoint_buffer(log_t &log) {$/;"	f	file:
log_allocate_file_header_buffers	log/log0log.cc	/^static void log_allocate_file_header_buffers(log_t &log) {$/;"	f	file:
log_allocate_flush_events	log/log0log.cc	/^static void log_allocate_flush_events(log_t &log) {$/;"	f	file:
log_allocate_recent_closed	log/log0log.cc	/^static void log_allocate_recent_closed(log_t &log) {$/;"	f	file:
log_allocate_recent_written	log/log0log.cc	/^static void log_allocate_recent_written(log_t &log) {$/;"	f	file:
log_allocate_write_ahead_buffer	log/log0log.cc	/^static void log_allocate_write_ahead_buffer(log_t &log) {$/;"	f	file:
log_allocate_write_events	log/log0log.cc	/^static void log_allocate_write_events(log_t &log) {$/;"	f	file:
log_archiver_thread	arch/arch0arch.cc	/^void log_archiver_thread() {$/;"	f
log_archiver_thread_event	arch/arch0arch.cc	/^os_event_t log_archiver_thread_event;$/;"	v
log_archiver_thread_key	srv/srv0start.cc	/^mysql_pfs_key_t log_archiver_thread_key;$/;"	v
log_background_threads_active_validate	log/log0log.cc	/^void log_background_threads_active_validate(const log_t &log) {$/;"	f
log_background_threads_inactive_validate	log/log0log.cc	/^void log_background_threads_inactive_validate(const log_t &log) {$/;"	f
log_background_write_threads_active_validate	log/log0log.cc	/^void log_background_write_threads_active_validate(const log_t &log) {$/;"	f
log_block_checksum_is_ok	log/log0recv.cc	/^    log_block_checksum_is_ok(const byte *block) {$/;"	f	file:
log_buffer_close	log/log0buf.cc	/^void log_buffer_close(log_t &log, const Log_handle &handle) {$/;"	f
log_buffer_flush_to_disk	log/log0buf.cc	/^void log_buffer_flush_to_disk(log_t &log, bool sync) {$/;"	f
log_buffer_get_last_block	log/log0buf.cc	/^void log_buffer_get_last_block(log_t &log, lsn_t &last_lsn, byte *last_block,$/;"	f
log_buffer_reserve	log/log0buf.cc	/^Log_handle log_buffer_reserve(log_t &log, size_t len) {$/;"	f
log_buffer_resize	log/log0log.cc	/^bool log_buffer_resize(log_t &log, size_t new_size) {$/;"	f
log_buffer_resize_low	log/log0log.cc	/^bool log_buffer_resize_low(log_t &log, size_t new_size, lsn_t end_lsn) {$/;"	f
log_buffer_s_lock_enter_reserve	log/log0buf.cc	/^static inline sn_t log_buffer_s_lock_enter_reserve(log_t &log, size_t len) {$/;"	f	file:
log_buffer_s_lock_exit_close	log/log0buf.cc	/^static inline void log_buffer_s_lock_exit_close(log_t &log, lsn_t start_lsn,$/;"	f	file:
log_buffer_s_lock_wait	log/log0buf.cc	/^static inline void log_buffer_s_lock_wait(log_t &log, const sn_t start_sn) {$/;"	f	file:
log_buffer_set_first_record_group	log/log0buf.cc	/^void log_buffer_set_first_record_group(log_t &log, const Log_handle &handle,$/;"	f
log_buffer_sync_in_background	log/log0buf.cc	/^void log_buffer_sync_in_background() {$/;"	f
log_buffer_write	log/log0buf.cc	/^lsn_t log_buffer_write(log_t &log, const Log_handle &handle, const byte *str,$/;"	f
log_buffer_write_completed	log/log0buf.cc	/^void log_buffer_write_completed(log_t &log, const Log_handle &handle,$/;"	f
log_buffer_x_lock_enter	log/log0buf.cc	/^void log_buffer_x_lock_enter(log_t &log) {$/;"	f
log_buffer_x_lock_exit	log/log0buf.cc	/^void log_buffer_x_lock_exit(log_t &log) {$/;"	f
log_calc_buf_size	log/log0log.cc	/^static void log_calc_buf_size(log_t &log) {$/;"	f	file:
log_calc_concurrency_margin	log/log0chkp.cc	/^bool log_calc_concurrency_margin(log_t &log) {$/;"	f
log_calc_max_ages	log/log0chkp.cc	/^void log_calc_max_ages(log_t &log) {$/;"	f
log_checkpoint	log/log0chkp.cc	/^static void log_checkpoint(log_t &log) {$/;"	f	file:
log_checkpoint_time_elapsed	log/log0chkp.cc	/^static uint64_t log_checkpoint_time_elapsed(const log_t &log) {$/;"	f	file:
log_checkpointer	log/log0chkp.cc	/^void log_checkpointer(log_t *log_ptr) {$/;"	f
log_checkpointer_mutex_enter	include/log0log.h	1194;"	d
log_checkpointer_mutex_exit	include/log0log.h	1197;"	d
log_checkpointer_mutex_key	sync/sync0sync.cc	/^mysql_pfs_key_t log_checkpointer_mutex_key;$/;"	v
log_checkpointer_mutex_own	include/log0log.h	1199;"	d
log_checkpointer_thread_key	log/log0log.cc	/^mysql_pfs_key_t log_checkpointer_thread_key;$/;"	v
log_checksum_algorithm_ptr	log/log0log.cc	/^log_checksum_func_t log_checksum_algorithm_ptr;$/;"	v
log_checksum_func_t	include/log0types.h	/^typedef std::atomic<uint32_t (*)(const byte *log_block)> log_checksum_func_t;$/;"	t
log_closer_mutex_enter	include/log0log.h	1202;"	d
log_closer_mutex_enter_nowait	include/log0log.h	1204;"	d
log_closer_mutex_exit	include/log0log.h	1207;"	d
log_closer_mutex_key	sync/sync0sync.cc	/^mysql_pfs_key_t log_closer_mutex_key;$/;"	v
log_cmdq_mutex_key	sync/sync0sync.cc	/^mysql_pfs_key_t log_cmdq_mutex_key;$/;"	v
log_compute_available_for_checkpoint_lsn	log/log0chkp.cc	/^static lsn_t log_compute_available_for_checkpoint_lsn(const log_t &log) {$/;"	f	file:
log_compute_flush_event_slot	log/log0write.cc	/^static inline size_t log_compute_flush_event_slot(const log_t &log, lsn_t lsn) {$/;"	f	file:
log_compute_wait_event_slot	log/log0write.cc	/^static inline size_t log_compute_wait_event_slot(lsn_t lsn, size_t events_n) {$/;"	f	file:
log_compute_write_event_slot	log/log0write.cc	/^static inline size_t log_compute_write_event_slot(const log_t &log, lsn_t lsn) {$/;"	f	file:
log_consider_checkpoint	log/log0chkp.cc	/^static void log_consider_checkpoint(log_t &log) {$/;"	f	file:
log_consider_sync_flush	log/log0chkp.cc	/^static void log_consider_sync_flush(log_t &log) {$/;"	f	file:
log_control_writer_threads	log/log0log.cc	/^void log_control_writer_threads(log_t &log) {$/;"	f
log_create_first_checkpoint	log/log0chkp.cc	/^void log_create_first_checkpoint(log_t &log, lsn_t lsn) {$/;"	f
log_ddl	log/log0ddl.cc	/^Log_DDL *log_ddl = nullptr;$/;"	v
log_deallocate_buffer	log/log0log.cc	/^static void log_deallocate_buffer(log_t &log) { log.buf.destroy(); }$/;"	f	file:
log_deallocate_checkpoint_buffer	log/log0log.cc	/^static void log_deallocate_checkpoint_buffer(log_t &log) {$/;"	f	file:
log_deallocate_file_header_buffers	log/log0log.cc	/^static void log_deallocate_file_header_buffers(log_t &log) {$/;"	f	file:
log_deallocate_flush_events	log/log0log.cc	/^static void log_deallocate_flush_events(log_t &log) {$/;"	f	file:
log_deallocate_recent_closed	log/log0log.cc	/^static void log_deallocate_recent_closed(log_t &log) {$/;"	f	file:
log_deallocate_recent_written	log/log0log.cc	/^static void log_deallocate_recent_written(log_t &log) {$/;"	f	file:
log_deallocate_write_ahead_buffer	log/log0log.cc	/^static void log_deallocate_write_ahead_buffer(log_t &log) {$/;"	f	file:
log_deallocate_write_events	log/log0log.cc	/^static void log_deallocate_write_events(log_t &log) {$/;"	f	file:
log_determine_checkpoint_lsn	log/log0chkp.cc	/^static lsn_t log_determine_checkpoint_lsn(log_t &log) {$/;"	f	file:
log_error_invalid_location	handler/ha_innodb.cc	/^void create_table_info_t::log_error_invalid_location(std::string &msg,$/;"	f	class:create_table_info_t
log_event	ut/ut0ut.cc	/^void logger::log_event(std::string msg) {$/;"	f	class:ib::logger
log_file_header_fill_encryption	log/log0write.cc	/^bool log_file_header_fill_encryption(byte *buf, byte *key, byte *iv,$/;"	f
log_file_name	include/trx0purge.h	/^  char *log_file_name() {$/;"	f	struct:undo::Tablespace
log_files_downgrade	log/log0chkp.cc	/^void log_files_downgrade(log_t &log) {$/;"	f
log_files_header_fill	log/log0chkp.cc	/^void log_files_header_fill(byte *buf, lsn_t start_lsn, const char *creator,$/;"	f
log_files_header_flush	log/log0chkp.cc	/^void log_files_header_flush(log_t &log, uint32_t nth_file, lsn_t start_lsn) {$/;"	f
log_files_header_read	log/log0chkp.cc	/^void log_files_header_read(log_t &log, uint32_t header) {$/;"	f
log_files_real_offset	log/log0write.cc	/^uint64_t log_files_real_offset(const log_t &log, uint64_t offset) {$/;"	f
log_files_real_offset_for_lsn	log/log0write.cc	/^uint64_t log_files_real_offset_for_lsn(const log_t &log, lsn_t lsn) {$/;"	f
log_files_size_offset	log/log0write.cc	/^uint64_t log_files_size_offset(const log_t &log, uint64_t offset) {$/;"	f
log_files_update_offsets	log/log0write.cc	/^void log_files_update_offsets(log_t &log, lsn_t lsn) {$/;"	f
log_files_write_buffer	log/log0write.cc	/^static void log_files_write_buffer(log_t &log, byte *buffer, size_t buffer_size,$/;"	f	file:
log_files_write_checkpoint	log/log0chkp.cc	/^void log_files_write_checkpoint(log_t &log, lsn_t next_checkpoint_lsn) {$/;"	f
log_flush_low	log/log0write.cc	/^static void log_flush_low(log_t &log) {$/;"	f	file:
log_flush_notifier	log/log0write.cc	/^void log_flush_notifier(log_t *log_ptr) {$/;"	f
log_flush_notifier_mutex_enter	include/log0log.h	1219;"	d
log_flush_notifier_mutex_exit	include/log0log.h	1222;"	d
log_flush_notifier_mutex_key	sync/sync0sync.cc	/^mysql_pfs_key_t log_flush_notifier_mutex_key;$/;"	v
log_flush_notifier_mutex_own	include/log0log.h	1225;"	d
log_flush_notifier_thread_key	log/log0log.cc	/^mysql_pfs_key_t log_flush_notifier_thread_key;$/;"	v
log_flush_update_stats	log/log0write.cc	/^static void log_flush_update_stats(log_t &log) {$/;"	f	file:
log_flusher	log/log0write.cc	/^void log_flusher(log_t *log_ptr) {$/;"	f
log_flusher_mutex_enter	include/log0log.h	1209;"	d
log_flusher_mutex_enter_nowait	include/log0log.h	1211;"	d
log_flusher_mutex_exit	include/log0log.h	1214;"	d
log_flusher_mutex_key	sync/sync0sync.cc	/^mysql_pfs_key_t log_flusher_mutex_key;$/;"	v
log_flusher_mutex_own	include/log0log.h	1216;"	d
log_flusher_thread_key	log/log0log.cc	/^mysql_pfs_key_t log_flusher_thread_key;$/;"	v
log_flushes_t	include/log0types.h	/^typedef std::atomic<int64_t> log_flushes_t;$/;"	t
log_free_check_margin	log/log0chkp.cc	/^static lsn_t log_free_check_margin(const log_t &log) {$/;"	f	file:
log_free_check_validate	log/log0log.cc	/^void log_free_check_validate() {$/;"	f
log_free_check_wait	log/log0chkp.cc	/^void log_free_check_wait(log_t &log) {$/;"	f
log_fsync	log/log0chkp.cc	/^static void log_fsync() {$/;"	f	file:
log_get_free_check_capacity	log/log0chkp.cc	/^lsn_t log_get_free_check_capacity(const log_t &log) {$/;"	f
log_get_max_modified_age_async	log/log0chkp.cc	/^lsn_t log_get_max_modified_age_async(const log_t &log) {$/;"	f
log_header_creator	log/log0recv.cc	/^static char log_header_creator[LOG_HEADER_CREATOR_END - LOG_HEADER_CREATOR + 1];$/;"	v	file:
log_header_format_t	include/log0types.h	/^enum log_header_format_t {$/;"	g
log_increase_concurrency_margin	log/log0chkp.cc	/^void log_increase_concurrency_margin(log_t &log) {$/;"	f
log_limits_mutex_enter	include/log0log.h	1247;"	d
log_limits_mutex_exit	include/log0log.h	1249;"	d
log_limits_mutex_key	sync/sync0sync.cc	/^mysql_pfs_key_t log_limits_mutex_key;$/;"	v
log_limits_mutex_own	include/log0log.h	1251;"	d
log_make_latest_checkpoint	log/log0chkp.cc	/^bool log_make_latest_checkpoint() {$/;"	f
log_make_latest_checkpoint	log/log0chkp.cc	/^bool log_make_latest_checkpoint(log_t &log) {$/;"	f
log_max_spins_when_waiting_in_user_thread	log/log0write.cc	/^static inline uint64_t log_max_spins_when_waiting_in_user_thread($/;"	f	file:
log_mutex_enter	log/log0recv.cc	128;"	d	file:
log_mutex_enter	log/log0recv.cc	130;"	d	file:
log_mutex_exit	log/log0recv.cc	129;"	d	file:
log_mutex_exit	log/log0recv.cc	131;"	d	file:
log_page_type	include/lob0ins.h	/^  void log_page_type() {$/;"	f	class:lob::Inserter
log_page_type	include/lob0zip.h	/^  void log_page_type(page_t *blob_page, ulint nth_blob_page) {$/;"	f	class:lob::zInserter
log_pause_writer_threads	log/log0log.cc	/^static void log_pause_writer_threads(log_t &log) {$/;"	f	file:
log_persist_crash_safe	log/log0chkp.cc	/^void log_persist_crash_safe(log_t &log) {$/;"	f
log_persist_disable	log/log0chkp.cc	/^void log_persist_disable(log_t &log) {$/;"	f
log_persist_enable	log/log0chkp.cc	/^void log_persist_enable(log_t &log) {$/;"	f
log_pos	row/row0log.cc	1250;"	d	file:
log_position_collect_lsn_info	log/log0log.cc	/^void log_position_collect_lsn_info(const log_t &log, lsn_t *current_lsn,$/;"	f
log_position_lock	log/log0log.cc	/^void log_position_lock(log_t &log) {$/;"	f
log_position_unlock	log/log0log.cc	/^void log_position_unlock(log_t &log) {$/;"	f
log_print	log/log0log.cc	/^void log_print(const log_t &log, FILE *file) {$/;"	f
log_read_encryption	log/log0write.cc	/^bool log_read_encryption() {$/;"	f
log_refresh_stats	log/log0log.cc	/^void log_refresh_stats(log_t &log) {$/;"	f
log_request_checkpoint	log/log0chkp.cc	/^void log_request_checkpoint(log_t &log, bool sync) {$/;"	f
log_request_checkpoint_low	log/log0chkp.cc	/^static void log_request_checkpoint_low(log_t &log, lsn_t requested_lsn) {$/;"	f	file:
log_request_checkpoint_validate	log/log0chkp.cc	/^static bool log_request_checkpoint_validate(const log_t &log) {$/;"	f	file:
log_request_sync_flush	log/log0chkp.cc	/^static bool log_request_sync_flush(const log_t &log, lsn_t new_oldest) {$/;"	f	file:
log_resume_writer_threads	log/log0log.cc	/^static void log_resume_writer_threads(log_t &log) {$/;"	f	file:
log_rotate_encryption	log/log0write.cc	/^bool log_rotate_encryption() {$/;"	f
log_self_write_up_to	log/log0write.cc	/^static Wait_stats log_self_write_up_to(log_t &log, lsn_t end_lsn,$/;"	f	file:
log_set_dict_max_allowed_checkpoint_lsn	log/log0chkp.cc	/^void log_set_dict_max_allowed_checkpoint_lsn(log_t &log, lsn_t max_lsn) {$/;"	f
log_set_dict_persist_margin	log/log0chkp.cc	/^void log_set_dict_persist_margin(log_t &log, sn_t margin) {$/;"	f
log_should_checkpoint	log/log0chkp.cc	/^static bool log_should_checkpoint(log_t &log) {$/;"	f	file:
log_sn_lock_key	sync/sync0sync.cc	/^mysql_pfs_key_t log_sn_lock_key;$/;"	v
log_sn_mutex_key	sync/sync0sync.cc	/^mysql_pfs_key_t log_sn_mutex_key;$/;"	v
log_start	log/log0log.cc	/^void log_start(log_t &log, checkpoint_no_t checkpoint_no, lsn_t checkpoint_lsn,$/;"	f
log_start_background_threads	log/log0log.cc	/^void log_start_background_threads(log_t &log) {$/;"	f
log_state_t	include/log0types.h	/^enum class log_state_t {$/;"	c
log_stop_background_threads	log/log0log.cc	/^void log_stop_background_threads(log_t &log) {$/;"	f
log_stop_background_threads_nowait	log/log0log.cc	/^void log_stop_background_threads_nowait(log_t &log) {$/;"	f
log_sync_flush_lsn	log/log0chkp.cc	/^lsn_t log_sync_flush_lsn(log_t &log) {$/;"	f
log_sys	log/log0log.cc	/^log_t *log_sys;$/;"	v
log_sys_arch_mutex_key	sync/sync0sync.cc	/^mysql_pfs_key_t log_sys_arch_mutex_key;$/;"	v
log_sys_close	log/log0log.cc	/^void log_sys_close() {$/;"	f
log_sys_init	log/log0log.cc	/^bool log_sys_init(uint32_t n_files, uint64_t file_size, space_id_t space_id) {$/;"	f
log_sys_object	log/log0log.cc	/^aligned_pointer<log_t> *log_sys_object;$/;"	v
log_test	log/log0test.cc	/^std::unique_ptr<Log_test> log_test;$/;"	v
log_update_available_for_checkpoint_lsn	log/log0chkp.cc	/^static lsn_t log_update_available_for_checkpoint_lsn(log_t &log) {$/;"	f	file:
log_update_buf_limit	log/log0buf.cc	/^void log_update_buf_limit(log_t &log) {$/;"	f
log_update_buf_limit	log/log0buf.cc	/^void log_update_buf_limit(log_t &log, lsn_t write_lsn) {$/;"	f
log_update_limits	log/log0chkp.cc	/^void log_update_limits(log_t &log) {$/;"	f
log_update_limits_low	log/log0chkp.cc	/^static void log_update_limits_low(log_t &log) {$/;"	f	file:
log_wait_for_checkpoint	log/log0chkp.cc	/^static void log_wait_for_checkpoint(const log_t &log, lsn_t requested_lsn) {$/;"	f	file:
log_wait_for_flush	log/log0write.cc	/^static Wait_stats log_wait_for_flush(const log_t &log, lsn_t lsn,$/;"	f	file:
log_wait_for_space_after_reserving	log/log0buf.cc	/^static void log_wait_for_space_after_reserving(log_t &log,$/;"	f	file:
log_wait_for_space_in_log_buf	log/log0buf.cc	/^void log_wait_for_space_in_log_buf(log_t &log, sn_t end_sn) {$/;"	f
log_wait_for_space_in_log_recent_closed	log/log0buf.cc	/^void log_wait_for_space_in_log_recent_closed(log_t &log, lsn_t lsn) {$/;"	f
log_wait_for_write	log/log0write.cc	/^static Wait_stats log_wait_for_write(const log_t &log, lsn_t lsn,$/;"	f	file:
log_waits	include/srv0srv.h	/^  ulint_ctr_1_t log_waits;$/;"	m	struct:srv_stats_t
log_wake_threads	log/log0log.cc	/^void log_wake_threads(log_t &log) {$/;"	f
log_write_ahead_resize	log/log0log.cc	/^void log_write_ahead_resize(log_t &log, size_t new_size) {$/;"	f
log_write_encryption	log/log0write.cc	/^bool log_write_encryption(byte *key, byte *iv, bool is_boot) {$/;"	f
log_write_notifier	log/log0write.cc	/^void log_write_notifier(log_t *log_ptr) {$/;"	f
log_write_notifier_mutex_enter	include/log0log.h	1238;"	d
log_write_notifier_mutex_exit	include/log0log.h	1241;"	d
log_write_notifier_mutex_key	sync/sync0sync.cc	/^mysql_pfs_key_t log_write_notifier_mutex_key;$/;"	v
log_write_notifier_mutex_own	include/log0log.h	1244;"	d
log_write_notifier_thread_key	log/log0log.cc	/^mysql_pfs_key_t log_write_notifier_thread_key;$/;"	v
log_write_requests	include/srv0srv.h	/^  ulint_ctr_1_t log_write_requests;$/;"	m	struct:srv_stats_t
log_write_up_to	log/log0write.cc	/^Wait_stats log_write_up_to(log_t &log, lsn_t end_lsn, bool flush_to_disk) {$/;"	f
log_writer	log/log0write.cc	/^void log_writer(log_t *log_ptr) {$/;"	f
log_writer_mutex_enter	include/log0log.h	1228;"	d
log_writer_mutex_enter_nowait	include/log0log.h	1230;"	d
log_writer_mutex_exit	include/log0log.h	1233;"	d
log_writer_mutex_key	sync/sync0sync.cc	/^mysql_pfs_key_t log_writer_mutex_key;$/;"	v
log_writer_mutex_own	include/log0log.h	1235;"	d
log_writer_mutex_own	log/log0write.cc	1295;"	d	file:
log_writer_thread_active_validate	log/log0log.cc	/^void log_writer_thread_active_validate(const log_t &log) {$/;"	f
log_writer_thread_key	log/log0log.cc	/^mysql_pfs_key_t log_writer_thread_key;$/;"	v
log_writer_wait_on_archiver	log/log0write.cc	/^static void log_writer_wait_on_archiver(log_t &log, lsn_t last_write_lsn,$/;"	f	file:
log_writer_wait_on_checkpoint	log/log0write.cc	/^static lsn_t log_writer_wait_on_checkpoint(log_t &log, lsn_t last_write_lsn,$/;"	f	file:
log_writer_write_buffer	log/log0write.cc	/^static void log_writer_write_buffer(log_t &log, lsn_t next_write_lsn) {$/;"	f	file:
log_writes	include/srv0srv.h	/^  ulint_ctr_1_t log_writes;$/;"	m	struct:srv_stats_t
logger	include/ut0ut.h	/^  explicit logger(loglevel level) : m_err(ER_IB_MSG_0), m_level(level) {}$/;"	f	class:ib::logger
logger	include/ut0ut.h	/^  explicit logger(loglevel level, int err, Args &&... args)$/;"	f	class:ib::logger
logger	include/ut0ut.h	/^  logger(loglevel level, int err) : m_err(err), m_level(level) {$/;"	f	class:ib::logger
logger	include/ut0ut.h	/^class logger {$/;"	c	namespace:ib
logical	include/page0size.h	/^  inline size_t logical() const {$/;"	f	class:page_size_t
lookup	buf/buf0buf.cc	/^buf_block_t *Buf_fetch<T>::lookup() {$/;"	f	class:Buf_fetch
lookup_for_recovery	fil/fil0fil.cc	/^bool Fil_system::lookup_for_recovery(space_id_t space_id) {$/;"	f	class:Fil_system
lookup_table_handler	include/sess0sess.h	/^  dict_table_t *lookup_table_handler(const char *table_name) {$/;"	f	class:innodb_session_t
loop_end_limit	include/pars0pars.h	/^  que_node_t *loop_end_limit;   \/*!< end value of loop variable *\/$/;"	m	struct:for_node_t
loop_end_value	include/pars0pars.h	/^  lint loop_end_value;          \/*!< evaluated value for the end value:$/;"	m	struct:for_node_t
loop_start_limit	include/pars0pars.h	/^  que_node_t *loop_start_limit; \/*!< initial value of loop variable *\/$/;"	m	struct:for_node_t
loop_var	include/pars0pars.h	/^  sym_node_t *loop_var;         \/*!< loop variable: this is the$/;"	m	struct:for_node_t
low_limit_id	include/read0types.h	/^  trx_id_t low_limit_id() const { return (m_low_limit_id); }$/;"	f	class:ReadView
low_limit_no	include/read0types.h	/^  trx_id_t low_limit_no() const { return (m_low_limit_no); }$/;"	f	class:ReadView
lower_doc_id	fts/fts0que.cc	/^  doc_id_t lower_doc_id; \/*!< Lowest doc id in doc_ids *\/$/;"	m	struct:fts_query_t	file:
lower_index	include/fts0types.h	/^  ulint lower_index;    \/*!< the start index of the doc id$/;"	m	struct:fts_sync_t
lru_hp	include/buf0buf.h	/^  LRUHp lru_hp;$/;"	m	struct:Cache_hint::buf_pool_t
lru_len	include/buf0buf.h	/^  ulint lru_len;                     \/*!< Length of buf_pool->LRU *\/$/;"	m	struct:Cache_hint::buf_pool_info_t
lru_scan_itr	include/buf0buf.h	/^  LRUItr lru_scan_itr;$/;"	m	struct:Cache_hint::buf_pool_t
lsn	include/log0recv.h	/^    lsn_t lsn;$/;"	m	struct:recv_sys_t::Encryption_Key
lsn_avg_rate	buf/buf0flu.cc	/^lsn_t lsn_avg_rate = 0;$/;"	m	namespace:Adaptive_flush	file:
lsn_ctr_1_t	include/srv0srv.h	/^  typedef ib_counter_t<lsn_t, 1, single_indexer_t> lsn_ctr_1_t;$/;"	t	struct:srv_stats_t
lsn_limit	buf/buf0flu.cc	/^  lsn_t lsn_limit;         \/*!< upper limit of LSN to be$/;"	m	struct:page_cleaner_t	file:
lsn_t	include/log0types.h	/^typedef uint64_t lsn_t;$/;"	t
m_LRU	fil/fil0fil.cc	/^  File_list m_LRU;$/;"	m	class:Fil_shard	file:
m_abs_path	include/fil0fil.h	/^  std::string m_abs_path;$/;"	m	class:Fil_path
m_ack_state	include/clone0clone.h	/^  Snapshot_State m_ack_state;$/;"	m	class:Clone_Task_Manager
m_active	include/clone0repl.h	/^  std::atomic<bool> m_active;$/;"	m	class:Clone_persist_gtid
m_active	include/srv0tmp.h	/^  Pool *m_active;$/;"	m	class:ibt::Tablespace_pool
m_active	include/sync0types.h	/^  LatchCounter() UNIV_NOTHROW : m_active(false) { m_mutex.init(); }$/;"	f	class:LatchCounter
m_active	include/sync0types.h	/^  bool m_active;$/;"	m	class:LatchCounter
m_active	include/ut0bool_scope_guard.h	/^  bool *m_active;$/;"	m	class:ut::bool_scope_guard_t
m_active_file	include/arch0arch.h	/^  pfs_os_file_t m_active_file;$/;"	m	class:Arch_Group
m_active_number	include/clone0repl.h	/^  std::atomic<uint64_t> m_active_number;$/;"	m	class:Clone_persist_gtid
m_aio_ctx	os/os0file.cc	/^  io_context_t *m_aio_ctx;$/;"	m	class:AIO	file:
m_algorithm	os/file.h	/^    Type m_algorithm;$/;"	m	struct:Compression::meta_t
m_alloc_len	include/clone0clone.h	/^  uint m_alloc_len;$/;"	m	struct:Clone_Task
m_alloc_size	include/clone0desc.h	/^  uint64_t m_alloc_size;$/;"	m	struct:Clone_File_Meta
m_alloc_size	include/os0file.h	/^  os_offset_t m_alloc_size;$/;"	m	struct:os_file_size_t
m_allow_file_per_table	handler/ha_innodb.h	/^  bool m_allow_file_per_table;$/;"	m	class:create_table_info_t
m_allow_new_clone	include/clone0snapshot.h	/^  bool m_allow_new_clone;$/;"	m	class:Clone_Snapshot
m_allow_restart	include/clone0clone.h	/^  bool m_allow_restart;$/;"	m	class:Clone_Handle
m_already_failed	include/trx0purge.h	/^  bool m_already_failed;$/;"	m	class:undo::Inject_failure_once
m_arch_dir_name	include/arch0recv.h	/^  std::string m_arch_dir_name;$/;"	m	class:Arch_Page_Sys::Recv
m_arch_mutex	include/arch0arch.h	/^  ib_mutex_t *m_arch_mutex;$/;"	m	class:Arch_Group
m_archived_lsn	include/arch0arch.h	/^  atomic_lsn_t m_archived_lsn;$/;"	m	class:Arch_Log_Sys
m_array	os/os0file.cc	/^  AIO *m_array;$/;"	m	class:LinuxAIOHandler	file:
m_array	os/os0file.cc	/^  AIO *m_array;$/;"	m	class:SimulatedAIOHandler	file:
m_atomic_write	include/fsp0file.h	/^  bool m_atomic_write;$/;"	m	class:Datafile
m_auto_extend_last_file	include/fsp0sysspace.h	/^  bool m_auto_extend_last_file;$/;"	m	class:SysTablespace
m_autoextend_size	include/fsp0space.h	/^  uint64_t m_autoextend_size;$/;"	m	class:Tablespace
m_autoinc	handler/handler0alter.cc	/^  const ib_uint64_t m_autoinc;$/;"	m	class:alter_part_add	file:
m_autoinc	handler/handler0alter.cc	/^  const ib_uint64_t m_autoinc;$/;"	m	class:alter_part_change	file:
m_autoinc	include/dict0mem.h	/^  uint64_t m_autoinc;$/;"	m	class:PersistentTableMetadata
m_autoinc	row/row0import.cc	/^  ib_uint64_t m_autoinc; \/*!< Next autoinc value *\/$/;"	m	struct:row_import	file:
m_backup_log_archiver	include/srv0srv.h	/^  IB_thread m_backup_log_archiver;$/;"	m	struct:Srv_threads
m_base	include/lob0impl.h	/^  byte *m_base;$/;"	m	struct:lob::plist_base_node_t
m_base	include/ut0lock_free_hash.h	/^  T *m_base;$/;"	m	class:ut_lock_free_list_node_t
m_begin_chunk	include/clone0desc.h	/^  uint m_begin_chunk;$/;"	m	struct:Clone_File_Meta
m_begin_lsn	include/arch0log.h	/^  lsn_t m_begin_lsn;$/;"	m	class:Log_Arch_Client_Ctx
m_being_modified	include/lob0lob.h	/^  bool m_being_modified;$/;"	m	struct:lob::ref_mem_t
m_big_rec_vec	include/lob0lob.h	/^  const big_rec_t *m_big_rec_vec;$/;"	m	struct:lob::InsertContext
m_big_rec_vec	lob/lob0lob.cc	/^  const big_rec_t *m_big_rec_vec;$/;"	m	struct:lob::Being_modified	file:
m_bit_mask	include/clone0desc.h	/^    uint32_t m_bit_mask;$/;"	m	class:Chnunk_Bitmap::Bitmap_Operator_Impl
m_bitmap	include/clone0desc.h	/^  uint32_t *m_bitmap;$/;"	m	class:Chnunk_Bitmap
m_bitmap_ref	include/clone0desc.h	/^    uint32_t *&m_bitmap_ref;$/;"	m	class:Chnunk_Bitmap::Bitmap_Operator_Impl
m_bits	include/clone0desc.h	/^  uint32_t m_bits;$/;"	m	class:Chnunk_Bitmap
m_bitset	handler/ha_innopart.h	/^  byte *m_bitset;$/;"	m	class:ha_innopart
m_bitset	handler/handler0alter.cc	/^  byte *m_bitset;$/;"	m	class:Altered_partitions	file:
m_bitset	include/ut0bitset.h	/^  byte *m_bitset;$/;"	m	class:Bitset
m_blob_heap_parts	handler/ha_innopart.h	/^  mem_heap_t **m_blob_heap_parts;$/;"	m	class:ha_innopart
m_blob_mtr	include/lob0ins.h	/^  mtr_t m_blob_mtr;$/;"	m	struct:lob::BaseInserter
m_blobref	include/lob0lob.h	/^  const ref_t m_blobref;$/;"	m	struct:lob::ReadContext
m_blobref	include/lob0lob.h	/^  ref_t m_blobref;$/;"	m	struct:lob::DeleteContext
m_blobref_mem	include/lob0lob.h	/^  ref_mem_t m_blobref_mem;$/;"	m	struct:lob::DeleteContext
m_block	include/arch0recv.h	/^  byte *m_block;$/;"	m	struct:Arch_Dblwr_Block
m_block	include/btr0bulk.h	/^  buf_block_t *m_block;$/;"	m	class:PageBulk
m_block	include/lob0impl.h	/^  buf_block_t *m_block;$/;"	m	struct:lob::z_data_page_t
m_block	include/lob0impl.h	/^  buf_block_t *m_block;$/;"	m	struct:lob::z_frag_node_page_t
m_block	include/lob0impl.h	/^  buf_block_t *m_block;$/;"	m	struct:lob::z_frag_page_t
m_block	include/lob0impl.h	/^  buf_block_t *m_block;$/;"	m	struct:lob::z_index_page_t
m_block	include/lob0index.h	/^  buf_block_t *m_block;$/;"	m	struct:lob::index_entry_t
m_block	include/lob0lob.h	/^  buf_block_t *m_block;$/;"	m	class:lob::BtrContext
m_block	include/lob0util.h	/^  buf_block_t *m_block;$/;"	m	struct:lob::basic_page_t
m_block	include/zlob0first.h	/^  buf_block_t *m_block;$/;"	m	struct:lob::z_first_page_t
m_block	include/zlob0index.h	/^  buf_block_t *m_block;$/;"	m	struct:lob::z_index_entry_t
m_block	log/log0meb.cc	/^  byte m_block[QUEUE_BLOCK_SIZE];$/;"	m	class:meb::Block	file:
m_block_num	include/arch0arch.h	/^  uint64_t m_block_num;$/;"	m	struct:Arch_Page_Pos
m_block_num	include/arch0recv.h	/^  uint64_t m_block_num;$/;"	m	struct:Arch_Dblwr_Block
m_block_num	include/clone0desc.h	/^  uint m_block_num;$/;"	m	struct:Clone_Task_Meta
m_block_size_pow2	include/clone0snapshot.h	/^  uint m_block_size_pow2;$/;"	m	class:Clone_Snapshot
m_block_type	include/arch0recv.h	/^  Arch_Blk_Type m_block_type;$/;"	m	struct:Arch_Dblwr_Block
m_block_when_stored	include/btr0pcur.h	/^  buf::Block_hint m_block_when_stored;$/;"	m	struct:btr_pcur_t
m_bpage	include/lob0lob.h	/^  buf_page_t *m_bpage;$/;"	m	struct:lob::zReader
m_btr_ctx	lob/lob0lob.cc	/^  BtrContext &m_btr_ctx;$/;"	m	struct:lob::Being_modified	file:
m_btr_cur	include/btr0pcur.h	/^  btr_cur_t m_btr_cur;$/;"	m	struct:btr_pcur_t
m_btr_page_no	include/lob0lob.h	/^  page_no_t m_btr_page_no;$/;"	m	class:lob::BtrContext
m_buf	include/dyn0buf.h	/^  mtr_buf_t m_buf;$/;"	m	struct:mtr_buf_copy_t
m_buf	include/lob0lob.h	/^  byte *m_buf;$/;"	m	struct:lob::ReadContext
m_buf	include/log0test.h	/^  std::map<lsn_t, Page> m_buf;$/;"	m	class:Log_test::Options
m_buf	os/os0file.cc	/^  byte *m_buf;$/;"	m	class:SimulatedAIOHandler	file:
m_buf	os/os0file.cc	/^  void *m_buf;$/;"	m	class:SyncFileIO	file:
m_buf	ut/ut.h	/^  const void *m_buf;$/;"	m	struct:PrintBuffer
m_buf_dump	include/srv0srv.h	/^  IB_thread m_buf_dump;$/;"	m	struct:Srv_threads
m_buf_end	include/dyn0buf.h	/^    ulint m_buf_end;$/;"	m	class:dyn_buf_t::block_t
m_buf_pages	buf/buf0dblwr.cc	/^    : m_id(id), m_buffer(n_pages), m_buf_pages(n_pages) {$/;"	f
m_buf_pages	buf/buf0dblwr.cc	/^  Buf_pages m_buf_pages;$/;"	m	class:Double_write	file:
m_buf_pool	include/buf0buf.h	/^  const buf_pool_t *m_buf_pool;$/;"	m	class:Cache_hint::HazardPointer
m_buf_resize	include/srv0srv.h	/^  IB_thread m_buf_resize;$/;"	m	struct:Srv_threads
m_buffer	buf/buf0dblwr.cc	/^  Buffer m_buffer;$/;"	m	class:Double_write	file:
m_buffer	buf/buf0dblwr.cc	/^  dblwr::Buffer m_buffer;$/;"	m	struct:dblwr::recv::Page	file:
m_buffer	include/row0pread-adapter.h	/^    std::vector<byte, ut_allocator<byte>> m_buffer;$/;"	m	struct:Parallel_reader_adapter::Thread_ctx
m_buffer_alloc_len	include/clone0clone.h	/^  uint m_buffer_alloc_len;$/;"	m	struct:Clone_Task
m_bytes	include/lob0lob.h	/^  uint m_bytes;$/;"	m	struct:lob::blob_page_info_t
m_calls	handler/ha_innodb.cc	/^    uint64_t m_calls;$/;"	m	struct:ShowStatus::Value	file:
m_calls	include/sync0types.h	/^    uint32_t m_calls;$/;"	m	struct:LatchCounter::Count
m_capacity	include/ut0bitset.h	/^  size_t m_capacity;$/;"	m	class:Bitset
m_capacity	include/ut0link_buf.h	/^  size_t m_capacity;$/;"	m	class:Link_buf
m_capacity	include/ut0mpmcbq.h	/^  size_t const m_capacity;$/;"	m	class:mpmc_bq
m_cfg	row/row0import.cc	/^  row_import *m_cfg;$/;"	m	class:PageConverter	file:
m_cfp_missing	row/row0import.cc	/^                              m_cfp_missing(true) {}$/;"	f	struct:row_import
m_cfp_missing	row/row0import.cc	/^  bool m_cfp_missing; \/*!< true if a .cfp file was$/;"	m	struct:row_import	file:
m_check	include/row0row.h	/^  const bool m_check;$/;"	m	class:Multi_value_entry_builder_normal
m_check_lsn	include/buf0checksum.h	/^  bool m_check_lsn;$/;"	m	class:BlockReporter
m_checked	fil/fil0fil.cc	/^  std::atomic_size_t m_checked;$/;"	m	class:Tablespace_dirs	file:
m_chunk_info	include/clone0clone.h	/^  Chunk_Info m_chunk_info;$/;"	m	class:Clone_Task_Manager
m_chunk_num	include/clone0desc.h	/^  uint m_chunk_num;$/;"	m	struct:Clone_Task_Meta
m_chunk_size	include/arch0arch.h	/^  uint m_chunk_size;$/;"	m	class:Arch_Log_Sys
m_chunk_size_pow2	include/clone0snapshot.h	/^  uint m_chunk_size_pow2;$/;"	m	class:Clone_Snapshot
m_clone_arr	include/clone0clone.h	/^  Clone_Handle *m_clone_arr[CLONE_ARR_SIZE];$/;"	m	class:Clone_Sys
m_clone_arr_index	include/clone0clone.h	/^  uint m_clone_arr_index;$/;"	m	class:Clone_Handle
m_clone_desc_version	include/clone0clone.h	/^  uint m_clone_desc_version;$/;"	m	class:Clone_Handle
m_clone_dir	include/clone0clone.h	/^  const char *m_clone_dir;$/;"	m	class:Clone_Handle
m_clone_handle_state	include/clone0clone.h	/^  Clone_Handle_State m_clone_handle_state;$/;"	m	class:Clone_Handle
m_clone_handle_type	include/clone0clone.h	/^  Clone_Handle_Type m_clone_handle_type;$/;"	m	class:Clone_Handle
m_clone_id	include/clone0clone.h	/^  ib_uint64_t m_clone_id;$/;"	m	class:Clone_Handle
m_clone_id	include/clone0desc.h	/^  uint64_t m_clone_id;$/;"	m	struct:Clone_Desc_Locator
m_clone_id_generator	include/clone0clone.h	/^  uint64_t m_clone_id_generator;$/;"	m	class:Clone_Sys
m_clone_index	include/clone0desc.h	/^  uint32_t m_clone_index;$/;"	m	struct:Clone_Desc_Locator
m_clone_locator	include/clone0clone.h	/^  byte *m_clone_locator;$/;"	m	class:Clone_Handle
m_clone_snapshot	include/clone0clone.h	/^  Clone_Snapshot *m_clone_snapshot;$/;"	m	class:Clone_Task_Manager
m_clone_sys_mutex	include/clone0clone.h	/^  ib_mutex_t m_clone_sys_mutex;$/;"	m	class:Clone_Sys
m_clone_task_manager	include/clone0clone.h	/^  Clone_Task_Manager m_clone_task_manager;$/;"	m	class:Clone_Handle
m_clone_tasks	include/clone0clone.h	/^  Clone_Task m_clone_tasks[CLONE_MAX_TASKS];$/;"	m	class:Clone_Task_Manager
m_close_thread	include/clone0repl.h	/^  std::atomic<bool> m_close_thread;$/;"	m	class:Clone_persist_gtid
m_closed	include/read0types.h	/^  bool m_closed;$/;"	m	class:ReadView
m_clust_pcur	handler/ha_innopart.h	/^  btr_pcur_t *m_clust_pcur;$/;"	m	class:ha_innopart
m_clust_pcur_parts	handler/ha_innopart.h	/^  btr_pcur_t *m_clust_pcur_parts;$/;"	m	class:ha_innopart
m_cluster_index	row/row0import.cc	/^  dict_index_t *m_cluster_index;$/;"	m	class:PageConverter	file:
m_clustered_index_size	include/dict0stats.h	/^  ulint m_clustered_index_size;$/;"	m	class:TableStatsRecord
m_cnt	include/ut0lock_free_hash.h	/^  std::atomic<int64_t> **m_cnt;$/;"	m	class:ut_lock_free_cnt_t
m_cnt_size	include/ut0lock_free_hash.h	/^  size_t m_cnt_size;$/;"	m	class:ut_lock_free_cnt_t
m_col	include/dict0mem.h	/^  dict_col_t *m_col;$/;"	m	struct:dict_s_col_t
m_col	include/dict0mem.h	/^  dict_col_t m_col;$/;"	m	struct:dict_v_col_t
m_col_names	row/row0import.cc	/^  byte **m_col_names; \/*!< Column names, we store the$/;"	m	struct:row_import	file:
m_cols	row/row0import.cc	/^  dict_col_t *m_cols; \/*!< Column data *\/$/;"	m	struct:row_import	file:
m_commit_lsn	include/mtr0mtr.h	/^  lsn_t m_commit_lsn;$/;"	m	struct:mtr_t
m_comp_len	include/dict0sdi-decompress.h	/^  uint32_t m_comp_len;$/;"	m	class:Sdi_Decompressor
m_comp_len	include/dict0sdi.h	/^  uint32_t m_comp_len;$/;"	m	class:Sdi_Compressor
m_comp_sdi	include/dict0sdi-decompress.h	/^  byte *m_comp_sdi;$/;"	m	class:Sdi_Decompressor
m_comp_sdi	include/dict0sdi.h	/^  byte *m_comp_sdi;$/;"	m	class:Sdi_Compressor
m_compress_type	include/clone0desc.h	/^  Compression::Type m_compress_type;$/;"	m	struct:Clone_File_Meta
m_compressed_size	os/file.h	/^    uint16_t m_compressed_size;$/;"	m	struct:Compression::meta_t
m_concurrent	clone/clone0api.cc	/^  bool m_concurrent;$/;"	m	class:__anon2::Fixup_data	file:
m_conflict	handler/handler0alter.cc	/^  const bool m_conflict;$/;"	m	class:alter_part_add	file:
m_conflict	handler/handler0alter.cc	/^  const bool m_conflict;$/;"	m	class:alter_part_drop	file:
m_context	include/sync0policy.h	/^  Context m_context;$/;"	m	class:MutexDebug
m_copied_len	include/lob0lob.h	/^  ulint m_copied_len;$/;"	m	struct:lob::Reader
m_corrupted_ids	include/dict0mem.h	/^  corrupted_ids_t m_corrupted_ids;$/;"	m	class:PersistentTableMetadata
m_count	include/sync0policy.h	/^  Counter::Count *m_count;$/;"	m	class:BlockMutexPolicy
m_count	include/sync0policy.h	/^  Counter::Count m_count;$/;"	m	struct:GenericPolicy
m_counter	include/sync0types.h	/^  Counter m_counter;$/;"	m	class:LatchMeta
m_counter	include/ut0counter.h	/^  Type m_counter[(N + 1) * (ut::INNODB_CACHE_LINE_SIZE \/ sizeof(Type))];$/;"	m	class:ib_counter_t
m_counters	include/sync0types.h	/^  Counters m_counters;$/;"	m	class:LatchCounter
m_create_info	handler/ha_innodb.h	/^  HA_CREATE_INFO *m_create_info;$/;"	m	class:create_table_info_t
m_create_info	handler/ha_innodb.h	/^  HA_CREATE_INFO m_create_info;$/;"	m	class:innobase_truncate
m_created_new_raw	include/fsp0sysspace.h	/^  bool m_created_new_raw;$/;"	m	class:SysTablespace
m_creator_trx_id	include/read0types.h	/^  trx_id_t m_creator_trx_id;$/;"	m	class:ReadView
m_ctx	include/arch0arch.h	/^  Page_Arch_Client_Ctx *m_ctx;$/;"	m	class:Arch_Page_Sys
m_ctx	include/lob0del.h	/^  DeleteContext &m_ctx;$/;"	m	class:lob::Deleter
m_ctx	include/lob0ins.h	/^  InsertContext *m_ctx;$/;"	m	struct:lob::BaseInserter
m_cur	row/row0import.cc	/^  page_cur_t m_cur;$/;"	m	class:RecIterator	file:
m_cur_blob_block	include/lob0ins.h	/^  buf_block_t *m_cur_blob_block;$/;"	m	struct:lob::BaseInserter
m_cur_blob_page_no	include/lob0ins.h	/^  page_no_t m_cur_blob_page_no;$/;"	m	struct:lob::BaseInserter
m_cur_block	include/lob0lob.h	/^  buf_block_t *m_cur_block;$/;"	m	struct:lob::Reader
m_cur_phase	include/clone0monitor.h	/^  enum { NOT_STARTED = 0, ESTIMATE_WORK, COMPLETE_WORK } m_cur_phase;$/;"	m	class:Clone_Monitor	typeref:enum:Clone_Monitor::__anon7
m_cur_phase	include/ut0stage.h	/^  } m_cur_phase;$/;"	m	class:ut_stage_alter_t	typeref:enum:ut_stage_alter_t::__anon13
m_cur_phase	include/ut0stage.h	/^  } m_cur_phase;$/;"	m	class:ut_stage_alter_ts	typeref:enum:ut_stage_alter_ts::__anon14
m_cur_rec	include/btr0bulk.h	/^  rec_t *m_cur_rec;$/;"	m	class:PageBulk
m_current_buffer	include/clone0clone.h	/^  byte *m_current_buffer;$/;"	m	struct:Clone_Task
m_current_file_des	include/clone0clone.h	/^  pfs_os_file_t m_current_file_des;$/;"	m	struct:Clone_Task
m_current_file_index	include/clone0clone.h	/^  uint m_current_file_index;$/;"	m	struct:Clone_Task
m_current_group	include/arch0arch.h	/^  Arch_Group *m_current_group;$/;"	m	class:Arch_Log_Sys
m_current_lsn	row/row0import.cc	/^  lsn_t m_current_lsn;$/;"	m	class:PageConverter	file:
m_current_state	include/clone0clone.h	/^  Snapshot_State m_current_state;$/;"	m	class:Clone_Task_Manager
m_data	include/arch0arch.h	/^  byte *m_data;$/;"	m	class:Arch_Block
m_data	include/dyn0buf.h	/^    byte m_data[MAX_DATA_SIZE];$/;"	m	class:dyn_buf_t::block_t
m_data	include/lob0lob.h	/^  const byte *m_data;$/;"	m	struct:lob::ReadContext
m_data	include/ut0lock_free_hash.h	/^  std::atomic<arr_node_t *> m_data;$/;"	m	class:ut_lock_free_hash_t
m_data	include/ut0mpmcbq.h	/^    T m_data;$/;"	m	struct:mpmc_bq::Cell
m_data_bytes_disk	include/clone0snapshot.h	/^  uint64_t m_data_bytes_disk;$/;"	m	class:Clone_Snapshot
m_data_file_map	include/clone0snapshot.h	/^  Clone_File_Map m_data_file_map;$/;"	m	class:Clone_Snapshot
m_data_file_vector	include/clone0snapshot.h	/^  Clone_File_Vec m_data_file_vector;$/;"	m	class:Clone_Snapshot
m_data_len	include/clone0desc.h	/^  uint32_t m_data_len;$/;"	m	struct:Clone_Desc_Data
m_data_len	include/lob0index.h	/^  ulint m_data_len;$/;"	m	struct:lob::index_entry_mem_t
m_data_len	include/zlob0index.h	/^  ulint m_data_len;$/;"	m	struct:lob::z_index_entry_mem_t
m_data_size	include/clone0clone.h	/^  uint32_t m_data_size;$/;"	m	struct:Clone_Task
m_db_name	include/dict0stats.h	/^  char *m_db_name;$/;"	m	class:TableStatsRecord
m_dd_table	handler/ha_innodb.h	/^  Table *m_dd_table;$/;"	m	class:innobase_truncate
m_debug_counter	include/clone0clone.h	/^  int m_debug_counter;$/;"	m	struct:Clone_Task
m_deinit_func	log/log0meb.cc	/^  const Udf_func_deinit m_deinit_func;$/;"	m	struct:meb::udf_data_t	file:
m_del_when_zero	include/ut0lock_free_hash.h	/^  bool m_del_when_zero;$/;"	m	class:ut_lock_free_hash_t
m_deletable	include/log0ddl.h	/^  bool m_deletable;$/;"	m	class:Log_Type::DDL_Record
m_deleted	fil/fil0fil.cc	/^  bool m_deleted;$/;"	m	struct:MEB_file_name	file:
m_dequeue_pos	include/ut0mpmcbq.h	/^  std::atomic<size_t> m_dequeue_pos;$/;"	m	class:mpmc_bq
m_destroy_at_exit	include/ib0mutex.h	/^  bool m_destroy_at_exit;$/;"	m	struct:OSTrackMutex
m_dict_mutex_allowed	include/sync0types.h	/^  const bool m_dict_mutex_allowed;$/;"	m	struct:dict_sync_check
m_dict_stats	include/srv0srv.h	/^  IB_thread m_dict_stats;$/;"	m	struct:Srv_threads
m_dir	fil/fil0fil.cc	/^  Fil_path m_dir;$/;"	m	class:Tablespace_files	file:
m_dir	include/lob0ins.h	/^  blob_dir_t m_dir;$/;"	m	class:lob::Inserter
m_dir	include/lob0zip.h	/^  blob_dir_t m_dir;$/;"	m	class:lob::zInserter
m_dirs	fil/fil0fil.cc	/^  Scanned m_dirs;$/;"	m	class:Tablespace_dirs	file:
m_dirs	fil/fil0fil.cc	/^  Tablespace_dirs m_dirs;$/;"	m	class:Fil_system	file:
m_discarded	handler/handler0alter.cc	/^  bool m_discarded;$/;"	m	struct:alter_table_old_info_t	file:
m_dist	include/fsp0fsp.h	/^  std::uniform_int_distribution<int> m_dist;$/;"	m	class:File_segment_inode
m_distribution	include/row0pread-histogram.h	/^  static std::uniform_real_distribution<double> m_distribution;$/;"	m	class:Histogram_sampler
m_drop	clone/clone0api.cc	/^  bool m_drop;$/;"	m	class:__anon2::Fixup_data	file:
m_ds_mrr	handler/ha_innodb.h	/^  DsMrr_impl m_ds_mrr;$/;"	m	class:ha_innobase
m_dtuple_vec	row/row0merge.cc	/^  idx_tuple_vec *m_dtuple_vec;$/;"	m	class:index_tuple_info_t	file:
m_durable_file	include/arch0arch.h	/^  pfs_os_file_t m_durable_file;$/;"	m	class:Arch_Group
m_dynamic_heap	include/dict0dict.h	/^  mem_heap_t *m_dynamic_heap;$/;"	m	class:DDTableBuffer
m_edges	include/ut0stateful_latching_rules.h	/^  const std::vector<edge_t> m_edges;$/;"	m	class:ut::Stateful_latching_rules
m_enable_pfs	include/clone0snapshot.h	/^  bool m_enable_pfs;$/;"	m	class:Clone_Snapshot
m_enabled	include/sync0types.h	/^    Count() UNIV_NOTHROW : m_spins(), m_waits(), m_calls(), m_enabled() {$/;"	f	struct:LatchCounter::Count
m_enabled	include/sync0types.h	/^    bool m_enabled;$/;"	m	struct:LatchCounter::Count
m_encrypt_type	include/clone0desc.h	/^  Encryption::Type m_encrypt_type;$/;"	m	struct:Clone_File_Meta
m_encryption_iv	fil/fil0fil.cc	/^  byte *m_encryption_iv;$/;"	m	struct:Fil_page_iterator	file:
m_encryption_iv	include/fsp0file.h	/^  byte *m_encryption_iv;$/;"	m	class:Datafile
m_encryption_key	fil/fil0fil.cc	/^  byte *m_encryption_key;$/;"	m	struct:Fil_page_iterator	file:
m_encryption_key	include/fsp0file.h	/^  byte *m_encryption_key;$/;"	m	class:Datafile
m_encryption_op_in_progress	include/fsp0file.h	/^  encryption_op_type m_encryption_op_in_progress;$/;"	m	class:Datafile
m_end	fil/fil0fil.cc	/^  os_offset_t m_end;$/;"	m	struct:Fil_page_iterator	file:
m_end	include/page0types.h	/^  uint16_t m_end;$/;"	m	struct:page_zip_des_t
m_end	include/ut0pool.h	/^  Element *m_end;$/;"	m	struct:Pool
m_end_buffer_event	include/row0pread-histogram.h	/^  os_event_t m_end_buffer_event;$/;"	m	class:Histogram_sampler
m_end_chunk	include/clone0desc.h	/^  uint m_end_chunk;$/;"	m	struct:Clone_File_Meta
m_end_lsn	include/arch0log.h	/^  lsn_t m_end_lsn;$/;"	m	class:Log_Arch_Client_Ctx
m_end_lsn	mtr/mtr0mtr.cc	/^  const lsn_t m_end_lsn;$/;"	m	struct:Add_dirty_blocks_to_flush_list	file:
m_end_range	include/row0mysql.h	/^  bool m_end_range;$/;"	m	struct:row_prebuilt_t
m_end_trx_id_range	handler/p_s.cc	/^  trx_id_t m_end_trx_id_range;$/;"	m	class:Innodb_trx_scan_state	file:
m_enqueue_pos	include/ut0mpmcbq.h	/^  std::atomic<size_t> m_enqueue_pos;$/;"	m	class:mpmc_bq
m_entry	include/row0row.h	/^  dtuple_t *m_entry;$/;"	m	class:Multi_value_entry_builder
m_eof	include/handler0alter.h	/^  bool m_eof;$/;"	m	struct:ib_sequence_t
m_err	include/lob0ins.h	/^  dberr_t m_err;$/;"	m	struct:lob::BaseInserter
m_err_file_len	include/clone0clone.h	/^  size_t m_err_file_len;$/;"	m	class:Clone_Task_Manager
m_err_file_name	include/clone0clone.h	/^  char *m_err_file_name;$/;"	m	class:Clone_Task_Manager
m_error_monitor	include/srv0srv.h	/^  IB_thread m_error_monitor;$/;"	m	struct:Srv_threads
m_estimate	include/clone0desc.h	/^  uint64_t m_estimate;$/;"	m	struct:Clone_Desc_State
m_estimate	include/clone0monitor.h	/^  uint64_t m_estimate;$/;"	m	class:Clone_Monitor
m_estimate_bytes_left	include/clone0monitor.h	/^  uint64_t m_estimate_bytes_left;$/;"	m	class:Clone_Monitor
m_estimate_disk	include/clone0desc.h	/^  uint64_t m_estimate_disk;$/;"	m	struct:Clone_Desc_State
m_event	buf/buf0dblwr.cc	/^  os_event_t m_event;$/;"	m	class:Double_write	file:
m_event	include/clone0repl.h	/^  os_event_t m_event;$/;"	m	class:Clone_persist_gtid
m_event	log/log0meb.cc	/^  os_event_t *m_event;$/;"	m	class:meb::Guardian	file:
m_event	log/log0write.cc	/^  os_event_t m_event;$/;"	m	struct:Log_thread_waiting	file:
m_events	os/os0file.cc	/^  IOEvents m_events;$/;"	m	class:AIO	file:
m_exists	include/fsp0file.h	/^  bool m_exists;$/;"	m	class:Datafile
m_explicit_request	include/clone0repl.h	/^  std::atomic<bool> m_explicit_request;$/;"	m	class:Clone_persist_gtid
m_ext	include/row0row.h	/^  const row_ext_t *m_ext;$/;"	m	class:Multi_value_entry_builder_normal
m_external	include/page0types.h	/^  bool m_external;$/;"	m	struct:page_zip_des_t
m_factory	handler/handler0alter.cc	/^  alter_part_factory m_factory;$/;"	m	class:alter_parts	file:
m_fatal	include/ut0ut.h	/^  const bool m_fatal;$/;"	m	class:ib::fatal_or_error
m_fh	os/os0file.cc	/^  os_file_t m_fh;$/;"	m	class:SyncFileIO	file:
m_field_len	include/data0data.h	/^  uint32_t m_field_len;$/;"	m	class:Multi_value_logger
m_field_no	include/lob0lob.h	/^  ulint m_field_no;$/;"	m	struct:lob::DeleteContext
m_field_no	include/lob0undo.h	/^  ulint m_field_no;$/;"	m	struct:lob::undo_seq_t
m_fields	row/row0import.cc	/^  dict_field_t *m_fields; \/*!< Index fields *\/$/;"	m	struct:row_index_t	file:
m_file	buf/buf0dblwr.cc	/^  dblwr::File &m_file;$/;"	m	class:Segment	file:
m_file	fil/fil0fil.cc	/^  pfs_os_file_t m_file;$/;"	m	struct:Fil_page_iterator	file:
m_file	include/arch0arch.h	/^  pfs_os_file_t m_file;$/;"	m	class:Arch_File_Ctx
m_file	include/fil0fil.h	/^  pfs_os_file_t m_file;$/;"	m	struct:PageCallback
m_file	include/os0file.h	/^  os_file_t m_file;$/;"	m	struct:pfs_os_file_t
m_file	lock/lock0lock.cc	/^  FILE *m_file;$/;"	m	struct:PrintNotStarted	file:
m_file_cache	include/clone0clone.h	/^  bool m_file_cache;$/;"	m	struct:Clone_Task
m_file_ctx	include/arch0arch.h	/^  Arch_File_Ctx m_file_ctx;$/;"	m	class:Arch_Group
m_file_index	include/clone0desc.h	/^  uint m_file_index;$/;"	m	struct:Clone_File_Meta
m_file_index	include/clone0desc.h	/^  uint32_t m_file_index;$/;"	m	struct:Clone_Desc_Data
m_file_info	include/fsp0file.h	/^  struct stat m_file_info;$/;"	m	class:Datafile	typeref:struct:Datafile::stat
m_file_meta	include/clone0desc.h	/^  Clone_File_Meta m_file_meta;$/;"	m	struct:Clone_Desc_File_MetaData
m_file_name	include/clone0desc.h	/^  const char *m_file_name;$/;"	m	struct:Clone_File_Meta
m_file_name	include/trx0purge.h	/^  char *m_file_name;$/;"	m	struct:undo::Tablespace
m_file_name_len	include/clone0desc.h	/^  size_t m_file_name_len;$/;"	m	struct:Clone_File_Meta
m_file_offset	include/clone0desc.h	/^  uint64_t m_file_offset;$/;"	m	struct:Clone_Desc_Data
m_file_per_table	handler/ha_innodb.h	/^  bool m_file_per_table;$/;"	m	class:innobase_truncate
m_file_per_table	handler/handler0alter.cc	/^  bool m_file_per_table;$/;"	m	class:alter_part_factory	file:
m_file_per_table	handler/handler0alter.cc	/^  const bool m_file_per_table;$/;"	m	class:alter_part_add	file:
m_file_per_table	handler/handler0alter.cc	/^  const bool m_file_per_table;$/;"	m	class:alter_part_change	file:
m_file_size	fil/fil0fil.cc	/^  os_offset_t m_file_size;$/;"	m	struct:Fil_page_iterator	file:
m_file_size	include/clone0desc.h	/^  uint64_t m_file_size;$/;"	m	struct:Clone_Desc_Data
m_file_size	include/clone0desc.h	/^  uint64_t m_file_size;$/;"	m	struct:Clone_File_Meta
m_filename	include/fsp0file.h	/^  char *m_filename;$/;"	m	class:Datafile
m_filename	include/sync0policy.h	/^    const char *m_filename;$/;"	m	struct:MutexDebug::Context
m_filepath	fil/fil0fil.cc	/^  const char *m_filepath;$/;"	m	struct:Fil_page_iterator	file:
m_filepath	include/fil0fil.h	/^  const char *m_filepath;$/;"	m	struct:PageCallback
m_filepath	include/fsp0file.h	/^  char *m_filepath;$/;"	m	class:Datafile
m_files	include/fsp0space.h	/^  files_t m_files;$/;"	m	class:Tablespace
m_files	sync/sync0debug.cc	/^  Files m_files;$/;"	m	struct:CreateTracker	file:
m_first_block	include/dyn0buf.h	/^  block_t m_first_block;$/;"	m	class:dyn_buf_t
m_first_page	include/fsp0file.h	/^  byte *m_first_page;$/;"	m	class:Datafile
m_first_page_buf	include/fsp0file.h	/^  byte *m_first_page_buf;$/;"	m	class:Datafile
m_flag	include/trx0rec.h	/^  uint8_t m_flag;$/;"	m	struct:type_cmpl_t
m_flags	handler/ha_innodb.h	/^  uint32_t m_flags;$/;"	m	class:create_table_info_t
m_flags	handler/ha_innodb.h	/^  uint32_t m_flags;$/;"	m	class:innobase_truncate
m_flags	include/fsp0file.h	/^  uint32_t m_flags;$/;"	m	class:Datafile
m_flags	include/fsp0fsp.h	/^  ulint m_flags;$/;"	m	struct:fsp_header_mem_t
m_flags	include/fsp0space.h	/^  uint32_t m_flags;$/;"	m	class:Tablespace
m_flags	mtr/mtr0mtr.cc	/^  const ulint m_flags;$/;"	m	struct:Find_page	file:
m_flags	mtr/mtr0mtr.cc	/^  ulint m_flags;$/;"	m	struct:FlaggedCheck	file:
m_flags	row/row0import.cc	/^  uint32_t m_flags; \/*!< Table flags *\/$/;"	m	struct:row_import	file:
m_flags2	handler/ha_innodb.h	/^  uint32_t m_flags2;$/;"	m	class:create_table_info_t
m_flags2	handler/ha_innodb.h	/^  uint32_t m_flags2;$/;"	m	class:innobase_truncate
m_flush_every	include/log0test.h	/^  int m_flush_every = 10;$/;"	m	class:Log_test::Options
m_flush_in_progress	include/clone0repl.h	/^  std::atomic<bool> m_flush_in_progress;$/;"	m	class:Clone_persist_gtid
m_flush_number	include/clone0repl.h	/^  std::atomic<uint64_t> m_flush_number;$/;"	m	class:Clone_persist_gtid
m_flush_observer	include/btr0bulk.h	/^  FlushObserver *m_flush_observer;$/;"	m	class:BtrBulk
m_flush_observer	include/btr0bulk.h	/^  FlushObserver *m_flush_observer;$/;"	m	class:PageBulk
m_flush_observer	include/mtr0mtr.h	/^    FlushObserver *m_flush_observer;$/;"	m	struct:mtr_t::Impl
m_flush_observer	mtr/mtr0mtr.cc	/^  FlushObserver *const m_flush_observer;$/;"	m	struct:Add_dirty_blocks_to_flush_list	file:
m_flush_type	include/arch0recv.h	/^  Arch_Blk_Flush_Type m_flush_type;$/;"	m	struct:Arch_Dblwr_Block
m_flushed	include/log0test.h	/^  Pages m_flushed;$/;"	m	class:Log_test::Options
m_fold	include/lock0priv.h	/^  ulint m_fold;$/;"	m	struct:RecID
m_foreign_set	include/dict0mem.h	/^  const dict_foreign_set &m_foreign_set;$/;"	m	struct:dict_foreign_set_free
m_foreigns	include/dict0mem.h	/^  const dict_foreign_set &m_foreigns;$/;"	m	struct:dict_foreign_not_exists
m_form	handler/ha_innodb.h	/^  TABLE *m_form;$/;"	m	class:innobase_truncate
m_form	handler/ha_innodb.h	/^  const TABLE *m_form;$/;"	m	class:create_table_info_t
m_frame	include/lob0impl.h	/^  byte *m_frame;$/;"	m	class:lob::plist_node_t
m_frame	include/lob0impl.h	/^  byte *m_frame;$/;"	m	struct:lob::plist_base_node_t
m_free	include/read0read.h	/^  view_list_t m_free;$/;"	m	class:MVCC
m_free	include/srv0tmp.h	/^  Pool *m_free;$/;"	m	class:ibt::Tablespace_pool
m_free_frag	include/fsp0fsp.h	/^  flst_bnode_t m_free_frag;$/;"	m	struct:fsp_header_mem_t
m_free_limit	include/fsp0fsp.h	/^  ulint m_free_limit;$/;"	m	struct:fsp_header_mem_t
m_free_limit	row/row0import.cc	/^  page_no_t m_free_limit;$/;"	m	class:AbstractCallback	file:
m_free_space	include/btr0bulk.h	/^  ulint m_free_space;$/;"	m	class:PageBulk
m_freed	include/ib0mutex.h	/^  bool m_freed;$/;"	m	struct:OSTrackMutex
m_freed	include/sync0types.h	/^  bool m_freed;$/;"	m	struct:OSMutex
m_from	include/ut0stateful_latching_rules.h	/^    node_t m_from;$/;"	m	struct:ut::Stateful_latching_rules::edge_t
m_fsblk_size	include/clone0desc.h	/^  size_t m_fsblk_size;$/;"	m	struct:Clone_File_Meta
m_fseg_inode	include/fsp0fsp.h	/^  fseg_inode_t *m_fseg_inode;$/;"	m	class:File_segment_inode
m_fsp_flags	include/clone0desc.h	/^  uint32_t m_fsp_flags;$/;"	m	struct:Clone_File_Meta
m_fsp_frag_n_used	include/fsp0fsp.h	/^  ulint m_fsp_frag_n_used;$/;"	m	struct:fsp_header_mem_t
m_fsp_free	include/fsp0fsp.h	/^  flst_bnode_t m_fsp_free;$/;"	m	struct:fsp_header_mem_t
m_fsp_size	include/fsp0fsp.h	/^  ulint m_fsp_size;$/;"	m	struct:fsp_header_mem_t
m_fts_doc_id	handler/handler0alter.cc	/^  bool m_fts_doc_id;$/;"	m	struct:alter_table_old_info_t	file:
m_fts_limit	include/row0mysql.h	/^  ulonglong m_fts_limit;$/;"	m	struct:row_prebuilt_t
m_fts_optimize	include/srv0srv.h	/^  IB_thread m_fts_optimize;$/;"	m	struct:Srv_threads
m_full_frag	include/fsp0fsp.h	/^  flst_bnode_t m_full_frag;$/;"	m	struct:fsp_header_mem_t
m_func	log/log0meb.cc	/^  const Udf_func_any m_func;$/;"	m	struct:meb::udf_data_t	file:
m_functor	mtr/mtr0mtr.cc	/^  Functor &m_functor;$/;"	m	struct:Iterate	file:
m_global_segment	os/os0file.cc	/^  ulint m_global_segment;$/;"	m	class:LinuxAIOHandler	file:
m_global_shared_latch_guard	include/lock0guards.h	/^  Global_shared_latch_guard m_global_shared_latch_guard;$/;"	m	class:locksys::Shard_latch_guard
m_global_shared_latch_guard	include/lock0guards.h	/^  Global_shared_latch_guard m_global_shared_latch_guard;$/;"	m	class:locksys::Shard_latches_guard
m_group	include/arch0log.h	/^  Arch_Group *m_group;$/;"	m	class:Log_Arch_Client_Ctx
m_group_list	include/arch0arch.h	/^  Arch_Grp_List m_group_list;$/;"	m	class:Arch_Log_Sys
m_gtid_persister	include/clone0clone.h	/^  Clone_persist_gtid m_gtid_persister;$/;"	m	class:Clone_Sys
m_gtid_persister	include/srv0srv.h	/^  IB_thread m_gtid_persister;$/;"	m	struct:Srv_threads
m_gtid_trx_no	include/clone0repl.h	/^  std::atomic<uint64_t> m_gtid_trx_no;$/;"	m	class:Clone_persist_gtid
m_gtids	include/clone0repl.h	/^  Gitd_info_list m_gtids[2];$/;"	m	class:Clone_persist_gtid
m_ha_alter_info	handler/handler0alter.cc	/^  const Alter_inplace_info *const m_ha_alter_info;$/;"	m	class:alter_part_factory	file:
m_ha_alter_info	handler/handler0alter.cc	/^  const Alter_inplace_info *const m_ha_alter_info;$/;"	m	class:alter_parts	file:
m_ha_alter_info	handler/handler0alter.cc	/^  const Alter_inplace_info *m_ha_alter_info;$/;"	m	class:alter_part_add	file:
m_ha_alter_info	handler/handler0alter.cc	/^  const Alter_inplace_info *m_ha_alter_info;$/;"	m	class:alter_part_change	file:
m_handle	include/fsp0file.h	/^  pfs_os_file_t m_handle;$/;"	m	class:Datafile
m_handle	mtr/mtr0mtr.cc	/^  Log_handle m_handle;$/;"	m	struct:mtr_write_log_t	file:
m_handler	include/sess0sess.h	/^  dict_table_t *m_handler;$/;"	m	class:dict_intrinsic_table_t
m_handles	os/os0file.cc	/^  Handles *m_handles;$/;"	m	class:AIO	file:
m_has_sdi	row/row0import.cc	/^  bool m_has_sdi; \/*!< true if tablespace has$/;"	m	struct:row_import	file:
m_has_search_latch	include/sync0types.h	/^  const bool m_has_search_latch;$/;"	m	struct:btrsea_sync_check
m_has_thd	include/clone0clone.h	/^  bool m_has_thd;$/;"	m	struct:Clone_Task
m_header	include/clone0desc.h	/^  Clone_Desc_Header m_header;$/;"	m	struct:Clone_Desc_Data
m_header	include/clone0desc.h	/^  Clone_Desc_Header m_header;$/;"	m	struct:Clone_Desc_File_MetaData
m_header	include/clone0desc.h	/^  Clone_Desc_Header m_header;$/;"	m	struct:Clone_Desc_Locator
m_header	include/clone0desc.h	/^  Clone_Desc_Header m_header;$/;"	m	struct:Clone_Desc_State
m_header	include/clone0desc.h	/^  Clone_Desc_Header m_header;$/;"	m	struct:Clone_Desc_Task_Meta
m_header	include/fsp0types.h	/^  const fseg_header_t *m_header;$/;"	m	class:fseg_header
m_header_page_flush_lsn	include/fil0fil.h	/^  lsn_t m_header_page_flush_lsn;$/;"	m	struct:fil_space_t
m_heap	include/btr0bulk.h	/^  mem_heap_t *m_heap;$/;"	m	class:PageBulk
m_heap	include/data0data.h	/^  mem_heap_t *m_heap;$/;"	m	struct:dtuple_t
m_heap	include/dict0dict.h	/^  mem_heap_t *m_heap;$/;"	m	class:DDTableBuffer
m_heap	include/dict0stats.h	/^  mem_heap_t *m_heap;$/;"	m	class:TableStatsRecord
m_heap	include/dyn0buf.h	/^  mem_heap_t *m_heap;$/;"	m	class:dyn_buf_t
m_heap	include/lob0lob.h	/^  mem_heap_t *m_heap;$/;"	m	struct:lob::zReader
m_heap	include/lob0zip.h	/^  mem_heap_t *m_heap;$/;"	m	class:lob::zInserter
m_heap	include/log0ddl.h	/^  mem_heap_t *m_heap;$/;"	m	class:Log_Type::DDL_Log_Table
m_heap	include/log0ddl.h	/^  mem_heap_t *m_heap;$/;"	m	class:Log_Type::DDL_Record
m_heap	include/log0recv.h	/^    mem_heap_t *m_heap;$/;"	m	struct:recv_sys_t::Space
m_heap	include/mem0mem.h	/^  mem_heap_t *m_heap;$/;"	m	class:mem_heap_allocator
m_heap	include/row0row.h	/^  mem_heap_t *m_heap;$/;"	m	class:Multi_value_entry_builder_normal
m_heap	row/row0import.cc	/^  mem_heap_t *m_heap; \/*!< Memory heap for default$/;"	m	struct:row_import	file:
m_heap	row/row0import.cc	/^  mem_heap_t *m_heap;$/;"	m	class:PageConverter	file:
m_heap	row/row0merge.cc	/^  mem_heap_t *m_heap;$/;"	m	class:index_tuple_info_t	file:
m_heap_no	include/lock0priv.h	/^  uint32_t m_heap_no;$/;"	m	struct:RecID
m_heap_top	include/btr0bulk.h	/^  byte *m_heap_top;$/;"	m	class:PageBulk
m_hollow_objects	include/ut0lock_free_hash.h	/^  hollow_t *m_hollow_objects;$/;"	m	class:ut_lock_free_hash_t
m_hostname	row/row0import.cc	/^  byte *m_hostname;   \/*!< Hostname where the$/;"	m	struct:row_import	file:
m_hp	include/buf0buf.h	/^  buf_page_t *m_hp;$/;"	m	class:Cache_hint::HazardPointer
m_i	buf/buf0buddy.cc	/^  ulint m_i;$/;"	m	struct:CheckZipFree	file:
m_ibd_paths	fil/fil0fil.cc	/^  Paths m_ibd_paths;$/;"	m	class:Tablespace_files	file:
m_id	fil/fil0fil.cc	/^  const size_t m_id;$/;"	m	class:Fil_shard	file:
m_id	include/dict0mem.h	/^  table_id_t m_id;$/;"	m	class:PersistentTableMetadata
m_id	include/log0ddl.h	/^  ulint m_id;$/;"	m	class:Log_Type::DDL_Record
m_id	include/sync0policy.h	/^      m_id() {$/;"	f	struct:GenericPolicy
m_id	include/sync0policy.h	/^  latch_id_t m_id;$/;"	m	class:BlockMutexPolicy
m_id	include/sync0policy.h	/^  latch_id_t m_id;$/;"	m	struct:GenericPolicy
m_id	include/sync0types.h	/^  latch_id_t m_id;$/;"	m	class:LatchMeta
m_id	include/sync0types.h	/^  latch_id_t m_id;$/;"	m	struct:latch_t
m_id	include/trx0purge.h	/^  space_id_t m_id;$/;"	m	struct:undo::Tablespace
m_id	include/trx0types.h	/^  trx_id_t m_id;$/;"	m	struct:TrxTrack
m_id	row/row0import.cc	/^    space_index_t m_id;  \/*!< Index id *\/$/;"	m	struct:FetchIndexRootPages::Index	file:
m_id	row/row0import.cc	/^  space_index_t m_id; \/*!< Index id of the table$/;"	m	struct:row_index_t	file:
m_ids	include/read0types.h	/^  ids_t m_ids;$/;"	m	class:ReadView
m_idx_diffs	include/row0upd.h	/^  Lob_index_diff_vec *m_idx_diffs;$/;"	m	struct:Lob_diff
m_ignore_read_only	include/fsp0space.h	/^  bool m_ignore_read_only;$/;"	m	class:Tablespace
m_ignore_sync	include/clone0clone.h	/^  bool m_ignore_sync;$/;"	m	struct:Clone_Task
m_impl	include/mtr0mtr.h	/^  Impl m_impl;$/;"	m	struct:mtr_t
m_impl	mtr/mtr0mtr.cc	/^  mtr_t::Impl *m_impl;$/;"	m	class:mtr_t::Command	file:
m_implicit	include/trx0purge.h	/^  bool m_implicit;$/;"	m	struct:undo::Tablespace
m_in_use	include/os0file.h	/^  Block() noexcept : m_ptr(nullptr), m_in_use() {}$/;"	f	struct:file::Block
m_in_use	include/os0file.h	/^  std::atomic<bool> m_in_use;$/;"	m	struct:file::Block
m_incomplete_chunks	include/clone0desc.h	/^  Chunk_Map m_incomplete_chunks;$/;"	m	struct:Chunk_Info
m_increment	include/handler0alter.h	/^  ulong m_increment;$/;"	m	struct:ib_sequence_t
m_index	include/btr0bulk.h	/^  dict_index_t *m_index;$/;"	m	class:BtrBulk
m_index	include/btr0bulk.h	/^  dict_index_t *m_index;$/;"	m	class:PageBulk
m_index	include/dict0dict.h	/^  dict_index_t *m_index;$/;"	m	class:DDTableBuffer
m_index	include/dict0mem.h	/^  const dict_index_t *m_index;$/;"	m	struct:dict_foreign_with_index
m_index	include/lob0impl.h	/^  dict_index_t *m_index;$/;"	m	struct:lob::z_data_page_t
m_index	include/lob0impl.h	/^  dict_index_t *m_index;$/;"	m	struct:lob::z_frag_node_page_t
m_index	include/lob0impl.h	/^  dict_index_t *m_index;$/;"	m	struct:lob::z_frag_page_t
m_index	include/lob0impl.h	/^  dict_index_t *m_index;$/;"	m	struct:lob::z_index_page_t
m_index	include/lob0index.h	/^  const dict_index_t *m_index;$/;"	m	struct:lob::index_entry_t
m_index	include/lob0lob.h	/^  dict_index_t *m_index;$/;"	m	class:lob::BtrContext
m_index	include/lob0lob.h	/^  dict_index_t *m_index;$/;"	m	struct:lob::ReadContext
m_index	include/lob0util.h	/^  dict_index_t *m_index;$/;"	m	struct:lob::basic_page_t
m_index	include/lock0priv.h	/^  dict_index_t *m_index;$/;"	m	class:RecLock
m_index	include/rem0rec.h	/^  const dict_index_t *m_index;$/;"	m	struct:rec_index_print
m_index	include/row0row.h	/^  dict_index_t *m_index;$/;"	m	class:Multi_value_entry_builder
m_index	include/zlob0first.h	/^  dict_index_t *m_index;$/;"	m	struct:lob::z_first_page_t
m_index	include/zlob0index.h	/^  dict_index_t *m_index;$/;"	m	struct:lob::z_index_entry_t
m_index	lock/lock0lock.cc	/^  ulint m_index;$/;"	m	class:TrxListIterator	file:
m_index	lock/lock0lock.cc	/^  ulint m_index;$/;"	m	class:TrxLockIterator	file:
m_index	row/row0import.cc	/^  dict_index_t *m_index; \/*!< Index to be processed *\/$/;"	m	class:IndexPurge	file:
m_index	row/row0import.cc	/^  row_index_t *m_index;$/;"	m	class:PageConverter	file:
m_index	row/row0merge.cc	/^  dict_index_t *m_index;$/;"	m	class:index_tuple_info_t	file:
m_index_count	handler/ha_innopart.h	/^  uint m_index_count;$/;"	m	class:Ha_innopart_share
m_index_id	include/dict0types.h	/^  space_index_t m_index_id;$/;"	m	class:index_id_t
m_index_id	include/log0ddl.h	/^  ulint m_index_id;$/;"	m	class:Log_Type::DDL_Record
m_index_mapping	handler/ha_innopart.h	/^  dict_index_t **m_index_mapping;$/;"	m	class:Ha_innopart_share
m_index_online	include/btr0bulk.h	/^  unsigned m_index_online;$/;"	m	class:BtrBulk
m_indexes	row/row0import.cc	/^  Indexes m_indexes;$/;"	m	struct:FetchIndexRootPages	file:
m_indexes	row/row0import.cc	/^  row_index_t *m_indexes; \/*!< Index meta data *\/$/;"	m	struct:row_import	file:
m_info	include/clone0repl.h	/^  Gtid_info m_info;$/;"	m	struct:Gtid_desc
m_inherit	include/lob0lob.h	/^  bool m_inherit;$/;"	m	struct:lob::ref_mem_t
m_init_func	log/log0meb.cc	/^  const Udf_func_init m_init_func;$/;"	m	struct:meb::udf_data_t	file:
m_init_size	include/srv0tmp.h	/^  size_t m_init_size;$/;"	m	class:ibt::Tablespace_pool
m_inited	include/srv0tmp.h	/^  bool m_inited;$/;"	m	class:ibt::Tablespace
m_inject_name	include/trx0purge.h	/^  const char *m_inject_name;$/;"	m	class:undo::Inject_failure_once
m_innodb_file_per_table	handler/ha_innodb.h	/^  bool m_innodb_file_per_table;$/;"	m	class:create_table_info_t
m_inodes_free	include/fsp0fsp.h	/^  flst_bnode_t m_inodes_free;$/;"	m	struct:fsp_header_mem_t
m_inodes_full	include/fsp0fsp.h	/^  flst_bnode_t m_inodes_full;$/;"	m	struct:fsp_header_mem_t
m_ins_node_parts	handler/ha_innopart.h	/^  ins_node_t **m_ins_node_parts;$/;"	m	class:ha_innopart
m_ins_nodes	handler/handler0alter.cc	/^  ins_node_t **m_ins_nodes;$/;"	m	class:Altered_partitions	file:
m_inside_ibuf	include/mtr0mtr.h	/^    bool m_inside_ibuf;$/;"	m	struct:mtr_t::Impl
m_int_table_flags	handler/ha_innodb.h	/^  Table_flags m_int_table_flags;$/;"	m	class:ha_innobase
m_intrinsic_temp_tblsp	include/sess0sess.h	/^  ibt::Tablespace *m_intrinsic_temp_tblsp;$/;"	m	class:innodb_session_t
m_io_buffer	fil/fil0fil.cc	/^  byte *m_io_buffer;$/;"	m	struct:Fil_page_iterator	file:
m_is_ack	include/clone0desc.h	/^  bool m_is_ack;$/;"	m	struct:Clone_Desc_State
m_is_comp	include/btr0bulk.h	/^  const bool m_is_comp;$/;"	m	class:PageBulk
m_is_durable	include/arch0page.h	/^  bool m_is_durable;$/;"	m	class:Page_Arch_Client_Ctx
m_is_empty	os/os0file.cc	/^  os_event_t m_is_empty;$/;"	m	class:AIO	file:
m_is_master	include/clone0clone.h	/^  bool m_is_master;$/;"	m	struct:Clone_Task
m_is_reading_range	include/row0mysql.h	/^  bool m_is_reading_range;$/;"	m	struct:row_prebuilt_t
m_is_sdi	include/lob0lob.h	/^  const bool m_is_sdi;$/;"	m	struct:lob::ReadContext
m_is_set	include/clone0repl.h	/^  bool m_is_set;$/;"	m	struct:Gtid_desc
m_is_start	include/clone0desc.h	/^  bool m_is_start;$/;"	m	struct:Clone_Desc_State
m_is_tablespace_full	include/fsp0sysspace.h	/^  bool m_is_tablespace_full;$/;"	m	class:SysTablespace
m_is_valid	include/fsp0file.h	/^  bool m_is_valid;$/;"	m	class:Datafile
m_iter	include/trx0purge.h	/^  Rseg_Iterator m_iter;$/;"	m	struct:TrxUndoRsegsIterator
m_iter	row/row0merge.cc	/^  idx_tuple_vec::iterator m_iter;$/;"	m	class:index_tuple_info_t	file:
m_iv	include/os0enc.h	/^        m_iv(other.m_iv) {}$/;"	f	class:Encryption
m_iv	include/os0enc.h	/^  byte *m_iv;$/;"	m	class:Encryption
m_keep_autoinc	handler/ha_innodb.h	/^  bool m_keep_autoinc;$/;"	m	class:innobase_truncate
m_key	include/os0enc.h	/^  byte *m_key;$/;"	m	class:Encryption
m_key	include/ut0lock_free_hash.h	/^    std::atomic<uint64_t> m_key;$/;"	m	struct:ut_lock_free_hash_t::key_val_t
m_key	include/ut0new.h	/^  PSI_memory_key m_key;$/;"	m	class:ut_allocator
m_klen	include/os0enc.h	/^  ulint m_klen;$/;"	m	class:Encryption
m_last	include/ut0pool.h	/^  Element *m_last;$/;"	m	struct:Pool
m_last_file_size_max	include/fsp0sysspace.h	/^  page_no_t m_last_file_size_max;$/;"	m	class:SysTablespace
m_last_os_error	include/fsp0file.h	/^  ulint m_last_os_error;$/;"	m	class:Datafile
m_last_requests_time	log/log0write.cc	/^  Log_clock_point m_last_requests_time;$/;"	m	struct:Log_write_to_file_requests_monitor	file:
m_last_requests_value	log/log0write.cc	/^  uint64_t m_last_requests_value;$/;"	m	struct:Log_write_to_file_requests_monitor	file:
m_last_slot_used	os/os0file.cc	/^  std::atomic_size_t m_last_slot_used;$/;"	m	class:AIO	file:
m_last_slotted_rec	include/btr0bulk.h	/^  rec_t *m_last_slotted_rec;$/;"	m	class:PageBulk
m_last_used_space_id	include/srv0tmp.h	/^  static space_id_t m_last_used_space_id;$/;"	m	class:ibt::Tablespace
m_last_used_space_id	srv/srv0tmp.cc	/^space_id_t Tablespace::m_last_used_space_id = dict_sys_t::s_min_temp_space_id;$/;"	m	class:ibt::Tablespace	file:
m_latch	include/trx0purge.h	/^  rw_lock_t *m_latch;$/;"	m	class:undo::Tablespaces
m_latch	include/trx0types.h	/^  rw_lock_t *m_latch;$/;"	m	class:Rsegs
m_latch	sync/sync0debug.cc	/^  const latch_t *m_latch;$/;"	m	struct:Latched	file:
m_latches	include/sync0types.h	/^  latches_t m_latches;$/;"	m	struct:sync_allowed_latches
m_latches	include/ut0stateful_latching_rules.h	/^    latches_set_t m_latches;$/;"	m	struct:ut::Stateful_latching_rules::edge_t
m_left_to_write	mtr/mtr0mtr.cc	/^  ulint m_left_to_write;$/;"	m	struct:mtr_write_log_t	file:
m_len	include/lob0lob.h	/^  ulint m_len;$/;"	m	struct:lob::ReadContext
m_len	ut/ut.h	/^  ulint m_len;$/;"	m	struct:PrintBuffer
m_length	include/clone0desc.h	/^  uint m_length;$/;"	m	struct:Clone_Desc_Header
m_length	include/lob0lob.h	/^  ulint m_length;$/;"	m	struct:lob::ref_mem_t
m_length	include/lob0undo.h	/^  ulint m_length = 0;$/;"	m	struct:lob::undo_data_t
m_length	include/row0upd.h	/^  ulint m_length = 0;$/;"	m	struct:Lob_diff
m_level	include/btr0bulk.h	/^  ulint m_level;$/;"	m	class:PageBulk
m_level	include/sync0types.h	/^  latch_level_t m_level;$/;"	m	class:LatchMeta
m_level	sync/sync0debug.cc	/^  latch_level_t m_level;$/;"	m	struct:Latched	file:
m_level_name	include/sync0types.h	/^  const char *m_level_name;$/;"	m	class:LatchMeta
m_levels	sync/sync0debug.cc	/^  Levels m_levels;$/;"	m	struct:LatchDebug	file:
m_line	include/sync0policy.h	/^    ulint m_line;$/;"	m	struct:MutexDebug::Context
m_line	sync/sync0debug.cc	/^          m_line(line) {$/;"	f	struct:CreateTracker::File
m_line	sync/sync0debug.cc	/^    File() UNIV_NOTHROW : m_name(), m_line() {}$/;"	f	struct:CreateTracker::File
m_line	sync/sync0debug.cc	/^    uint16_t m_line;$/;"	m	struct:CreateTracker::File	file:
m_links	include/ut0link_buf.h	/^  std::atomic<Distance> *m_links;$/;"	m	class:Link_buf
m_list	include/dyn0buf.h	/^  block_list_t m_list;$/;"	m	class:dyn_buf_t
m_lob_undo	include/row0mysql.h	/^  lob::undo_vers_t m_lob_undo;$/;"	m	struct:row_prebuilt_t
m_lob_version	include/lob0lob.h	/^  ulint m_lob_version;$/;"	m	struct:lob::ReadContext
m_local_len	include/lob0lob.h	/^  ulint m_local_len;$/;"	m	struct:lob::ReadContext
m_locator_length	include/clone0clone.h	/^  uint m_locator_length;$/;"	m	class:Clone_Handle
m_lock_iter	lock/lock0lock.cc	/^  TrxLockIterator m_lock_iter;$/;"	m	class:TrxListIterator	file:
m_lock_strategy	include/ut0pool.h	/^  LockStrategy m_lock_strategy;$/;"	m	struct:Pool
m_lock_strategy	include/ut0pool.h	/^  LockStrategy m_lock_strategy;$/;"	m	struct:PoolManager
m_lock_wait_timeout	include/srv0srv.h	/^  IB_thread m_lock_wait_timeout;$/;"	m	struct:Srv_threads
m_lock_word	include/ib0mutex.h	/^  std::atomic<lock_word_t> m_lock_word;$/;"	v
m_locked	include/ib0mutex.h	/^  bool m_locked;$/;"	m	struct:OSTrackMutex
m_locks_released	mtr/mtr0mtr.cc	/^  volatile ulint m_locks_released;$/;"	m	class:mtr_t::Command	file:
m_log	include/mtr0mtr.h	/^    mtr_buf_t m_log;$/;"	m	struct:mtr_t::Impl
m_log	log/log0write.cc	/^  const log_t &m_log;$/;"	m	struct:Log_thread_waiting	file:
m_log	log/log0write.cc	/^  log_t &m_log;$/;"	m	struct:Log_write_to_file_requests_monitor	file:
m_log_archiver	include/srv0srv.h	/^  IB_thread m_log_archiver;$/;"	m	struct:Srv_threads
m_log_checkpointer	include/srv0srv.h	/^  IB_thread m_log_checkpointer;$/;"	m	struct:Srv_threads
m_log_file_name	include/trx0purge.h	/^  char *m_log_file_name;$/;"	m	struct:undo::Tablespace
m_log_flush_notifier	include/srv0srv.h	/^  IB_thread m_log_flush_notifier;$/;"	m	struct:Srv_threads
m_log_flusher	include/srv0srv.h	/^  IB_thread m_log_flusher;$/;"	m	struct:Srv_threads
m_log_mode	include/mtr0mtr.h	/^    mtr_log_t m_log_mode;$/;"	m	struct:mtr_t::Impl
m_log_write_notifier	include/srv0srv.h	/^  IB_thread m_log_write_notifier;$/;"	m	struct:Srv_threads
m_log_writer	include/srv0srv.h	/^  IB_thread m_log_writer;$/;"	m	struct:Srv_threads
m_low_limit_id	include/read0types.h	/^  trx_id_t m_low_limit_id;$/;"	m	class:ReadView
m_low_limit_no	include/read0types.h	/^  trx_id_t m_low_limit_no;$/;"	m	class:ReadView
m_lowest_offset	os/os0file.cc	/^  os_offset_t m_lowest_offset;$/;"	m	class:SimulatedAIOHandler	file:
m_lsn	mtr/mtr0mtr.cc	/^  lsn_t m_lsn;$/;"	m	struct:mtr_write_log_t	file:
m_made_dirty	include/mtr0mtr.h	/^    bool m_made_dirty;$/;"	m	struct:mtr_t::Impl
m_magic_n	include/dyn0buf.h	/^    ulint m_magic_n;$/;"	m	class:dyn_buf_t::block_t
m_magic_n	include/mtr0mtr.h	/^    ulint m_magic_n;$/;"	m	struct:mtr_t::Impl
m_magic_n	include/sync0policy.h	/^  ulint m_magic_n;$/;"	m	class:MutexDebug
m_map_index	include/clone0desc.h	/^    uint32_t m_map_index;$/;"	m	class:Chnunk_Bitmap::Bitmap_Operator_Impl
m_marked_nolog	include/mtr0mtr.h	/^    bool m_marked_nolog;$/;"	m	struct:mtr_t::Impl
m_marked_space_is_empty	include/trx0purge.h	/^  bool m_marked_space_is_empty;$/;"	m	class:undo::Truncate
m_master	include/srv0srv.h	/^  IB_thread m_master;$/;"	m	struct:Srv_threads
m_master_ready_for_dd_shutdown	include/srv0srv.h	/^  os_event_t m_master_ready_for_dd_shutdown;$/;"	m	struct:Srv_threads
m_max_assigned_id	fil/fil0fil.cc	/^  space_id_t m_max_assigned_id;$/;"	m	class:Fil_system	file:
m_max_file_name_len	include/clone0snapshot.h	/^  size_t m_max_file_name_len;$/;"	m	class:Clone_Snapshot
m_max_n_open	fil/fil0fil.cc	/^  const size_t m_max_n_open;$/;"	m	class:Fil_system	file:
m_max_res_chunk	include/clone0desc.h	/^  uint32_t m_max_res_chunk;$/;"	m	struct:Chunk_Info
m_max_threads	include/row0pread.h	/^  const size_t m_max_threads;$/;"	v
m_max_value	include/handler0alter.h	/^  const ulonglong m_max_value;$/;"	m	struct:ib_sequence_t
m_memo	include/mtr0mtr.h	/^    mtr_buf_t m_memo;$/;"	m	struct:mtr_t::Impl
m_memory	include/ut0new.h	/^  void *m_memory = nullptr;$/;"	m	class:aligned_memory
m_metadata_transferred	include/clone0desc.h	/^  bool m_metadata_transferred;$/;"	m	struct:Clone_Desc_Locator
m_min_timeout	log/log0write.cc	/^  const uint32_t m_min_timeout;$/;"	m	struct:Log_thread_waiting	file:
m_min_unres_chunk	include/clone0desc.h	/^  uint32_t m_min_unres_chunk;$/;"	m	struct:Chunk_Info
m_missing	row/row0import.cc	/^  bool m_missing; \/*!< true if a .cfg file was$/;"	m	struct:row_import	file:
m_mode	buf/buf0buf.cc	/^  Page_fetch m_mode;$/;"	m	struct:Buf_fetch	file:
m_mode	include/lock0priv.h	/^  ulint m_mode;$/;"	m	class:RecLock
m_modification_counter	fil/fil0fil.cc	/^  int64_t m_modification_counter;$/;"	m	class:Fil_shard	file:
m_modifications	include/mtr0mtr.h	/^    bool m_modifications;$/;"	m	struct:mtr_t::Impl
m_modified	include/btr0bulk.h	/^  bool m_modified;$/;"	m	class:PageBulk
m_modifier_trxid	include/row0upd.h	/^  trx_id_t m_modifier_trxid;$/;"	m	struct:lob_index_diff_t
m_modifier_undo_no	include/row0upd.h	/^  undo_no_t m_modifier_undo_no;$/;"	m	struct:lob_index_diff_t
m_modify_clock	include/btr0bulk.h	/^  ib_uint64_t m_modify_clock;$/;"	m	class:PageBulk
m_monitor	include/clone0snapshot.h	/^  Clone_Monitor m_monitor;$/;"	m	class:Clone_Snapshot
m_monitor	include/srv0srv.h	/^  IB_thread m_monitor;$/;"	m	struct:Srv_threads
m_moved	fil/fil0fil.cc	/^  dd_fil::Tablespaces m_moved;$/;"	m	class:Fil_system	file:
m_mtr	include/btr0bulk.h	/^  mtr_t *m_mtr;$/;"	m	class:PageBulk
m_mtr	include/fsp0fsp.h	/^  mtr_t *m_mtr;$/;"	m	class:File_segment_inode
m_mtr	include/fsp0types.h	/^  mtr_t *m_mtr;$/;"	m	class:fseg_header
m_mtr	include/lob0del.h	/^  mtr_t m_mtr;$/;"	m	class:lob::Deleter
m_mtr	include/lob0impl.h	/^  mtr_t *m_mtr;$/;"	m	class:lob::plist_node_t
m_mtr	include/lob0impl.h	/^  mtr_t *m_mtr;$/;"	m	struct:lob::frag_node_t
m_mtr	include/lob0impl.h	/^  mtr_t *m_mtr;$/;"	m	struct:lob::plist_base_node_t
m_mtr	include/lob0impl.h	/^  mtr_t *m_mtr;$/;"	m	struct:lob::z_data_page_t
m_mtr	include/lob0impl.h	/^  mtr_t *m_mtr;$/;"	m	struct:lob::z_frag_entry_t
m_mtr	include/lob0impl.h	/^  mtr_t *m_mtr;$/;"	m	struct:lob::z_frag_node_page_t
m_mtr	include/lob0impl.h	/^  mtr_t *m_mtr;$/;"	m	struct:lob::z_frag_page_t
m_mtr	include/lob0impl.h	/^  mtr_t *m_mtr;$/;"	m	struct:lob::z_index_page_t
m_mtr	include/lob0index.h	/^  mtr_t *m_mtr;$/;"	m	struct:lob::index_entry_t
m_mtr	include/lob0lob.h	/^  mtr_t *m_mtr;$/;"	m	class:lob::BtrContext
m_mtr	include/lob0util.h	/^  mtr_t *m_mtr;$/;"	m	struct:lob::basic_page_t
m_mtr	include/mtr0mtr.h	/^    mtr_t *m_mtr;$/;"	m	struct:mtr_t::Impl
m_mtr	include/zlob0first.h	/^  mtr_t *m_mtr;$/;"	m	struct:lob::z_first_page_t
m_mtr	include/zlob0index.h	/^  mtr_t *m_mtr;$/;"	m	struct:lob::z_index_entry_t
m_mtr	lob/lob0lob.cc	/^  mtr_t *m_mtr;$/;"	m	struct:lob::Being_modified	file:
m_mtr	mtr/mtr0mtr.cc	/^  const mtr_t *m_mtr;$/;"	m	struct:Mtr_memo_contains	file:
m_mtr	row/row0import.cc	/^  mtr_t m_mtr;           \/*!< Mini-transaction *\/$/;"	m	class:IndexPurge	file:
m_mutex	buf/buf0dblwr.cc	/^  ib_mutex_t m_mutex;$/;"	m	class:Double_write	file:
m_mutex	fil/fil0fil.cc	/^  mutable ib_mutex_t m_mutex;$/;"	m	class:Fil_shard	file:
m_mutex	fil/fil0fil.cc	/^  mutable meb::Mutex m_mutex;$/;"	m	class:Fil_shard	file:
m_mutex	handler/ha_innodb.cc	/^  std::mutex m_mutex;$/;"	m	class:Validate_files	file:
m_mutex	include/arch0arch.h	/^  ib_mutex_t m_mutex;$/;"	m	class:Arch_Log_Sys
m_mutex	include/arch0arch.h	/^  ib_mutex_t m_mutex;$/;"	m	class:Arch_Page_Sys
m_mutex	include/arch0page.h	/^  ib_mutex_t m_mutex;$/;"	m	class:Page_Arch_Client_Ctx
m_mutex	include/buf0buf.h	/^  const ib_mutex_t *m_mutex;$/;"	m	class:Cache_hint::HazardPointer
m_mutex	include/ib0mutex.h	/^  OSMutex m_mutex;$/;"	m	struct:OSTrackMutex
m_mutex	include/log0test.h	/^  mutable std::mutex m_mutex;$/;"	m	class:Log_test::Options
m_mutex	include/row0pread.h	/^  mutable ib_mutex_t m_mutex;$/;"	v
m_mutex	include/srv0tmp.h	/^  ib_mutex_t m_mutex;$/;"	m	class:ibt::Tablespace_pool
m_mutex	include/sync0policy.h	/^    const Mutex *m_mutex;$/;"	m	struct:MutexDebug::Context
m_mutex	include/sync0types.h	/^  mutable Mutex m_mutex;$/;"	m	class:LatchCounter
m_mutex	include/sync0types.h	/^  sys_mutex_t m_mutex;$/;"	m	struct:OSMutex
m_mutex	include/ut0mutex.h	/^  ib_mutex_t *m_mutex;$/;"	m	struct:IB_mutex_guard
m_mutex	log/log0meb.cc	/^  ib_mutex_t *m_mutex;$/;"	m	class:meb::Guardian	file:
m_mutex	os/os0file.cc	/^  mutable SysMutex m_mutex;$/;"	m	class:AIO	file:
m_mutex	sync/sync0debug.cc	/^  Mutex m_mutex;$/;"	m	struct:CreateTracker	file:
m_mutex	sync/sync0debug.cc	/^  Mutex m_mutex;$/;"	m	struct:LatchDebug	file:
m_mutex	trx/trx0trx.cc	/^  ib_mutex_t m_mutex;$/;"	m	struct:TrxPoolLock	file:
m_mutex	trx/trx0trx.cc	/^  ib_mutex_t m_mutex;$/;"	m	struct:TrxPoolManagerLock	file:
m_mv_data	include/data0data.h	/^  const multi_value_data *m_mv_data;$/;"	m	class:Multi_value_logger
m_mv_data	include/row0row.h	/^  const multi_value_data *m_mv_data;$/;"	m	class:Multi_value_entry_builder
m_mv_field_no	include/row0row.h	/^  uint32_t m_mv_field_no;$/;"	m	class:Multi_value_entry_builder
m_mysql_handler	include/row0mysql.h	/^  ha_innobase *m_mysql_handler;$/;"	m	struct:row_prebuilt_t
m_mysql_has_locked	handler/ha_innodb.h	/^  bool m_mysql_has_locked;$/;"	m	class:ha_innobase
m_mysql_table	include/row0mysql.h	/^  TABLE *m_mysql_table;$/;"	m	struct:row_prebuilt_t
m_n	os/os0file.cc	/^  ssize_t m_n;$/;"	m	class:SyncFileIO	file:
m_n_base_elements	include/ut0lock_free_hash.h	/^  size_t m_n_base_elements;$/;"	m	class:ut_lock_free_list_node_t
m_n_cols	row/row0import.cc	/^  ulint m_n_cols; \/*!< Number of columns in the$/;"	m	struct:row_import	file:
m_n_deleted	handler/ha_innodb.cc	/^  std::atomic_size_t m_n_deleted;$/;"	m	class:Validate_files	file:
m_n_deleted	row/row0import.cc	/^  ulint m_n_deleted; \/*!< Number of deleted records$/;"	m	struct:row_stats_t	file:
m_n_elems	os/os0file.cc	/^  ulint m_n_elems;$/;"	m	class:SimulatedAIOHandler	file:
m_n_errors	handler/ha_innodb.cc	/^  std::atomic_size_t m_n_errors;$/;"	m	class:Validate_files	file:
m_n_fields	row/row0import.cc	/^  ulint m_n_fields; \/*!< Total number of fields *\/$/;"	m	struct:row_index_t	file:
m_n_flush_pages	include/ut0stage.h	/^  ulint m_n_flush_pages;$/;"	m	class:ut_stage_alter_t
m_n_indexes	row/row0import.cc	/^  ulint m_n_indexes; \/*!< Number of indexes,$/;"	m	struct:row_import	file:
m_n_instant_cols	row/row0import.cc	/^  uint16_t m_n_instant_cols; \/*!< Number of columns before$/;"	m	struct:row_import	file:
m_n_instant_nullable	row/row0import.cc	/^  uint32_t m_n_instant_nullable;$/;"	m	struct:row_import	file:
m_n_io_buffers	fil/fil0fil.cc	/^  size_t m_n_io_buffers;$/;"	m	struct:Fil_page_iterator	file:
m_n_log_recs	include/mtr0mtr.h	/^    ib_uint32_t m_n_log_recs;$/;"	m	struct:mtr_t::Impl
m_n_missing	handler/ha_innodb.cc	/^  std::atomic_size_t m_n_missing;$/;"	m	class:Validate_files	file:
m_n_moved	handler/ha_innodb.cc	/^  std::atomic_size_t m_n_moved;$/;"	m	class:Validate_files	file:
m_n_nullable	row/row0import.cc	/^  ulint m_n_nullable; \/*!< Number of nullable$/;"	m	struct:row_index_t	file:
m_n_pk_pages	include/ut0stage.h	/^  ulint m_n_pk_pages;$/;"	m	class:ut_stage_alter_t
m_n_pk_recs	include/ut0stage.h	/^  ulint m_n_pk_recs;$/;"	m	class:ut_stage_alter_t
m_n_purge_failed	row/row0import.cc	/^  ulint m_n_purge_failed; \/*!< Number of deleted rows$/;"	m	struct:row_stats_t	file:
m_n_purged	row/row0import.cc	/^  ulint m_n_purged; \/*!< Number of records purged$/;"	m	struct:row_stats_t	file:
m_n_rec_before	include/btr0bulk.h	/^    ulint m_n_rec_before;$/;"	m	struct:PageBulk::SplitPoint
m_n_recs_per_page	include/ut0stage.h	/^  double m_n_recs_per_page;$/;"	m	class:ut_stage_alter_t
m_n_recs_processed	include/ut0stage.h	/^  ulint m_n_recs_processed;$/;"	m	class:ut_stage_alter_t
m_n_ref	include/ut0lock_free_hash.h	/^  ut_lock_free_cnt_t m_n_ref;$/;"	m	class:ut_lock_free_list_node_t
m_n_reserved	os/os0file.cc	/^  ulint m_n_reserved;$/;"	m	class:AIO	file:
m_n_rows	include/dict0stats.h	/^  ib_uint64_t m_n_rows;$/;"	m	class:TableStatsRecord
m_n_rows	row/row0import.cc	/^  ulint m_n_rows;        \/*!< Records in index *\/$/;"	m	class:IndexPurge	file:
m_n_rows	row/row0import.cc	/^  ulint m_n_rows; \/*!< Number of rows *\/$/;"	m	struct:row_stats_t	file:
m_n_sampled	include/row0pread-histogram.h	/^  std::atomic_size_t m_n_sampled;$/;"	m	class:Histogram_sampler
m_n_search	include/ut0lock_free_hash.h	/^  mutable std::atomic<uint64_t> m_n_search;$/;"	m	class:ut_lock_free_hash_t
m_n_search_iterations	include/ut0lock_free_hash.h	/^  mutable std::atomic<uint64_t> m_n_search_iterations;$/;"	m	class:ut_lock_free_hash_t
m_n_segments	os/os0file.cc	/^  ulint m_n_segments;$/;"	m	class:AIO	file:
m_n_shards	include/sync0sharded_rw.h	/^  size_t m_n_shards = 0;$/;"	m	class:Sharded_rw_lock
m_n_skipped	handler/ha_innodb.cc	/^  std::atomic_size_t m_n_skipped;$/;"	m	class:Validate_files	file:
m_n_slots	os/os0file.cc	/^  ulint m_n_slots;$/;"	m	class:LinuxAIOHandler	file:
m_n_slots	os/os0file.cc	/^  ulint m_n_slots;$/;"	m	class:SimulatedAIOHandler	file:
m_n_sort_indexes	include/ut0stage.h	/^  ulint m_n_sort_indexes;$/;"	m	class:ut_stage_alter_t
m_n_threads	handler/ha_innodb.cc	/^  size_t m_n_threads;$/;"	m	class:Validate_files	file:
m_n_to_check	handler/ha_innodb.cc	/^  size_t m_n_to_check;$/;"	m	class:Validate_files	file:
m_n_uniq	row/row0import.cc	/^  ulint m_n_uniq; \/*!< Number of columns that can$/;"	m	struct:row_index_t	file:
m_n_user_defined_cols	row/row0import.cc	/^  ulint m_n_user_defined_cols; \/*!< User defined columns *\/$/;"	m	struct:row_index_t	file:
m_n_validated	handler/ha_innodb.cc	/^  std::atomic_size_t m_n_validated;$/;"	m	class:Validate_files	file:
m_name	fil/fil0fil.cc	/^  std::string m_name;$/;"	m	struct:MEB_file_name	file:
m_name	handler/ha_innodb.cc	/^    const char *m_name;$/;"	m	struct:ShowStatus::GetCount	file:
m_name	handler/ha_innodb.cc	/^    std::string m_name;$/;"	m	struct:ShowStatus::Value	file:
m_name	handler/ha_innodb.h	/^  const char *m_name;$/;"	m	class:innobase_truncate
m_name	include/dict0mem.h	/^  char *m_name;$/;"	m	struct:table_name_t
m_name	include/dict0mem.h	/^  const char *m_name;$/;"	m	class:id_name_t
m_name	include/fsp0file.h	/^  char *m_name;$/;"	m	class:Datafile
m_name	include/fsp0space.h	/^  char *m_name;$/;"	m	class:Tablespace
m_name	include/sync0types.h	/^  const char *m_name;$/;"	m	class:LatchMeta
m_name	include/ut0dbg.h	/^  const char *m_name;$/;"	m	class:ut_chrono_t
m_name	log/log0meb.cc	/^  const std::string m_name;$/;"	m	struct:meb::udf_data_t	file:
m_name	row/row0import.cc	/^  byte *m_name;       \/*!< Index name *\/$/;"	m	struct:row_index_t	file:
m_name	sync/sync0debug.cc	/^    std::string m_name;$/;"	m	struct:CreateTracker::File	file:
m_names	fil/fil0fil.cc	/^  Names m_names;$/;"	m	class:Fil_shard	file:
m_new	handler/handler0alter.cc	/^  dict_table_t *m_new;$/;"	m	class:alter_part	file:
m_new	include/trx0purge.h	/^  bool m_new;$/;"	m	struct:undo::Tablespace
m_new_file_path	include/log0ddl.h	/^  char *m_new_file_path;$/;"	m	class:Log_Type::DDL_Record
m_new_partitions	handler/ha_innopart.h	/^  Altered_partitions *m_new_partitions;$/;"	m	class:ha_innopart
m_new_partitions	handler/handler0alter.cc	/^  Altered_partitions *const m_new_partitions;$/;"	m	class:alter_parts	file:
m_new_table_parts	handler/handler0alter.cc	/^  dict_table_t **m_new_table_parts;$/;"	m	class:Altered_partitions	file:
m_news	handler/handler0alter.cc	/^  alter_part_array m_news;$/;"	m	class:alter_parts	file:
m_next	include/buf0dblwr.h	/^    m_next = m_ptr;$/;"	m	struct:dblwr::Buffer
m_next	include/lob0index.h	/^  fil_addr_t m_next;$/;"	m	struct:lob::index_entry_mem_t
m_next	include/ut0lock_free_hash.h	/^  std::atomic<next_t> m_next;$/;"	m	class:ut_lock_free_list_node_t
m_next	include/zlob0index.h	/^  fil_addr_t m_next;$/;"	m	struct:lob::z_index_entry_mem_t
m_next_state	include/clone0clone.h	/^  Snapshot_State m_next_state;$/;"	m	class:Clone_Task_Manager
m_next_trx_id_range	handler/p_s.cc	/^  trx_id_t m_next_trx_id_range;$/;"	m	class:Innodb_trx_scan_state	file:
m_next_value	include/handler0alter.h	/^  ulonglong m_next_value;$/;"	m	struct:ib_sequence_t
m_no_prefetch	include/row0mysql.h	/^  bool m_no_prefetch;$/;"	m	struct:row_prebuilt_t
m_node	include/dyn0buf.h	/^    block_node_t m_node;$/;"	m	class:dyn_buf_t::block_t
m_node	include/lob0impl.h	/^  byte *m_node;$/;"	m	class:lob::plist_node_t
m_node	include/lob0impl.h	/^  flst_node_t *m_node;$/;"	m	struct:lob::z_frag_entry_t
m_node	include/lob0impl.h	/^  plist_node_t m_node;$/;"	m	struct:lob::frag_node_t
m_node	include/lob0index.h	/^  byte *m_node;$/;"	m	struct:lob::index_entry_t
m_node	include/ut0lst.h	/^  node_type Type::*m_node;$/;"	m	class:GenericGetNode::Type
m_node	include/zlob0index.h	/^  flst_node_t *m_node;$/;"	m	struct:lob::z_index_entry_t
m_nonempty	include/page0types.h	/^  bool m_nonempty;$/;"	m	struct:page_zip_des_t
m_noredo	include/trx0trx.h	/^  trx_undo_ptr_t m_noredo;$/;"	m	struct:trx_rsegs_t
m_not_full	os/os0file.cc	/^  os_event_t m_not_full;$/;"	m	class:AIO	file:
m_notused	include/fsp0fsp.h	/^  ulint m_notused;$/;"	m	struct:fsp_header_mem_t
m_null	include/lob0lob.h	/^  bool m_null;$/;"	m	struct:lob::ref_mem_t
m_num	include/trx0purge.h	/^  space_id_t m_num;$/;"	m	struct:undo::Tablespace
m_num_apply_clones	include/clone0clone.h	/^  uint m_num_apply_clones;$/;"	m	class:Clone_Sys
m_num_apply_snapshots	include/clone0clone.h	/^  uint m_num_apply_snapshots;$/;"	m	class:Clone_Sys
m_num_chunks	include/clone0desc.h	/^  uint m_num_chunks;$/;"	m	struct:Clone_Desc_State
m_num_clones	include/clone0clone.h	/^  uint m_num_clones;$/;"	m	class:Clone_Sys
m_num_clones	include/clone0snapshot.h	/^  uint m_num_clones;$/;"	m	class:Clone_Snapshot
m_num_clones_current	include/clone0snapshot.h	/^  uint m_num_clones_current;$/;"	m	class:Clone_Snapshot
m_num_clones_next	include/clone0snapshot.h	/^  uint m_num_clones_next;$/;"	m	class:Clone_Snapshot
m_num_current_chunks	include/clone0snapshot.h	/^  uint m_num_current_chunks;$/;"	m	class:Clone_Snapshot
m_num_data_chunks	include/clone0snapshot.h	/^  uint m_num_data_chunks;$/;"	m	class:Clone_Snapshot
m_num_data_files	include/clone0snapshot.h	/^  uint m_num_data_files;$/;"	m	class:Clone_Snapshot
m_num_duplicate_pages	include/clone0snapshot.h	/^  uint m_num_duplicate_pages;$/;"	m	class:Clone_Snapshot
m_num_errors	clone/clone0api.cc	/^  std::atomic_size_t m_num_errors;$/;"	m	class:__anon2::Fixup_data	file:
m_num_files	include/clone0desc.h	/^  uint m_num_files;$/;"	m	struct:Clone_Desc_State
m_num_gtid_mem	include/clone0repl.h	/^  std::atomic<int> m_num_gtid_mem;$/;"	m	class:Clone_persist_gtid
m_num_new_parts	handler/handler0alter.cc	/^  size_t m_num_new_parts;$/;"	m	class:Altered_partitions	file:
m_num_pages	include/clone0snapshot.h	/^  uint m_num_pages;$/;"	m	class:Clone_Snapshot
m_num_redo_chunks	include/clone0snapshot.h	/^  uint m_num_redo_chunks;$/;"	m	class:Clone_Snapshot
m_num_redo_files	include/clone0snapshot.h	/^  uint m_num_redo_files;$/;"	m	class:Clone_Snapshot
m_num_snapshots	include/clone0clone.h	/^  uint m_num_snapshots;$/;"	m	class:Clone_Sys
m_num_tasks	clone/clone0api.cc	/^  size_t m_num_tasks;$/;"	m	class:__anon2::Fixup_data	file:
m_num_tasks	include/clone0clone.h	/^  uint m_num_tasks;$/;"	m	class:Clone_Task_Manager
m_num_tasks_finished	include/clone0clone.h	/^  uint m_num_tasks_finished;$/;"	m	class:Clone_Task_Manager
m_num_tasks_transit	include/clone0clone.h	/^  uint m_num_tasks_transit;$/;"	m	class:Clone_Task_Manager
m_numa_available	include/ut0lock_free_hash.h	/^  bool m_numa_available;$/;"	m	class:ut_lock_free_cnt_t
m_object	include/ut0new.h	/^  T_Type *m_object = nullptr;$/;"	m	class:aligned_memory
m_object	mtr/mtr0mtr.cc	/^  const void *m_object;$/;"	m	struct:Find	file:
m_offset	include/arch0arch.h	/^  uint m_offset;$/;"	m	struct:Arch_Page_Pos
m_offset	include/handler0alter.h	/^  ulong m_offset;$/;"	m	struct:ib_sequence_t
m_offset	include/lob0lob.h	/^  ulint m_offset;$/;"	m	struct:lob::ReadContext
m_offset	include/lob0lob.h	/^  ulint m_offset;$/;"	m	struct:lob::ref_mem_t
m_offset	include/lob0undo.h	/^  ulint m_offset = 0;$/;"	m	struct:lob::undo_data_t
m_offset	include/row0upd.h	/^  ulint m_offset = 0;$/;"	m	struct:Lob_diff
m_offset	os/os0file.cc	/^  os_offset_t m_offset;$/;"	m	class:SyncFileIO	file:
m_offsets	include/lob0lob.h	/^  ulint *m_offsets;$/;"	m	class:lob::BtrContext
m_offsets	include/rem0rec.h	/^  const ulint *m_offsets;$/;"	m	struct:rec_offsets_print
m_offsets	lob/lob0lob.cc	/^  ulint *m_offsets;$/;"	m	struct:lob::Being_modified	file:
m_offsets	row/row0import.cc	/^  ulint *m_offsets;$/;"	m	class:PageConverter	file:
m_offsets_	row/row0import.cc	/^  ulint m_offsets_[REC_OFFS_NORMAL_SIZE];$/;"	m	class:PageConverter	file:
m_old	handler/handler0alter.cc	/^  dict_table_t **m_old;$/;"	m	class:alter_part	file:
m_old_data	include/lob0undo.h	/^  byte *m_old_data = nullptr;$/;"	m	struct:lob::undo_data_t
m_old_data	include/row0upd.h	/^  const byte *m_old_data = nullptr;$/;"	m	struct:Lob_diff
m_old_file_path	include/log0ddl.h	/^  char *m_old_file_path;$/;"	m	class:Log_Type::DDL_Record
m_old_info	handler/handler0alter.cc	/^  alter_table_old_info_t *m_old_info;$/;"	m	class:ha_innopart_inplace_ctx	file:
m_old_part_info	handler/handler0alter.cc	/^  partition_info *const m_old_part_info;$/;"	m	class:alter_part_factory	file:
m_old_paths	fil/fil0fil.cc	/^  std::vector<std::string> m_old_paths;$/;"	m	class:Fil_system	file:
m_oldest	os/os0file.cc	/^  ulint m_oldest;$/;"	m	class:SimulatedAIOHandler	file:
m_oom_fatal	include/ut0new.h	/^  bool m_oom_fatal;$/;"	m	class:ut_allocator
m_op	include/lob0lob.h	/^  opcode m_op;$/;"	m	class:lob::BtrContext
m_op	lob/lob0lob.cc	/^  opcode m_op;$/;"	m	struct:lob::Being_modified	file:
m_open_flags	include/fsp0file.h	/^  os_file_create_t m_open_flags;$/;"	m	class:Datafile
m_open_tables	include/sess0sess.h	/^  table_cache_t m_open_tables;$/;"	m	class:innodb_session_t
m_oper_mutex	include/arch0arch.h	/^  ib_mutex_t m_oper_mutex;$/;"	m	class:Arch_Page_Sys
m_optimize_latch	include/ut0lock_free_hash.h	/^  ib_mutex_t m_optimize_latch;$/;"	m	class:ut_lock_free_hash_t
m_options_enabled	include/log0test.h	/^  uint64_t m_options_enabled = 0;$/;"	m	class:Log_test::Options
m_order	include/fsp0file.h	/^  ulint m_order;$/;"	m	class:Datafile
m_original_size	os/file.h	/^    uint16_t m_original_size;$/;"	m	struct:Compression::meta_t
m_original_type	os/file.h	/^    uint16_t m_original_type;$/;"	m	struct:Compression::meta_t
m_oss	include/ut0ut.h	/^  std::ostringstream m_oss;$/;"	m	class:ib::logger
m_out	include/dict0mem.h	/^  std::ostream &m_out;$/;"	m	struct:dict_foreign_print
m_own_rtr_info	include/btr0cur.h	/^  bool m_own_rtr_info = true;$/;"	m	struct:btr_cur_t
m_owner	include/lob0lob.h	/^  bool m_owner;$/;"	m	struct:lob::ref_mem_t
m_owns_exclusive_global_latch	include/lock0guards.h	/^  bool m_owns_exclusive_global_latch;$/;"	m	class:locksys::Global_exclusive_try_latch
m_pad	include/ut0counter.h	/^  Pad m_pad;$/;"	m	struct:Counter::Shard
m_pad1	buf/buf0dblwr.cc	/^  byte m_pad1[ut::INNODB_CACHE_LINE_SIZE];$/;"	m	class:Batch_segment	file:
m_pad1	include/ut0mpmcbq.h	/^  Pad m_pad1;$/;"	m	class:mpmc_bq
m_pad2	buf/buf0dblwr.cc	/^  byte m_pad2[ut::INNODB_CACHE_LINE_SIZE];$/;"	m	class:Batch_segment	file:
m_pad2	include/ut0mpmcbq.h	/^  Pad m_pad2;$/;"	m	class:mpmc_bq
m_pad3	include/ut0mpmcbq.h	/^  Pad m_pad3;$/;"	m	class:mpmc_bq
m_padding_space	include/btr0bulk.h	/^  ulint m_padding_space;$/;"	m	class:PageBulk
m_page	include/btr0bulk.h	/^  page_t *m_page;$/;"	m	class:PageBulk
m_page_archiver	include/srv0srv.h	/^  IB_thread m_page_archiver;$/;"	m	struct:Srv_threads
m_page_bulks	include/btr0bulk.h	/^  page_bulk_vector *m_page_bulks;$/;"	m	class:BtrBulk
m_page_cleaner_coordinator	include/srv0srv.h	/^  IB_thread m_page_cleaner_coordinator;$/;"	m	struct:Srv_threads
m_page_cleaner_workers	include/srv0srv.h	/^  IB_thread *m_page_cleaner_workers;$/;"	m	struct:Srv_threads
m_page_cleaner_workers_n	include/srv0srv.h	/^  size_t m_page_cleaner_workers_n;$/;"	m	struct:Srv_threads
m_page_ctx	include/clone0snapshot.h	/^  Page_Arch_Client_Ctx m_page_ctx;$/;"	m	class:Clone_Snapshot
m_page_id	buf/buf0buf.cc	/^  const page_id_t &m_page_id;$/;"	m	struct:Buf_fetch	file:
m_page_id	include/lock0priv.h	/^  page_id_t m_page_id;$/;"	m	struct:RecID
m_page_no	include/btr0bulk.h	/^  page_no_t m_page_no;$/;"	m	class:PageBulk
m_page_no	include/buf0types.h	/^  page_no_t m_page_no;$/;"	m	class:page_id_t
m_page_no	include/clone0snapshot.h	/^  ib_uint32_t m_page_no;$/;"	m	struct:Clone_Page
m_page_no	include/lob0index.h	/^  page_no_t m_page_no;$/;"	m	struct:lob::index_entry_mem_t
m_page_no	include/lob0lob.h	/^  page_no_t m_page_no;$/;"	m	struct:lob::ReadContext
m_page_no	include/lob0lob.h	/^  page_no_t m_page_no;$/;"	m	struct:lob::blob_page_info_t
m_page_no	include/lob0lob.h	/^  page_no_t m_page_no;$/;"	m	struct:lob::ref_mem_t
m_page_no	include/lob0undo.h	/^  page_no_t m_page_no = FIL_NULL;$/;"	m	struct:lob::undo_data_t
m_page_no	include/log0ddl.h	/^  page_no_t m_page_no;$/;"	m	class:Log_Type::DDL_Record
m_page_no	include/zlob0index.h	/^  page_no_t m_page_no;$/;"	m	struct:lob::z_index_entry_t
m_page_no	row/row0import.cc	/^    page_no_t m_page_no; \/*!< Root page number *\/$/;"	m	struct:FetchIndexRootPages::Index	file:
m_page_no	row/row0import.cc	/^  page_no_t m_page_no; \/*!< Root page number *\/$/;"	m	struct:row_index_t	file:
m_page_set	include/clone0snapshot.h	/^  Clone_Page_Set m_page_set;$/;"	m	class:Clone_Snapshot
m_page_size	buf/buf0buf.cc	/^  const page_size_t &m_page_size;$/;"	m	struct:Buf_fetch	file:
m_page_size	fil/fil0fil.cc	/^  size_t m_page_size;$/;"	m	struct:Fil_page_iterator	file:
m_page_size	include/buf0checksum.h	/^  const page_size_t &m_page_size;$/;"	m	class:BlockReporter
m_page_size	include/fil0fil.h	/^  page_size_t m_page_size;$/;"	m	struct:PageCallback
m_page_size	include/fsp0fsp.h	/^  const page_size_t &m_page_size;$/;"	m	class:File_segment_inode
m_page_size	include/lob0lob.h	/^  const page_size_t &m_page_size;$/;"	m	struct:lob::ReadContext
m_page_size	include/lob0lob.h	/^  page_size_t m_page_size;$/;"	m	struct:lob::DeleteContext
m_page_size	include/row0pread.h	/^    const page_size_t m_page_size;$/;"	m	struct:Parallel_reader::Config
m_page_size	row/row0import.cc	/^  page_size_t m_page_size; \/*!< Tablespace page size *\/$/;"	m	struct:row_import	file:
m_page_type_ex	include/lob0lob.h	/^  ulint m_page_type_ex;$/;"	m	struct:lob::zReader
m_page_vector	include/clone0snapshot.h	/^  Clone_Page_Vec m_page_vector;$/;"	m	class:Clone_Snapshot
m_page_zip	include/btr0bulk.h	/^  page_zip_des_t *m_page_zip;$/;"	m	class:PageBulk
m_page_zip_ptr	row/row0import.cc	/^  page_zip_des_t *m_page_zip_ptr;$/;"	m	class:PageConverter	file:
m_pages	buf/buf0dblwr.cc	/^  Buffers m_pages;$/;"	m	class:dblwr::recv::Pages	file:
m_pages	include/lob0lob.h	/^  std::vector<blob_page_info_t> m_pages;$/;"	m	struct:lob::blob_dir_t
m_pages	include/log0recv.h	/^    Pages m_pages;$/;"	m	struct:recv_sys_t::Space
m_parallel_read_threads	include/row0pread.h	/^  std::vector<IB_thread, ut_allocator<IB_thread>> m_parallel_read_threads;$/;"	v
m_parallel_reader	include/row0pread-adapter.h	/^  Parallel_reader m_parallel_reader;$/;"	m	class:Parallel_reader_adapter
m_parallel_reader	include/row0pread-histogram.h	/^  Parallel_reader m_parallel_reader;$/;"	m	class:Histogram_sampler
m_part_id	handler/handler0alter.cc	/^  uint m_part_id;$/;"	m	class:alter_part	file:
m_part_share	handler/ha_innopart.h	/^  Ha_innopart_share *m_part_share;$/;"	m	class:ha_innopart
m_part_share	handler/handler0alter.cc	/^  Ha_innopart_share *const m_part_share;$/;"	m	class:alter_part_factory	file:
m_part_share	handler/handler0alter.cc	/^  Ha_innopart_share *const m_part_share;$/;"	m	class:alter_parts	file:
m_partial	include/lob0lob.h	/^  bool m_partial;$/;"	m	struct:lob::ref_mem_t
m_partition	handler/ha_innodb.h	/^  bool m_partition;$/;"	m	class:create_table_info_t
m_path	include/fil0fil.h	/^  std::string m_path;$/;"	m	class:Fil_path
m_path	include/fsp0space.h	/^  char *m_path;$/;"	m	class:Tablespace
m_pcur	handler/ha_innopart.h	/^  btr_pcur_t *m_pcur;$/;"	m	class:ha_innopart
m_pcur	include/lob0lob.h	/^  btr_pcur_t *m_pcur;$/;"	m	class:lob::BtrContext
m_pcur	lob/lob0lob.cc	/^  btr_pcur_t *m_pcur;$/;"	m	struct:lob::Being_modified	file:
m_pcur	row/row0import.cc	/^  btr_pcur_t m_pcur;     \/*!< Persistent cursor *\/$/;"	m	class:IndexPurge	file:
m_pcur_map	handler/ha_innopart.h	/^  uint16_t *m_pcur_map;$/;"	m	class:ha_innopart
m_pcur_parts	handler/ha_innopart.h	/^  btr_pcur_t *m_pcur_parts;$/;"	m	class:ha_innopart
m_pending_free	include/ut0lock_free_hash.h	/^  std::atomic_bool m_pending_free;$/;"	m	class:ut_lock_free_list_node_t
m_persisters	include/dict0mem.h	/^  persisters_t m_persisters;$/;"	m	class:Persisters
m_pfs_data_chunk_size	include/clone0monitor.h	/^  uint m_pfs_data_chunk_size;$/;"	m	class:Clone_Monitor
m_pfs_key	include/os0thread-create.h	/^  const mysql_pfs_key_t m_pfs_key;$/;"	m	class:Runnable
m_pfs_key	include/sync0types.h	/^  pfs_key_t m_pfs_key;$/;"	m	class:LatchMeta
m_pk	include/ut0stage.h	/^  const dict_index_t *m_pk;$/;"	m	class:ut_stage_alter_t
m_policy	include/ib0mutex.h	/^  MutexPolicy m_policy;$/;"	m	struct:OSTrackMutex
m_policy	include/ib0mutex.h	/^  MutexPolicy m_policy;$/;"	v
m_policy	include/ut0counter.h	/^  Indexer<Type, N> m_policy;$/;"	m	class:ib_counter_t
m_pool	include/ut0pool.h	/^    Pool *m_pool;$/;"	m	struct:Pool::Element
m_pool_initialized	include/srv0tmp.h	/^  bool m_pool_initialized;$/;"	m	class:ibt::Tablespace_pool
m_pools	include/ut0pool.h	/^  Pools m_pools;$/;"	m	struct:PoolManager
m_pos	include/row0row.h	/^  uint32_t m_pos;$/;"	m	class:Multi_value_entry_builder
m_pos	include/ut0mpmcbq.h	/^    std::atomic<size_t> m_pos;$/;"	m	struct:mpmc_bq::Cell
m_pqueue	include/ut0pool.h	/^  pqueue_t m_pqueue;$/;"	m	struct:Pool
m_preallocated_buffer	include/rem0rec.h	/^  ulint m_preallocated_buffer[REC_OFFS_NORMAL_SIZE];$/;"	m	class:Rec_offsets
m_prebuilt	handler/ha_innodb.h	/^  row_prebuilt_t *m_prebuilt;$/;"	m	class:ha_innobase
m_prev	include/lob0index.h	/^  fil_addr_t m_prev;$/;"	m	struct:lob::index_entry_mem_t
m_prev	include/zlob0index.h	/^  fil_addr_t m_prev;$/;"	m	struct:lob::z_index_entry_mem_t
m_prev_page_no	include/lob0ins.h	/^  page_no_t m_prev_page_no;$/;"	m	struct:lob::BaseInserter
m_prev_view	read/read0read.cc	/^  const ReadView *m_prev_view;$/;"	m	struct:ViewCheck	file:
m_progress	include/clone0monitor.h	/^  PSI_stage_progress *m_progress;$/;"	m	class:Clone_Monitor
m_progress	include/ut0stage.h	/^  PSI_stage_progress *m_progress;$/;"	m	class:ut_stage_alter_t
m_progress	include/ut0stage.h	/^  PSI_stage_progress *m_progress;$/;"	m	class:ut_stage_alter_ts
m_promise	include/os0thread-create.h	/^  std::promise<void> m_promise;$/;"	m	class:Runnable
m_psi	include/os0file.h	/^  struct PSI_file *m_psi;$/;"	m	struct:pfs_os_file_t	typeref:struct:pfs_os_file_t::PSI_file
m_psi_event_id	include/lock0priv.h	/^  ulonglong m_psi_event_id;$/;"	m	struct:lock_t
m_psi_internal_thread_id	include/lock0priv.h	/^  ulonglong m_psi_internal_thread_id;$/;"	m	struct:lock_t
m_ptr	include/buf0dblwr.h	/^    m_ptr = static_cast<byte *>(ut_align(m_ptr_unaligned, UNIV_PAGE_SIZE));$/;"	m	struct:dblwr::Buffer
m_ptr	include/os0file.h	/^  byte *m_ptr;$/;"	m	struct:file::Block
m_ptr	include/read0types.h	/^    value_type *m_ptr;$/;"	m	class:ReadView::ids_t
m_ptr	mtr/mtr0mtr.cc	/^  const void *const m_ptr;$/;"	m	struct:Find_page	file:
m_ptr	mtr/mtr0mtr.cc	/^  const void *m_ptr;$/;"	m	struct:FlaggedCheck	file:
m_ptr	os/os0file.cc	/^  byte *m_ptr;$/;"	m	class:SimulatedAIOHandler	file:
m_ptr_unaligned	include/buf0dblwr.h	/^    m_ptr_unaligned = static_cast<byte *>(ut_zalloc_nokey(n_bytes));$/;"	m	struct:dblwr::Buffer
m_punch_hole	include/clone0desc.h	/^  bool m_punch_hole;$/;"	m	struct:Clone_File_Meta
m_purge_coordinator	include/srv0srv.h	/^  IB_thread m_purge_coordinator;$/;"	m	struct:Srv_threads
m_purge_mutex	include/log0test.h	/^  mutable std::mutex m_purge_mutex;$/;"	m	class:Log_test::Options
m_purge_sys	include/trx0purge.h	/^  trx_purge_t *m_purge_sys;$/;"	m	struct:TrxUndoRsegsIterator
m_purge_workers	include/srv0srv.h	/^  IB_thread *m_purge_workers;$/;"	m	struct:Srv_threads
m_purge_workers_n	include/srv0srv.h	/^  size_t m_purge_workers_n;$/;"	m	struct:Srv_threads
m_purpose	include/srv0tmp.h	/^  enum tbsp_purpose m_purpose;$/;"	m	class:ibt::Tablespace	typeref:enum:ibt::Tablespace::tbsp_purpose
m_random_engine	include/fsp0fsp.h	/^  std::default_random_engine m_random_engine;$/;"	m	class:File_segment_inode
m_random_generator	include/row0pread-histogram.h	/^  std::mt19937 m_random_generator;$/;"	m	class:Histogram_sampler
m_rctx	include/lob0lob.h	/^  ReadContext m_rctx;$/;"	m	struct:lob::Reader
m_rctx	include/lob0lob.h	/^  ReadContext m_rctx;$/;"	m	struct:lob::zReader
m_rd	include/fsp0fsp.h	/^  std::random_device m_rd;$/;"	m	class:File_segment_inode
m_read_buf	include/buf0checksum.h	/^  const byte *m_read_buf;$/;"	m	class:BlockReporter
m_read_virtual_key	include/row0mysql.h	/^  bool m_read_virtual_key;$/;"	m	struct:row_prebuilt_t
m_rebuild	handler/handler0alter.cc	/^  bool m_rebuild;$/;"	m	struct:alter_table_old_info_t	file:
m_rec	include/btr0bulk.h	/^    rec_t *m_rec;$/;"	m	struct:PageBulk::SplitPoint
m_rec	include/lob0lob.h	/^  rec_t *m_rec;$/;"	m	class:lob::BtrContext
m_rec	include/rem0rec.h	/^  const rec_t *m_rec;$/;"	m	struct:rec_index_print
m_rec	include/rem0rec.h	/^  const rec_t *m_rec;$/;"	m	struct:rec_offsets_print
m_rec_id	include/lock0priv.h	/^  RecID m_rec_id;$/;"	m	class:RecLock
m_rec_iter	row/row0import.cc	/^  RecIterator m_rec_iter;$/;"	m	class:PageConverter	file:
m_rec_no	include/btr0bulk.h	/^  ulint m_rec_no;$/;"	m	class:PageBulk
m_rec_offset	include/lob0lob.h	/^  ulint m_rec_offset;$/;"	m	class:lob::BtrContext
m_recovered	include/log0test.h	/^  Pages m_recovered;$/;"	m	class:Log_test::Options
m_recv_writer	include/srv0srv.h	/^  IB_thread m_recv_writer;$/;"	m	struct:Srv_threads
m_redo	include/trx0trx.h	/^  trx_undo_ptr_t m_redo;$/;"	m	struct:trx_rsegs_t
m_redo_ctx	include/clone0snapshot.h	/^  Log_Arch_Client_Ctx m_redo_ctx;$/;"	m	class:Clone_Snapshot
m_redo_file_size	include/clone0snapshot.h	/^  ib_uint64_t m_redo_file_size;$/;"	m	class:Clone_Snapshot
m_redo_file_vector	include/clone0snapshot.h	/^  Clone_File_Vec m_redo_file_vector;$/;"	m	class:Clone_Snapshot
m_redo_header	include/clone0snapshot.h	/^  byte *m_redo_header;$/;"	m	class:Clone_Snapshot
m_redo_header_size	include/clone0snapshot.h	/^  uint m_redo_header_size;$/;"	m	class:Clone_Snapshot
m_redo_start_offset	include/clone0snapshot.h	/^  ib_uint64_t m_redo_start_offset;$/;"	m	class:Clone_Snapshot
m_redo_trailer	include/clone0snapshot.h	/^  byte *m_redo_trailer;$/;"	m	class:Clone_Snapshot
m_redo_trailer_offset	include/clone0snapshot.h	/^  ib_uint64_t m_redo_trailer_offset;$/;"	m	class:Clone_Snapshot
m_redo_trailer_size	include/clone0snapshot.h	/^  uint m_redo_trailer_size;$/;"	m	class:Clone_Snapshot
m_ref	include/lob0lob.h	/^  byte *m_ref;$/;"	m	struct:lob::ref_t
m_ref_count	handler/ha_innopart.h	/^  uint m_ref_count;$/;"	m	class:Ha_innopart_share
m_ref_count	include/clone0clone.h	/^  uint m_ref_count;$/;"	m	class:Clone_Handle
m_remaining	include/lob0ins.h	/^  ulint m_remaining;$/;"	m	class:lob::Inserter
m_remaining	include/lob0lob.h	/^  ulint m_remaining;$/;"	m	struct:lob::zReader
m_remote_path	handler/ha_innodb.h	/^  char *m_remote_path;$/;"	m	class:create_table_info_t
m_removed	buf/buf0flu.cc	/^      m_removed(srv_buf_pool_instances) {$/;"	f
m_replace_heap	include/dict0dict.h	/^  mem_heap_t *m_replace_heap;$/;"	m	class:DDTableBuffer
m_replace_tuple	include/dict0dict.h	/^  dtuple_t *m_replace_tuple;$/;"	m	class:DDTableBuffer
m_request_interval	log/log0write.cc	/^  uint64_t m_request_interval;$/;"	m	struct:Log_write_to_file_requests_monitor	file:
m_reserved	include/read0types.h	/^    ulint m_reserved;$/;"	m	class:ReadView::ids_t
m_reserved_chunks	include/clone0desc.h	/^  Chnunk_Bitmap m_reserved_chunks;$/;"	m	struct:Chunk_Info
m_reserved_space	include/btr0bulk.h	/^  ulint m_reserved_space;$/;"	m	class:PageBulk
m_reset	include/arch0arch.h	/^  Arch_Reset m_reset;$/;"	m	class:Arch_File_Ctx
m_restart_count	include/clone0clone.h	/^  uint m_restart_count;$/;"	m	class:Clone_Task_Manager
m_restart_loc	include/clone0clone.h	/^  byte *m_restart_loc;$/;"	m	class:Clone_Handle
m_restart_loc_len	include/clone0clone.h	/^  uint m_restart_loc_len;$/;"	m	class:Clone_Handle
m_result	include/dict0dd.h	/^  byte *m_result;$/;"	m	class:DD_instant_col_val_coder
m_result	include/sync0types.h	/^  bool m_result;$/;"	m	struct:btrsea_sync_check
m_result	include/sync0types.h	/^  bool m_result;$/;"	m	struct:dict_sync_check
m_result	include/sync0types.h	/^  bool m_result;$/;"	m	struct:sync_allowed_latches
m_return_type	log/log0meb.cc	/^  const Item_result m_return_type;$/;"	m	struct:meb::udf_data_t	file:
m_ring	include/ut0mpmcbq.h	/^  Cell *const m_ring;$/;"	m	class:mpmc_bq
m_rollback	include/lob0lob.h	/^  bool m_rollback;$/;"	m	struct:lob::DeleteContext
m_root_level	include/btr0bulk.h	/^  ulint m_root_level;$/;"	m	class:BtrBulk
m_row	include/row0row.h	/^  const dtuple_t *m_row;$/;"	m	class:Multi_value_entry_builder_normal
m_row_read_type_parts	handler/ha_innopart.h	/^  ulint *m_row_read_type_parts;$/;"	m	class:ha_innopart
m_rsegs	include/trx0purge.h	/^  Rsegs *m_rsegs;$/;"	m	struct:undo::Tablespace
m_rsegs	include/trx0types.h	/^  Rsegs_Vector m_rsegs;$/;"	m	class:Rsegs
m_rsegs	include/trx0types.h	/^  Rsegs_Vector m_rsegs;$/;"	m	class:TrxUndoRsegs
m_ru	include/ut0dbg.h	/^  struct rusage m_ru;$/;"	m	class:ut_chrono_t	typeref:struct:ut_chrono_t::rusage
m_rw_latch	buf/buf0buf.cc	/^  ulint m_rw_latch;$/;"	m	struct:Buf_fetch	file:
m_rw_lock	include/sync0types.h	/^  bool m_rw_lock;$/;"	m	struct:latch_t
m_sanity_checks_done	include/fsp0sysspace.h	/^  bool m_sanity_checks_done;$/;"	m	class:SysTablespace
m_saved_error	include/clone0clone.h	/^  int m_saved_error;$/;"	m	class:Clone_Task_Manager
m_scan_pass	handler/p_s.cc	/^  scan_pass m_scan_pass;$/;"	m	class:Innodb_trx_scan_state	file:
m_scan_range	include/row0pread.h	/^    const Scan_range m_scan_range;$/;"	m	struct:Parallel_reader::Config
m_scan_state	handler/p_s.cc	/^  Innodb_trx_scan_state m_scan_state;$/;"	m	class:Innodb_data_lock_iterator	file:
m_scan_state	handler/p_s.cc	/^  Innodb_trx_scan_state m_scan_state;$/;"	m	class:Innodb_data_lock_wait_iterator	file:
m_sdi	include/dict0sdi.h	/^  const void *m_sdi;$/;"	m	class:Sdi_Compressor
m_search_tuple	include/dict0dict.h	/^  dtuple_t *m_search_tuple;$/;"	m	class:DDTableBuffer
m_segid	include/fsp0fsp.h	/^  ib_id_t m_segid;$/;"	m	struct:fsp_header_mem_t
m_segment	os/os0file.cc	/^  ulint m_segment;$/;"	m	class:LinuxAIOHandler	file:
m_segment	os/os0file.cc	/^  ulint m_segment;$/;"	m	class:SimulatedAIOHandler	file:
m_selected	include/row0row.h	/^  const bool m_selected;$/;"	m	class:Multi_value_entry_builder
m_self	include/lob0index.h	/^  fil_addr_t m_self;$/;"	m	struct:lob::index_entry_mem_t
m_self	include/zlob0index.h	/^  fil_addr_t m_self;$/;"	m	struct:lob::z_index_entry_mem_t
m_send_state_meta	include/clone0clone.h	/^  bool m_send_state_meta;$/;"	m	class:Clone_Task_Manager
m_seq	include/lock0lock.h	/^  std::atomic<uint64_t> m_seq;$/;"	m	struct:lock_sys_t
m_seq	include/lock0priv.h	/^  uint64_t m_seq;$/;"	m	struct:lock_t
m_serial_desc	include/clone0clone.h	/^  byte *m_serial_desc;$/;"	m	struct:Clone_Task
m_server_version	include/fsp0file.h	/^  uint32 m_server_version;$/;"	m	class:Datafile
m_set	os/os0event.cc	/^  bool m_set;           \/*!< this is true when the$/;"	m	struct:os_event	file:
m_shard_id	include/lock0latches.h	/^    static thread_local size_t m_shard_id;$/;"	m	class:locksys::Latches::Unique_sharded_rw_lock
m_shard_index	include/mtr0mtr.h	/^    size_t m_shard_index;$/;"	m	struct:mtr_t::Impl
m_shard_mutex	include/lock0guards.h	/^  Lock_mutex &m_shard_mutex;$/;"	m	class:locksys::Shard_naked_latch_guard
m_shard_mutex_1	include/lock0guards.h	/^  Lock_mutex &m_shard_mutex_1;$/;"	m	class:locksys::Shard_naked_latches_guard
m_shard_mutex_2	include/lock0guards.h	/^  Lock_mutex &m_shard_mutex_2;$/;"	m	class:locksys::Shard_naked_latches_guard
m_shard_naked_latch_guard	include/lock0guards.h	/^  Shard_naked_latch_guard m_shard_naked_latch_guard;$/;"	m	class:locksys::Shard_latch_guard
m_shard_naked_latches_guard	include/lock0guards.h	/^  Shard_naked_latches_guard m_shard_naked_latches_guard;$/;"	m	class:locksys::Shard_latches_guard
m_shards	fil/fil0fil.cc	/^  Fil_shards m_shards;$/;"	m	class:Fil_system	file:
m_shards	include/sync0sharded_rw.h	/^  Shard *m_shards = nullptr;$/;"	m	class:Sharded_rw_lock
m_share	handler/ha_innodb.h	/^  INNOBASE_SHARE *m_share;$/;"	m	class:ha_innobase
m_shared_future	include/os0thread.h	/^  std::shared_future<void> m_shared_future;$/;"	m	class:IB_thread
m_show_from_destructor	include/ut0dbg.h	/^  bool m_show_from_destructor;$/;"	m	class:ut_chrono_t
m_shutdown_cleanup_dbg	include/srv0srv.h	/^  os_event_t m_shutdown_cleanup_dbg;$/;"	m	struct:Srv_threads
m_sig_count	include/row0pread.h	/^  uint64_t m_sig_count;$/;"	v
m_size	include/arch0arch.h	/^  uint m_size;$/;"	m	class:Arch_Block
m_size	include/clone0desc.h	/^  size_t m_size;$/;"	m	class:Chnunk_Bitmap
m_size	include/dyn0buf.h	/^  ulint m_size;$/;"	m	class:dyn_buf_t
m_size	include/fsp0file.h	/^  page_no_t m_size;$/;"	m	class:Datafile
m_size	include/lock0priv.h	/^  size_t m_size;$/;"	m	class:RecLock
m_size	include/read0types.h	/^    ulint m_size;$/;"	m	class:ReadView::ids_t
m_size	include/ut0bitset.h	/^  size_t m_size;$/;"	m	class:Bitset
m_size	include/ut0new.h	/^  size_t m_size;$/;"	m	class:aligned_array_pointer
m_size	include/ut0pool.h	/^  size_t m_size;$/;"	m	struct:Pool
m_size	include/ut0pool.h	/^  size_t m_size;$/;"	m	struct:PoolManager
m_size	row/row0import.cc	/^  page_no_t m_size;$/;"	m	class:AbstractCallback	file:
m_skip_checksum	include/buf0checksum.h	/^  bool m_skip_checksum;$/;"	m	class:BlockReporter
m_skip_strict	handler/ha_innodb.h	/^  bool m_skip_strict;$/;"	m	class:create_table_info_t
m_slot	mtr/mtr0mtr.cc	/^  mtr_memo_slot_t *m_slot;$/;"	m	struct:Find	file:
m_slot	mtr/mtr0mtr.cc	/^  mtr_memo_slot_t *m_slot;$/;"	m	struct:Find_page	file:
m_slots	os/os0file.cc	/^  Slots m_slots;$/;"	m	class:AIO	file:
m_slots	os/os0file.cc	/^  slots_t m_slots;$/;"	m	class:SimulatedAIOHandler	file:
m_slotted_rec_no	include/btr0bulk.h	/^  ulint m_slotted_rec_no;$/;"	m	class:PageBulk
m_snapshot_arr	include/clone0clone.h	/^  Clone_Snapshot *m_snapshot_arr[SNAPSHOT_ARR_SIZE];$/;"	m	class:Clone_Sys
m_snapshot_arr_idx	include/clone0snapshot.h	/^  uint m_snapshot_arr_idx;$/;"	m	class:Clone_Snapshot
m_snapshot_handle_type	include/clone0snapshot.h	/^  Clone_Handle_Type m_snapshot_handle_type;$/;"	m	class:Clone_Snapshot
m_snapshot_heap	include/clone0snapshot.h	/^  mem_heap_t *m_snapshot_heap;$/;"	m	class:Clone_Snapshot
m_snapshot_id	include/clone0desc.h	/^  uint64_t m_snapshot_id;$/;"	m	struct:Clone_Desc_Locator
m_snapshot_id	include/clone0snapshot.h	/^  ib_uint64_t m_snapshot_id;$/;"	m	class:Clone_Snapshot
m_snapshot_mutex	include/clone0snapshot.h	/^  ib_mutex_t m_snapshot_mutex;$/;"	m	class:Clone_Snapshot
m_snapshot_next_state	include/clone0snapshot.h	/^  Snapshot_State m_snapshot_next_state;$/;"	m	class:Clone_Snapshot
m_snapshot_state	include/clone0snapshot.h	/^  Snapshot_State m_snapshot_state;$/;"	m	class:Clone_Snapshot
m_snapshot_type	include/clone0snapshot.h	/^  Ha_clone_type m_snapshot_type;$/;"	m	class:Clone_Snapshot
m_sort_multi_factor	include/ut0stage.h	/^  ulint m_sort_multi_factor;$/;"	m	class:ut_stage_alter_t
m_space	fil/fil0fil.cc	/^  fil_space_t *m_space;$/;"	m	struct:MEB_file_name	file:
m_space	include/buf0types.h	/^  space_id_t m_space;$/;"	m	class:page_id_t
m_space	row/row0import.cc	/^  space_id_t m_space; \/*!< Space where it is placed *\/$/;"	m	struct:row_index_t	file:
m_space	row/row0import.cc	/^  space_id_t m_space;$/;"	m	class:AbstractCallback	file:
m_space_flags	row/row0import.cc	/^  uint32_t m_space_flags;$/;"	m	class:AbstractCallback	file:
m_space_id	include/clone0desc.h	/^  space_id_t m_space_id;$/;"	m	struct:Clone_File_Meta
m_space_id	include/clone0snapshot.h	/^  ib_uint32_t m_space_id;$/;"	m	struct:Clone_Page
m_space_id	include/dict0types.h	/^  space_id_t m_space_id;$/;"	m	class:index_id_t
m_space_id	include/fsp0file.h	/^  space_id_t m_space_id;$/;"	m	class:Datafile
m_space_id	include/fsp0fsp.h	/^  space_id_t m_space_id;$/;"	m	class:File_segment_inode
m_space_id	include/fsp0fsp.h	/^  ulint m_space_id;$/;"	m	struct:fsp_header_mem_t
m_space_id	include/fsp0space.h	/^  space_id_t m_space_id;$/;"	m	class:Tablespace
m_space_id	include/lob0lob.h	/^  space_id_t m_space_id;$/;"	m	struct:lob::ReadContext
m_space_id	include/lob0lob.h	/^  space_id_t m_space_id;$/;"	m	struct:lob::ref_mem_t
m_space_id	include/log0ddl.h	/^  space_id_t m_space_id;$/;"	m	class:Log_Type::DDL_Record
m_space_id	include/srv0tmp.h	/^  const space_id_t m_space_id;$/;"	m	class:ibt::Tablespace
m_space_id_marked	include/trx0purge.h	/^  space_id_t m_space_id_marked;$/;"	m	class:undo::Truncate
m_space_id_reuse_warned	fil/fil0fil.cc	/^  bool m_space_id_reuse_warned;$/;"	m	class:Fil_system	file:
m_space_initialized	include/clone0clone.h	/^  std::atomic<bool> m_space_initialized;$/;"	m	class:Clone_Sys
m_space_max_id	handler/ha_innodb.cc	/^  space_id_t m_space_max_id;$/;"	m	class:Validate_files	file:
m_space_name	include/trx0purge.h	/^  char *m_space_name;$/;"	m	struct:undo::Tablespace
m_space_version	include/fsp0file.h	/^  uint32 m_space_version;$/;"	m	class:Datafile
m_spaces	fil/fil0fil.cc	/^  Spaces m_spaces;$/;"	m	class:Fil_shard	file:
m_spaces	include/trx0purge.h	/^  Tablespaces_Vector m_spaces;$/;"	m	class:undo::Tablespaces
m_spin_delay	log/log0write.cc	/^  const uint32_t m_spin_delay;$/;"	m	struct:Log_thread_waiting	file:
m_spins	handler/ha_innodb.cc	/^    ulint m_spins;$/;"	m	struct:ShowStatus::Value	file:
m_spins	include/sync0types.h	/^    uint32_t m_spins;$/;"	m	struct:LatchCounter::Count
m_sql_stat_start	handler/handler0alter.cc	/^  Sql_stat_start_parts m_sql_stat_start;$/;"	m	class:Altered_partitions	file:
m_sql_stat_start_parts	handler/ha_innopart.h	/^  Sql_stat_start_parts m_sql_stat_start_parts;$/;"	m	class:ha_innopart
m_src_len	include/dict0sdi.h	/^  uint32_t m_src_len;$/;"	m	class:Sdi_Compressor
m_srv_index	row/row0import.cc	/^  const dict_index_t *m_srv_index; \/*!< Index instance in the$/;"	m	struct:row_index_t	file:
m_stage	handler/handler0alter.cc	/^  ut_stage_alter_t *m_stage;$/;"	m	struct:ha_innobase_inplace_ctx	file:
m_start	fil/fil0fil.cc	/^  os_offset_t m_start;$/;"	m	struct:Fil_page_iterator	file:
m_start	include/page0types.h	/^  uint16_t m_start;$/;"	m	struct:page_zip_des_t
m_start	include/ut0pool.h	/^  Element *m_start;$/;"	m	struct:Pool
m_start	include/ut0ut.h	/^  SC::time_point m_start;$/;"	m	class:ib::Timer
m_start_buffer_event	include/row0pread-histogram.h	/^  os_event_t m_start_buffer_event;$/;"	m	class:Histogram_sampler
m_start_log_index	include/arch0arch.h	/^  uint m_start_log_index;$/;"	m	class:Arch_Log_Sys
m_start_log_offset	include/arch0arch.h	/^  ib_uint64_t m_start_log_offset;$/;"	m	class:Arch_Log_Sys
m_start_lsn	mtr/mtr0mtr.cc	/^  const lsn_t m_start_lsn;$/;"	m	struct:Add_dirty_blocks_to_flush_list	file:
m_start_of_scan	handler/ha_innodb.h	/^  bool m_start_of_scan;$/;"	m	class:ha_innobase
m_start_point	include/arch0arch.h	/^  std::vector<Arch_Point> m_start_point;$/;"	m	struct:Arch_Reset_File
m_start_pos	include/arch0page.h	/^  Arch_Page_Pos m_start_pos;$/;"	m	class:Page_Arch_Client_Ctx
m_start_time	handler/ha_innodb.cc	/^  std::atomic<ib_time_monotonic_t> m_start_time;$/;"	m	class:Validate_files	file:
m_start_trx_id_range	handler/p_s.cc	/^  trx_id_t m_start_trx_id_range;$/;"	m	class:Innodb_trx_scan_state	file:
m_state	handler/handler0alter.cc	/^  partition_state m_state;$/;"	m	class:alter_part	file:
m_state	include/arch0arch.h	/^  Arch_State m_state;$/;"	m	class:Arch_Log_Sys
m_state	include/arch0log.h	/^  Arch_Client_State m_state;$/;"	m	class:Log_Arch_Client_Ctx
m_state	include/clone0desc.h	/^  Snapshot_State m_state;$/;"	m	struct:Clone_Desc_Data
m_state	include/clone0desc.h	/^  Snapshot_State m_state;$/;"	m	struct:Clone_Desc_File_MetaData
m_state	include/clone0desc.h	/^  Snapshot_State m_state;$/;"	m	struct:Clone_Desc_Locator
m_state	include/clone0desc.h	/^  Snapshot_State m_state;$/;"	m	struct:Clone_Desc_State
m_state	include/mtr0mtr.h	/^    mtr_state_t m_state;$/;"	m	struct:mtr_t::Impl
m_state	include/mtr0mtr.h	/^    std::atomic<State> m_state;$/;"	m	class:mtr_t::Logging
m_state	include/os0thread.h	/^  std::shared_ptr<std::atomic<State>> m_state;$/;"	m	class:IB_thread
m_state	include/trx0types.h	/^  undo_space_states m_state;$/;"	m	class:Rsegs
m_state	log/log0meb.cc	/^  bool *m_state;$/;"	m	class:meb::Guardian	file:
m_state_mutex	include/clone0clone.h	/^  ib_mutex_t m_state_mutex;$/;"	m	class:Clone_Task_Manager
m_states	include/ut0stateful_latching_rules.h	/^  const nodes_set_t m_states;$/;"	m	class:ut::Stateful_latching_rules
m_stats	row/row0import.cc	/^  row_stats_t m_stats; \/*!< Statistics gathered during$/;"	m	struct:row_index_t	file:
m_stop_points	include/arch0arch.h	/^  std::vector<lsn_t> m_stop_points;$/;"	m	class:Arch_File_Ctx
m_stop_pos	include/arch0page.h	/^  Arch_Page_Pos m_stop_pos;$/;"	m	class:Page_Arch_Client_Ctx
m_stop_tuple	include/row0mysql.h	/^  dtuple_t *m_stop_tuple;$/;"	m	struct:row_prebuilt_t
m_stop_tuple_found	include/row0mysql.h	/^  bool m_stop_tuple_found;$/;"	m	struct:row_prebuilt_t
m_store	include/buf0stats.h	/^  ut_lock_free_hash_t *m_store;$/;"	m	class:buf_stat_per_index_t
m_stored_select_lock_type	handler/ha_innodb.h	/^  ulint m_stored_select_lock_type;$/;"	m	class:ha_innobase
m_stream	include/lob0lob.h	/^  z_stream m_stream;$/;"	m	struct:lob::zReader
m_stream	include/lob0zip.h	/^  z_stream m_stream;$/;"	m	class:lob::zInserter
m_sum_of_other_index_sizes	include/dict0stats.h	/^  ulint m_sum_of_other_index_sizes;$/;"	m	class:TableStatsRecord
m_sync	include/mtr0mtr.h	/^  bool m_sync;$/;"	m	struct:mtr_t
m_sync	include/row0pread.h	/^  bool m_sync;$/;"	v
m_sync	mtr/mtr0mtr.cc	/^  bool m_sync;$/;"	m	class:mtr_t::Command	file:
m_sync	row/row0pread.cc	/^      m_sync(sync) {$/;"	f
m_sync_points	include/log0test.h	/^  Sync_points m_sync_points;$/;"	m	class:Log_test::Options
m_table	handler/ha_innodb.h	/^  dict_table_t *m_table;$/;"	m	class:create_table_info_t
m_table	handler/ha_innodb.h	/^  dict_table_t *m_table;$/;"	m	class:innobase_truncate
m_table	include/log0ddl.h	/^  dict_table_t *m_table;$/;"	m	class:Log_Type::DDL_Log_Table
m_table	row/row0import.cc	/^  const dict_table_t *m_table;$/;"	m	struct:FetchIndexRootPages	file:
m_table	row/row0import.cc	/^  dict_table_t *m_table; \/*!< Table instance *\/$/;"	m	struct:row_import	file:
m_table_flags	row/row0import.cc	/^  uint32_t m_table_flags;$/;"	m	class:AbstractCallback	file:
m_table_id	include/log0ddl.h	/^  table_id_t m_table_id;$/;"	m	class:Log_Type::DDL_Record
m_table_name	handler/ha_innodb.h	/^  char *m_table_name;$/;"	m	class:create_table_info_t
m_table_name	handler/handler0alter.cc	/^  const char *m_table_name;$/;"	m	class:alter_part	file:
m_table_name	row/row0import.cc	/^  byte *m_table_name; \/*!< Exporting instance table$/;"	m	struct:row_import	file:
m_table_parts	handler/ha_innopart.h	/^  dict_table_t **m_table_parts;$/;"	m	class:Ha_innopart_share
m_table_share	handler/ha_innopart.h	/^  TABLE_SHARE *m_table_share;$/;"	m	class:Ha_innopart_share
m_tables	include/log0recv.h	/^  PersistentTables m_tables;$/;"	m	class:MetadataRecover
m_tablespace	handler/ha_innodb.h	/^  char *m_tablespace;$/;"	m	class:create_table_info_t
m_tablespace	handler/handler0alter.cc	/^  char m_tablespace[FN_REFLEN + 1];$/;"	m	class:alter_part_add	file:
m_tablespace	handler/handler0alter.cc	/^  char m_tablespace[FN_REFLEN + 1];$/;"	m	class:alter_part_change	file:
m_tail	include/ut0link_buf.h	/^  alignas(ut::INNODB_CACHE_LINE_SIZE) std::atomic<Position> m_tail;$/;"	m	class:Link_buf
m_task_index	include/clone0desc.h	/^  uint m_task_index;$/;"	m	struct:Clone_Desc_State
m_task_index	include/clone0desc.h	/^  uint m_task_index;$/;"	m	struct:Clone_Task_Meta
m_task_meta	include/clone0clone.h	/^  Clone_Task_Meta m_task_meta;$/;"	m	struct:Clone_Task
m_task_meta	include/clone0desc.h	/^  Clone_Task_Meta m_task_meta;$/;"	m	struct:Clone_Desc_Data
m_task_meta	include/clone0desc.h	/^  Clone_Task_Meta m_task_meta;$/;"	m	struct:Clone_Desc_Task_Meta
m_task_state	include/clone0clone.h	/^  Clone_Task_State m_task_state;$/;"	m	struct:Clone_Task
m_tbl_name	include/dict0stats.h	/^  char *m_tbl_name;$/;"	m	class:TableStatsRecord
m_temp_fsp	include/sync0types.h	/^                                                                 m_temp_fsp() {}$/;"	f	struct:latch_t
m_temp_fsp	include/sync0types.h	/^  bool m_temp_fsp;$/;"	m	struct:latch_t
m_temp_read_shared	include/row0mysql.h	/^  bool m_temp_read_shared;$/;"	m	struct:row_prebuilt_t
m_temp_tree_modified	include/row0mysql.h	/^  bool m_temp_tree_modified;$/;"	m	struct:row_prebuilt_t
m_thd	handler/ha_innodb.h	/^  THD *m_thd;$/;"	m	class:create_table_info_t
m_thd	handler/ha_innodb.h	/^  THD *m_thd;$/;"	m	class:innobase_truncate
m_thr	include/lock0priv.h	/^  que_thr_t *m_thr;$/;"	m	class:RecLock
m_thr	include/log0ddl.h	/^  que_thr_t *m_thr;$/;"	m	class:Log_Type::DDL_Log_Table
m_thread	include/os0thread-create.h	/^  mutable IB_thread m_thread;$/;"	m	class:Runnable
m_thread_active	include/clone0repl.h	/^  std::atomic<bool> m_thread_active;$/;"	m	class:Clone_persist_gtid
m_thread_ctxs	include/row0pread.h	/^  std::vector<Thread_ctx *, ut_allocator<Thread_ctx *>> m_thread_ctxs;$/;"	v
m_thread_id	include/log0ddl.h	/^  ulint m_thread_id;$/;"	m	class:Log_Type::DDL_Record
m_thread_id	include/srv0tmp.h	/^  my_thread_id m_thread_id;$/;"	m	class:ibt::Tablespace
m_thread_id	include/sync0policy.h	/^    std::thread::id m_thread_id;$/;"	m	struct:MutexDebug::Context
m_threads	sync/sync0debug.cc	/^  ThreadMap m_threads;$/;"	m	struct:LatchDebug	file:
m_timer	include/trx0purge.h	/^  ib::Timer m_timer;$/;"	m	class:undo::Truncate
m_to	include/ut0stateful_latching_rules.h	/^    node_t m_to;$/;"	m	struct:ut::Stateful_latching_rules::edge_t
m_to_drop	handler/handler0alter.cc	/^  alter_part_array m_to_drop;$/;"	m	class:alter_parts	file:
m_tot_parts	handler/ha_innopart.h	/^  uint m_tot_parts;$/;"	m	class:Ha_innopart_share
m_tot_parts	handler/handler0alter.cc	/^  uint m_tot_parts;$/;"	m	class:ha_innopart_inplace_ctx	file:
m_total_chunks	include/clone0desc.h	/^  uint32_t m_total_chunks;$/;"	m	struct:Chunk_Info
m_total_data	include/btr0bulk.h	/^  ulint m_total_data;$/;"	m	class:PageBulk
m_total_size	include/os0file.h	/^  os_offset_t m_total_size;$/;"	m	struct:os_file_size_t
m_transferred_file_meta	include/clone0clone.h	/^  bool m_transferred_file_meta;$/;"	m	class:Clone_Task_Manager
m_trx	handler/ha_innodb.h	/^  trx_t *m_trx;$/;"	m	class:create_table_info_t
m_trx	handler/ha_innodb.h	/^  trx_t *m_trx;$/;"	m	class:innobase_truncate
m_trx	handler/handler0alter.cc	/^  trx_t *const m_trx;$/;"	m	class:alter_part	file:
m_trx	handler/handler0alter.cc	/^  trx_t *const m_trx;$/;"	m	class:alter_part_factory	file:
m_trx	handler/handler0alter.cc	/^  trx_t *const m_trx;$/;"	m	class:alter_parts	file:
m_trx	include/lob0lob.h	/^  trx_t *m_trx = nullptr;$/;"	m	struct:lob::ReadContext
m_trx	include/lock0priv.h	/^  trx_t *m_trx;$/;"	m	class:RecLock
m_trx	include/log0ddl.h	/^  trx_t *m_trx;$/;"	m	class:Log_Type::DDL_Log_Table
m_trx	include/sess0sess.h	/^  trx_t *m_trx;$/;"	m	class:innodb_session_t
m_trx	include/trx0trx.h	/^  trx_t *m_trx;$/;"	m	class:TrxInInnoDB
m_trx	include/trx0types.h	/^  trx_t *m_trx;$/;"	m	struct:TrxTrack
m_trx	include/trx0types.h	/^  trx_t *m_trx;$/;"	m	struct:TrxVersion
m_trx	row/row0import.cc	/^  trx_t *m_trx;          \/*!< User transaction *\/$/;"	m	class:IndexPurge	file:
m_trx	row/row0import.cc	/^  trx_t *m_trx;$/;"	m	class:AbstractCallback	file:
m_trx_id	include/btr0bulk.h	/^  trx_id_t m_trx_id;$/;"	m	class:BtrBulk
m_trx_id	include/btr0bulk.h	/^  trx_id_t m_trx_id;$/;"	m	class:PageBulk
m_trx_id	include/lob0index.h	/^  trx_id_t m_trx_id;$/;"	m	struct:lob::index_entry_mem_t
m_trx_id	include/zlob0index.h	/^  trx_id_t m_trx_id;$/;"	m	struct:lob::z_index_entry_mem_t
m_trx_id_modifier	include/lob0index.h	/^  trx_id_t m_trx_id_modifier;$/;"	m	struct:lob::index_entry_mem_t
m_trx_id_modifier	include/zlob0index.h	/^  trx_id_t m_trx_id_modifier;$/;"	m	struct:lob::z_index_entry_mem_t
m_trx_id_offset	row/row0import.cc	/^  ulint m_trx_id_offset; \/*!< Relevant only for clustered$/;"	m	struct:row_index_t	file:
m_trx_id_parts	handler/ha_innopart.h	/^  trx_id_t *m_trx_id_parts;$/;"	m	class:ha_innopart
m_trx_ids	handler/handler0alter.cc	/^  trx_id_t *m_trx_ids;$/;"	m	class:Altered_partitions	file:
m_trx_list	lock/lock0lock.cc	/^  trx_ut_list_t *m_trx_list;$/;"	m	class:TrxListIterator	file:
m_trx_no	include/trx0types.h	/^  trx_id_t m_trx_no;$/;"	m	class:TrxUndoRsegs
m_trx_recovery_rollback	include/srv0srv.h	/^  IB_thread m_trx_recovery_rollback;$/;"	m	struct:Srv_threads
m_trx_undo_no	include/zlob0index.h	/^  undo_no_t m_trx_undo_no;$/;"	m	struct:lob::z_index_entry_mem_t
m_trx_undo_no_modifier	include/zlob0index.h	/^  undo_no_t m_trx_undo_no_modifier;$/;"	m	struct:lob::z_index_entry_mem_t
m_trx_undo_rsegs	include/trx0purge.h	/^  TrxUndoRsegs m_trx_undo_rsegs;$/;"	m	struct:TrxUndoRsegsIterator
m_ts_alter_encrypt	include/srv0srv.h	/^  IB_thread m_ts_alter_encrypt;$/;"	m	struct:Srv_threads
m_tuple	include/log0ddl.h	/^  dtuple_t *m_tuple;$/;"	m	class:Log_Type::DDL_Log_Table
m_tv	include/ut0dbg.h	/^  struct timeval m_tv;$/;"	m	class:ut_chrono_t	typeref:struct:ut_chrono_t::timeval
m_type	include/arch0arch.h	/^  Arch_Blk_Type m_type;$/;"	m	class:Arch_Block
m_type	include/clone0desc.h	/^  Clone_Desc_Type m_type;$/;"	m	struct:Clone_Desc_Header
m_type	include/fsp0file.h	/^  device_t m_type;$/;"	m	class:Datafile
m_type	include/log0ddl.h	/^  Log_Type m_type;$/;"	m	class:Log_Type::DDL_Record
m_type	include/os0enc.h	/^  Encryption() noexcept : m_type(NONE) {}$/;"	f	class:Encryption
m_type	include/os0enc.h	/^  Type m_type;$/;"	m	class:Encryption
m_type	include/os0enc.h	/^  explicit Encryption(Type type) noexcept : m_type(type) {$/;"	f	class:Encryption
m_type	include/ut0pool.h	/^    value_type m_type;$/;"	m	struct:Pool::Element
m_type	mtr/mtr0mtr.cc	/^  mtr_memo_type_t m_type;$/;"	m	struct:Mtr_memo_contains	file:
m_type	mtr/mtr0mtr.cc	/^  ulint m_type;$/;"	m	struct:Find	file:
m_type	row/row0import.cc	/^  ulint m_type; \/*!< Index type *\/$/;"	m	struct:row_index_t	file:
m_uncomp_len	include/dict0sdi-decompress.h	/^  uint32_t m_uncomp_len;$/;"	m	class:Sdi_Decompressor
m_uncomp_sdi	include/dict0sdi-decompress.h	/^  byte *m_uncomp_sdi;$/;"	m	class:Sdi_Decompressor
m_undo_file_indexes	include/clone0snapshot.h	/^  std::vector<int> m_undo_file_indexes;$/;"	m	class:Clone_Snapshot
m_undo_list	include/lob0undo.h	/^  std::list<undo_data_t> *m_undo_list = nullptr;$/;"	m	struct:lob::undo_seq_t
m_undo_no	include/lob0index.h	/^  undo_no_t m_undo_no;$/;"	m	struct:lob::index_entry_mem_t
m_undo_no_modifier	include/lob0index.h	/^  undo_no_t m_undo_no_modifier;$/;"	m	struct:lob::index_entry_mem_t
m_undo_nums	fil/fil0fil.cc	/^  Undo_num2id m_undo_nums;$/;"	m	class:Tablespace_files	file:
m_undo_paths	fil/fil0fil.cc	/^  Paths m_undo_paths;$/;"	m	class:Tablespace_files	file:
m_unflushed_spaces	fil/fil0fil.cc	/^  Space_list m_unflushed_spaces;$/;"	m	class:Fil_shard	file:
m_up_limit_id	include/read0types.h	/^  trx_id_t m_up_limit_id;$/;"	m	class:ReadView
m_upd_buf	handler/ha_innodb.h	/^  uchar *m_upd_buf;$/;"	m	class:ha_innobase
m_upd_buf_size	handler/ha_innodb.h	/^  ulint m_upd_buf_size;$/;"	m	class:ha_innobase
m_upd_node_parts	handler/ha_innopart.h	/^  upd_node_t **m_upd_node_parts;$/;"	m	class:ha_innopart
m_use_data_dir	handler/ha_innodb.h	/^  bool m_use_data_dir;$/;"	m	class:create_table_info_t
m_use_file_per_table	handler/ha_innodb.h	/^  bool m_use_file_per_table;$/;"	m	class:create_table_info_t
m_use_shared_space	handler/ha_innodb.h	/^  bool m_use_shared_space;$/;"	m	class:create_table_info_t
m_used	include/dyn0buf.h	/^    ib_uint32_t m_used;$/;"	m	class:dyn_buf_t::block_t
m_user_thd	handler/ha_innodb.h	/^  THD *m_user_thd;$/;"	m	class:ha_innobase
m_usr_temp_tblsp	include/sess0sess.h	/^  ibt::Tablespace *m_usr_temp_tblsp;$/;"	m	class:innodb_session_t
m_val	include/ut0lock_free_hash.h	/^    std::atomic<int64_t> m_val;$/;"	m	struct:ut_lock_free_hash_t::key_val_t
m_val	include/ut0ut.h	/^  const uintmax_t m_val;$/;"	m	struct:ib::hex
m_value	include/sync0sync.h	/^  unsigned int m_value;$/;"	m	struct:mysql_pfs_key_t
m_values	handler/ha_innodb.cc	/^                                                              m_values(values) {$/;"	f	struct:ShowStatus::GetCount
m_values	handler/ha_innodb.cc	/^    Values *m_values;$/;"	m	struct:ShowStatus::GetCount	file:
m_values	handler/ha_innodb.cc	/^  Values m_values;$/;"	m	struct:ShowStatus	file:
m_verbosity	include/log0test.h	/^  int m_verbosity = 0;$/;"	m	class:Log_test::Options
m_version	include/clone0desc.h	/^  uint m_version;$/;"	m	struct:Clone_Desc_Header
m_version	include/clone0repl.h	/^  uint32_t m_version;$/;"	m	struct:Gtid_desc
m_version	include/dict0mem.h	/^  uint64_t m_version;$/;"	m	class:PersistentTableMetadata
m_version	include/lob0undo.h	/^  ulint m_version = 0;$/;"	m	struct:lob::undo_data_t
m_version	include/trx0types.h	/^  ulint m_version;$/;"	m	struct:TrxVersion
m_version	os/file.h	/^    uint8_t m_version;$/;"	m	struct:Compression::meta_t
m_version	row/row0import.cc	/^  uint32_t m_version; \/*!< Version of config file *\/$/;"	m	struct:row_import	file:
m_version_locator	include/clone0clone.h	/^  byte m_version_locator[CLONE_DESC_MAX_BASE_LEN];$/;"	m	class:Clone_Handle
m_versions	include/lob0index.h	/^  flst_bnode_t m_versions;$/;"	m	struct:lob::index_entry_mem_t
m_versions	include/lob0undo.h	/^  std::list<undo_seq_t *> *m_versions = nullptr;$/;"	m	struct:lob::undo_vers_t
m_versions	include/zlob0index.h	/^  flst_bnode_t m_versions;$/;"	m	struct:lob::z_index_entry_mem_t
m_view_list	include/read0types.h	/^  node_t m_view_list;$/;"	m	class:ReadView
m_view_low_limit_no	include/read0types.h	/^  trx_id_t m_view_low_limit_no;$/;"	m	class:ReadView
m_views	include/read0read.h	/^  view_list_t m_views;$/;"	m	class:MVCC
m_waits	handler/ha_innodb.cc	/^    uint64_t m_waits;$/;"	m	struct:ShowStatus::Value	file:
m_waits	include/sync0types.h	/^    uint32_t m_waits;$/;"	m	struct:LatchCounter::Count
m_work_bytes_left	include/clone0monitor.h	/^  uint64_t m_work_bytes_left;$/;"	m	class:Clone_Monitor
m_work_done	include/clone0monitor.h	/^  uint64_t m_work_done;$/;"	m	class:Clone_Monitor
m_work_done	include/ut0stage.h	/^  ulint m_work_done;$/;"	m	class:ut_stage_alter_ts
m_work_estimated	include/ut0stage.h	/^  ulint m_work_estimated;$/;"	m	class:ut_stage_alter_ts
m_written	include/log0test.h	/^  Pages m_written;$/;"	m	class:Log_test::Options
m_xdes	include/fsp0fsp.h	/^  const xdes_t *m_xdes;$/;"	m	struct:xdes_mem_t
m_xdes	row/row0import.cc	/^  xdes_t *m_xdes;$/;"	m	class:AbstractCallback	file:
m_xdes_page_no	row/row0import.cc	/^  page_no_t m_xdes_page_no;$/;"	m	class:AbstractCallback	file:
m_z_data_len	include/zlob0index.h	/^  ulint m_z_data_len;$/;"	m	struct:lob::z_index_entry_mem_t
m_z_frag_id	include/zlob0index.h	/^  frag_id_t m_z_frag_id;$/;"	m	struct:lob::z_index_entry_mem_t
m_z_page_no	include/zlob0index.h	/^  page_no_t m_z_page_no;$/;"	m	struct:lob::z_index_entry_mem_t
m_zbytes	include/lob0lob.h	/^  uint m_zbytes;$/;"	m	struct:lob::blob_page_info_t
mach0data_h	include/mach0data.h	35;"	d
mach_parse_compressed	mach/mach0data.cc	/^ib_uint32_t mach_parse_compressed(const byte **ptr, const byte *end_ptr) {$/;"	f
mach_parse_u64_much_compressed	mach/mach0data.cc	/^ib_uint64_t mach_parse_u64_much_compressed(const byte **ptr,$/;"	f
made_dirty_with_no_latch	include/buf0buf.h	/^  bool made_dirty_with_no_latch;$/;"	m	struct:Cache_hint::buf_block_t
madvise_dont_dump	buf/buf0buf.cc	/^bool buf_chunk_t::madvise_dont_dump() {$/;"	f	class:buf_chunk_t
madvise_dont_dump	buf/buf0buf.cc	/^bool buf_pool_t::madvise_dont_dump() {$/;"	f	class:buf_pool_t
madvise_dump	buf/buf0buf.cc	/^bool buf_chunk_t::madvise_dump() {$/;"	f	class:buf_chunk_t
madvise_dump	buf/buf0buf.cc	/^bool buf_pool_t::madvise_dump() {$/;"	f	class:buf_pool_t
magic_n	include/btr0sea.h	/^  ulint magic_n; \/*!< magic number @see BTR_SEARCH_MAGIC_N *\/$/;"	m	struct:btr_search_t
magic_n	include/data0data.h	/^  ulint magic_n;$/;"	m	struct:dtuple_t
magic_n	include/dict0mem.h	/^  uint32_t magic_n; \/*!< magic number *\/$/;"	m	struct:dict_index_t
magic_n	include/dict0mem.h	/^  ulint magic_n;$/;"	m	struct:dict_table_t
magic_n	include/fil0fil.h	/^  size_t magic_n;$/;"	m	struct:fil_node_t
magic_n	include/fil0fil.h	/^  ulint magic_n;$/;"	m	struct:fil_space_t
magic_n	include/hash0hash.h	/^  ulint magic_n;$/;"	m	struct:hash_table_t
magic_n	include/mem0mem.h	/^  uint64_t magic_n; \/* magic number for debugging *\/$/;"	m	struct:mem_block_info_t
magic_n	include/que0que.h	/^  ulint magic_n;         \/*!< magic number to catch memory$/;"	m	struct:que_thr_t
magic_n	include/row0ins.h	/^  ulint magic_n;$/;"	m	struct:ins_node_t
magic_n	include/row0mysql.h	/^  ulint magic_n;               \/*!< this magic number is set to$/;"	m	struct:row_prebuilt_t
magic_n	include/row0upd.h	/^  ulint magic_n;$/;"	m	struct:upd_node_t
magic_n	include/sync0rw.h	/^  uint32_t magic_n = {MAGIC_N};$/;"	m	struct:rw_lock_t
magic_n	include/trx0trx.h	/^  ulint magic_n;$/;"	m	struct:trx_t
magic_n2	include/row0mysql.h	/^  ulint magic_n2; \/*!< this should be the same as$/;"	m	struct:row_prebuilt_t
make	fil/fil0fil.cc	/^char *Fil_path::make(const std::string &path_in, const std::string &name_in,$/;"	f	class:Fil_path
make_data_dir_path	fil/fil0fil.cc	/^void Fil_path::make_data_dir_path(char *data_dir_path) {$/;"	f	class:Fil_path
make_file_name	trx/trx0purge.cc	/^char *make_file_name(space_id_t space_id) {$/;"	f	namespace:undo
make_filepath	fsp/fsp0file.cc	/^void Datafile::make_filepath(const char *dirpath, const char *filename,$/;"	f	class:Datafile
make_log_file_name	trx/trx0purge.cc	/^char *Tablespace::make_log_file_name(space_id_t space_id) {$/;"	f	class:undo::Tablespace
make_new_path	fil/fil0fil.cc	/^std::string Fil_path::make_new_path(const std::string &path_in,$/;"	f	class:Fil_path
make_nth_extern	include/lob0lob.h	/^  void make_nth_extern(ulint field_no) {$/;"	f	class:lob::BtrContext
make_old_version_current	lob/lob0index.cc	/^fil_addr_t index_entry_t::make_old_version_current(dict_index_t *index,$/;"	f	class:lob::index_entry_t
make_old_version_current	lob/zlob0index.cc	/^fil_addr_t z_index_entry_t::make_old_version_current(dict_index_t *index,$/;"	f	class:lob::z_index_entry_t
make_space_name	trx/trx0purge.cc	/^char *make_space_name(space_id_t space_id) {$/;"	f	namespace:undo
malloc	include/fts0ast.h	41;"	d
malloc	pars/lexyy.cc	914;"	d	file:
mark	trx/trx0purge.cc	/^void undo::Truncate::mark(Tablespace *undo_space) {$/;"	f	class:undo::Truncate
mark_abort	clone/clone0clone.cc	/^bool Clone_Sys::mark_abort(bool force) {$/;"	f	class:Clone_Sys
mark_active	arch/arch0page.cc	/^int Arch_Group::mark_active() {$/;"	f	class:Arch_Group
mark_active	clone/clone0clone.cc	/^void Clone_Sys::mark_active() {$/;"	f	class:Clone_Sys
mark_all_entries	gis/gis0geo.cc	/^static void mark_all_entries($/;"	f	file:
mark_all_page_dirty_in_tablespace	fsp/fsp0fsp.cc	/^static void mark_all_page_dirty_in_tablespace(THD *thd, space_id_t space_id,$/;"	f	file:
mark_cannot_be_partially_updated	lob/lob0first.cc	/^void first_page_t::mark_cannot_be_partially_updated(trx_t *trx) {$/;"	f	class:lob::first_page_t
mark_cannot_be_partially_updated	lob/zlob0first.cc	/^void z_first_page_t::mark_cannot_be_partially_updated(trx_t *trx) {$/;"	f	class:lob::z_first_page_t
mark_durable	arch/arch0page.cc	/^int Arch_Group::mark_durable() {$/;"	f	class:Arch_Group
mark_free	clone/clone0clone.cc	/^void Clone_Sys::mark_free() {$/;"	f	class:Clone_Sys
mark_inactive	arch/arch0page.cc	/^int Arch_Group::mark_inactive() {$/;"	f	class:Arch_Group
mark_mtr	include/mtr0mtr.h	/^    bool mark_mtr(size_t index) {$/;"	f	class:mtr_t::Logging
mark_not_partially_updatable	lob/lob0lob.cc	/^dberr_t mark_not_partially_updatable(trx_t *trx, dict_index_t *index,$/;"	f	namespace:lob
mark_not_partially_updatable	lob/lob0lob.cc	/^void ref_t::mark_not_partially_updatable(trx_t *trx, mtr_t *mtr,$/;"	f	class:lob::ref_t
mark_wait	clone/clone0clone.cc	/^bool Clone_Sys::mark_wait() {$/;"	f	class:Clone_Sys
master_key_id_mutex	handler/ha_innodb.cc	/^ib_mutex_t master_key_id_mutex;$/;"	v
master_key_id_mutex_key	sync/sync0sync.cc	/^mysql_pfs_key_t master_key_id_mutex_key;$/;"	v
match	clone/clone0desc.cc	/^bool Clone_Desc_Locator::match(Clone_Desc_Locator *other_desc) {$/;"	f	class:Clone_Desc_Locator
match	fts/fts0que.cc	/^  const fts_match_t *match;$/;"	m	struct:fts_phrase_t	file:
match_array	fts/fts0que.cc	/^  ib_vector_t **match_array; \/*!< Used for proximity search, contains$/;"	m	struct:fts_query_t	file:
match_hdl_type	include/clone0clone.h	/^  bool match_hdl_type(Clone_Handle_Type other_handle_type) {$/;"	f	class:Clone_Handle
match_mode	api/api0api.cc	/^  ib_match_mode_t match_mode; \/*!< ib_cursor_moveto match mode *\/$/;"	m	struct:ib_cursor_t	file:
match_partition	dict/dict0dd.cc	/^bool match_partition(const std::string &dict_name,$/;"	f	namespace:dict_name
matched	fts/fts0que.cc	/^  ib_vector_t *matched; \/*!< Array of matching documents$/;"	m	struct:fts_query_t	file:
matched_rec	include/gis0type.h	/^typedef struct matched_rec {$/;"	s
matched_rec_t	include/gis0type.h	/^} matched_rec_t;$/;"	t	typeref:struct:matched_rec
matched_recs	include/gis0type.h	/^  rtr_rec_vector *matched_recs; \/*!< vector holding the matching rec *\/$/;"	m	struct:matched_rec
matches	include/gis0type.h	/^  matched_rec_t *matches; \/*!< struct holding matching leaf records *\/$/;"	m	struct:rtr_info
max_autoinc	handler/handler0alter.cc	/^  ulonglong max_autoinc;$/;"	m	struct:ha_innobase_inplace_ctx	file:
max_cache_size	include/fts0types.h	/^  ulint max_cache_size; \/*!< Max size in bytes of the cache *\/$/;"	m	struct:fts_sync_t
max_doc_id	include/fts0types.h	/^  doc_id_t max_doc_id;  \/*!< The doc id at which the cache was$/;"	m	struct:fts_sync_t
max_len	include/row0ext.h	/^  ulint max_len;    \/*!< maximum prefix length, it could be$/;"	m	struct:row_ext_t
max_lsn_io	include/buf0buf.h	/^  lsn_t max_lsn_io;$/;"	m	struct:Cache_hint::buf_pool_t
max_payload	include/lob0impl.h	/^  static ulint max_payload(dict_index_t *index) {$/;"	f	struct:lob::z_frag_page_t
max_pos	fts/fts0que.cc	/^  pos_vector_t max_pos; \/*!< the maximum position (in bytes)$/;"	m	struct:fts_proximity_t	file:
max_prefix	include/dict0mem.h	/^  unsigned max_prefix : 12; \/*!< maximum index prefix length on$/;"	m	struct:dict_col_t
max_size	include/fil0fil.h	/^  page_no_t max_size;$/;"	m	struct:fil_node_t
max_size	include/mem0mem.h	/^  size_type max_size() const { return (ULONG_MAX \/ sizeof(T)); }$/;"	f	class:mem_heap_allocator
max_size	include/ut0new.h	/^  size_type max_size() const {$/;"	f	class:ut_allocator
max_space_available	include/lob0first.h	/^  static ulint max_space_available() {$/;"	f	struct:lob::first_page_t
max_space_available	include/lob0impl.h	/^  static ulint max_space_available() { return (payload()); }$/;"	f	struct:lob::node_page_t
max_space_available	include/lob0pages.h	/^  ulint max_space_available() const { return (payload()); }$/;"	f	struct:lob::data_page_t
max_supported_key_length	handler/ha_innodb.cc	/^uint ha_innobase::max_supported_key_length() const {$/;"	f	class:ha_innobase
max_supported_key_part_length	handler/ha_innodb.cc	/^uint ha_innobase::max_supported_key_part_length($/;"	f	class:ha_innobase
max_supported_keys	handler/ha_innodb.cc	/^uint ha_innobase::max_supported_keys() const { return (MAX_KEY); }$/;"	f	class:ha_innobase
max_trx	row/row0log.cc	/^  trx_id_t max_trx;     \/*!< biggest observed trx_id in$/;"	m	struct:row_log_t	file:
max_trx_id	include/trx0sys.h	/^  volatile trx_id_t max_trx_id; \/*!< The smallest number not yet$/;"	m	struct:trx_sys_t
max_tuples	include/row0merge.h	/^  ulint max_tuples;     \/*!< maximum number of data tuples *\/$/;"	m	struct:row_merge_buf_t
max_words	fts/fts0opt.cc	/^  ulint max_words; \/*!< maximum number of words to read$/;"	m	struct:fts_zip_t	file:
mbmaxlen	include/row0mysql.h	/^  ulint mbmaxlen;               \/*!< maximum length of a char, in bytes,$/;"	m	struct:mysql_row_templ_t
mbminlen	include/row0mysql.h	/^  ulint mbminlen;               \/*!< minimum length of a char, in bytes,$/;"	m	struct:mysql_row_templ_t
mbminmaxlen	include/data0type.h	/^  unsigned mbminmaxlen : 5; \/*!< minimum and maximum length of a$/;"	m	struct:dtype_t
mbminmaxlen	include/dict0mem.h	/^  unsigned mbminmaxlen : 5; \/*!< minimum and maximum length of a$/;"	m	struct:dict_col_t
mbr	include/gis0type.h	/^  rtr_mbr_t mbr;       \/*!< the search MBR *\/$/;"	m	struct:rtr_info
mbr_adj	include/gis0type.h	/^  bool mbr_adj;   \/*!< whether mbr will need to be enlarged$/;"	m	struct:rtr_info
mbr_inc	include/gis0type.h	/^  double mbr_inc;     \/*!< whether this node needs to be$/;"	m	struct:node_visit
mdl	api/api0api.cc	/^  MDL_ticket *mdl; \/*!< meta-data lock on the table *\/$/;"	m	struct:ib_cursor_t	file:
mdl	include/pars0sym.h	/^  MDL_ticket *mdl; \/* MDL placed on table *\/$/;"	m	struct:sym_node_t
mdl	include/row0purge.h	/^  MDL_ticket *mdl;$/;"	m	struct:purge_node_t
meb	include/log0meb.h	/^namespace meb {$/;"	n
meb	log/log0meb.cc	/^namespace meb {$/;"	n	file:
meb_apply_log_rec_func	log/log0recv.cc	/^void meb_apply_log_rec_func(recv_addr_t *recv_addr) {$/;"	f
meb_apply_log_record	log/log0recv.cc	/^void meb_apply_log_record(recv_addr_t *recv_addr, buf_block_t *block) {$/;"	f
meb_apply_log_recs	log/log0recv.cc	/^void meb_apply_log_recs() {$/;"	f
meb_apply_log_recs_via_callback	log/log0recv.cc	/^void meb_apply_log_recs_via_callback($/;"	f
meb_extend_tablespaces_to_stored_len	fil/fil0fil.cc	/^  void meb_extend_tablespaces_to_stored_len() {$/;"	f	class:Fil_system
meb_extend_tablespaces_to_stored_len	fil/fil0fil.cc	/^void Fil_shard::meb_extend_tablespaces_to_stored_len() {$/;"	f	class:Fil_shard
meb_extend_tablespaces_to_stored_len	fil/fil0fil.cc	/^void meb_extend_tablespaces_to_stored_len() {$/;"	f
meb_fil_name_process	fil/fil0fil.cc	/^void meb_fil_name_process(const char *name, space_id_t space_id) {$/;"	f
meb_fil_space_free	fil/fil0fil.cc	/^bool meb_fil_space_free(space_id_t space_id) {$/;"	f
meb_fil_space_get_rem_gen_ts_id_by_name	fil/fil0fil.cc	/^space_id_t meb_fil_space_get_rem_gen_ts_id_by_name(std::string &tablespace) {$/;"	f
meb_free_block_cache	os/os0file.cc	/^void meb_free_block_cache() {$/;"	f
meb_get_checksum_algorithm_enum	handler/ha_innodb.cc	/^ibool meb_get_checksum_algorithm_enum(const char *algo_name,$/;"	f
meb_get_checksum_algorithm_name	handler/ha_innodb.cc	/^const char *meb_get_checksum_algorithm_name($/;"	f
meb_has_back_link	fil/fil0fil.cc	/^static bool meb_has_back_link(const std::string &path) {$/;"	f	file:
meb_is_intermediate_file	fil/fil0fil.cc	/^bool meb_is_intermediate_file(const std::string &filepath) {$/;"	f
meb_is_redo_log_only_restore	fil/fil0fil.cc	/^bool meb_is_redo_log_only_restore = false;$/;"	v
meb_is_space_loaded	fil/fil0fil.cc	/^bool meb_is_space_loaded(const space_id_t space_id) {$/;"	f
meb_log_print_file_hdr	log/log0chkp.cc	/^void meb_log_print_file_hdr(byte *block) {$/;"	f
meb_make_abs_file_path	fil/fil0fil.cc	/^static void meb_make_abs_file_path(const std::string &name, uint32_t flags,$/;"	f	file:
meb_make_ibbackup_old_name	fil/fil0fil.cc	/^static char *meb_make_ibbackup_old_name(const char *name) {$/;"	f	file:
meb_name_process	fil/fil0fil.cc	/^void Fil_system::meb_name_process(char *name, space_id_t space_id,$/;"	f	class:Fil_system
meb_nowait_func	log/log0recv.cc	/^void meb_nowait_func() { return; }$/;"	f
meb_page_init	buf/buf0buf.cc	/^void meb_page_init(const page_id_t &page_id, const page_size_t &page_size,$/;"	f
meb_print_page_header	log/log0recv.cc	/^void meb_print_page_header(const page_t *page) {$/;"	f
meb_read_log_encryption	log/log0recv.cc	/^bool meb_read_log_encryption(IORequest &encryption_request,$/;"	f
meb_scan_log_seg	log/log0recv.cc	/^void meb_scan_log_seg(byte *buf, ulint buf_len, lsn_t *scanned_lsn,$/;"	f
meb_set_encryption_key	fil/fil0fil.cc	/^static void meb_set_encryption_key(const fil_space_t *space) {$/;"	f	file:
meb_sprintf_timestamp_without_extra_chars	ut/ut0ut.cc	/^void meb_sprintf_timestamp_without_extra_chars($/;"	f
meb_tablespace_redo_create	fil/fil0fil.cc	/^static void meb_tablespace_redo_create(const page_id_t &page_id, uint32_t flags,$/;"	f	file:
meb_tablespace_redo_delete	fil/fil0fil.cc	/^static void meb_tablespace_redo_delete(const page_id_t &page_id,$/;"	f	file:
meb_tablespace_redo_rename	fil/fil0fil.cc	/^static void meb_tablespace_redo_rename(const page_id_t &page_id,$/;"	f	file:
mem0mem_h	include/mem0mem.h	34;"	d
mem_allocd	trx/trx0i_s.cc	/^  ulint mem_allocd;$/;"	m	struct:trx_i_s_cache_t	file:
mem_block_info_t	include/mem0mem.h	/^struct mem_block_info_t {$/;"	s
mem_block_t	include/mem0mem.h	/^typedef struct mem_block_info_t mem_block_t;$/;"	t	typeref:struct:mem_block_info_t
mem_free	include/ut0pool.h	/^  static void mem_free(value_type *ptr) { PoolType::mem_free(ptr); }$/;"	f	struct:PoolManager
mem_free	include/ut0pool.h	/^  static void mem_free(value_type *ptr) {$/;"	f	struct:Pool
mem_heap_add_block	mem/memory.cc	/^mem_block_t *mem_heap_add_block(mem_heap_t *heap, \/*!< in: memory heap *\/$/;"	f
mem_heap_allocator	include/mem0mem.h	/^  mem_heap_allocator(const mem_heap_allocator &other) : m_heap(other.m_heap) {$/;"	f	class:mem_heap_allocator
mem_heap_allocator	include/mem0mem.h	/^  mem_heap_allocator(const mem_heap_allocator<U> &other)$/;"	f	class:mem_heap_allocator
mem_heap_allocator	include/mem0mem.h	/^  mem_heap_allocator(mem_heap_t *heap) : m_heap(heap) {}$/;"	f	class:mem_heap_allocator
mem_heap_allocator	include/mem0mem.h	/^class mem_heap_allocator {$/;"	c
mem_heap_block_free	mem/memory.cc	/^void mem_heap_block_free(mem_heap_t *heap,   \/*!< in: heap *\/$/;"	f
mem_heap_create	include/mem0mem.h	120;"	d
mem_heap_create	include/mem0mem.h	132;"	d
mem_heap_create_block_func	mem/memory.cc	/^mem_block_t *mem_heap_create_block_func($/;"	f
mem_heap_create_typed	include/mem0mem.h	126;"	d
mem_heap_create_typed	include/mem0mem.h	137;"	d
mem_heap_dup	mem/memory.cc	/^void *mem_heap_dup($/;"	f
mem_heap_free_block_free	mem/memory.cc	/^void mem_heap_free_block_free(mem_heap_t *heap) \/*!< in: heap *\/$/;"	f
mem_heap_printf	mem/memory.cc	/^char *mem_heap_printf(mem_heap_t *heap,   \/*!< in: memory heap *\/$/;"	f
mem_heap_printf_low	mem/memory.cc	/^static ulint mem_heap_printf_low($/;"	f	file:
mem_heap_strcat	mem/memory.cc	/^char *mem_heap_strcat($/;"	f
mem_heap_strdup	mem/memory.cc	/^char *mem_heap_strdup(mem_heap_t *heap, const char *str) {$/;"	f
mem_heap_t	include/mem0mem.h	/^typedef mem_block_t mem_heap_t;$/;"	t
mem_heap_validate	mem/memory.cc	/^void mem_heap_validate(const mem_heap_t *heap) {$/;"	f
mem_key_ahi	ut/ut0new.cc	/^PSI_memory_key mem_key_ahi;$/;"	v
mem_key_archive	ut/ut0new.cc	/^PSI_memory_key mem_key_archive;$/;"	v
mem_key_buf_buf_pool	ut/ut0new.cc	/^PSI_memory_key mem_key_buf_buf_pool;$/;"	v
mem_key_buf_stat_per_index_t	ut/ut0new.cc	/^PSI_memory_key mem_key_buf_stat_per_index_t;$/;"	v
mem_key_clone	ut/ut0new.cc	/^PSI_memory_key mem_key_clone;$/;"	v
mem_key_dict_stats_bg_recalc_pool_t	ut/ut0new.cc	/^PSI_memory_key mem_key_dict_stats_bg_recalc_pool_t;$/;"	v
mem_key_dict_stats_index_map_t	ut/ut0new.cc	/^PSI_memory_key mem_key_dict_stats_index_map_t;$/;"	v
mem_key_dict_stats_n_diff_on_level	ut/ut0new.cc	/^PSI_memory_key mem_key_dict_stats_n_diff_on_level;$/;"	v
mem_key_fil_space_t	ut/ut0new.cc	/^PSI_memory_key mem_key_fil_space_t;$/;"	v
mem_key_other	ut/ut0new.cc	/^PSI_memory_key mem_key_other;$/;"	v
mem_key_partitioning	ut/ut0new.cc	/^PSI_memory_key mem_key_partitioning;$/;"	v
mem_key_row_log_buf	ut/ut0new.cc	/^PSI_memory_key mem_key_row_log_buf;$/;"	v
mem_key_row_merge_sort	ut/ut0new.cc	/^PSI_memory_key mem_key_row_merge_sort;$/;"	v
mem_key_std	ut/ut0new.cc	/^PSI_memory_key mem_key_std;$/;"	v
mem_key_trx_sys_t_rw_trx_ids	ut/ut0new.cc	/^PSI_memory_key mem_key_trx_sys_t_rw_trx_ids;$/;"	v
mem_key_undo_spaces	ut/ut0new.cc	/^PSI_memory_key mem_key_undo_spaces;$/;"	v
mem_key_ut_lock_free_hash_t	ut/ut0new.cc	/^PSI_memory_key mem_key_ut_lock_free_hash_t;$/;"	v
mem_log_recv_page_hash_key	log/log0recv.cc	/^PSI_memory_key mem_log_recv_page_hash_key;$/;"	v
mem_log_recv_space_hash_key	log/log0recv.cc	/^PSI_memory_key mem_log_recv_space_hash_key;$/;"	v
mem_malloc	include/ut0vec.h	/^  ib_mem_alloc_t mem_malloc;  \/* For allocating memory *\/$/;"	m	struct:ib_alloc_t
mem_release	include/ut0vec.h	/^  ib_mem_free_t mem_release;  \/* For freeing memory *\/$/;"	m	struct:ib_alloc_t
mem_resize	include/ut0vec.h	/^  ib_mem_resize_t mem_resize; \/* For resizing memory *\/$/;"	m	struct:ib_alloc_t
memo_contains	mtr/mtr0mtr.cc	/^bool mtr_t::memo_contains(const mtr_buf_t *memo, const void *object,$/;"	f	class:mtr_t
memo_contains_flagged	mtr/mtr0mtr.cc	/^bool mtr_t::memo_contains_flagged(const void *ptr, ulint flags) const {$/;"	f	class:mtr_t
memo_contains_page_flagged	mtr/mtr0mtr.cc	/^buf_block_t *mtr_t::memo_contains_page_flagged(const byte *ptr,$/;"	f	class:mtr_t
memo_modify_page	mtr/mtr0mtr.cc	/^void mtr_t::memo_modify_page(const byte *ptr) {$/;"	f	class:mtr_t
memo_release	mtr/mtr0mtr.cc	/^void mtr_t::memo_release(const void *object, ulint type) {$/;"	f	class:mtr_t
memo_slot_release	mtr/mtr0mtr.cc	/^static void memo_slot_release(mtr_memo_slot_t *slot) {$/;"	f	file:
memory_used	include/row0ftsort.h	/^  ulint memory_used;                \/*!< memory used by fts_doc_list *\/$/;"	m	struct:fts_psort_t
merge	include/lob0impl.h	/^  bool merge(frag_node_t &next) {$/;"	f	struct:lob::frag_node_t
merge	os/os0file.cc	/^  void merge() {$/;"	f	class:SimulatedAIOHandler
merge_adjacent	os/os0file.cc	/^  bool merge_adjacent(Slot *&current) {$/;"	f	class:SimulatedAIOHandler	file:
merge_block	include/row0ftsort.h	/^  row_merge_block_t *merge_block[FTS_NUM_AUX_INDEX];$/;"	m	struct:fts_psort_t
merge_buf	include/row0ftsort.h	/^  row_merge_buf_t *merge_buf[FTS_NUM_AUX_INDEX];$/;"	m	struct:fts_psort_t
merge_event	include/row0ftsort.h	/^  os_event_t merge_event;  \/*!< merge event *\/$/;"	m	struct:fts_psort_common_t
merge_file	include/row0ftsort.h	/^  merge_file_t *merge_file[FTS_NUM_AUX_INDEX];$/;"	m	struct:fts_psort_t
merge_file_t	include/row0merge.h	/^struct merge_file_t {$/;"	s
merge_free_frags	include/lob0impl.h	/^  void merge_free_frags() {$/;"	f	struct:lob::z_frag_page_t
merge_free_frags	include/lob0impl.h	/^  void merge_free_frags(frag_node_t &frag) {$/;"	f	struct:lob::z_frag_page_t
merge_threshold	include/dict0mem.h	/^  unsigned merge_threshold : 6;$/;"	m	struct:dict_index_t
meta_t	os/file.h	/^  struct meta_t {$/;"	s	struct:Compression
metadata_applier	srv/srv0start.cc	/^  metadata_applier() {}$/;"	f	struct:metadata_applier
metadata_applier	srv/srv0start.cc	/^struct metadata_applier {$/;"	s	file:
metadata_recover	include/log0recv.h	/^  MetadataRecover *metadata_recover;$/;"	m	struct:recv_sys_t
metadata_size	include/detail/ut0new.h	/^  static constexpr uint32_t metadata_size = alignof(max_align_t);$/;"	m	struct:ut::detail::Aligned_alloc_impl
min_active_id	include/trx0sys.h	/^  std::atomic<trx_id_t> min_active_id;$/;"	m	struct:trx_sys_t
min_doc_id	include/fts0types.h	/^  doc_id_t min_doc_id;  \/*!< The smallest doc id added to the$/;"	m	struct:fts_sync_t
min_pos	fts/fts0que.cc	/^  pos_vector_t min_pos; \/*!< the minimum position (in bytes)$/;"	m	struct:fts_proximity_t	file:
min_pos	fts/fts0que.cc	/^  ulint min_pos; \/*!< For found to be TRUE at least$/;"	m	struct:fts_select_t	file:
misc_word_char	handler/ha_innodb.cc	7527;"	d	file:
misc_word_char	include/fts0tokenize.h	42;"	d
missing_ids	include/log0recv.h	/^  Missing_Ids missing_ids;$/;"	m	struct:recv_sys_t
missing_spaces	dict/dict0load.cc	/^missing_sys_tblsp_t missing_spaces;$/;"	v
mlog_catenate_string	mtr/mtr0log.cc	/^void mlog_catenate_string(mtr_t *mtr, const byte *str, ulint len) {$/;"	f
mlog_id_t	include/mtr0types.h	/^enum mlog_id_t {$/;"	g
mlog_log_string	mtr/mtr0log.cc	/^void mlog_log_string(byte *ptr,  \/*!< in: pointer written to *\/$/;"	f
mlog_open_and_write_index	mtr/mtr0log.cc	/^bool mlog_open_and_write_index(mtr_t *mtr, const byte *rec,$/;"	f
mlog_parse_index	mtr/mtr0log.cc	/^byte *mlog_parse_index(byte *ptr,            \/*!< in: buffer *\/$/;"	f
mlog_parse_initial_dict_log_record	mtr/mtr0log.cc	/^byte *mlog_parse_initial_dict_log_record(const byte *ptr, const byte *end_ptr,$/;"	f
mlog_parse_initial_log_record	mtr/mtr0log.cc	/^byte *mlog_parse_initial_log_record($/;"	f
mlog_parse_nbytes	mtr/mtr0log.cc	/^byte *mlog_parse_nbytes($/;"	f
mlog_parse_string	mtr/mtr0log.cc	/^byte *mlog_parse_string($/;"	f
mlog_write_initial_log_record	include/mtr0log.h	175;"	d
mlog_write_initial_log_record	mtr/mtr0log.cc	/^void mlog_write_initial_log_record($/;"	f
mlog_write_initial_log_record_fast	include/mtr0log.h	176;"	d
mlog_write_string	mtr/mtr0log.cc	/^void mlog_write_string(byte *ptr,       \/*!< in: pointer where to write *\/$/;"	f
mlog_write_ulint	mtr/mtr0log.cc	/^void mlog_write_ulint($/;"	f
mlog_write_ull	mtr/mtr0log.cc	/^void mlog_write_ull(byte *ptr,       \/*!< in: pointer where to write *\/$/;"	f
mod_tables	include/trx0trx.h	/^  trx_mod_tables_t mod_tables; \/*!< List of tables that were modified$/;"	m	struct:trx_t
mode	include/lock0lock.h	/^  lock_mode mode;      \/*!< lock mode *\/$/;"	m	struct:lock_op_t
mode	include/lock0priv.h	/^  lock_mode mode() const {$/;"	f	struct:lock_t
mode	include/row0sel.h	/^  page_cur_mode_t mode;    \/*!< search mode: PAGE_CUR_G, ... *\/$/;"	m	struct:plan_t
modification_counter	include/fil0fil.h	/^  int64_t modification_counter;$/;"	m	struct:fil_node_t
modifier_trx_id	include/row0purge.h	/^    trx_id_t modifier_trx_id;$/;"	m	struct:purge_node_t::rec_t
modifier_trx_id	include/row0purge.h	/^  trx_id_t modifier_trx_id;$/;"	m	struct:purge_node_t
modifier_trx_id	include/trx0purge.h	/^  trx_id_t modifier_trx_id;$/;"	m	struct:purge_iter_t
modify_and_write	clone/clone0apply.cc	/^int Clone_Handle::modify_and_write(const Clone_Task *task, uint64_t offset,$/;"	f	class:Clone_Handle
modify_clock	include/buf0buf.h	/^  uint64_t modify_clock;$/;"	m	struct:Cache_hint::buf_block_t
mon_last_value	include/srv0mon.h	/^  mon_type_t mon_last_value;         \/*!< Last set of values *\/$/;"	m	struct:monitor_value_t
mon_max_value	include/srv0mon.h	/^  mon_type_t mon_max_value;          \/*!< Current Max value *\/$/;"	m	struct:monitor_value_t
mon_max_value_start	include/srv0mon.h	/^  mon_type_t mon_max_value_start;    \/*!< Max value since start *\/$/;"	m	struct:monitor_value_t
mon_min_value	include/srv0mon.h	/^  mon_type_t mon_min_value;          \/*!< Current Min value *\/$/;"	m	struct:monitor_value_t
mon_min_value_start	include/srv0mon.h	/^  mon_type_t mon_min_value_start;    \/*!< Min value since start *\/$/;"	m	struct:monitor_value_t
mon_option_t	include/srv0mon.h	/^enum mon_option_t {$/;"	g
mon_reset_time	include/srv0mon.h	/^  ib_time_t mon_reset_time;          \/*!< Time counter resetted *\/$/;"	m	struct:monitor_value_t
mon_start_time	include/srv0mon.h	/^  ib_time_t mon_start_time;          \/*!< Start time of monitoring  *\/$/;"	m	struct:monitor_value_t
mon_start_value	include/srv0mon.h	/^  mon_type_t mon_start_value;        \/*!< Value at the start time *\/$/;"	m	struct:monitor_value_t
mon_status	include/srv0mon.h	/^  monitor_running_t mon_status;      \/* whether monitor still running *\/$/;"	m	struct:monitor_value_t
mon_stop_time	include/srv0mon.h	/^  ib_time_t mon_stop_time;           \/*!< Stop time of monitoring *\/$/;"	m	struct:monitor_value_t
mon_type_t	include/srv0mon.h	/^typedef int64_t mon_type_t;$/;"	t
mon_value	include/srv0mon.h	/^  std::atomic<mon_type_t> mon_value; \/*!< Current counter Value *\/$/;"	m	struct:monitor_value_t
mon_value_reset	include/srv0mon.h	/^  mon_type_t mon_value_reset;        \/*!< value at last reset *\/$/;"	m	struct:monitor_value_t
monitor_atomic_dec	include/srv0mon.h	/^inline void monitor_atomic_dec(monitor_id_t monitor) {$/;"	f
monitor_atomic_inc	include/srv0mon.h	/^inline void monitor_atomic_inc(monitor_id_t monitor) {$/;"	f
monitor_dec	include/srv0mon.h	/^inline void monitor_dec(monitor_id_t monitor) {$/;"	f
monitor_dec_value	include/srv0mon.h	/^inline void monitor_dec_value(monitor_id_t monitor, mon_type_t value) {$/;"	f
monitor_dec_value_nocheck	include/srv0mon.h	/^inline void monitor_dec_value_nocheck(monitor_id_t monitor, mon_type_t value) {$/;"	f
monitor_desc	include/srv0mon.h	/^  const char *monitor_desc;        \/*!< Brief desc of monitor counter *\/$/;"	m	struct:monitor_info_t
monitor_id	include/srv0mon.h	/^  monitor_id_t monitor_id;         \/*!< Monitor ID as defined in enum$/;"	m	struct:monitor_info_t
monitor_id_t	include/srv0mon.h	/^enum monitor_id_t {$/;"	g
monitor_inc_time_in_micro_sec	include/srv0mon.h	/^inline void monitor_inc_time_in_micro_sec(monitor_id_t monitor,$/;"	f
monitor_inc_value	include/srv0mon.h	/^inline void monitor_inc_value(monitor_id_t monitor, mon_type_t value) {$/;"	f
monitor_inc_value_cumulative	include/srv0mon.h	/^inline void monitor_inc_value_cumulative(monitor_id_t monitor,$/;"	f
monitor_inc_value_nocheck	include/srv0mon.h	/^inline void monitor_inc_value_nocheck(monitor_id_t monitor, mon_type_t value,$/;"	f
monitor_info_t	include/srv0mon.h	/^struct monitor_info_t {$/;"	s
monitor_module	include/srv0mon.h	/^  const char *monitor_module;      \/*!< Sub Module the monitor$/;"	m	struct:monitor_info_t
monitor_name	include/srv0mon.h	/^  const char *monitor_name;        \/*!< Monitor name *\/$/;"	m	struct:monitor_info_t
monitor_related_id	include/srv0mon.h	/^  monitor_id_t monitor_related_id; \/*!< Monitor ID of counter that$/;"	m	struct:monitor_info_t
monitor_reset_all	include/srv0mon.h	/^inline void monitor_reset_all(monitor_id_t monitor) {$/;"	f
monitor_running_status	include/srv0mon.h	/^enum monitor_running_status {$/;"	g
monitor_running_t	include/srv0mon.h	/^typedef enum monitor_running_status monitor_running_t;$/;"	t	typeref:enum:monitor_running_status
monitor_save_last	include/srv0mon.h	/^inline void monitor_save_last(monitor_id_t monitor) {$/;"	f
monitor_set	include/srv0mon.h	/^inline void monitor_set(monitor_id_t monitor, mon_type_t value, bool set_max,$/;"	f
monitor_set_max_value	include/srv0mon.h	/^inline void monitor_set_max_value(monitor_id_t monitor, mon_type_t value) {$/;"	f
monitor_set_min_value	include/srv0mon.h	/^inline void monitor_set_min_value(monitor_id_t monitor, mon_type_t value) {$/;"	f
monitor_set_tbl	srv/srv0mon.cc	/^ulint monitor_set_tbl[(NUM_MONITOR + NUM_BITS_ULINT - 1) \/ NUM_BITS_ULINT];$/;"	v
monitor_type	include/srv0mon.h	/^  monitor_type_t monitor_type;     \/*!< Type of Monitor Info *\/$/;"	m	struct:monitor_info_t
monitor_type_t	include/srv0mon.h	/^enum monitor_type_t {$/;"	g
monitor_value_t	include/srv0mon.h	/^struct monitor_value_t {$/;"	s
move	buf/buf0buf.cc	/^void HazardPointer::move(const buf_page_t *bpage, buf_page_t *dpage) {$/;"	f	class:HazardPointer
move_backward_from_page	btr/btr0pcur.cc	/^void btr_pcur_t::move_backward_from_page(mtr_t *mtr) {$/;"	f	class:btr_pcur_t
move_before_first_on_page	include/btr0pcur.h	/^inline void btr_pcur_t::move_before_first_on_page() {$/;"	f	class:btr_pcur_t
move_to_last_on_page	include/btr0pcur.h	/^inline void btr_pcur_t::move_to_last_on_page(mtr_t *mtr) {$/;"	f	class:btr_pcur_t
move_to_next	include/btr0pcur.h	/^inline bool btr_pcur_t::move_to_next(mtr_t *mtr) {$/;"	f	class:btr_pcur_t
move_to_next_block	row/row0pread.cc	/^dberr_t PCursor::move_to_next_block(dict_index_t *index) {$/;"	f	class:PCursor
move_to_next_node	row/row0pread.cc	/^bool Parallel_reader::Ctx::move_to_next_node(PCursor *pcursor, mtr_t *mtr) {$/;"	f	class:Parallel_reader::Ctx
move_to_next_on_page	include/btr0pcur.h	/^inline void btr_pcur_t::move_to_next_on_page() {$/;"	f	class:btr_pcur_t
move_to_next_page	btr/btr0pcur.cc	/^void btr_pcur_t::move_to_next_page(mtr_t *mtr) {$/;"	f	class:btr_pcur_t
move_to_next_state	clone/clone0clone.cc	/^int Clone_Handle::move_to_next_state(Clone_Task *task, Ha_clone_cbk *callback,$/;"	f	class:Clone_Handle
move_to_next_user_rec	include/btr0pcur.h	/^inline dberr_t btr_pcur_t::move_to_next_user_rec(mtr_t *mtr) {$/;"	f	class:btr_pcur_t
move_to_prev	btr/btr0pcur.cc	/^bool btr_pcur_t::move_to_prev(mtr_t *mtr) {$/;"	f	class:btr_pcur_t
move_to_prev_on_page	include/btr0pcur.h	/^inline void btr_pcur_t::move_to_prev_on_page() {$/;"	f	class:btr_pcur_t
move_version_base_node	lob/lob0index.cc	/^void index_entry_t::move_version_base_node(index_entry_t &to_entry) {$/;"	f	class:lob::index_entry_t
move_version_base_node	lob/zlob0index.cc	/^void z_index_entry_t::move_version_base_node(z_index_entry_t &entry) {$/;"	f	class:lob::z_index_entry_t
moved	fil/fil0fil.cc	/^  void moved(dd::Object_id object_id, space_id_t space_id,$/;"	f	class:Fil_system
moved	include/gis0type.h	/^  bool moved;     \/*!< whether lock are moved too *\/$/;"	m	struct:rtr_rec_move
mpmc_bq	include/ut0mpmcbq.h	/^  explicit mpmc_bq(size_t n_elems)$/;"	f	class:mpmc_bq
mpmc_bq	include/ut0mpmcbq.h	/^class mpmc_bq {$/;"	c
mrec_buf_t	include/row0merge.h	/^typedef byte mrec_buf_t[UNIV_PAGE_SIZE_MAX];$/;"	t
mrec_t	include/row0merge.h	/^typedef byte mrec_t;$/;"	t
msg	include/ut0ut.h	/^  static std::string msg(int err, Args &&... args) {$/;"	f	class:ib::logger
mtime	include/os0file.h	/^  time_t mtime;                \/*!< modification time *\/$/;"	m	struct:AIO_mode::os_file_stat_t
mtr	include/dict0mem.h	/^  mtr_t mtr;$/;"	m	class:last_ops_cur_t
mtr0log_h	include/mtr0log.h	34;"	d
mtr0mtr_h	include/mtr0mtr.h	35;"	d
mtr0types_h	include/mtr0types.h	34;"	d
mtr_add_page	buf/buf0buf.cc	/^void Buf_fetch<T>::mtr_add_page(buf_block_t *block) {$/;"	f	class:Buf_fetch
mtr_block_dirtied	include/mtr0mtr.h	154;"	d
mtr_block_sx_latch_at_savepoint	include/mtr0mtr.h	145;"	d
mtr_block_x_latch_at_savepoint	include/mtr0mtr.h	148;"	d
mtr_buf_copy_t	include/dyn0buf.h	/^struct mtr_buf_copy_t {$/;"	s
mtr_buf_t	include/dyn0buf.h	/^typedef dyn_buf_t<DYN_ARRAY_DATA_SIZE> mtr_buf_t;$/;"	t
mtr_commit	include/mtr0mtr.h	59;"	d
mtr_commit_mlog_test	mtr/mtr0mtr.cc	/^lsn_t mtr_commit_mlog_test(log_t &log, size_t payload) {$/;"	f
mtr_commit_mlog_test_filling_block	mtr/mtr0mtr.cc	/^void mtr_commit_mlog_test_filling_block(log_t &log, size_t req_space_left) {$/;"	f
mtr_commit_mlog_test_filling_block_low	mtr/mtr0mtr.cc	/^static void mtr_commit_mlog_test_filling_block_low(log_t &log,$/;"	f	file:
mtr_get_flush_observer	include/mtr0mtr.h	80;"	d
mtr_get_log	include/mtr0mtr.h	120;"	d
mtr_get_log_mode	include/mtr0mtr.h	72;"	d
mtr_is_block_fix	include/mtr0mtr.h	97;"	d
mtr_is_page_fix	include/mtr0mtr.h	102;"	d
mtr_log_t	include/mtr0types.h	/^enum mtr_log_t {$/;"	g
mtr_memo_contains	include/mtr0mtr.h	107;"	d
mtr_memo_contains_flagged	include/mtr0mtr.h	137;"	d
mtr_memo_contains_page	include/mtr0mtr.h	111;"	d
mtr_memo_contains_page_flagged	include/mtr0mtr.h	139;"	d
mtr_memo_push	include/mtr0mtr.h	123;"	d
mtr_memo_release	include/mtr0mtr.h	91;"	d
mtr_memo_slot_t	include/mtr0mtr.h	/^struct mtr_memo_slot_t {$/;"	s
mtr_memo_type_t	include/mtr0types.h	/^enum mtr_memo_type_t {$/;"	g
mtr_print	include/mtr0mtr.h	116;"	d
mtr_read_ulint	include/mtr0mtr.h	87;"	d
mtr_release_block_at_savepoint	include/mtr0mtr.h	142;"	d
mtr_release_s_latch_at_savepoint	include/mtr0mtr.h	67;"	d
mtr_s_lock	include/mtr0mtr.h	126;"	d
mtr_set_flush_observer	include/mtr0mtr.h	83;"	d
mtr_set_log_mode	include/mtr0mtr.h	76;"	d
mtr_set_savepoint	include/mtr0mtr.h	63;"	d
mtr_start	include/mtr0mtr.h	50;"	d
mtr_start_ro	include/mtr0mtr.h	56;"	d
mtr_start_sync	include/mtr0mtr.h	53;"	d
mtr_state_t	include/mtr0types.h	/^enum mtr_state_t {$/;"	g
mtr_sx_lock	include/mtr0mtr.h	135;"	d
mtr_t	include/mtr0mtr.h	/^  mtr_t() {$/;"	f	struct:mtr_t
mtr_t	include/mtr0mtr.h	/^struct mtr_t {$/;"	s
mtr_write_log_t	mtr/mtr0mtr.cc	/^struct mtr_write_log_t {$/;"	s	file:
mtr_x_lock	include/mtr0mtr.h	129;"	d
mtr_x_lock_space	include/mtr0mtr.h	132;"	d
mtuple_t	include/row0merge.h	/^struct mtuple_t {$/;"	s
mtype	include/data0type.h	/^  unsigned mtype : 8;   \/*!< main data type *\/$/;"	m	struct:dtype_t
mtype	include/dict0mem.h	/^  unsigned mtype : 8;   \/*!< main data type *\/$/;"	m	struct:dict_col_t
multi_exist	fts/fts0que.cc	/^  bool multi_exist; \/*!< multiple FTS_EXIST oper *\/$/;"	m	struct:fts_query_t	file:
multi_range_read_info	handler/ha_innodb.cc	/^ha_rows ha_innobase::multi_range_read_info(uint keyno, uint n_ranges, uint keys,$/;"	f	class:ha_innobase
multi_range_read_info_const	handler/ha_innodb.cc	/^ha_rows ha_innobase::multi_range_read_info_const(uint keyno, RANGE_SEQ_IF *seq,$/;"	f	class:ha_innobase
multi_range_read_init	handler/ha_innodb.cc	/^int ha_innobase::multi_range_read_init(RANGE_SEQ_IF *seq, void *seq_init_param,$/;"	f	class:ha_innobase
multi_range_read_next	handler/ha_innodb.cc	/^int ha_innobase::multi_range_read_next(char **range_info) {$/;"	f	class:ha_innobase
multi_value_data	include/data0data.h	/^struct multi_value_data {$/;"	s
must_flush_log_later	include/trx0trx.h	/^  bool must_flush_log_later; \/*!< this flag is set to TRUE in$/;"	m	struct:trx_t
must_get_clust	include/row0sel.h	/^  ibool must_get_clust;      \/*!< TRUE if index is a non-clustered$/;"	m	struct:plan_t
mutex	buf/buf0flu.cc	/^  ib_mutex_t mutex;        \/*!< mutex to protect whole of$/;"	m	struct:page_cleaner_t	file:
mutex	include/buf0buf.h	/^  BPageMutex mutex;$/;"	m	struct:Cache_hint::buf_block_t
mutex	include/dict0dict.h	/^  DictSysMutex mutex;          \/*!< mutex protecting the data$/;"	m	struct:dict_sys_t
mutex	include/dict0dict.h	/^  ib_mutex_t mutex;$/;"	m	struct:dict_persist_t
mutex	include/dict0mem.h	/^  SysMutex *mutex;        \/*!< mutex protecting the info *\/$/;"	m	struct:zip_pad_info_t
mutex	include/dict0mem.h	/^  ib_mutex_t *mutex;$/;"	m	struct:dict_table_t
mutex	include/gis0type.h	/^  ib_mutex_t mutex;  \/*!< mutex protect the seq num *\/$/;"	m	struct:rtree_ssn
mutex	include/log0recv.h	/^  ib_mutex_t mutex;$/;"	m	struct:recv_sys_t
mutex	include/row0ftsort.h	/^  ib_mutex_t mutex;                 \/*!< mutex for fts_doc_list *\/$/;"	m	struct:fts_psort_t
mutex	include/sync0arr_impl.h	/^  SysMutex mutex;        \/*!< System mutex protecting the$/;"	m	struct:sync_array_t
mutex	include/sync0arr_impl.h	/^  WaitMutex *mutex;$/;"	m	union:sync_object_t
mutex	include/trx0sys.h	/^  TrxSysMutex mutex; \/*!< mutex protecting most fields in$/;"	m	struct:trx_sys_t
mutex	include/trx0trx.h	/^  mutable TrxMutex mutex;$/;"	m	struct:trx_t
mutex	include/trx0types.h	/^  RsegMutex mutex;$/;"	m	struct:trx_rseg_t
mutex	os/os0event.cc	/^  EventMutex mutex;     \/*!< this mutex protects$/;"	m	struct:os_event	file:
mutex	row/row0log.cc	/^  ib_mutex_t mutex;    \/*!< mutex protecting error,$/;"	m	struct:row_log_t	file:
mutex	srv/srv0srv.cc	/^  ib_mutex_t mutex;    \/*!< variable protecting the$/;"	m	struct:srv_sys_t	file:
mutex	ut/ut0wqueue.cc	/^  ib_mutex_t mutex; \/*!< mutex protecting everything *\/$/;"	m	struct:ib_wqueue_t	file:
mutex_acquire	fil/fil0fil.cc	362;"	d	file:
mutex_acquire_all	fil/fil0fil.cc	/^  void mutex_acquire_all() const {$/;"	f	class:Fil_system
mutex_acquire_and_get_space	fil/fil0fil.cc	/^bool Fil_shard::mutex_acquire_and_get_space(space_id_t space_id,$/;"	f	class:Fil_shard
mutex_create	fil/fil0fil.cc	189;"	d	file:
mutex_create	fil/fil0fil.cc	196;"	d	file:
mutex_create	include/ut0mutex.h	110;"	d
mutex_create	include/ut0mutex.h	44;"	d
mutex_created	include/dict0mem.h	/^  std::atomic<os_once::state_t> mutex_created;$/;"	m	struct:dict_table_t
mutex_created	include/dict0mem.h	/^  std::atomic<os_once::state_t> mutex_created;$/;"	m	struct:zip_pad_info_t
mutex_destroy	include/ut0mutex.h	/^void mutex_destroy(Mutex *mutex) {$/;"	f
mutex_enter	fil/fil0fil.cc	191;"	d	file:
mutex_enter	fil/fil0fil.cc	198;"	d	file:
mutex_enter	include/ut0mutex.h	117;"	d
mutex_enter	include/ut0mutex.h	45;"	d
mutex_enter	log/log0recv.cc	111;"	d	file:
mutex_enter	log/log0recv.cc	116;"	d	file:
mutex_enter_inline	include/ut0mutex.h	/^void mutex_enter_inline(Mutex *m, ut::Location loc) {$/;"	f
mutex_enter_nospin	include/ut0mutex.h	119;"	d
mutex_enter_nospin	include/ut0mutex.h	46;"	d
mutex_enter_nowait	include/ut0mutex.h	121;"	d
mutex_enter_nowait	include/ut0mutex.h	47;"	d
mutex_exit	fil/fil0fil.cc	192;"	d	file:
mutex_exit	fil/fil0fil.cc	199;"	d	file:
mutex_exit	include/ut0mutex.h	123;"	d
mutex_exit	include/ut0mutex.h	48;"	d
mutex_exit	log/log0recv.cc	112;"	d	file:
mutex_exit	log/log0recv.cc	117;"	d	file:
mutex_free	fil/fil0fil.cc	190;"	d	file:
mutex_free	fil/fil0fil.cc	197;"	d	file:
mutex_free	include/ut0mutex.h	125;"	d
mutex_free	include/ut0mutex.h	49;"	d
mutex_init	include/ut0mutex.h	/^void mutex_init(Mutex *mutex, latch_id_t id, const char *file_name,$/;"	f
mutex_list_mutex_key	sync/sync0sync.cc	/^mysql_pfs_key_t mutex_list_mutex_key;$/;"	v
mutex_monitor	sync/sync0sync.cc	/^MutexMonitor *mutex_monitor;$/;"	v
mutex_own	fil/fil0fil.cc	193;"	d	file:
mutex_own	fil/fil0fil.cc	200;"	d	file:
mutex_own	include/ut0mutex.h	157;"	d
mutex_own	include/ut0mutex.h	159;"	d
mutex_own	include/ut0mutex.h	55;"	d
mutex_own	log/log0recv.cc	113;"	d	file:
mutex_own	log/log0recv.cc	118;"	d	file:
mutex_owned	fil/fil0fil.cc	/^  bool mutex_owned() const { return mutex_own(&m_mutex); }$/;"	f	class:Fil_shard
mutex_release	fil/fil0fil.cc	/^  void mutex_release() const { mutex_exit(&m_mutex); }$/;"	f	class:Fil_shard
mutex_release_all	fil/fil0fil.cc	/^  void mutex_release_all() const {$/;"	f	class:Fil_system
mutex_state_t	include/sync0types.h	/^enum mutex_state_t {$/;"	g
mutex_validate	fil/fil0fil.cc	194;"	d	file:
mutex_validate	fil/fil0fil.cc	201;"	d	file:
mutex_validate	include/ut0mutex.h	152;"	d
mutex_validate	include/ut0mutex.h	160;"	d
mutex_validate	include/ut0mutex.h	52;"	d
mutex_validate	log/log0recv.cc	114;"	d	file:
mutex_validate	log/log0recv.cc	119;"	d	file:
mutexes	include/hash0hash.h	/^    ib_mutex_t *mutexes; \/* NULL, or an array of mutexes$/;"	m	union:hash_table_t::__anon17
mutexes	include/lock0latches.h	/^    Padded_mutex mutexes[SHARDS_COUNT];$/;"	m	class:locksys::Latches::Page_shards
mutexes	include/lock0latches.h	/^    Padded_mutex mutexes[SHARDS_COUNT];$/;"	m	class:locksys::Latches::Table_shards
mv_data	include/row0mysql.h	/^  multi_value_data *mv_data;$/;"	m	struct:row_prebuilt_t
mv_key_capacity	handler/ha_innodb.cc	/^void ha_innobase::mv_key_capacity(uint *num_keys, size_t *keys_length) const {$/;"	f	class:ha_innobase
mvcc	include/trx0sys.h	/^  MVCC *mvcc;                   \/*!< Multi version concurrency control$/;"	m	struct:trx_sys_t
my_error_innodb	handler/handler0alter.cc	/^static UNIV_COLD void my_error_innodb($/;"	f	file:
my_gcolumn_templatecallback_t	handler/ha_innodb.h	/^typedef void (*my_gcolumn_templatecallback_t)(const TABLE *, void *);$/;"	t
mysql_binlog_cache_pos	include/trx0roll.h	/^  int64_t mysql_binlog_cache_pos;$/;"	m	struct:trx_named_savept_t
mysql_col_len	include/row0mysql.h	/^  ulint mysql_col_len;          \/*!< length of the column in the MySQL$/;"	m	struct:mysql_row_templ_t
mysql_col_offset	include/row0mysql.h	/^  ulint mysql_col_offset;       \/*!< offset of the column in the MySQL$/;"	m	struct:mysql_row_templ_t
mysql_declare_plugin	handler/ha_innodb.cc	/^mysql_declare_plugin(innobase){$/;"	f
mysql_declare_plugin_end	handler/ha_innodb.cc	/^    mysql_declare_plugin_end;$/;"	v
mysql_field	include/row0upd.h	/^  Field *mysql_field; \/*!< the mysql field object. *\/$/;"	m	struct:upd_field_t
mysql_length_bytes	include/row0mysql.h	/^  ulint mysql_length_bytes;     \/*!< if mysql_type$/;"	m	struct:mysql_row_templ_t
mysql_log_file_name	include/trx0trx.h	/^  const char *mysql_log_file_name;$/;"	m	struct:trx_t
mysql_log_offset	include/trx0trx.h	/^  uint64_t mysql_log_offset;$/;"	m	struct:trx_t
mysql_mvidx_len	include/row0mysql.h	/^  ulint mysql_mvidx_len;        \/*!< index length on multi-value array *\/$/;"	m	struct:mysql_row_templ_t
mysql_n_tables_locked	include/trx0trx.h	/^  ib_uint32_t mysql_n_tables_locked;$/;"	m	struct:trx_t
mysql_null_bit_mask	include/row0mysql.h	/^  ulint mysql_null_bit_mask;    \/*!< bit mask to get the NULL bit,$/;"	m	struct:mysql_row_templ_t
mysql_null_byte_offset	include/row0mysql.h	/^  ulint mysql_null_byte_offset; \/*!< MySQL NULL bit byte offset in a$/;"	m	struct:mysql_row_templ_t
mysql_pfs_key_t	include/sync0sync.h	/^  mysql_pfs_key_t() { s_count++; }$/;"	f	struct:mysql_pfs_key_t
mysql_pfs_key_t	include/sync0sync.h	/^  mysql_pfs_key_t(unsigned int val) : m_value(val) {}$/;"	f	struct:mysql_pfs_key_t
mysql_pfs_key_t	include/sync0sync.h	/^struct mysql_pfs_key_t {$/;"	s
mysql_prefix_len	include/row0mysql.h	/^  ulint mysql_prefix_len;        \/*!< byte offset of the end of$/;"	m	struct:row_prebuilt_t
mysql_row_len	include/row0mysql.h	/^  ulint mysql_row_len;           \/*!< length in bytes of a row in the$/;"	m	struct:row_prebuilt_t
mysql_row_templ_t	include/row0mysql.h	/^struct mysql_row_templ_t {$/;"	s
mysql_table	include/row0purge.h	/^  TABLE *mysql_table;$/;"	m	struct:purge_node_t
mysql_table	include/row0upd.h	/^  TABLE *mysql_table;  \/*!< the mysql table object *\/$/;"	m	struct:upd_t
mysql_template	include/row0mysql.h	/^  mysql_row_templ_t *mysql_template;$/;"	m	struct:row_prebuilt_t
mysql_thd	include/trx0trx.h	/^  THD *mysql_thd; \/*!< MySQL thread handle corresponding$/;"	m	struct:trx_t
mysql_trx_list	include/trx0sys.h	/^  trx_ut_list_t mysql_trx_list; \/*!< List of transactions created$/;"	m	struct:trx_sys_t
mysql_trx_list	include/trx0trx.h	/^  mysql_trx_list; \/*!< list of transactions created for$/;"	m	struct:trx_t
mysql_type	include/row0mysql.h	/^  ulint mysql_type;             \/*!< MySQL type code; this is always$/;"	m	struct:mysql_row_templ_t
n_active	srv/srv0conc.cc	/^  std::atomic<int32_t> n_active;$/;"	m	struct:srv_conc_t	file:
n_active_thrs	include/que0que.h	/^  ulint n_active_thrs; \/*!< if this is the root of a graph, the$/;"	m	struct:que_fork_t
n_active_thrs	include/trx0trx.h	/^  ulint n_active_thrs; \/*!< number of active query threads *\/$/;"	m	struct:trx_lock_t
n_addrs	include/log0recv.h	/^  ulint n_addrs;$/;"	m	struct:recv_sys_t
n_auto	include/ut0new.h	/^static constexpr size_t n_auto = UT_ARR_SIZE(auto_event_names);$/;"	v
n_autoinc_rows	include/trx0trx.h	/^  ulint n_autoinc_rows; \/*!< no. of AUTO-INC rows required for$/;"	m	struct:trx_t
n_bits	include/lock0priv.h	/^  uint32_t n_bits;$/;"	m	struct:lock_rec_t
n_blobs	include/page0types.h	/^  uint16_t n_blobs;$/;"	m	struct:page_zip_des_t
n_bytes	include/btr0sea.h	/^  ulint n_bytes;   \/*!< recommended prefix: number of bytes in$/;"	m	struct:btr_search_t
n_bytes	include/buf0buf.h	/^  volatile uint32_t n_bytes;$/;"	m	struct:Cache_hint::buf_block_t
n_bytes	include/buf0dblwr.h	/^    auto n_bytes = m_n_bytes + univ_page_size.physical();$/;"	m	struct:dblwr::Buffer
n_cells	include/hash0hash.h	/^  ulint n_cells;      \/* number of cells in the hash table *\/$/;"	m	struct:hash_table_t
n_cells	include/sync0arr_impl.h	/^  ulint n_cells;         \/*!< number of cells in the$/;"	m	struct:sync_array_t
n_chunks	include/buf0buf.h	/^  volatile ulint n_chunks;$/;"	m	struct:Cache_hint::buf_pool_t
n_chunks_new	include/buf0buf.h	/^  volatile ulint n_chunks_new;$/;"	m	struct:Cache_hint::buf_pool_t
n_cnt_index	include/ut0lock_free_hash.h	/^  size_t n_cnt_index() const {$/;"	f	class:ut_lock_free_cnt_t
n_col	include/dict0mem.h	/^  ulint n_col;$/;"	m	struct:dict_vcol_templ_t
n_cols	include/dict0mem.h	/^  unsigned n_cols : 10;$/;"	m	struct:dict_table_t
n_completed	fts/fts0opt.cc	/^  ulint n_completed; \/*!< Number of FTS indexes that have$/;"	m	struct:fts_optimize_t	file:
n_completed	include/trx0purge.h	/^  std::atomic<ulint> n_completed;$/;"	m	struct:trx_purge_t
n_cpu	include/srv0srv.h	/^  int n_cpu;$/;"	m	struct:Srv_cpu_usage
n_def	include/dict0mem.h	/^  unsigned n_def : 10;      \/*!< number of fields defined so far *\/$/;"	m	struct:dict_index_t
n_def	include/dict0mem.h	/^  unsigned n_def : 10;$/;"	m	struct:dict_table_t
n_deleted	include/ut0lock_free_hash.h	/^  size_t n_deleted(int64_t deleted_val) const {$/;"	f	class:ut_lock_free_list_node_t
n_diff_all_analyzed_pages	dict/dict0stats.cc	/^  ib_uint64_t n_diff_all_analyzed_pages;$/;"	m	struct:n_diff_data_t	file:
n_diff_data_t	dict/dict0stats.cc	/^struct n_diff_data_t {$/;"	s	file:
n_diff_on_level	dict/dict0stats.cc	/^  ib_uint64_t n_diff_on_level;$/;"	m	struct:n_diff_data_t	file:
n_disabled_debug	buf/buf0flu.cc	/^  ulint n_disabled_debug;$/;"	m	struct:page_cleaner_t	file:
n_docs	fts/fts0que.cc	/^  ulonglong n_docs;$/;"	m	struct:fts_query_t	file:
n_dup	include/row0merge.h	/^  ulint n_dup;          \/*!< number of duplicates *\/$/;"	m	struct:row_merge_dup_t
n_elements	include/detail/ut0new.h	/^  static inline Metadata::n_elements_t n_elements(void *ptr) {$/;"	f	struct:ut::detail::Aligned_alloc_arr
n_elements_allocated	include/ut0new.h	/^  size_type n_elements_allocated(const_pointer ptr) {$/;"	f	class:ut_allocator
n_exact_match	include/row0sel.h	/^  ulint n_exact_match;     \/*!< number of first fields in$/;"	m	struct:plan_t
n_ext	include/row0ext.h	/^  ulint n_ext;      \/*!< number of externally stored columns which are part of$/;"	m	struct:row_ext_t
n_external_pages_sum	dict/dict0stats.cc	/^  ib_uint64_t n_external_pages_sum;$/;"	m	struct:n_diff_data_t	file:
n_fetch_cached	include/row0mysql.h	/^  ulint n_fetch_cached;               \/*!< number of not yet fetched rows$/;"	m	struct:row_prebuilt_t
n_fields	include/btr0sea.h	/^  ulint n_fields;  \/*!< recommended prefix length for hash search:$/;"	m	struct:btr_search_t
n_fields	include/buf0buf.h	/^  volatile uint32_t n_fields;$/;"	m	struct:Cache_hint::buf_block_t
n_fields	include/data0data.h	/^  ulint n_fields;          \/*!< number of stored fields *\/$/;"	m	struct:big_rec_t
n_fields	include/data0data.h	/^  ulint n_fields;$/;"	m	struct:dtuple_t
n_fields	include/dict0mem.h	/^  unsigned n_fields : 10;   \/*!< number of fields in the index *\/$/;"	m	struct:dict_index_t
n_fields	include/dict0mem.h	/^  unsigned n_fields : 10;   \/*!< number of indexes' first fields$/;"	m	struct:dict_foreign_t
n_fields	include/row0merge.h	/^  ulint n_fields;            \/*!< number of fields in index *\/$/;"	m	struct:index_def_t
n_fields	include/row0upd.h	/^  ulint n_fields;      \/*!< number of update fields *\/$/;"	m	struct:upd_t
n_fields_cmp	include/data0data.h	/^  ulint n_fields_cmp;$/;"	m	struct:dtuple_t
n_flush	include/buf0buf.h	/^  ulint n_flush[BUF_FLUSH_N_TYPES];$/;"	m	struct:Cache_hint::buf_pool_t
n_flushed_list	buf/buf0flu.cc	/^  ulint n_flushed_list;$/;"	m	struct:page_cleaner_slot_t	file:
n_flushed_lru	buf/buf0flu.cc	/^  ulint n_flushed_lru;$/;"	m	struct:page_cleaner_slot_t	file:
n_foreign_key_checks_running	include/dict0mem.h	/^  std::atomic<ulint> n_foreign_key_checks_running;$/;"	m	struct:dict_table_t
n_hash_fail	include/btr0sea.h	/^  ulint n_hash_fail; \/*!< number of failed hash searches *\/$/;"	m	struct:btr_search_t
n_hash_helps	include/buf0buf.h	/^  uint32_t n_hash_helps;$/;"	m	struct:Cache_hint::buf_block_t
n_hash_potential	include/btr0sea.h	/^  ulint n_hash_potential;$/;"	m	struct:btr_search_t
n_hash_succ	include/btr0sea.h	/^  ulint n_hash_succ; \/*!< number of successful hash searches thus$/;"	m	struct:btr_search_t
n_indexes	include/dict0dd.h	/^  const uint n_indexes;$/;"	m	struct:innodb_dd_table_t
n_instant_cols	include/dict0mem.h	/^  unsigned n_instant_cols : 10;$/;"	m	struct:dict_table_t
n_instant_nullable	include/dict0mem.h	/^  unsigned n_instant_nullable : 10;$/;"	m	struct:dict_index_t
n_iterations	buf/buf0flu.cc	/^ulint n_iterations = 0;$/;"	m	namespace:Adaptive_flush	file:
n_leaf_pages_to_analyze	dict/dict0stats.cc	/^  ib_uint64_t n_leaf_pages_to_analyze;$/;"	m	struct:n_diff_data_t	file:
n_lock_max_wait_time	include/lock0lock.h	/^  ulint n_lock_max_wait_time;$/;"	m	struct:lock_sys_t
n_lock_wait_count	include/srv0srv.h	/^  ulint_ctr_1_t n_lock_wait_count;$/;"	m	struct:srv_stats_t
n_lock_wait_current_count	include/srv0srv.h	/^  lint_ctr_1_t n_lock_wait_current_count;$/;"	m	struct:srv_stats_t
n_lock_wait_time	include/srv0srv.h	/^  int64_ctr_1_t n_lock_wait_time;$/;"	m	struct:srv_stats_t
n_m_v_cols	include/dict0mem.h	/^  unsigned n_m_v_cols : 10;$/;"	m	struct:dict_table_t
n_mysql_tables_in_use	include/trx0trx.h	/^  ib_uint32_t n_mysql_tables_in_use; \/*!< number of Innobase tables$/;"	m	struct:trx_t
n_node	include/gis0geo.h	/^  int n_node;     \/* which group in.*\/$/;"	m	struct:rtr_split_node_t
n_nodes	fts/fts0fts.cc	/^static ulint n_nodes = 0;$/;"	v	file:
n_nodes	include/ut0rbt.h	/^  ulint n_nodes; \/* Total number of data nodes *\/$/;"	m	struct:ib_rbt_t
n_nullable	include/dict0mem.h	/^  unsigned n_nullable : 10; \/*!< number of nullable fields *\/$/;"	m	struct:dict_index_t
n_objects_alive	os/os0event.cc	/^  static std::atomic_size_t n_objects_alive;$/;"	m	struct:os_event	file:
n_old_col	row/row0log.cc	/^  ulint n_old_col;$/;"	m	struct:row_log_t	file:
n_old_vcol	row/row0log.cc	/^  ulint n_old_vcol;$/;"	m	struct:row_log_t	file:
n_page_get_delta	include/buf0buf.h	/^  ulint n_page_get_delta;            \/*!< num of buffer pool page gets since$/;"	m	struct:Cache_hint::buf_pool_info_t
n_page_gets	include/buf0buf.h	/^  ulint n_page_gets;                 \/*!< buf_pool->n_page_gets *\/$/;"	m	struct:Cache_hint::buf_pool_info_t
n_pages_created	include/buf0buf.h	/^  std::atomic<uint64_t> n_pages_created;$/;"	m	struct:Cache_hint::buf_pool_stat_t
n_pages_created	include/buf0buf.h	/^  ulint n_pages_created;             \/*!< buf_pool->n_pages_created *\/$/;"	m	struct:Cache_hint::buf_pool_info_t
n_pages_made_young	include/buf0buf.h	/^  uint64_t n_pages_made_young;$/;"	m	struct:Cache_hint::buf_pool_stat_t
n_pages_made_young	include/buf0buf.h	/^  ulint n_pages_made_young;          \/*!< number of pages made young *\/$/;"	m	struct:Cache_hint::buf_pool_info_t
n_pages_not_made_young	include/buf0buf.h	/^  uint64_t n_pages_not_made_young;$/;"	m	struct:Cache_hint::buf_pool_stat_t
n_pages_not_made_young	include/buf0buf.h	/^  ulint n_pages_not_made_young;      \/*!< number of pages not made young *\/$/;"	m	struct:Cache_hint::buf_pool_info_t
n_pages_read	include/buf0buf.h	/^  std::atomic<uint64_t> n_pages_read;$/;"	m	struct:Cache_hint::buf_pool_stat_t
n_pages_read	include/buf0buf.h	/^  ulint n_pages_read;                \/*!< buf_pool->n_pages_read *\/$/;"	m	struct:Cache_hint::buf_pool_info_t
n_pages_requested	buf/buf0flu.cc	/^  ulint n_pages_requested;$/;"	m	struct:page_cleaner_slot_t	file:
n_pages_written	include/buf0buf.h	/^  std::atomic<uint64_t> n_pages_written;$/;"	m	struct:Cache_hint::buf_pool_stat_t
n_pages_written	include/buf0buf.h	/^  ulint n_pages_written;             \/*!< buf_pool->n_pages_written *\/$/;"	m	struct:Cache_hint::buf_pool_info_t
n_patt_succ	include/btr0sea.h	/^  ulint n_patt_succ; \/*!< number of successful pattern searches thus$/;"	m	struct:btr_search_t
n_pend_reads	include/buf0buf.h	/^  std::atomic<ulint> n_pend_reads;$/;"	m	struct:Cache_hint::buf_pool_t
n_pend_reads	include/buf0buf.h	/^  ulint n_pend_reads;                \/*!< buf_pool->n_pend_reads, pages$/;"	m	struct:Cache_hint::buf_pool_info_t
n_pend_unzip	include/buf0buf.h	/^  std::atomic<ulint> n_pend_unzip;$/;"	m	struct:Cache_hint::buf_pool_t
n_pend_unzip	include/buf0buf.h	/^  ulint n_pend_unzip;                \/*!< buf_pool->n_pend_unzip, pages$/;"	m	struct:Cache_hint::buf_pool_info_t
n_pending	include/fil0fil.h	/^  size_t n_pending;$/;"	m	struct:fil_node_t
n_pending_flush_list	include/buf0buf.h	/^  ulint n_pending_flush_list;        \/*!< Pages pending flush in FLUSH$/;"	m	struct:Cache_hint::buf_pool_info_t
n_pending_flush_lru	include/buf0buf.h	/^  ulint n_pending_flush_lru;         \/*!< Pages pending flush in LRU *\/$/;"	m	struct:Cache_hint::buf_pool_info_t
n_pending_flush_single_page	include/buf0buf.h	/^  ulint n_pending_flush_single_page; \/*!< Pages pending to be$/;"	m	struct:Cache_hint::buf_pool_info_t
n_pending_flushes	include/fil0fil.h	/^  size_t n_pending_flushes;$/;"	m	struct:fil_node_t
n_pk_recs_inc	include/ut0stage.h	/^  void n_pk_recs_inc() {}$/;"	f	class:ut_stage_alter_t
n_pk_recs_inc	include/ut0stage.h	/^inline void ut_stage_alter_t::n_pk_recs_inc() { m_n_pk_recs++; }$/;"	f	class:ut_stage_alter_t
n_pointers	include/buf0buf.h	/^  std::atomic<ulint> n_pointers;$/;"	m	struct:Cache_hint::buf_block_t
n_pos	fts/fts0que.cc	/^  ulint n_pos;          \/*!< number of position set, defines$/;"	m	struct:fts_proximity_t	file:
n_prepared_trx	include/trx0sys.h	/^  ulint n_prepared_trx; \/*!< Number of transactions currently$/;"	m	struct:trx_sys_t
n_ra_pages_evicted	include/buf0buf.h	/^  uint64_t n_ra_pages_evicted;$/;"	m	struct:Cache_hint::buf_pool_stat_t
n_ra_pages_evicted	include/buf0buf.h	/^  ulint n_ra_pages_evicted;          \/*!< buf_pool->n_ra_pages_evicted,$/;"	m	struct:Cache_hint::buf_pool_info_t
n_ra_pages_read	include/buf0buf.h	/^  std::atomic<uint64_t> n_ra_pages_read;$/;"	m	struct:Cache_hint::buf_pool_stat_t
n_ra_pages_read	include/buf0buf.h	/^  ulint n_ra_pages_read;             \/*!< buf_pool->n_ra_pages_read, number$/;"	m	struct:Cache_hint::buf_pool_info_t
n_ra_pages_read_rnd	include/buf0buf.h	/^  std::atomic<uint64_t> n_ra_pages_read_rnd;$/;"	m	struct:Cache_hint::buf_pool_stat_t
n_ra_pages_read_rnd	include/buf0buf.h	/^  ulint n_ra_pages_read_rnd;         \/*!< buf_pool->n_ra_pages_read_rnd,$/;"	m	struct:Cache_hint::buf_pool_info_t
n_rec	include/row0merge.h	/^  ib_uint64_t n_rec; \/*!< number of records in the file *\/$/;"	m	struct:merge_file_t
n_rec_locks	include/dict0mem.h	/^  std::atomic<size_t> n_rec_locks;$/;"	m	struct:dict_table_t
n_rec_locks	include/trx0trx.h	/^  std::atomic<ulint> n_rec_locks;$/;"	m	struct:trx_lock_t
n_recs_on_level	dict/dict0stats.cc	/^  ib_uint64_t n_recs_on_level;$/;"	m	struct:n_diff_data_t	file:
n_ref	include/trx0trx.h	/^  lint n_ref; \/*!< Count of references, protected$/;"	m	struct:trx_t
n_ref	include/ut0lock_free_hash.h	/^  int64_t n_ref() {$/;"	f	class:ut_lock_free_list_node_t
n_ref_count	include/dict0mem.h	/^  std::atomic<uint64_t> n_ref_count;$/;"	m	struct:dict_table_t
n_reserved	include/sync0arr_impl.h	/^  ulint n_reserved;      \/*!< number of currently reserved$/;"	m	struct:sync_array_t
n_rounds	include/dict0mem.h	/^  ulint n_rounds;         \/*!< number of currently successful$/;"	m	struct:zip_pad_info_t
n_rows_deleted	include/srv0srv.h	/^  ulint_ctr_64_t n_rows_deleted;$/;"	m	struct:srv_stats_t
n_rows_fetched	include/row0mysql.h	/^  ulint n_rows_fetched;          \/*!< number of rows fetched after$/;"	m	struct:row_prebuilt_t
n_rows_fetched	include/row0sel.h	/^  ulint n_rows_fetched;    \/*!< number of rows fetched using pcur$/;"	m	struct:plan_t
n_rows_inserted	include/srv0srv.h	/^  ulint_ctr_64_t n_rows_inserted;$/;"	m	struct:srv_stats_t
n_rows_prefetched	include/row0sel.h	/^  ulint n_rows_prefetched; \/*!< number of prefetched rows cached$/;"	m	struct:plan_t
n_rows_read	include/srv0srv.h	/^  ulint_ctr_64_t n_rows_read;$/;"	m	struct:srv_stats_t
n_rows_updated	include/srv0srv.h	/^  ulint_ctr_64_t n_rows_updated;$/;"	m	struct:srv_stats_t
n_sampled_pages_read	include/srv0srv.h	/^  ulint_ctr_64_t n_sampled_pages_read;$/;"	m	struct:srv_stats_t
n_sampled_pages_skipped	include/srv0srv.h	/^  ulint_ctr_64_t n_sampled_pages_skipped;$/;"	m	struct:srv_stats_t
n_searches	include/btr0sea.h	/^  ulint n_searches;  \/*!< number of searches *\/$/;"	m	struct:btr_search_t
n_slots	buf/buf0flu.cc	/^  ulint n_slots;           \/*!< total number of slots *\/$/;"	m	struct:page_cleaner_t	file:
n_slots_finished	buf/buf0flu.cc	/^  ulint n_slots_finished;$/;"	m	struct:page_cleaner_t	file:
n_slots_flushing	buf/buf0flu.cc	/^  ulint n_slots_flushing;$/;"	m	struct:page_cleaner_t	file:
n_slots_requested	buf/buf0flu.cc	/^  ulint n_slots_requested;$/;"	m	struct:page_cleaner_t	file:
n_stop	include/trx0purge.h	/^  ulint n_stop;$/;"	m	struct:trx_purge_t
n_submitted	include/trx0purge.h	/^  volatile ulint n_submitted;$/;"	m	struct:trx_purge_t
n_sync_obj	include/hash0hash.h	/^  ulint n_sync_obj; \/* if sync_objs != NULL, then$/;"	m	struct:hash_table_t
n_sys_threads	srv/srv0srv.cc	/^  ulint n_sys_threads; \/*!< size of the sys_threads$/;"	m	struct:srv_sys_t	file:
n_system_rows_deleted	include/srv0srv.h	/^  ulint_ctr_64_t n_system_rows_deleted;$/;"	m	struct:srv_stats_t
n_system_rows_inserted	include/srv0srv.h	/^  ulint_ctr_64_t n_system_rows_inserted;$/;"	m	struct:srv_stats_t
n_system_rows_read	include/srv0srv.h	/^  ulint_ctr_64_t n_system_rows_read;$/;"	m	struct:srv_stats_t
n_system_rows_updated	include/srv0srv.h	/^  ulint_ctr_64_t n_system_rows_updated;$/;"	m	struct:srv_stats_t
n_t_cols	include/dict0mem.h	/^  unsigned n_t_cols : 10;$/;"	m	struct:dict_table_t
n_t_def	include/dict0mem.h	/^  unsigned n_t_def : 10;$/;"	m	struct:dict_table_t
n_tables	include/row0sel.h	/^  ulint n_tables;            \/*!< number of tables *\/$/;"	m	struct:sel_node_t
n_template	include/row0mysql.h	/^  unsigned n_template : 10;                \/*!< number of elements in the$/;"	m	struct:row_prebuilt_t
n_threads_active	srv/srv0srv.cc	/^  ulint n_threads_active[SRV_MASTER + 1];$/;"	m	struct:srv_sys_t	file:
n_tickets_to_enter_innodb	include/trx0trx.h	/^  ib_uint32_t n_tickets_to_enter_innodb;$/;"	m	struct:trx_t
n_tuples	include/row0merge.h	/^  ulint n_tuples;       \/*!< number of data tuples *\/$/;"	m	struct:row_merge_buf_t
n_uniq	include/dict0mem.h	/^  unsigned n_uniq : 10;     \/*!< number of fields from the beginning$/;"	m	struct:dict_index_t
n_user_defined_cols	include/dict0mem.h	/^  unsigned n_user_defined_cols : 10;$/;"	m	struct:dict_index_t
n_v_col	include/dict0mem.h	/^  ulint n_v_col;$/;"	m	struct:dict_add_v_col_t
n_v_col	include/dict0mem.h	/^  ulint n_v_col;$/;"	m	struct:dict_vcol_templ_t
n_v_cols	include/dict0mem.h	/^  unsigned n_v_cols : 10;$/;"	m	struct:dict_table_t
n_v_def	include/dict0mem.h	/^  unsigned n_v_def : 10;$/;"	m	struct:dict_table_t
n_v_fields	include/data0data.h	/^  ulint n_v_fields;$/;"	m	struct:dtuple_t
n_waiting	srv/srv0conc.cc	/^  std::atomic<int32_t> n_waiting;$/;"	m	struct:srv_conc_t	file:
n_words	fts/fts0opt.cc	/^  ulint n_words; \/*!< Number of words compressed *\/$/;"	m	struct:fts_zip_t	file:
name	api/api0api.cc	/^  const char *name; \/*!< Index name *\/$/;"	m	struct:ib_index_def_t	file:
name	api/api0api.cc	/^  const char *name; \/*!< Name of column *\/$/;"	m	struct:ib_col_t	file:
name	api/api0api.cc	/^  const char *name; \/*!< Name of column *\/$/;"	m	struct:ib_key_col_t	file:
name	api/api0api.cc	/^  const char *name; \/*!< Table name *\/$/;"	m	struct:ib_table_def_t	file:
name	dict/dict0upgrade.cc	/^  const char *name;$/;"	m	struct:__anon1	file:
name	include/dict0dd.h	/^  const char *name;$/;"	m	struct:innodb_dd_table_t
name	include/dict0mem.h	/^  id_name_t name;            \/*!< name of the column *\/$/;"	m	struct:dict_field_t
name	include/dict0mem.h	/^  id_name_t name;         \/*!< index name *\/$/;"	m	struct:dict_index_t
name	include/dict0mem.h	/^  table_name_t name;$/;"	m	struct:dict_table_t
name	include/fil0fil.h	/^  char *name;$/;"	m	struct:fil_node_t
name	include/fsp0file.h	/^  const char *name() const { return (m_name); }$/;"	f	class:Datafile
name	include/fsp0space.h	/^  const char *name() const { return (m_name); }$/;"	f	class:Tablespace
name	include/fts0fts.h	/^  char *name; \/*!< First entry is always NULL, the$/;"	m	struct:fts_savepoint_t
name	include/fts0fts.h	/^  char *name;$/;"	m	struct:fts_aux_table_t
name	include/os0file.h	/^  char name[OS_FILE_MAX_PATH]; \/*!< path to a file *\/$/;"	m	struct:AIO_mode::os_file_stat_t
name	include/pars0pars.h	/^  const char *name;         \/*!< function name *\/$/;"	m	struct:pars_user_func_t
name	include/pars0pars.h	/^  const char *name;    \/*!< name *\/$/;"	m	struct:pars_bound_lit_t
name	include/pars0pars.h	/^  const char *name; \/*!< name *\/$/;"	m	struct:pars_bound_id_t
name	include/pars0sym.h	/^  const char *name;              \/*!< name of an id *\/$/;"	m	struct:sym_node_t
name	include/row0merge.h	/^  const char *name;          \/*!< index name *\/$/;"	m	struct:index_def_t
name	include/trx0roll.h	/^  char *name;          \/*!< savepoint name *\/$/;"	m	struct:trx_named_savept_t
name_hash	include/dict0mem.h	/^  hash_node_t name_hash;$/;"	m	struct:dict_table_t
name_len	include/pars0sym.h	/^  ulint name_len;                \/*!< id name length *\/$/;"	m	struct:sym_node_t
name_of_col_is	dict/dict0load.cc	/^static ibool name_of_col_is(const dict_table_t *table, \/*!< in: table *\/$/;"	f	file:
name_prefix	fts/fts0opt.cc	/^  char *name_prefix; \/*!< FTS table name prefix *\/$/;"	m	struct:fts_optimize_t	file:
needExt	btr/btr0bulk.cc	/^bool PageBulk::needExt(const dtuple_t *tuple, ulint rec_size) const {$/;"	f	class:PageBulk
need_copy	handler/handler0alter.cc	/^  static inline bool need_copy(const Alter_inplace_info *ha_alter_info) {$/;"	f	class:alter_parts
need_page_lock	include/gis0type.h	/^  bool need_page_lock;$/;"	m	struct:rtr_info
need_prdt_lock	include/gis0type.h	/^  bool need_prdt_lock;$/;"	m	struct:rtr_info
need_rebuild	handler/handler0alter.cc	/^  bool need_rebuild() const { return (old_table != new_table); }$/;"	f	struct:ha_innobase_inplace_ctx
need_recalc	include/lob0lob.h	/^  bool need_recalc() const {$/;"	f	class:lob::BtrContext
need_rename	handler/handler0alter.cc	/^  bool need_rename() const { return (m_conflict); }$/;"	f	class:alter_part_add	file:
need_to_access_clustered	include/row0mysql.h	/^  unsigned need_to_access_clustered : 1;   \/*!< if we are fetching$/;"	m	struct:row_prebuilt_t
needs_encryption_rotate	fil/fil0fil.cc	/^bool Fil_shard::needs_encryption_rotate(fil_space_t *space) {$/;"	f	class:Fil_shard
needs_truncation	trx/trx0purge.cc	/^bool Tablespace::needs_truncation() {$/;"	f	class:undo::Tablespace
nested_exp_count	fts/fts0que.cc	/^  ulint nested_exp_count; \/*!< number of nested sub expression limit *\/$/;"	m	struct:fts_query_t	file:
new_array	include/ut0new.h	/^  pointer new_array(size_type n_elements, PSI_memory_key key) {$/;"	f	class:ut_allocator
new_ft_info	handler/ha_innodb.h	/^typedef struct new_ft_info {$/;"	s
new_rec	include/gis0type.h	/^  rec_t *new_rec; \/*!< new record location *\/$/;"	m	struct:rtr_rec_move
new_rec_lock	include/row0mysql.h	/^  bool new_rec_lock[LOCK_COUNT]; \/*!< normally false; if$/;"	m	struct:row_prebuilt_t
new_table	handler/handler0alter.cc	/^  dict_table_t *new_table() { return (m_new); }$/;"	f	class:alter_part
new_table	handler/handler0alter.cc	/^  dict_table_t *new_table;$/;"	m	struct:ha_innobase_inplace_ctx	file:
new_table	include/row0ftsort.h	/^  dict_table_t *new_table; \/*!< source table *\/$/;"	m	struct:fts_psort_common_t
new_trx_id	include/row0undo.h	/^  trx_id_t new_trx_id;      \/*!< trx id to restore to clustered index$/;"	m	struct:undo_node_t
new_val	include/row0upd.h	/^  dfield_t new_val;       \/*!< new value for the column *\/$/;"	m	struct:upd_field_t
newest_modification	include/buf0buf.h	/^  lsn_t newest_modification;$/;"	m	class:Cache_hint::buf_page_t
newest_modification	include/log0test.h	/^    lsn_t newest_modification;$/;"	m	struct:Log_test::Page
next	include/dict0mem.h	/^  const dict_index_t *next() const {$/;"	f	struct:dict_index_t
next	include/dict0mem.h	/^  dict_index_t *next() {$/;"	f	struct:dict_index_t
next	include/fts0ast.h	/^  fts_ast_node_t *next;       \/*!< Link for expr list *\/$/;"	m	struct:fts_ast_node_t
next	include/ha0ha.h	/^  ha_node_t *next; \/*!< next chain node or NULL if none *\/$/;"	m	struct:ha_node_t
next	include/lob0index.h	/^  buf_block_t *next() {$/;"	f	struct:lob::index_entry_t
next	include/log0recv.h	/^  recv_data_t *next;$/;"	m	struct:recv_data_t
next	include/row0row.h	/^  dtuple_t *next() {$/;"	f	class:Multi_value_entry_builder
next	include/ut0list.h	/^  ib_list_node_t *next; \/*!< next node *\/$/;"	m	struct:ib_list_node_t
next	include/ut0lst.h	/^  Type *next; \/*!< pointer to next node,$/;"	m	struct:ut_list_node
next	lock/lock0lock.cc	/^  ulint next() { return (++m_index); }$/;"	f	class:TrxLockIterator
next	lock/lock0lock.cc	/^  void next() {$/;"	f	class:TrxListIterator
next_alloc	include/fts0ast.h	/^  fts_ast_node_t *next_alloc; \/*!< For tracking allocations *\/$/;"	m	struct:fts_ast_node_t
next_char_pos	include/pars0sym.h	/^  int next_char_pos;$/;"	m	struct:sym_tab_t
next_doc_id	include/fts0types.h	/^  doc_id_t next_doc_id; \/*!< Next doc id *\/$/;"	m	struct:fts_cache_t
next_free_slot	include/sync0arr_impl.h	/^  ulint next_free_slot;  \/*!< the next free cell in the array *\/$/;"	m	struct:sync_array_t
next_id	log/log0ddl.cc	/^inline uint64_t Log_DDL::next_id() {$/;"	f	class:Log_DDL
next_position	include/ut0link_buf.h	/^inline bool Link_buf<Position>::next_position(Position position,$/;"	f	class:Link_buf
next_space_id	trx/trx0purge.cc	/^space_id_t next_space_id(space_id_t space_id) {$/;"	f	namespace:undo
next_space_id	trx/trx0purge.cc	/^space_id_t next_space_id(space_id_t space_id, space_id_t space_num) {$/;"	f	namespace:undo
next_stored	include/trx0purge.h	/^  bool next_stored;$/;"	m	struct:trx_purge_t
next_t	include/ut0lock_free_hash.h	/^  typedef ut_lock_free_list_node_t<T> *next_t;$/;"	t	class:ut_lock_free_list_node_t
nil	include/ut0rbt.h	/^  ib_rbt_node_t *nil; \/* Black colored node that is$/;"	m	struct:ib_rbt_t
no	include/trx0trx.h	/^  trx_id_t no; \/*!< transaction serialization number:$/;"	m	struct:trx_t
no_autoinc_locking	include/row0mysql.h	/^  bool no_autoinc_locking;$/;"	m	struct:row_prebuilt_t
no_flush	include/buf0buf.h	/^  os_event_t no_flush[BUF_FLUSH_N_TYPES];$/;"	m	struct:Cache_hint::buf_pool_t
no_list	include/trx0trx.h	/^  no_list; \/*!< Required during view creation$/;"	m	struct:trx_t
no_prefetch	include/row0sel.h	/^  ibool no_prefetch;       \/*!< no prefetch for this table *\/$/;"	m	struct:plan_t
no_read_locking	include/row0mysql.h	/^  bool no_read_locking;$/;"	m	struct:row_prebuilt_t
node	api/api0api.cc	/^  ib_qry_node_t node; \/*!< Query node*\/$/;"	m	struct:ib_qry_proc_t	file:
node	fts/fts0pars.cc	/^	fts_ast_node_t*		node;$/;"	m	union:YYSTYPE	file:
node	include/fts0pars.h	/^	fts_ast_node_t*		node;$/;"	m	union:YYSTYPE
node	include/hash0hash.h	/^  void *node; \/*!< hash chain node, NULL if none *\/$/;"	m	struct:hash_cell_t
node	include/pars0pars.h	/^  sym_node_t *node;    \/*!< symbol node *\/$/;"	m	struct:pars_bound_lit_t
node_count	include/lob0first.h	/^  constexpr static ulint node_count() {$/;"	f	struct:lob::first_page_t
node_count	lob/lob0impl.cc	/^ulint node_page_t::node_count() {$/;"	f	class:lob::node_page_t
node_page_t	include/lob0impl.h	/^  node_page_t() {}$/;"	f	struct:lob::node_page_t
node_page_t	include/lob0impl.h	/^  node_page_t(buf_block_t *block) : basic_page_t(block, nullptr, nullptr) {}$/;"	f	struct:lob::node_page_t
node_page_t	include/lob0impl.h	/^  node_page_t(buf_block_t *block, mtr_t *mtr) : basic_page_t(block, mtr) {}$/;"	f	struct:lob::node_page_t
node_page_t	include/lob0impl.h	/^  node_page_t(buf_block_t *block, mtr_t *mtr, dict_index_t *index)$/;"	f	struct:lob::node_page_t
node_page_t	include/lob0impl.h	/^  node_page_t(mtr_t *mtr, dict_index_t *index)$/;"	f	struct:lob::node_page_t
node_page_t	include/lob0impl.h	/^struct node_page_t : public basic_page_t {$/;"	s	namespace:lob
node_ptr	include/ut0lst.h	/^  typedef NodePtr node_ptr;$/;"	t	struct:ut_list_base
node_seq_t	include/gis0type.h	/^typedef ib_uint32_t node_seq_t;$/;"	t
node_t	include/read0types.h	/^  typedef UT_LIST_NODE_T(ReadView) node_t;$/;"	t	class:ReadView
node_type	include/ut0lst.h	/^  typedef ut_list_node<Type> node_type;$/;"	t	struct:GenericGetNode
node_type	include/ut0lst.h	/^  typedef ut_list_node<Type> node_type;$/;"	t	struct:ut_list_base
node_visit	include/gis0type.h	/^typedef struct node_visit {$/;"	s
node_visit_t	include/gis0type.h	/^} node_visit_t;$/;"	t	typeref:struct:node_visit
nodes	include/fts0types.h	/^  ib_vector_t *nodes; \/*!< Nodes read from disk *\/$/;"	m	struct:fts_word_t
nodes	include/fts0types.h	/^  ib_vector_t *nodes; \/*!< Word node ilists, each element is$/;"	m	struct:fts_tokenizer_word_t
nodes_begin	include/lob0first.h	/^  byte *nodes_begin() const { return (frame() + LOB_PAGE_DATA); }$/;"	f	struct:lob::first_page_t
nodes_begin	include/lob0impl.h	/^  byte *nodes_begin() const { return (frame() + LOB_PAGE_DATA); }$/;"	f	struct:lob::node_page_t
noexcept	buf/buf0buf.cc	/^  Buf_fetch(const page_id_t &page_id, const page_size_t &page_size) noexcept$/;"	m	struct:Buf_fetch	file:
noexcept	buf/buf0buf.cc	/^  dberr_t get(buf_block_t *&block) noexcept;$/;"	m	struct:Buf_fetch_normal	file:
noexcept	buf/buf0buf.cc	/^  dberr_t get(buf_block_t *&block) noexcept;$/;"	m	struct:Buf_fetch_other	file:
noexcept	buf/buf0dblwr.cc	/^                                uint32_t buf_pool_index) noexcept$/;"	f	class:Double_write
noexcept	buf/buf0dblwr.cc	/^                           file::Block *e_block, uint32_t e_len) noexcept;$/;"	m	class:Double_write	file:
noexcept	buf/buf0dblwr.cc	/^      noexcept MY_ATTRIBUTE((warn_unused_result)) {$/;"	f	class:Double_write
noexcept	buf/buf0dblwr.cc	/^      noexcept;$/;"	m	class:Double_write	file:
noexcept	buf/buf0dblwr.cc	/^    uint32_t capacity() const noexcept MY_ATTRIBUTE((warn_unused_result)) {$/;"	f	struct:Double_write::Buf_pages
noexcept	buf/buf0dblwr.cc	/^  Buffers &get_pages() noexcept MY_ATTRIBUTE((warn_unused_result)) {$/;"	f	class:dblwr::recv::Pages
noexcept	buf/buf0dblwr.cc	/^  Double_write(uint16_t id, uint32_t n_pages) noexcept;$/;"	m	class:Double_write	file:
noexcept	buf/buf0dblwr.cc	/^  bool write_complete() noexcept MY_ATTRIBUTE((warn_unused_result)) {$/;"	f	class:Batch_segment
noexcept	buf/buf0dblwr.cc	/^  const byte *find(const page_id_t &page_id) const noexcept;$/;"	m	class:dblwr::recv::Pages	file:
noexcept	buf/buf0dblwr.cc	/^  static bool is_fsync_required() noexcept MY_ATTRIBUTE((warn_unused_result)) {$/;"	f	class:Double_write
noexcept	buf/buf0dblwr.cc	/^  static void check_block(const buf_block_t *block) noexcept;$/;"	m	class:Double_write	file:
noexcept	buf/buf0dblwr.cc	/^  static void check_page_lsn(const page_t *page) noexcept;$/;"	m	class:Double_write	file:
noexcept	buf/buf0dblwr.cc	/^  static void croak(const buf_block_t *block) noexcept;$/;"	m	class:Double_write	file:
noexcept	buf/buf0dblwr.cc	/^  static void reset_file(dblwr::File &file, bool truncate) noexcept;$/;"	m	class:Double_write	file:
noexcept	buf/buf0dblwr.cc	/^  static void shutdown() noexcept;$/;"	m	class:Double_write	file:
noexcept	buf/buf0dblwr.cc	/^  std::string to_json() const noexcept MY_ATTRIBUTE((warn_unused_result)) {$/;"	f	struct:dblwr::File
noexcept	buf/buf0dblwr.cc	/^  uint16_t id() const noexcept MY_ATTRIBUTE((warn_unused_result)) {$/;"	f	class:Double_write
noexcept	buf/buf0dblwr.cc	/^  void add(page_no_t page_no, const byte *page, uint32_t n_bytes) noexcept;$/;"	m	class:dblwr::recv::Pages	file:
noexcept	buf/buf0dblwr.cc	/^  void check_missing_tablespaces() const noexcept;$/;"	m	class:dblwr::recv::Pages	file:
noexcept	buf/buf0dblwr.cc	/^  void recover(fil_space_t *space) noexcept;$/;"	m	class:dblwr::recv::Pages	file:
noexcept	buf/buf0dblwr.cc	/^  void write(buf_flush_t flush_type) noexcept;$/;"	m	class:Double_write	file:
noexcept	buf/buf0dblwr.cc	/^  void write(const Buffer &buffer) noexcept;$/;"	m	class:Batch_segment	file:
noexcept	buf/buf0dblwr.cc	/^  void write_pages(buf_flush_t flush_type) noexcept;$/;"	m	class:Double_write	file:
noexcept	buf/buf0dblwr.cc	/^  ~Double_write() noexcept;$/;"	m	class:Double_write	file:
noexcept	include/buf0buf.h	/^                                      bool owns_sx_lock = false) noexcept;$/;"	m	class:Cache_hint
noexcept	include/buf0buf.h	/^                         rw_lock_t *hash_lock) noexcept;$/;"	m	class:Cache_hint
noexcept	include/buf0buf.h	/^  page_no_t page_no() const noexcept MY_ATTRIBUTE((warn_unused_result)) {$/;"	f	class:Cache_hint::buf_page_t
noexcept	include/buf0buf.h	/^  space_id_t space() const noexcept MY_ATTRIBUTE((warn_unused_result)) {$/;"	f	class:Cache_hint::buf_page_t
noexcept	include/buf0buf.h	/^  void set_oldest_lsn(lsn_t lsn) noexcept;$/;"	m	class:Cache_hint::buf_page_t
noexcept	include/buf0buf.h	/^bool buf_page_free_stale(buf_pool_t *buf_pool, buf_page_t *bpage) noexcept;$/;"	m	class:Cache_hint
noexcept	include/buf0dblwr.h	/^  explicit Buffer(size_t n_pages) noexcept$/;"	m	struct:dblwr::Buffer
noexcept	include/buf0flu.h	/^                ut_stage_alter_t *stage) noexcept;$/;"	m	class:FlushObserver
noexcept	include/buf0flu.h	/^  ~FlushObserver() noexcept;$/;"	m	class:FlushObserver
noexcept	include/fil0fil.h	/^  bool can_encrypt() const noexcept MY_ATTRIBUTE((warn_unused_result)) {$/;"	f	struct:fil_space_t
noexcept	include/fil0fil.h	/^  bool is_compressed() const noexcept MY_ATTRIBUTE((warn_unused_result)) {$/;"	f	struct:fil_space_t
noexcept	include/fil0fil.h	/^  bool is_encrypted() const noexcept MY_ATTRIBUTE((warn_unused_result)) {$/;"	f	struct:fil_space_t
noexcept	include/fil0types.h	/^  std::ostream &print(std::ostream &out) const noexcept;$/;"	m	struct:Fil_page_header
noexcept	include/os0enc.h	/^                                        byte **master_key) noexcept;$/;"	m	class:Encryption
noexcept	include/os0enc.h	/^                                     bool decrypt_key) noexcept;$/;"	m	class:Encryption
noexcept	include/os0enc.h	/^                                   bool is_boot, bool encrypt_key) noexcept;$/;"	m	class:Encryption
noexcept	include/os0enc.h	/^                             byte **master_key) noexcept;$/;"	m	class:Encryption
noexcept	include/os0enc.h	/^                            byte *dst) noexcept;$/;"	m	class:Encryption
noexcept	include/os0enc.h	/^                         byte *dst_ptr) noexcept;$/;"	m	class:Encryption
noexcept	include/os0enc.h	/^                      byte *dst, ulint dst_len) noexcept;$/;"	m	class:Encryption
noexcept	include/os0enc.h	/^                    ulint *dst_len) noexcept;$/;"	m	class:Encryption
noexcept	include/os0enc.h	/^  bool is_none() const noexcept MY_ATTRIBUTE((warn_unused_result)) {$/;"	f	class:Encryption
noexcept	include/os0enc.h	/^  static bool check_keyring() noexcept;$/;"	m	class:Encryption
noexcept	include/os0enc.h	/^  static void create_master_key(byte **master_key) noexcept;$/;"	m	class:Encryption
noexcept	include/os0enc.h	/^  static void random_value(byte *value) noexcept;$/;"	m	class:Encryption
noexcept	include/os0file.h	/^  Block() noexcept : m_ptr(nullptr), m_in_use() {}$/;"	m	struct:file::Block
noexcept	include/os0file.h	/^  Encryption &get_encryption_info() noexcept$/;"	f	class:IORequest
noexcept	include/os0file.h	/^  const file::Block *get_encrypted_block() const noexcept$/;"	f	class:IORequest
noexcept	include/os0file.h	/^  static void free(file::Block *obj) noexcept;$/;"	m	struct:file::Block
noexcept	include/os0file.h	/^void os_free_block(file::Block *block) noexcept;$/;"	m	class:AIO_mode::Dir_Walker
noexcept	include/row0mysql.h	/^  virtual void operator()(mtr_t *mtr, btr_pcur_t *pcur) noexcept = 0;$/;"	m	struct:SysIndexCallback
noexcept	include/row0pread.h	/^    explicit Thread_ctx(size_t id) noexcept : m_thread_id(id) {}$/;"	m	struct:Parallel_reader::Thread_ctx
noexcept	include/ut0test.h	/^  Tester() noexcept;$/;"	m	struct:ib::Tester
noexcept	include/ut0test.h	/^  const char *get_last_log() const noexcept MY_ATTRIBUTE((warn_unused_result)) {$/;"	f	struct:ib::Tester
noexcept	include/ut0test.h	/^  void append_output(const std::string &log) noexcept;$/;"	m	struct:ib::Tester
noexcept	include/ut0test.h	/^  void clear_output() noexcept;$/;"	m	struct:ib::Tester
noexcept	include/ut0test.h	/^  void close_table(dict_table_t *table) noexcept;$/;"	m	struct:ib::Tester
noexcept	include/ut0test.h	/^  void destroy() noexcept;$/;"	m	struct:ib::Tester
noexcept	include/ut0test.h	/^  void init() noexcept;$/;"	m	struct:ib::Tester
noexcept	include/ut0test.h	/^  void set_output(const std::ostringstream &sout) noexcept;$/;"	m	struct:ib::Tester
noexcept	include/ut0test.h	/^  void set_output(const std::string &log) noexcept;$/;"	m	struct:ib::Tester
noexcept	include/ut0test.h	/^  void update_thd_variable() noexcept;$/;"	m	struct:ib::Tester
noexcept	os/os0file.cc	/^  std::ostream &print(std::ostream &out) const noexcept;$/;"	m	struct:Slot	file:
normalize	include/fil0fil.h	/^  static void normalize(char *path) {$/;"	f	class:Fil_path
normalize	include/fil0fil.h	/^  static void normalize(std::string &path) {$/;"	f	class:Fil_path
normalize_table_name	handler/ha_innodb.cc	/^bool create_table_info_t::normalize_table_name(char *norm_name,$/;"	f	class:create_table_info_t
normalize_table_name	handler/ha_innodb.h	1260;"	d
not_fit_in_memory	pars/pars0grm.y	/^not_fit_in_memory:$/;"	l
not_young_making_delta	include/buf0buf.h	/^  ulint not_young_making_delta;    \/*!< num of pages not make young since$/;"	m	struct:Cache_hint::buf_pool_info_t
notify	lock/lock0lock.cc	/^void Deadlock_notifier::notify(const ut::vector<const trx_t *> &trxs_on_cycle,$/;"	f	class:Deadlock_notifier
notify_about_advanced_write_lsn	log/log0write.cc	/^static inline void notify_about_advanced_write_lsn(log_t &log,$/;"	f	namespace:Log_files_write_impl
notify_flush	buf/buf0flu.cc	/^void FlushObserver::notify_flush(buf_pool_t *buf_pool, buf_page_t *bpage) {$/;"	f	class:FlushObserver
notify_remove	buf/buf0flu.cc	/^void FlushObserver::notify_remove(buf_pool_t *buf_pool, buf_page_t *bpage) {$/;"	f	class:FlushObserver
notify_state_change	clone/clone0apply.cc	/^void Clone_Handle::notify_state_change(Clone_Task *task, Ha_clone_cbk *callback,$/;"	f	class:Clone_Handle
nth_field	include/dict0mem.h	/^  ulint nth_field;$/;"	m	struct:dict_v_idx_t
null_bitmap_len	include/row0mysql.h	/^  unsigned null_bitmap_len : 10;           \/*!< number of bytes in the SQL NULL$/;"	m	struct:row_prebuilt_t
nulls_equal	include/dict0mem.h	/^  unsigned nulls_equal : 1;$/;"	m	struct:dict_index_t
num	include/trx0purge.h	/^  space_id_t num() {$/;"	f	struct:undo::Tablespace
num2id	include/trx0purge.h	/^inline space_id_t num2id(space_id_t space_num) {$/;"	f	namespace:undo
num2id	include/trx0purge.h	/^inline space_id_t num2id(space_id_t space_num, size_t ndx) {$/;"	f	namespace:undo
num_alc	include/data0data.h	/^  uint32_t num_alc;$/;"	m	struct:multi_value_data
num_base	include/dict0mem.h	/^  ulint num_base;$/;"	m	struct:dict_s_col_t
num_base	include/dict0mem.h	/^  ulint num_base;$/;"	m	struct:dict_v_col_t
num_dirty_tables	include/dict0dict.h	/^  std::atomic<uint32_t> num_dirty_tables;$/;"	m	struct:dict_persist_t
num_to_add_fk	handler/handler0alter.cc	/^  const ulint num_to_add_fk;$/;"	m	struct:ha_innobase_inplace_ctx	file:
num_to_add_index	handler/handler0alter.cc	/^  ulint num_to_add_index;$/;"	m	struct:ha_innobase_inplace_ctx	file:
num_to_drop_fk	handler/handler0alter.cc	/^  const ulint num_to_drop_fk;$/;"	m	struct:ha_innobase_inplace_ctx	file:
num_to_drop_index	handler/handler0alter.cc	/^  const ulint num_to_drop_index;$/;"	m	struct:ha_innobase_inplace_ctx	file:
num_to_rename	handler/handler0alter.cc	/^  const ulint num_to_rename;$/;"	m	struct:ha_innobase_inplace_ctx	file:
num_v	include/data0data.h	/^  uint32_t num_v;$/;"	m	struct:multi_value_data
object	include/mtr0mtr.h	/^  void *object;$/;"	m	struct:mtr_memo_slot_t
offset	include/lob0lob.h	/^  ulint offset() const { return (mach_read_from_4(m_ref + BTR_EXTERN_OFFSET)); }$/;"	f	struct:lob::ref_t
offset	include/row0merge.h	/^  ulint offset;      \/*!< file offset (end of file) *\/$/;"	m	struct:merge_file_t
offset	include/trx0purge.h	/^  ulint offset;$/;"	m	struct:trx_purge_t
offset	row/row0log.cc	/^  ulonglong offset;$/;"	m	class:row_log_table_blob_t	file:
offset	trx/trx0i_s.cc	/^  ulint offset;      \/*!< offset, in number of rows *\/$/;"	m	struct:i_s_mem_chunk_t	file:
offsets	include/dict0mem.h	/^  ulint *offsets;$/;"	m	class:rec_cache_t
offsets_cached	include/dict0mem.h	/^  bool offsets_cached;$/;"	m	class:rec_cache_t
old	include/buf0buf.h	/^  bool old;$/;"	m	class:Cache_hint::buf_page_t
old_file_roll_forward	clone/clone0api.cc	/^static void old_file_roll_forward(std::string &data_file, int final_state) {$/;"	f	file:
old_file_rollback	clone/clone0api.cc	/^static void old_file_rollback(std::string &data_file) {$/;"	f	file:
old_lru_len	include/buf0buf.h	/^  ulint old_lru_len;                 \/*!< buf_pool->LRU_old_len *\/$/;"	m	struct:Cache_hint::buf_pool_info_t
old_offset	row/row0log.cc	/^  ulonglong old_offset;$/;"	m	class:row_log_table_blob_t	file:
old_rec	include/gis0type.h	/^  rec_t *old_rec; \/*!< record being moved in old page *\/$/;"	m	struct:rtr_rec_move
old_size	include/buf0buf.h	/^  ulint old_size;$/;"	m	struct:Cache_hint::buf_pool_t
old_stat	include/buf0buf.h	/^  buf_pool_stat_t old_stat;$/;"	m	struct:Cache_hint::buf_pool_t
old_table	handler/handler0alter.cc	/^  dict_table_t *old_table;$/;"	m	struct:ha_innobase_inplace_ctx	file:
old_table	include/row0ftsort.h	/^  dict_table_t *old_table; \/*!< Needed to fetch LOB from$/;"	m	struct:fts_psort_common_t
old_v_val	include/row0upd.h	/^  dfield_t *old_v_val;    \/*!< old value for the virtual column *\/$/;"	m	struct:upd_field_t
old_val	include/row0upd.h	/^  dfield_t old_val;       \/*!< old value for the column *\/$/;"	m	struct:upd_field_t
old_vers_heap	include/row0mysql.h	/^  mem_heap_t *old_vers_heap;          \/*!< memory heap where a previous$/;"	m	struct:row_prebuilt_t
old_vers_heap	include/row0sel.h	/^  mem_heap_t *old_vers_heap; \/*!< memory heap used in building an old$/;"	m	struct:plan_t
old_vrow	include/row0upd.h	/^  dtuple_t *old_vrow;  \/*!< pointer to old row, used for$/;"	m	struct:upd_t
oldest_hp	include/buf0buf.h	/^  FlushHp oldest_hp;$/;"	m	struct:Cache_hint::buf_pool_t
oldest_modification	include/buf0buf.h	/^  lsn_t oldest_modification;$/;"	m	class:Cache_hint::buf_page_t
oldest_modification	include/log0test.h	/^    lsn_t oldest_modification;$/;"	m	struct:Log_test::Page
oldest_modification_approx	log/log0test.cc	/^lsn_t Log_test::oldest_modification_approx() const {$/;"	f	class:Log_test
on_duplicate_key_update	include/row0mysql.h	/^  unsigned on_duplicate_key_update : 1;$/;"	m	struct:row_prebuilt_t
on_transition	include/ut0stateful_latching_rules.h	/^  void on_transition(const node_t &from, const node_t &to,$/;"	f	class:ut::Stateful_latching_rules
on_transition_to	buf/buf0buf.cc	/^  static void on_transition_to($/;"	f	class:buf_page_t::Latching_rules_helpers
online	handler/handler0alter.cc	/^  bool online;$/;"	m	struct:ha_innobase_inplace_ctx	file:
online_index_status	include/dict0mem.h	/^enum online_index_status {$/;"	g
online_log	include/dict0mem.h	/^  row_log_t *online_log;$/;"	m	struct:dict_index_t
online_retry_drop_dict_indexes	handler/handler0alter.cc	/^static void online_retry_drop_dict_indexes(dict_table_t *table, bool locked) {$/;"	f	file:
online_status	include/dict0mem.h	/^  unsigned online_status : 2;$/;"	m	struct:dict_index_t
op	include/lock0prdt.h	/^  uint16 op;  \/* Predicate operator *\/$/;"	m	struct:lock_prdt
op_info	include/trx0trx.h	/^  const char *op_info;   \/*!< English text describing the$/;"	m	struct:trx_t
op_type	include/row0sel.h	/^  enum open_node_op op_type; \/*!< operation type: open or$/;"	m	struct:open_node_t	typeref:enum:open_node_t::open_node_op
opcode	include/lob0lob.h	/^enum opcode {$/;"	g	namespace:lob
open	arch/arch0arch.cc	/^dberr_t Arch_File_Ctx::open(bool read_only, lsn_t start_lsn, uint file_index,$/;"	f	class:Arch_File_Ctx
open	dict/dict0dict.cc	/^void DDTableBuffer::open() {$/;"	f	class:DDTableBuffer
open	handler/ha_innodb.cc	/^int ha_innobase::open(const char *name, int, uint open_flags,$/;"	f	class:ha_innobase
open	handler/ha_innopart.cc	/^int ha_innopart::open(const char *name, int, uint, const dd::Table *table_def) {$/;"	f	class:ha_innopart
open	include/btr0pcur.h	/^inline void btr_pcur_t::open(dict_index_t *index, ulint level,$/;"	f	class:btr_pcur_t
open_all_system_tablespaces	fil/fil0fil.cc	/^void Fil_system::open_all_system_tablespaces() {$/;"	f	class:Fil_system
open_at_side	include/btr0pcur.h	/^inline void btr_pcur_t::open_at_side(bool from_left, dict_index_t *index,$/;"	f	class:btr_pcur_t
open_cursor_statement	pars/pars0grm.y	/^open_cursor_statement:$/;"	l
open_file	clone/clone0clone.cc	/^int Clone_Handle::open_file(Clone_Task *task, Clone_File_Meta *file_meta,$/;"	f	class:Clone_Handle
open_file	fil/fil0fil.cc	/^bool Fil_shard::open_file(fil_node_t *file, bool extend) {$/;"	f	class:Fil_shard
open_file	fsp/fsp0sysspace.cc	/^dberr_t SysTablespace::open_file(Datafile &file) {$/;"	f	class:SysTablespace
open_file_during_recovery	arch/arch0page.cc	/^dberr_t Arch_Group::open_file_during_recovery(Arch_Page_Pos write_pos,$/;"	f	class:Arch_Group
open_for_recovery	fil/fil0fil.cc	/^bool Fil_system::open_for_recovery(space_id_t space_id) {$/;"	f	class:Fil_system
open_log_file	srv/srv0start.cc	/^    open_log_file(pfs_os_file_t *file, \/*!< out: file handle *\/$/;"	f
open_new	arch/arch0arch.cc	/^dberr_t Arch_File_Ctx::open_new(lsn_t start_lsn, uint64_t file_offset) {$/;"	f	class:Arch_File_Ctx
open_next	arch/arch0arch.cc	/^dberr_t Arch_File_Ctx::open_next(lsn_t start_lsn, uint64_t file_offset) {$/;"	f	class:Arch_File_Ctx
open_no_init	include/btr0pcur.h	/^inline void btr_pcur_t::open_no_init(dict_index_t *index, const dtuple_t *tuple,$/;"	f	class:btr_pcur_t
open_node_op	include/row0sel.h	/^enum open_node_op {$/;"	g
open_node_t	include/row0sel.h	/^struct open_node_t {$/;"	s
open_on_user_rec	btr/btr0pcur.cc	/^void btr_pcur_t::open_on_user_rec(const page_cur_t &page_cursor,$/;"	f	class:btr_pcur_t
open_on_user_rec	btr/btr0pcur.cc	/^void btr_pcur_t::open_on_user_rec(dict_index_t *index, const dtuple_t *tuple,$/;"	f	class:btr_pcur_t
open_one_table_part	handler/ha_innopart.cc	/^bool Ha_innopart_share::open_one_table_part($/;"	f	class:Ha_innopart_share
open_or_create	fsp/fsp0file.cc	/^dberr_t Datafile::open_or_create(bool read_only_mode) {$/;"	f	class:Datafile
open_or_create	fsp/fsp0space.cc	/^dberr_t Tablespace::open_or_create(bool is_temp) {$/;"	f	class:Tablespace
open_or_create	fsp/fsp0sysspace.cc	/^dberr_t SysTablespace::open_or_create(bool is_temp, bool create_new_db,$/;"	f	class:SysTablespace
open_or_create	srv/srv0tmp.cc	/^dberr_t open_or_create(bool create_new_db) {$/;"	f	namespace:ibt
open_read_only	fsp/fsp0file.cc	/^dberr_t Datafile::open_read_only(bool strict) {$/;"	f	class:Datafile
open_read_write	fsp/fsp0file.cc	/^dberr_t Datafile::open_read_write(bool read_only_mode) {$/;"	f	class:Datafile
open_system_tablespaces	fil/fil0fil.cc	/^void Fil_shard::open_system_tablespaces(size_t max_n_open, size_t *n_open) {$/;"	f	class:Fil_shard
open_table	handler/ha_innodb.cc	/^int innobase_truncate<Table>::open_table(dict_table_t *&innodb_table) {$/;"	f	class:innobase_truncate
open_table_parts	handler/ha_innopart.cc	/^dict_table_t **Ha_innopart_share::open_table_parts(THD *thd, const TABLE *table,$/;"	f	class:Ha_innopart_share
oper	fts/fts0pars.cc	/^	int			oper;$/;"	m	union:YYSTYPE	file:
oper	fts/fts0que.cc	/^  fts_ast_oper_t oper; \/*!< Current boolean mode operator *\/$/;"	m	struct:fts_query_t	file:
oper	include/fts0ast.h	/^  fts_ast_oper_t oper;        \/*!< Operator value *\/$/;"	m	struct:fts_ast_node_t
oper	include/fts0pars.h	/^	int			oper;$/;"	m	union:YYSTYPE
operator !=	dict/dict0mem.cc	/^bool dict_col_default_t::operator!=(const dict_col_default_t &other) {$/;"	f	class:dict_col_default_t
operator !=	include/buf0types.h	/^  inline bool operator!=(const page_id_t &a) const { return !(*this == a); }$/;"	f	class:page_id_t
operator !=	include/mem0mem.h	/^bool operator!=(const mem_heap_allocator<T> &left,$/;"	f
operator !=	include/ut0new.h	/^inline bool operator!=(const ut_allocator<T> &lhs, const ut_allocator<T> &rhs) {$/;"	f
operator ()	buf/buf0buddy.cc	/^  void operator()(const buf_buddy_free_t *elem) const {$/;"	f	struct:CheckZipFree
operator ()	buf/buf0flu.cc	/^  void operator()(const buf_page_t *elem) { ut_a(elem->in_flush_list); }$/;"	f	struct:Check
operator ()	dict/dict0dict.cc	/^  void operator()(dict_foreign_t *foreign) {$/;"	f	struct:dict_foreign_remove_partial
operator ()	fil/fil0fil.cc	/^  bool operator()(const char *lhs, const char *rhs) const {$/;"	f	struct:Char_Ptr_Compare
operator ()	fil/fil0fil.cc	/^  size_t operator()(const char *ptr) const { return ut_fold_string(ptr); }$/;"	f	struct:Char_Ptr_Hash
operator ()	include/buf0buf.h	/^  void operator()(const buf_block_t *elem) const {$/;"	f	struct:Cache_hint::CheckUnzipLRUAndLRUList
operator ()	include/buf0buf.h	/^  void operator()(const buf_page_t *elem) const { ut_a(elem->in_LRU_list); }$/;"	f	struct:Cache_hint::CheckInLRUList
operator ()	include/buf0buf.h	/^  void operator()(const buf_page_t *elem) const { ut_a(elem->in_free_list); }$/;"	f	struct:Cache_hint::CheckInFreeList
operator ()	include/clone0snapshot.h	/^  inline bool operator()(const Clone_Page &page1,$/;"	f	struct:Less_Clone_Page
operator ()	include/dict0load.h	/^  bool operator()(const fil_space_t *lhs, const fil_space_t *rhs) const {$/;"	f	struct:space_compare
operator ()	include/dict0mem.h	/^  bool operator()(const dict_foreign_t *foreign) const {$/;"	f	struct:dict_foreign_different_tables
operator ()	include/dict0mem.h	/^  bool operator()(const dict_foreign_t *foreign) const {$/;"	f	struct:dict_foreign_with_index
operator ()	include/dict0mem.h	/^  bool operator()(const dict_foreign_t *lhs, const dict_foreign_t *rhs) const {$/;"	f	struct:dict_foreign_compare
operator ()	include/dict0mem.h	/^  bool operator()(dict_foreign_t *const &foreign) const {$/;"	f	struct:dict_foreign_not_exists
operator ()	include/dict0mem.h	/^  const char *operator()() const { return (m_name); }$/;"	f	class:id_name_t
operator ()	include/dict0mem.h	/^  void operator()(const dict_foreign_t *foreign) { m_out << *foreign; }$/;"	f	struct:dict_foreign_print
operator ()	include/dict0mem.h	/^  void operator()(dict_foreign_t *foreign) const {$/;"	f	struct:dict_foreign_add_to_referenced_table
operator ()	include/dyn0buf.h	/^  bool operator()(const mtr_buf_t::block_t *block) {$/;"	f	struct:mtr_buf_copy_t
operator ()	include/os0thread-create.h	/^  void operator()(F &&f, Args &&... args) {$/;"	f	class:Runnable
operator ()	include/trx0types.h	/^  bool operator()(const TrxTrack &lhs, const TrxTrack &rhs) const {$/;"	f	struct:TrxTrackCmp
operator ()	include/trx0types.h	/^  bool operator()(const TrxTrack &lhs, const TrxTrack &rhs) const {$/;"	f	struct:TrxTrackHashCmp
operator ()	include/trx0types.h	/^  bool operator()(const TrxUndoRsegs &lhs, const TrxUndoRsegs &rhs) {$/;"	f	class:TrxUndoRsegs
operator ()	include/trx0types.h	/^  size_t operator()(const TrxTrack &key) const { return (size_t(key.m_id)); }$/;"	f	struct:TrxTrackHash
operator ()	include/ut0lst.h	/^  node_type &operator()(Type &elem) { return (elem.*m_node); }$/;"	f	struct:GenericGetNode
operator ()	include/ut0lst.h	/^  void operator()(const void *elem) {}$/;"	f	struct:NullValidate
operator ()	include/ut0ut.h	/^  bool operator()(const char *a, const char *b) const {$/;"	f	struct:ut_strcmp_functor
operator ()	lock/lock0lock.cc	/^  ut_list_node<lock_t> &operator()(lock_t &elem) {$/;"	f	struct:TableLockGetNode
operator ()	lock/lock0lock.cc	/^  void operator()(const trx_t *trx) {$/;"	f	struct:PrintNotStarted
operator ()	mtr/mtr0mtr.cc	/^  bool operator()(const mtr_buf_t::block_t *block) {$/;"	f	struct:mtr_write_log_t
operator ()	mtr/mtr0mtr.cc	/^  bool operator()(const mtr_memo_slot_t *slot) const {$/;"	f	struct:Debug_check
operator ()	mtr/mtr0mtr.cc	/^  bool operator()(const mtr_memo_slot_t *slot) const {$/;"	f	struct:Debug_check_no_latching
operator ()	mtr/mtr0mtr.cc	/^  bool operator()(const mtr_memo_slot_t *slot) const {$/;"	f	struct:FlaggedCheck
operator ()	mtr/mtr0mtr.cc	/^  bool operator()(mtr_buf_t::block_t *block) {$/;"	f	struct:Iterate
operator ()	mtr/mtr0mtr.cc	/^  bool operator()(mtr_memo_slot_t *slot) const {$/;"	f	struct:Add_dirty_blocks_to_flush_list
operator ()	mtr/mtr0mtr.cc	/^  bool operator()(mtr_memo_slot_t *slot) const {$/;"	f	struct:Release_all
operator ()	mtr/mtr0mtr.cc	/^  bool operator()(mtr_memo_slot_t *slot) {$/;"	f	struct:Find
operator ()	mtr/mtr0mtr.cc	/^  bool operator()(mtr_memo_slot_t *slot) {$/;"	f	struct:Find_page
operator ()	mtr/mtr0mtr.cc	/^  bool operator()(mtr_memo_slot_t *slot) {$/;"	f	struct:Mtr_memo_contains
operator ()	read/read0read.cc	/^  void operator()(const ReadView *view) {$/;"	f	struct:ViewCheck
operator ()	row/row0mysql.cc	/^  void operator()(upd_node_t *node) {$/;"	f	class:ib_dec_counter
operator ()	row/row0sel.cc	/^dberr_t Row_sel_get_clust_rec_for_mysql::operator()($/;"	f	class:Row_sel_get_clust_rec_for_mysql
operator ()	srv/srv0start.cc	/^  void operator()(dict_table_t *table) const {$/;"	f	struct:metadata_applier
operator +	include/ut0ut.h	/^  Wait_stats operator+(const Wait_stats &rhs) const {$/;"	f	struct:Wait_stats
operator +=	include/ut0ut.h	/^  Wait_stats &operator+=(const Wait_stats &rhs) {$/;"	f	struct:Wait_stats
operator ->	include/ut0new.h	/^  T_Type *operator->() const {$/;"	f	class:aligned_memory
operator <	include/arch0arch.h	/^  bool operator<(Arch_Page_Pos pos) {$/;"	f	struct:Arch_Page_Pos
operator <	include/buf0types.h	/^  inline bool operator<(const page_id_t &other) const {$/;"	f	class:page_id_t
operator <	include/dict0types.h	/^  bool operator<(const index_id_t &other) const {$/;"	f	class:index_id_t
operator <	include/sync0types.h	/^  bool operator<(const LatchMeta &rhs) const {$/;"	f	class:LatchMeta
operator <	lock/lock0wait.cc	/^bool operator<(const waiting_trx_info_t &a, const waiting_trx_info_t &b) {$/;"	f
operator <<	buf/buf0buf.cc	/^static std::ostream &operator<<(std::ostream &outs, const buf_io_fix io_fix) {$/;"	f	file:
operator <<	buf/buf0buf.cc	/^std::ostream &operator<<(std::ostream &out, const buf_pool_t &buf_pool) {$/;"	f
operator <<	buf/checksum.cc	/^std::ostream &operator<<(std::ostream &out, const page_id_t &page_id) {$/;"	f
operator <<	dict/dict0mem.cc	/^std::ostream &operator<<(std::ostream &out, const dict_foreign_set &fk_set) {$/;"	f
operator <<	dict/dict0mem.cc	/^std::ostream &operator<<(std::ostream &out, const dict_foreign_t &foreign) {$/;"	f
operator <<	dict/dict0mem.cc	/^std::ostream &operator<<(std::ostream &s, const id_name_t &id_name) {$/;"	f
operator <<	dict/dict0mem.cc	/^std::ostream &operator<<(std::ostream &s, const table_name_t &table_name) {$/;"	f
operator <<	include/data0data.h	/^inline std::ostream &operator<<(std::ostream &o, const dtuple_t &tuple) {$/;"	f
operator <<	include/data0data.h	/^inline std::ostream &operator<<(std::ostream &out, const big_rec_field_t &obj) {$/;"	f
operator <<	include/data0data.h	/^inline std::ostream &operator<<(std::ostream &out, const big_rec_t &obj) {$/;"	f
operator <<	include/data0data.h	/^inline std::ostream &operator<<(std::ostream &out, const dfield_t &obj) {$/;"	f
operator <<	include/data0type.h	/^inline std::ostream &operator<<(std::ostream &out, const dtype_t &obj) {$/;"	f
operator <<	include/dict0types.h	/^inline std::ostream &operator<<(std::ostream &out, const index_id_t &id) {$/;"	f
operator <<	include/fil0fil.h	/^inline std::ostream &operator<<(std::ostream &out, const fil_addr_t &obj) {$/;"	f
operator <<	include/fsp0fsp.h	/^inline std::ostream &operator<<(std::ostream &out, const xdes_mem_t &obj) {$/;"	f
operator <<	include/fsp0fsp.h	/^inline std::ostream &operator<<(std::ostream &out,$/;"	f
operator <<	include/fsp0types.h	/^inline std::ostream &operator<<(std::ostream &out, const fseg_header &header) {$/;"	f
operator <<	include/fut0lst.h	/^inline std::ostream &operator<<(std::ostream &out, const flst_bnode_t &obj) {$/;"	f
operator <<	include/lob0impl.h	/^inline std::ostream &operator<<(std::ostream &out, const frag_node_t &obj) {$/;"	f	namespace:lob
operator <<	include/lob0impl.h	/^inline std::ostream &operator<<(std::ostream &out, const plist_node_t &obj) {$/;"	f	namespace:lob
operator <<	include/lob0impl.h	/^inline std::ostream &operator<<(std::ostream &out, const z_frag_entry_t &obj) {$/;"	f	namespace:lob
operator <<	include/lob0impl.h	/^inline std::ostream &operator<<(std::ostream &out,$/;"	f	namespace:lob
operator <<	include/lob0index.h	/^inline std::ostream &operator<<(std::ostream &out, const index_entry_t &obj) {$/;"	f	namespace:lob
operator <<	include/lob0index.h	/^inline std::ostream &operator<<(std::ostream &out,$/;"	f	namespace:lob
operator <<	include/lob0lob.h	/^inline std::ostream &operator<<(std::ostream &out, const blob_dir_t &obj) {$/;"	f	namespace:lob
operator <<	include/lob0lob.h	/^inline std::ostream &operator<<(std::ostream &out, const ref_t &obj) {$/;"	f	namespace:lob
operator <<	include/lob0lob.h	/^inline std::ostream &operator<<(std::ostream &out,$/;"	f	namespace:lob
operator <<	include/lob0undo.h	/^inline std::ostream &operator<<(std::ostream &out, const undo_data_t &obj) {$/;"	f	namespace:lob
operator <<	include/lock0priv.h	/^inline std::ostream &operator<<(std::ostream &out, const lock_rec_t &lock) {$/;"	f
operator <<	include/lock0priv.h	/^inline std::ostream &operator<<(std::ostream &out, const lock_t &lock) {$/;"	f
operator <<	include/lock0priv.h	/^inline std::ostream &operator<<(std::ostream &out, const lock_table_t &lock) {$/;"	f
operator <<	include/page0size.h	/^inline std::ostream &operator<<(std::ostream &out, const page_size_t &obj) {$/;"	f
operator <<	include/row0ext.h	/^inline std::ostream &operator<<(std::ostream &out, const row_ext_t &obj) {$/;"	f
operator <<	include/row0upd.h	/^inline std::ostream &operator<<(std::ostream &out, const Lob_diff &obj) {$/;"	f
operator <<	include/row0upd.h	/^inline std::ostream &operator<<(std::ostream &out, const upd_field_t &obj) {$/;"	f
operator <<	include/row0upd.h	/^inline std::ostream &operator<<(std::ostream &out, const upd_t &obj) {$/;"	f
operator <<	include/row0upd.h	/^inline std::ostream &operator<<(std::ostream &out,$/;"	f
operator <<	include/trx0types.h	/^inline std::ostream &operator<<(std::ostream &out, const trx_rseg_t &rseg) {$/;"	f
operator <<	include/ut0ut.h	/^  logger &operator<<(const T &rhs) {$/;"	f	class:ib::logger
operator <<	include/ut0ut.h	/^inline std::ostream &operator<<(std::ostream &lhs, const hex &rhs) {$/;"	f	namespace:ib
operator <<	include/zlob0first.h	/^inline std::ostream &operator<<(std::ostream &out, const z_first_page_t &obj) {$/;"	f	namespace:lob
operator <<	include/zlob0index.h	/^inline std::ostream &operator<<(std::ostream &out, const z_index_entry_t &obj) {$/;"	f	namespace:lob
operator <<	include/zlob0index.h	/^inline std::ostream &operator<<(std::ostream &out,$/;"	f	namespace:lob
operator <<	log/log0ddl.cc	/^std::ostream &operator<<(std::ostream &o, const DDL_Record &record) {$/;"	f
operator <<	rem/rem0rec.cc	/^std::ostream &operator<<(std::ostream &o, const rec_index_print &r) {$/;"	f
operator <<	rem/rem0rec.cc	/^std::ostream &operator<<(std::ostream &o, const rec_offsets_print &r) {$/;"	f
operator <<	ut/ut.h	/^inline std::ostream &operator<<(std::ostream &out, const PrintBuffer &obj) {$/;"	f
operator =	include/clone0desc.h	/^    void operator=(bool bit) {$/;"	f	class:Chnunk_Bitmap::Bitmap_Operator_Impl
operator =	include/dict0mem.h	/^  id_name_t &operator=(const char *name) {$/;"	f	class:id_name_t
operator =	include/fsp0file.h	/^  Datafile &operator=(const Datafile &file) {$/;"	f	class:Datafile
operator =	include/handler0alter.h	/^  ib_sequence_t &operator=(const ib_sequence_t &in) {$/;"	f	struct:ib_sequence_t
operator =	include/ut0bitset.h	/^  Bitset &operator=(const Bitset &from) {$/;"	f	class:Bitset
operator =	include/ut0link_buf.h	/^Link_buf<Position> &Link_buf<Position>::operator=(Link_buf &&rhs) {$/;"	f	class:Link_buf
operator ==	dict/dict0mem.cc	/^bool dict_col_default_t::operator==(const dict_col_default_t &other) {$/;"	f	class:dict_col_default_t
operator ==	include/buf0types.h	/^  inline bool operator==(const page_id_t &a) const {$/;"	f	class:page_id_t
operator ==	include/dict0types.h	/^  bool operator==(const index_id_t &other) const {$/;"	f	class:index_id_t
operator ==	include/fil0fil.h	/^  bool operator==(const Fil_path &other) const { return (is_same_as(other)); }$/;"	f	class:Fil_path
operator ==	include/mem0mem.h	/^bool operator==(const mem_heap_allocator<T> &left,$/;"	f
operator ==	include/os0file.h	/^  bool operator==(const IORequest &rhs) const { return (m_type == rhs.m_type); }$/;"	f	class:IORequest
operator ==	include/srv0tmp.h	/^  bool operator==(const Tablespace &other) {$/;"	f	class:ibt::Tablespace
operator ==	include/ut0new.h	/^inline bool operator==(const ut_allocator<T> &lhs, const ut_allocator<T> &rhs) {$/;"	f
operator ==	sync/sync0debug.cc	/^  bool operator==(const Latched &rhs) const {$/;"	f	struct:Latched
operator T *	include/ut0new.h	/^  operator T *() const {$/;"	f	class:ut::aligned_array_pointer
operator T *	include/ut0new.h	/^  operator T *() const {$/;"	f	class:ut::aligned_pointer
operator T_Type *	include/ut0new.h	/^  operator T_Type *() const {$/;"	f	class:aligned_memory
operator []	include/clone0desc.h	/^  Bitmap_Operator_Impl operator[](uint32_t index) {$/;"	f	class:Chnunk_Bitmap
operator []	include/ut0new.h	/^  T_Type &operator[](size_t index) const {$/;"	f	class:aligned_array_pointer
operator bool	include/clone0desc.h	/^    operator bool() const {$/;"	f	class:Chnunk_Bitmap::Bitmap_Operator_Impl
operator const char *	include/dict0mem.h	/^  operator const char *() const { return (m_name); }$/;"	f	class:id_name_t
opt_calc_index_goodness	pars/pars0opt.cc	/^static ulint opt_calc_index_goodness($/;"	f	file:
opt_calc_n_fields_from_goodness	pars/pars0opt.cc	/^ulint opt_calc_n_fields_from_goodness(ulint goodness) \/*!< in: goodness *\/$/;"	f
opt_check_exp_determined_before	pars/pars0opt.cc	/^static ibool opt_check_exp_determined_before($/;"	f	file:
opt_check_order_by	pars/pars0opt.cc	/^static void opt_check_order_by($/;"	f	file:
opt_classify_cols	pars/pars0opt.cc	/^static void opt_classify_cols(sel_node_t *sel_node, \/*!< in: select node *\/$/;"	f	file:
opt_classify_comparison	pars/pars0opt.cc	/^static ulint opt_classify_comparison($/;"	f	file:
opt_clust_access	pars/pars0opt.cc	/^static void opt_clust_access(sel_node_t *sel_node, \/*!< in: select node *\/$/;"	f	file:
opt_column_len	pars/pars0grm.y	/^opt_column_len:$/;"	l
opt_determine_and_normalize_test_conds	pars/pars0opt.cc	/^static void opt_determine_and_normalize_test_conds($/;"	f	file:
opt_doc_id_size	include/row0ftsort.h	/^  ibool opt_doc_id_size;   \/*!< whether to use 4 bytes$/;"	m	struct:fts_psort_common_t
opt_doc_id_size	include/row0ftsort.h	/^  ibool opt_doc_id_size; \/*!< Whether to use smaller (4 bytes)$/;"	m	struct:fts_psort_insert
opt_find_all_cols	pars/pars0opt.cc	/^void opt_find_all_cols($/;"	f
opt_find_copy_cols	pars/pars0opt.cc	/^static void opt_find_copy_cols($/;"	f	file:
opt_find_test_conds	pars/pars0opt.cc	/^static void opt_find_test_conds(sel_node_t *sel_node, \/*!< in: select node *\/$/;"	f	file:
opt_invert_cmp_op	pars/pars0opt.cc	/^static int opt_invert_cmp_op(int op) \/*!< in: operator *\/$/;"	f	file:
opt_is_arg	pars/pars0opt.cc	/^static ibool opt_is_arg(que_node_t *arg_node, \/*!< in: possible argument node *\/$/;"	f	file:
opt_look_for_col_in_comparison_before	pars/pars0opt.cc	/^static que_node_t *opt_look_for_col_in_comparison_before($/;"	f	file:
opt_look_for_col_in_cond_before	pars/pars0opt.cc	/^static que_node_t *opt_look_for_col_in_cond_before($/;"	f	file:
opt_normalize_cmp_conds	pars/pars0opt.cc	/^static void opt_normalize_cmp_conds($/;"	f	file:
opt_not_null	pars/pars0grm.y	/^opt_not_null:$/;"	l
opt_op_to_search_mode	pars/pars0opt.cc	/^page_cur_mode_t opt_op_to_search_mode($/;"	f
opt_print_query_plan	pars/pars0opt.cc	/^static void opt_print_query_plan(sel_node_t *sel_node) {$/;"	f	file:
opt_search_plan	pars/pars0opt.cc	/^void opt_search_plan(sel_node_t *sel_node) \/*!< in: parsed select node *\/$/;"	f
opt_search_plan_for_table	pars/pars0opt.cc	/^static void opt_search_plan_for_table($/;"	f	file:
opt_unsigned	pars/pars0grm.y	/^opt_unsigned:$/;"	l
optimize	handler/ha_innodb.cc	/^int ha_innobase::optimize(THD *thd, \/*!< in: connection thread handle *\/$/;"	f	class:ha_innobase
optimize	handler/ha_innopart.cc	/^int ha_innopart::optimize(THD *thd, HA_CHECK_OPT *check_opt) {$/;"	f	class:ha_innopart
optimize	include/ut0lock_free_hash.h	/^  void optimize() {$/;"	f	class:ut_lock_free_hash_t
optimize_lock	include/fts0types.h	/^  ib_mutex_t optimize_lock; \/*!< Lock for OPTIMIZE *\/$/;"	m	struct:fts_cache_t
ord_part	include/dict0mem.h	/^  unsigned ord_part : 1;    \/*!< nonzero if this column$/;"	m	struct:dict_col_t
order	include/fsp0file.h	/^  ulint order() const { return (m_order); }$/;"	f	class:Datafile
order_by	include/row0sel.h	/^  order_node_t *order_by;    \/*!< order by column definition, or$/;"	m	struct:sel_node_t
order_by_clause	pars/pars0grm.y	/^order_by_clause:$/;"	l
order_direction	pars/pars0grm.y	/^order_direction:$/;"	l
order_node_t	include/pars0pars.h	/^struct order_node_t {$/;"	s
orig_len	include/row0upd.h	/^  unsigned orig_len : 16; \/*!< original length of the locally$/;"	m	struct:upd_field_t
os0atomic_h	include/os0atomic.h	40;"	d
os0enc_h	include/os0enc.h	31;"	d
os0event_h	include/os0event.h	33;"	d
os0file_h	include/os0file.h	42;"	d
os0numa_h	include/os0numa.h	42;"	d
os0once_h	include/os0once.h	35;"	d
os0proc_h	include/os0proc.h	35;"	d
os0thread_create_h	include/os0thread-create.h	34;"	d
os0thread_h	include/os0thread.h	35;"	d
os_aio	include/os0file.h	1352;"	d
os_aio	include/os0file.h	985;"	d
os_aio_all_slots_free	os/os0file.cc	/^bool os_aio_all_slots_free() { return (AIO::total_pending_io_count() == 0); }$/;"	f
os_aio_free	os/os0file.cc	/^void os_aio_free() {$/;"	f
os_aio_func	os/os0file.cc	/^dberr_t os_aio_func(IORequest &type, AIO_mode aio_mode, const char *name,$/;"	f
os_aio_handler	os/os0file.cc	/^dberr_t os_aio_handler(ulint segment, fil_node_t **m1, void **m2,$/;"	f
os_aio_init	os/os0file.cc	/^bool os_aio_init(ulint n_readers, ulint n_writers, ulint n_slots_sync) {$/;"	f
os_aio_linux_handler	os/os0file.cc	/^static dberr_t os_aio_linux_handler(ulint global_segment, fil_node_t **m1,$/;"	f	file:
os_aio_n_segments	os/os0file.cc	/^static ulint os_aio_n_segments = ULINT_UNDEFINED;$/;"	v	file:
os_aio_print	os/os0file.cc	/^void os_aio_print(FILE *file) {$/;"	f
os_aio_print_pending_io	os/os0file.cc	/^void os_aio_print_pending_io(FILE *file) { AIO::print_to_file(file); }$/;"	f
os_aio_recommend_sleep_for_read_threads	os/os0file.cc	/^static bool os_aio_recommend_sleep_for_read_threads = false;$/;"	v	file:
os_aio_refresh_stats	os/os0file.cc	/^void os_aio_refresh_stats() {$/;"	f
os_aio_segment_wait_events	os/os0file.cc	/^static os_event_t *os_aio_segment_wait_events = nullptr;$/;"	v	file:
os_aio_simulated_handler	os/os0file.cc	/^static dberr_t os_aio_simulated_handler(ulint global_segment, fil_node_t **m1,$/;"	f	file:
os_aio_simulated_put_read_threads_to_sleep	os/os0file.cc	/^void os_aio_simulated_put_read_threads_to_sleep() { \/* No op on non Windows *\/$/;"	f
os_aio_simulated_put_read_threads_to_sleep	os/os0file.cc	/^void os_aio_simulated_put_read_threads_to_sleep() {$/;"	f
os_aio_simulated_wake_handler_threads	os/os0file.cc	/^void os_aio_simulated_wake_handler_threads() {$/;"	f
os_aio_validate	os/os0file.cc	/^static bool os_aio_validate() {$/;"	f	file:
os_aio_validate_skip	os/os0file.cc	/^static bool os_aio_validate_skip() {$/;"	f	file:
os_aio_wait_until_no_pending_writes	os/os0file.cc	/^void os_aio_wait_until_no_pending_writes() {$/;"	f
os_aio_wake_all_threads_at_shutdown	os/os0file.cc	/^void os_aio_wake_all_threads_at_shutdown() {$/;"	f
os_aio_windows_handler	os/os0file.cc	/^static dberr_t os_aio_windows_handler(ulint segment, ulint pos, fil_node_t **m1,$/;"	f	file:
os_bytes_read_since_printout	os/os0file.cc	/^static ulint os_bytes_read_since_printout = 0;$/;"	v	file:
os_cond_t	os/os0event.cc	/^typedef CONDITION_VARIABLE os_cond_t;$/;"	t	file:
os_cond_t	os/os0event.cc	/^typedef pthread_cond_t os_cond_t;$/;"	t	file:
os_create_block_cache	os/os0file.cc	/^void os_create_block_cache() {$/;"	f
os_dir_cbk_t	include/os0file.h	/^typedef void (*os_dir_cbk_t)(const char *path, const char *name);$/;"	t	class:AIO_mode
os_event	os/os0event.cc	/^struct os_event {$/;"	s	file:
os_event_create	os/os0event.cc	/^os_event_t os_event_create() {$/;"	f
os_event_destroy	os/os0event.cc	/^void os_event_destroy(os_event_t &event) \/*!< in\/own: event to free *\/$/;"	f
os_event_global_destroy	os/os0event.cc	/^void os_event_global_destroy(void) {$/;"	f
os_event_global_init	os/os0event.cc	/^void os_event_global_init(void) {$/;"	f
os_event_is_set	os/os0event.cc	/^bool os_event_is_set(const os_event_t event) \/*!< in: event to test *\/$/;"	f
os_event_list_t	os/os0event.cc	/^typedef std::list<os_event_t, ut_allocator<os_event_t>> os_event_list_t;$/;"	t	file:
os_event_reset	os/os0event.cc	/^int64_t os_event_reset(os_event_t event) \/*!< in\/out: event to reset *\/$/;"	f
os_event_set	os/os0event.cc	/^void os_event_set(os_event_t event) \/*!< in\/out: event to set *\/$/;"	f
os_event_t	include/os0event.h	/^typedef struct os_event *os_event_t;$/;"	t	typeref:struct:os_event
os_event_try_set	os/os0event.cc	/^bool os_event_try_set(os_event_t event) { return (event->try_set()); }$/;"	f
os_event_wait	include/os0event.h	106;"	d
os_event_wait_low	os/os0event.cc	/^void os_event_wait_low(os_event_t event,        \/*!< in: event to wait *\/$/;"	f
os_event_wait_time	include/os0event.h	124;"	d
os_event_wait_time_low	os/os0event.cc	/^ulint os_event_wait_time_low(os_event_t event,   \/*!< in\/out: event to wait *\/$/;"	f
os_file_can_delete	os/os0file.cc	/^static bool os_file_can_delete(const char *name) {$/;"	f	file:
os_file_close	include/os0file.h	1394;"	d
os_file_close	include/os0file.h	1396;"	d
os_file_close_func	os/os0file.cc	/^bool os_file_close_func(os_file_t file) {$/;"	f
os_file_close_no_error_handling	os/os0file.cc	/^bool os_file_close_no_error_handling(os_file_t file) {$/;"	f
os_file_close_pfs	include/os0file.h	1350;"	d
os_file_close_pfs	include/os0file.h	983;"	d
os_file_compress_page	os/os0file.cc	/^byte *os_file_compress_page(Compression compression, ulint block_size,$/;"	f
os_file_compress_page	os/os0file.cc	/^file::Block *os_file_compress_page(IORequest &type, void *&buf, ulint *n) {$/;"	f
os_file_compressed_page_size	os/os0file.cc	/^ulint os_file_compressed_page_size(const byte *buf) {$/;"	f
os_file_copy	include/os0file.h	1430;"	d
os_file_copy	include/os0file.h	1433;"	d
os_file_copy_func	os/os0file.cc	/^dberr_t os_file_copy_func(os_file_t src_file, os_offset_t src_offset,$/;"	f
os_file_copy_pfs	include/os0file.h	1363;"	d
os_file_copy_pfs	include/os0file.h	998;"	d
os_file_copy_read_write	os/os0file.cc	/^static dberr_t os_file_copy_read_write(os_file_t src_file,$/;"	f	file:
os_file_create	include/os0file.h	1338;"	d
os_file_create	include/os0file.h	970;"	d
os_file_create_directory	os/os0file.cc	/^bool os_file_create_directory(const char *pathname, bool fail_if_exists) {$/;"	f
os_file_create_func	os/os0file.cc	/^pfs_os_file_t os_file_create_func(const char *name, ulint create_mode,$/;"	f
os_file_create_simple	include/os0file.h	1341;"	d
os_file_create_simple	include/os0file.h	974;"	d
os_file_create_simple_func	os/os0file.cc	/^os_file_t os_file_create_simple_func(const char *name, ulint create_mode,$/;"	f
os_file_create_simple_no_error_handling	include/os0file.h	1345;"	d
os_file_create_simple_no_error_handling	include/os0file.h	978;"	d
os_file_create_simple_no_error_handling_func	os/os0file.cc	/^pfs_os_file_t os_file_create_simple_no_error_handling_func(const char *name,$/;"	f
os_file_create_subdirs_if_needed	os/os0file.cc	/^dberr_t os_file_create_subdirs_if_needed(const char *path) {$/;"	f
os_file_create_t	include/os0file.h	/^enum os_file_create_t {$/;"	g
os_file_create_tmpfile	os/os0file.cc	/^FILE *os_file_create_tmpfile(const char *path) {$/;"	f
os_file_decompress_page	os/file.cc	/^dberr_t os_file_decompress_page(bool dblwr_read, byte *src, byte *dst,$/;"	f
os_file_delete	include/os0file.h	1024;"	d
os_file_delete	include/os0file.h	1386;"	d
os_file_delete_func	os/os0file.cc	/^bool os_file_delete_func(const char *name) {$/;"	f
os_file_delete_if_exists	include/os0file.h	1027;"	d
os_file_delete_if_exists	include/os0file.h	1388;"	d
os_file_delete_if_exists_func	os/os0file.cc	/^bool os_file_delete_if_exists_func(const char *name, bool *exist) {$/;"	f
os_file_dir_t	include/os0file.h	/^typedef HANDLE os_file_dir_t; \/*!< directory stream *\/$/;"	t
os_file_encrypt_log	os/os0file.cc	/^static file::Block *os_file_encrypt_log(const IORequest &type, void *&buf,$/;"	f	file:
os_file_encrypt_page	os/os0file.cc	/^file::Block *os_file_encrypt_page(const IORequest &type, void *&buf, ulint *n) {$/;"	f
os_file_exists	os/os0file.cc	/^bool os_file_exists(const char *path) {$/;"	f
os_file_exists_posix	os/os0file.cc	/^static bool os_file_exists_posix(const char *path) {$/;"	f	file:
os_file_exists_win32	os/os0file.cc	/^static bool os_file_exists_win32(const char *path) {$/;"	f	file:
os_file_flush	include/os0file.h	1416;"	d
os_file_flush	include/os0file.h	1418;"	d
os_file_flush_func	os/os0file.cc	/^bool os_file_flush_func(os_file_t file) {$/;"	f
os_file_flush_pfs	include/os0file.h	1019;"	d
os_file_flush_pfs	include/os0file.h	1381;"	d
os_file_fsync_posix	os/os0file.cc	/^static int os_file_fsync_posix(os_file_t file) {$/;"	f	file:
os_file_get_last_error	os/os0file.cc	/^ulint os_file_get_last_error(bool report_all_errors) {$/;"	f
os_file_get_last_error_low	os/os0file.cc	/^static ulint os_file_get_last_error_low(bool report_all_errors,$/;"	f	file:
os_file_get_parent_dir	os/os0file.cc	/^static char *os_file_get_parent_dir(const char *path) {$/;"	f	file:
os_file_get_size	os/os0file.cc	/^os_file_size_t os_file_get_size(const char *filename) {$/;"	f
os_file_get_size	os/os0file.cc	/^os_offset_t os_file_get_size(pfs_os_file_t file) {$/;"	f
os_file_get_status	os/os0file.cc	/^dberr_t os_file_get_status(const char *path, os_file_stat_t *stat_info,$/;"	f
os_file_get_status_posix	os/os0file.cc	/^static dberr_t os_file_get_status_posix(const char *path,$/;"	f	file:
os_file_get_status_win32	os/os0file.cc	/^static dberr_t os_file_get_status_win32(const char *path,$/;"	f	file:
os_file_get_umask	os/os0file.cc	/^ulint os_file_get_umask() { return (os_innodb_umask); }$/;"	f
os_file_h	os/file.h	45;"	d
os_file_handle_error	os/os0file.cc	/^static bool os_file_handle_error(const char *name, const char *operation) {$/;"	f	file:
os_file_handle_error_cond_exit	os/os0file.cc	/^static MY_ATTRIBUTE((warn_unused_result)) bool os_file_handle_error_cond_exit($/;"	f
os_file_handle_error_no_exit	os/os0file.cc	/^static bool os_file_handle_error_no_exit(const char *name,$/;"	f	file:
os_file_io	os/os0file.cc	/^    os_file_io(const IORequest &in_type, os_file_t file, void *buf, ulint n,$/;"	f
os_file_io_complete	os/os0file.cc	/^static dberr_t os_file_io_complete(const IORequest &type, os_file_t fh,$/;"	f	file:
os_file_is_root	os/os0file.cc	/^bool os_file_is_root(const char *path, const char *last_slash) {$/;"	f
os_file_lock	os/os0file.cc	/^static int os_file_lock(int fd, const char *name) {$/;"	f	file:
os_file_original_page_size	os/os0file.cc	/^ulint os_file_original_page_size(const byte *buf) {$/;"	f
os_file_pread	os/os0file.cc	/^    os_file_pread(IORequest &type, os_file_t file, void *buf, ulint n,$/;"	f
os_file_punch_hole	os/os0file.cc	/^dberr_t os_file_punch_hole(os_file_t fh, os_offset_t off, os_offset_t len) {$/;"	f
os_file_punch_hole_posix	os/os0file.cc	/^static dberr_t os_file_punch_hole_posix(os_file_t fh, os_offset_t off,$/;"	f	file:
os_file_punch_hole_win32	os/os0file.cc	/^static dberr_t os_file_punch_hole_win32(os_file_t fh, os_offset_t off,$/;"	f	file:
os_file_pwrite	os/os0file.cc	/^    os_file_pwrite(IORequest &type, os_file_t file, const byte *buf, ulint n,$/;"	f
os_file_read	include/os0file.h	1400;"	d
os_file_read	include/os0file.h	1403;"	d
os_file_read_first_page	include/os0file.h	1408;"	d
os_file_read_first_page	include/os0file.h	1411;"	d
os_file_read_first_page_func	os/os0file.cc	/^dberr_t os_file_read_first_page_func(IORequest &type, const char *file_name,$/;"	f
os_file_read_first_page_pfs	include/os0file.h	1360;"	d
os_file_read_first_page_pfs	include/os0file.h	994;"	d
os_file_read_func	os/os0file.cc	/^dberr_t os_file_read_func(IORequest &type, const char *file_name,$/;"	f
os_file_read_no_error_handling	include/os0file.h	1438;"	d
os_file_read_no_error_handling	include/os0file.h	1442;"	d
os_file_read_no_error_handling_func	os/os0file.cc	/^dberr_t os_file_read_no_error_handling_func(IORequest &type,$/;"	f
os_file_read_no_error_handling_int_fd	include/os0file.h	1007;"	d
os_file_read_no_error_handling_int_fd	include/os0file.h	1370;"	d
os_file_read_no_error_handling_pfs	include/os0file.h	1002;"	d
os_file_read_no_error_handling_pfs	include/os0file.h	1366;"	d
os_file_read_page	os/os0file.cc	/^    os_file_read_page(IORequest &type, const char *file_name, os_file_t file,$/;"	f
os_file_read_pfs	include/os0file.h	1357;"	d
os_file_read_pfs	include/os0file.h	990;"	d
os_file_read_string	os/os0file.cc	/^void os_file_read_string(FILE *file, char *str, ulint size) {$/;"	f
os_file_rename	include/os0file.h	1021;"	d
os_file_rename	include/os0file.h	1383;"	d
os_file_rename_func	os/os0file.cc	/^bool os_file_rename_func(const char *oldpath, const char *newpath) {$/;"	f
os_file_scan_directory	os/os0file.cc	/^bool os_file_scan_directory(const char *path, os_dir_cbk_t scan_cbk,$/;"	f
os_file_seek	os/os0file.cc	/^bool os_file_seek(const char *pathname, os_file_t file, os_offset_t offset) {$/;"	f
os_file_set_eof	os/os0file.cc	/^bool os_file_set_eof(FILE *file) \/*!< in: file to be truncated *\/$/;"	f
os_file_set_eof	os/os0file.cc	/^bool os_file_set_eof(FILE *file) {$/;"	f
os_file_set_nocache	os/os0file.cc	/^void os_file_set_nocache(int fd MY_ATTRIBUTE((unused)),$/;"	f
os_file_set_size	os/os0file.cc	/^bool os_file_set_size(const char *name, pfs_os_file_t file, os_offset_t offset,$/;"	f
os_file_set_size_fast	os/os0file.cc	/^bool os_file_set_size_fast(const char *name, pfs_os_file_t pfs_file,$/;"	f
os_file_set_umask	os/os0file.cc	/^void os_file_set_umask(ulint umask) { os_innodb_umask = umask; }$/;"	f
os_file_size_t	include/os0file.h	/^struct os_file_size_t {$/;"	s
os_file_stat_t	include/os0file.h	/^struct os_file_stat_t {$/;"	s	class:AIO_mode
os_file_status	os/os0file.cc	/^bool os_file_status(const char *path, bool *exists, os_file_type_t *type) {$/;"	f
os_file_status_posix	os/os0file.cc	/^static bool os_file_status_posix(const char *path, bool *exists,$/;"	f	file:
os_file_status_win32	os/os0file.cc	/^static bool os_file_status_win32(const char *path, bool *exists,$/;"	f	file:
os_file_t	include/os0file.h	119;"	d
os_file_truncate	os/os0file.cc	/^bool os_file_truncate(const char *pathname, pfs_os_file_t file,$/;"	f
os_file_truncate_posix	os/os0file.cc	/^static bool os_file_truncate_posix(const char *pathname, pfs_os_file_t file,$/;"	f	file:
os_file_truncate_win32	os/os0file.cc	/^static bool os_file_truncate_win32(const char *pathname, pfs_os_file_t file,$/;"	f	file:
os_file_type_t	include/os0file.h	/^enum os_file_type_t {$/;"	g	class:AIO_mode
os_file_write	include/os0file.h	1422;"	d
os_file_write	include/os0file.h	1425;"	d
os_file_write_func	os/os0file.cc	/^dberr_t os_file_write_func(IORequest &type, const char *name, os_file_t file,$/;"	f
os_file_write_int_fd	include/os0file.h	1015;"	d
os_file_write_int_fd	include/os0file.h	1378;"	d
os_file_write_page	os/os0file.cc	/^    os_file_write_page(IORequest &type, const char *name, os_file_t file,$/;"	f
os_file_write_pfs	include/os0file.h	1012;"	d
os_file_write_pfs	include/os0file.h	1375;"	d
os_file_write_retry	os/os0file.cc	/^dberr_t os_file_write_retry(IORequest &type, const char *name,$/;"	f
os_file_write_zeros	os/os0file.cc	/^dberr_t os_file_write_zeros(pfs_os_file_t file, const char *name,$/;"	f
os_fsync_threshold	os/os0file.cc	/^unsigned long long os_fsync_threshold = 0;$/;"	v
os_fusionio_get_sector_size	os/os0file.cc	/^void os_fusionio_get_sector_size() {$/;"	f
os_get_free_space	os/os0file.cc	/^dberr_t os_get_free_space(const char *path, uint64_t &free_space) {$/;"	f
os_get_free_space_posix	os/os0file.cc	/^static dberr_t os_get_free_space_posix(const char *path, uint64_t &free_space) {$/;"	f	file:
os_get_free_space_win32	os/os0file.cc	/^static dberr_t os_get_free_space_win32(const char *path, uint32_t &block_size,$/;"	f	file:
os_getcpu	include/os0numa.h	/^inline int os_getcpu() {$/;"	f
os_has_said_disk_full	os/os0file.cc	/^bool os_has_said_disk_full = false;$/;"	v
os_innodb_umask	os/os0file.cc	/^static ulint os_innodb_umask = 0;$/;"	v	file:
os_innodb_umask	os/os0file.cc	/^static ulint os_innodb_umask = S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP;$/;"	v	file:
os_io_ptr_align	os/os0file.cc	/^static ulint os_io_ptr_align = UNIV_SECTOR_SIZE;$/;"	v	file:
os_is_o_direct_supported	os/os0file.cc	/^bool os_is_o_direct_supported() {$/;"	f
os_is_sparse_file_supported	os/os0file.cc	/^bool os_is_sparse_file_supported(const char *path, pfs_os_file_t fh) {$/;"	f
os_is_sparse_file_supported_win32	os/os0file.cc	/^static bool os_is_sparse_file_supported_win32(const char *filename) {$/;"	f	file:
os_large_page_size	os/os0proc.cc	/^uint os_large_page_size;$/;"	v
os_last_printout	os/os0file.cc	/^static ib_time_monotonic_t os_last_printout;$/;"	v	file:
os_log_pending_writes	include/srv0srv.h	/^  lint_ctr_1_t os_log_pending_writes;$/;"	m	struct:srv_stats_t
os_log_written	include/srv0srv.h	/^  lsn_ctr_1_t os_log_written;$/;"	m	struct:srv_stats_t
os_mem_alloc_large	os/os0proc.cc	/^void *os_mem_alloc_large(ulint *n) {$/;"	f
os_mem_free_large	os/os0proc.cc	/^void os_mem_free_large(void *ptr, ulint size) {$/;"	f
os_n_file_reads	os/os0file.cc	/^ulint os_n_file_reads = 0;$/;"	v
os_n_file_reads_old	os/os0file.cc	/^static ulint os_n_file_reads_old = 0;$/;"	v	file:
os_n_file_writes	os/os0file.cc	/^ulint os_n_file_writes = 0;$/;"	v
os_n_file_writes_old	os/os0file.cc	/^static ulint os_n_file_writes_old = 0;$/;"	v	file:
os_n_fsyncs	os/os0file.cc	/^ulint os_n_fsyncs = 0;$/;"	v
os_n_fsyncs_old	os/os0file.cc	/^static ulint os_n_fsyncs_old = 0;$/;"	v	file:
os_numa_alloc_onnode	include/os0numa.h	/^inline void *os_numa_alloc_onnode(size_t size, int node) {$/;"	f
os_numa_available	include/os0numa.h	/^inline int os_numa_available() {$/;"	f
os_numa_free	include/os0numa.h	/^inline void os_numa_free(void *ptr, size_t size) {$/;"	f
os_numa_node_of_cpu	include/os0numa.h	/^inline int os_numa_node_of_cpu(int cpu) {$/;"	f
os_numa_num_configured_cpus	include/os0numa.h	/^inline int os_numa_num_configured_cpus() {$/;"	f
os_offset_t	include/os0file.h	/^typedef ib_uint64_t os_offset_t;$/;"	t
os_once	include/os0once.h	/^class os_once {$/;"	c
os_proc_get_number	os/os0proc.cc	/^ulint os_proc_get_number(void) {$/;"	f
os_process_id_t	include/os0proc.h	/^typedef unsigned long int os_process_id_t;$/;"	t
os_process_t	include/os0proc.h	/^typedef void *os_process_t;$/;"	t
os_rmb	include/os0atomic.h	49;"	d
os_rmb	include/os0atomic.h	56;"	d
os_rmb	include/os0atomic.h	64;"	d
os_rmb	include/os0atomic.h	72;"	d
os_rmb	include/os0atomic.h	78;"	d
os_thread_any_active	include/os0thread-create.h	/^inline bool os_thread_any_active() {$/;"	f
os_thread_close	include/os0thread-create.h	/^inline void os_thread_close() {$/;"	f
os_thread_count	os/os0thread.cc	/^std::atomic_int os_thread_count;$/;"	v
os_thread_create	include/os0thread-create.h	251;"	d
os_thread_create	include/os0thread-create.h	253;"	d
os_thread_open	include/os0thread-create.h	/^inline void os_thread_open() { \/* No op *\/$/;"	f
os_use_large_pages	os/os0proc.cc	/^bool os_use_large_pages;$/;"	v
os_wmb	include/os0atomic.h	50;"	d
os_wmb	include/os0atomic.h	57;"	d
os_wmb	include/os0atomic.h	65;"	d
os_wmb	include/os0atomic.h	73;"	d
os_wmb	include/os0atomic.h	79;"	d
other	include/lob0impl.h	/^  plist_node_t(const plist_node_t &other) = default;$/;"	m	class:lob::plist_node_t
other	include/mem0mem.h	/^    typedef mem_heap_allocator<U> other;$/;"	t	struct:mem_heap_allocator::rebind
other	include/ut0new.h	/^    typedef ut_allocator<U> other;$/;"	t	struct:ut_allocator::rebind
other_conds	include/row0sel.h	/^  other_conds;               \/*!< the rest of search conditions we can$/;"	m	struct:plan_t
overhead	include/lob0impl.h	/^  static ulint overhead() { return (SIZE_OF_PAGE_DIR_ENTRY + OFFSET_DATA); }$/;"	f	struct:lob::frag_node_t
override	handler/ha_innodb.h	/^                                      Cost_estimate *cost) override;$/;"	m	class:ha_innobase
override	handler/ha_innodb.h	/^                                   dd::Table *new_dd_tab) override;$/;"	m	class:ha_innobase
override	handler/ha_innodb.h	/^                                  Ft_hints *hints) override;$/;"	m	class:ha_innobase
override	handler/ha_innodb.h	/^                                  dd::Table *new_dd_tab) override;$/;"	m	class:ha_innobase
override	handler/ha_innodb.h	/^                                  uint table_changes) override;$/;"	m	class:ha_innobase
override	handler/ha_innodb.h	/^                                 dd::Table *dd_table) override;$/;"	m	class:ha_innobase
override	handler/ha_innodb.h	/^                                Cost_estimate *cost) override;$/;"	m	class:ha_innobase
override	handler/ha_innodb.h	/^                             thr_lock_type lock_type) override;$/;"	m	class:ha_innobase
override	handler/ha_innodb.h	/^                            HANDLER_BUFFER *buf) override;$/;"	m	class:ha_innobase
override	handler/ha_innodb.h	/^                           dd::Table *new_dd_tab) override;$/;"	m	class:ha_innobase
override	handler/ha_innodb.h	/^                           key_range *max_key) override;$/;"	m	class:ha_innobase
override	handler/ha_innodb.h	/^                          ulonglong *nb_reserved_values) override;$/;"	m	class:ha_innobase
override	handler/ha_innodb.h	/^                         bool use_reserved_threads) override;$/;"	m	class:ha_innobase
override	handler/ha_innodb.h	/^                       bool eq_range_arg, bool sorted) override;$/;"	m	class:ha_innobase
override	handler/ha_innodb.h	/^                     dd::Table *dd_table) override;$/;"	m	class:ha_innobase
override	handler/ha_innodb.h	/^                    Reader::Load_fn load_fn, Reader::End_fn end_fn) override;$/;"	m	class:ha_innobase
override	handler/ha_innodb.h	/^                   const dd::Table *from_table, dd::Table *to_table) override;$/;"	m	class:ha_innobase
override	handler/ha_innodb.h	/^                  enum_sampling_method sampling_method) override;$/;"	m	class:ha_innobase
override	handler/ha_innodb.h	/^                 ha_rkey_function find_flag) override;$/;"	m	class:ha_innobase
override	handler/ha_innodb.h	/^             dd::Table *table_def) override;$/;"	m	class:ha_innobase
override	handler/ha_innodb.h	/^           const dd::Table *table_def) override;$/;"	m	class:ha_innobase
override	handler/ha_innodb.h	/^      HA_CREATE_INFO *create_info) const override;$/;"	m	class:ha_innobase
override	handler/ha_innodb.h	/^      TABLE *altered_table, Alter_inplace_info *ha_alter_info) override;$/;"	m	class:ha_innobase
override	handler/ha_innodb.h	/^  FT_INFO *ft_init_ext(uint flags, uint inx, String *key) override;$/;"	m	class:ha_innobase
override	handler/ha_innodb.h	/^  Item *idx_cond_push(uint keyno, Item *idx_cond) override;$/;"	m	class:ha_innobase
override	handler/ha_innodb.h	/^  Table_flags table_flags() const override;$/;"	m	class:ha_innobase
override	handler/ha_innodb.h	/^  bool get_error_message(int error, String *buf) override;$/;"	m	class:ha_innobase
override	handler/ha_innodb.h	/^  bool get_foreign_dup_key(char *, uint, char *, uint) override;$/;"	m	class:ha_innobase
override	handler/ha_innodb.h	/^  bool get_se_private_data(dd::Table *dd_table, bool reset) override;$/;"	m	class:ha_innobase
override	handler/ha_innodb.h	/^  bool is_record_buffer_wanted(ha_rows *const max_rows) const override;$/;"	m	class:ha_innobase
override	handler/ha_innodb.h	/^  bool primary_key_is_clustered() const override;$/;"	m	class:ha_innobase
override	handler/ha_innodb.h	/^  bool was_semi_consistent_read() override;$/;"	m	class:ha_innobase
override	handler/ha_innodb.h	/^  const char *table_type() const override;$/;"	m	class:ha_innobase
override	handler/ha_innodb.h	/^  double read_time(uint index, uint ranges, ha_rows rows) override;$/;"	m	class:ha_innobase
override	handler/ha_innodb.h	/^  double scan_time() override;$/;"	m	class:ha_innobase
override	handler/ha_innodb.h	/^  ha_rows estimate_rows_upper_bound() override;$/;"	m	class:ha_innobase
override	handler/ha_innodb.h	/^  handler *clone(const char *name, MEM_ROOT *mem_root) override;$/;"	m	class:ha_innobase
override	handler/ha_innodb.h	/^  int analyze(THD *thd, HA_CHECK_OPT *check_opt) override;$/;"	m	class:ha_innobase
override	handler/ha_innodb.h	/^  int check(THD *thd, HA_CHECK_OPT *check_opt) override;$/;"	m	class:ha_innobase
override	handler/ha_innodb.h	/^  int close(void) override;$/;"	m	class:ha_innobase
override	handler/ha_innodb.h	/^  int cmp_ref(const uchar *ref1, const uchar *ref2) const override;$/;"	m	class:ha_innobase
override	handler/ha_innodb.h	/^  int delete_all_rows() override;$/;"	m	class:ha_innobase
override	handler/ha_innodb.h	/^  int delete_row(const uchar *buf) override;$/;"	m	class:ha_innobase
override	handler/ha_innodb.h	/^  int delete_table(const char *name, const dd::Table *table_def) override;$/;"	m	class:ha_innobase
override	handler/ha_innodb.h	/^  int disable_indexes(uint mode) override;$/;"	m	class:ha_innobase
override	handler/ha_innodb.h	/^  int discard_or_import_tablespace(bool discard, dd::Table *table_def) override;$/;"	m	class:ha_innobase
override	handler/ha_innodb.h	/^  int enable_indexes(uint mode) override;$/;"	m	class:ha_innobase
override	handler/ha_innodb.h	/^  int external_lock(THD *thd, int lock_type) override;$/;"	m	class:ha_innobase
override	handler/ha_innodb.h	/^  int extra(ha_extra_function operation) override;$/;"	m	class:ha_innobase
override	handler/ha_innodb.h	/^  int ft_init() override;$/;"	m	class:ha_innobase
override	handler/ha_innodb.h	/^  int ft_read(uchar *buf) override;$/;"	m	class:ha_innobase
override	handler/ha_innodb.h	/^  int index_end() override;$/;"	m	class:ha_innobase
override	handler/ha_innodb.h	/^  int index_first(uchar *buf) override;$/;"	m	class:ha_innobase
override	handler/ha_innodb.h	/^  int index_init(uint index, bool sorted) override;$/;"	m	class:ha_innobase
override	handler/ha_innodb.h	/^  int index_last(uchar *buf) override;$/;"	m	class:ha_innobase
override	handler/ha_innodb.h	/^  int index_next(uchar *buf) override;$/;"	m	class:ha_innobase
override	handler/ha_innodb.h	/^  int index_next_same(uchar *buf, const uchar *key, uint keylen) override;$/;"	m	class:ha_innobase
override	handler/ha_innodb.h	/^  int index_prev(uchar *buf) override;$/;"	m	class:ha_innobase
override	handler/ha_innodb.h	/^  int index_read_last(uchar *buf, const uchar *key, uint key_len) override;$/;"	m	class:ha_innobase
override	handler/ha_innodb.h	/^  int info(uint) override;$/;"	m	class:ha_innobase
override	handler/ha_innodb.h	/^  int multi_range_read_next(char **range_info) override;$/;"	m	class:ha_innobase
override	handler/ha_innodb.h	/^  int optimize(THD *thd, HA_CHECK_OPT *check_opt) override;$/;"	m	class:ha_innobase
override	handler/ha_innodb.h	/^  int read_range_next() override;$/;"	m	class:ha_innobase
override	handler/ha_innodb.h	/^  int records(ha_rows *num_rows) override;$/;"	m	class:ha_innobase
override	handler/ha_innodb.h	/^  int reset() override;$/;"	m	class:ha_innobase
override	handler/ha_innodb.h	/^  int rnd_end() override;$/;"	m	class:ha_innobase
override	handler/ha_innodb.h	/^  int rnd_init(bool scan) override;$/;"	m	class:ha_innobase
override	handler/ha_innodb.h	/^  int rnd_next(uchar *buf) override;$/;"	m	class:ha_innobase
override	handler/ha_innodb.h	/^  int rnd_pos(uchar *buf, uchar *pos) override;$/;"	m	class:ha_innobase
override	handler/ha_innodb.h	/^  int sample_end(void *scan_ctx) override;$/;"	m	class:ha_innobase
override	handler/ha_innodb.h	/^  int sample_next(void *scan_ctx, uchar *buf) override;$/;"	m	class:ha_innobase
override	handler/ha_innodb.h	/^  int start_stmt(THD *thd, thr_lock_type lock_type) override;$/;"	m	class:ha_innobase
override	handler/ha_innodb.h	/^  int update_row(const uchar *old_data, uchar *new_data) override;$/;"	m	class:ha_innobase
override	handler/ha_innodb.h	/^  int write_row(uchar *buf) override;$/;"	m	class:ha_innobase
override	handler/ha_innodb.h	/^  longlong get_memory_buffer_size() const override;$/;"	m	class:ha_innobase
override	handler/ha_innodb.h	/^  row_type get_real_row_type(const HA_CREATE_INFO *create_info) const override;$/;"	m	class:ha_innobase
override	handler/ha_innodb.h	/^  uint lock_count(void) const override;$/;"	m	class:ha_innobase
override	handler/ha_innodb.h	/^  uint max_supported_key_length() const override;$/;"	m	class:ha_innobase
override	handler/ha_innodb.h	/^  uint max_supported_keys() const override;$/;"	m	class:ha_innobase
override	handler/ha_innodb.h	/^  ulong index_flags(uint idx, uint part, bool all_parts) const override;$/;"	m	class:ha_innobase
override	handler/ha_innodb.h	/^  void init_table_handle_for_HANDLER() override;$/;"	m	class:ha_innobase
override	handler/ha_innodb.h	/^  void mv_key_capacity(uint *num_keys, size_t *keys_length) const override;$/;"	m	class:ha_innobase
override	handler/ha_innodb.h	/^  void parallel_scan_end(void *scan_ctx) override;$/;"	m	class:ha_innobase
override	handler/ha_innodb.h	/^  void position(const uchar *record) override;$/;"	m	class:ha_innobase
override	handler/ha_innodb.h	/^  void release_auto_increment() override;$/;"	m	class:ha_innobase
override	handler/ha_innodb.h	/^  void try_semi_consistent_read(bool yes) override;$/;"	m	class:ha_innobase
override	handler/ha_innodb.h	/^  void unlock_row() override;$/;"	m	class:ha_innobase
override	handler/ha_innodb.h	/^  void update_create_info(HA_CREATE_INFO *create_info) override;$/;"	m	class:ha_innobase
override	handler/ha_innodb.h	/^  ~ha_innobase() override;$/;"	m	class:ha_innobase
override	handler/ha_innopart.h	/^                                       uint part_id) override;$/;"	m	class:ha_innopart
override	handler/ha_innopart.h	/^                                   dd::Table *new_table_def) override;$/;"	m	class:ha_innopart
override	handler/ha_innopart.h	/^                                  dd::Table *new_table_def) override;$/;"	m	class:ha_innopart
override	handler/ha_innopart.h	/^                                  key_part_map keypart_map) override;$/;"	m	class:ha_innopart
override	handler/ha_innopart.h	/^                                 enum ha_rkey_function find_flag) override;$/;"	m	class:ha_innopart
override	handler/ha_innopart.h	/^                               const key_range *end_key, bool sorted) override;$/;"	m	class:ha_innopart
override	handler/ha_innopart.h	/^                              uint length) override;$/;"	m	class:ha_innopart
override	handler/ha_innopart.h	/^                             dd::Table *swap_table) override;$/;"	m	class:ha_innopart
override	handler/ha_innopart.h	/^                             enum ha_rkey_function find_flag) override;$/;"	m	class:ha_innopart
override	handler/ha_innopart.h	/^                             thr_lock_type lock_type) override;$/;"	m	class:ha_innopart
override	handler/ha_innopart.h	/^                           dd::Table *new_table_def) override;$/;"	m	class:ha_innopart
override	handler/ha_innopart.h	/^                           key_range *max_key) override;$/;"	m	class:ha_innopart
override	handler/ha_innopart.h	/^                          ulonglong *nb_reserved_values) override;$/;"	m	class:ha_innopart
override	handler/ha_innopart.h	/^                         bool use_reserved_threads) override;$/;"	m	class:ha_innopart
override	handler/ha_innopart.h	/^                         uchar *new_row) override;$/;"	m	class:ha_innopart
override	handler/ha_innopart.h	/^                    Reader::Load_fn load_fn, Reader::End_fn end_fn) override;$/;"	m	class:ha_innopart
override	handler/ha_innopart.h	/^                   const dd::Table *from_table, dd::Table *to_table) override;$/;"	m	class:ha_innopart
override	handler/ha_innopart.h	/^                  enum_sampling_method sampling_method) override;$/;"	m	class:ha_innopart
override	handler/ha_innopart.h	/^             dd::Table *table_def) override;$/;"	m	class:ha_innopart
override	handler/ha_innopart.h	/^           const dd::Table *table_def) override;$/;"	m	class:ha_innopart
override	handler/ha_innopart.h	/^      TABLE *altered_table, Alter_inplace_info *ha_alter_info) override;$/;"	m	class:ha_innopart
override	handler/ha_innopart.h	/^  bool is_ignorable_error(int error) override;$/;"	m	class:ha_innopart
override	handler/ha_innopart.h	/^  bool was_semi_consistent_read() override;$/;"	m	class:ha_innopart
override	handler/ha_innopart.h	/^  dict_index_t *innobase_get_index(uint keynr) override;$/;"	m	class:ha_innopart
override	handler/ha_innopart.h	/^  double scan_time() override;$/;"	m	class:ha_innopart
override	handler/ha_innopart.h	/^  ha_rows estimate_rows_upper_bound() override;$/;"	m	class:ha_innopart
override	handler/ha_innopart.h	/^  handler *clone(const char *name, MEM_ROOT *mem_root) override;$/;"	m	class:ha_innopart
override	handler/ha_innopart.h	/^  int check(THD *thd, HA_CHECK_OPT *check_opt) override;$/;"	m	class:ha_innopart
override	handler/ha_innopart.h	/^  int close() override;$/;"	m	class:ha_innopart
override	handler/ha_innopart.h	/^  int cmp_ref(const uchar *ref1, const uchar *ref2) const override;$/;"	m	class:ha_innopart
override	handler/ha_innopart.h	/^  int delete_row_in_part(uint part_id, const uchar *record) override;$/;"	m	class:ha_innopart
override	handler/ha_innopart.h	/^  int delete_table(const char *name, const dd::Table *dd_table) override;$/;"	m	class:ha_innopart
override	handler/ha_innopart.h	/^  int discard_or_import_tablespace(bool discard, dd::Table *table_def) override;$/;"	m	class:ha_innopart
override	handler/ha_innopart.h	/^  int external_lock(THD *thd, int lock_type) override;$/;"	m	class:ha_innopart
override	handler/ha_innopart.h	/^  int extra(enum ha_extra_function operation) override;$/;"	m	class:ha_innopart
override	handler/ha_innopart.h	/^  int index_end() override;$/;"	m	class:ha_innopart
override	handler/ha_innopart.h	/^  int index_first_in_part(uint part, uchar *record) override;$/;"	m	class:ha_innopart
override	handler/ha_innopart.h	/^  int index_init(uint index, bool sorted) override;$/;"	m	class:ha_innopart
override	handler/ha_innopart.h	/^  int index_last_in_part(uint part, uchar *record) override;$/;"	m	class:ha_innopart
override	handler/ha_innopart.h	/^  int index_next_in_part(uint part, uchar *record) override;$/;"	m	class:ha_innopart
override	handler/ha_innopart.h	/^  int index_prev_in_part(uint part, uchar *record) override;$/;"	m	class:ha_innopart
override	handler/ha_innopart.h	/^  int info_low(uint flag, bool is_analyze) override;$/;"	m	class:ha_innopart
override	handler/ha_innopart.h	/^  int init_record_priority_queue_for_parts(uint used_parts) override;$/;"	m	class:ha_innopart
override	handler/ha_innopart.h	/^  int initialize_auto_increment(bool no_lock MY_ATTRIBUTE((unused))) override;$/;"	m	class:ha_innopart
override	handler/ha_innopart.h	/^  int optimize(THD *thd, HA_CHECK_OPT *check_opt) override;$/;"	m	class:ha_innopart
override	handler/ha_innopart.h	/^  int read_range_next_in_part(uint part, uchar *record) override;$/;"	m	class:ha_innopart
override	handler/ha_innopart.h	/^  int records(ha_rows *num_rows) override;$/;"	m	class:ha_innopart
override	handler/ha_innopart.h	/^  int repair(THD *thd, HA_CHECK_OPT *repair_opt) override;$/;"	m	class:ha_innopart
override	handler/ha_innopart.h	/^  int reset() override;$/;"	m	class:ha_innopart
override	handler/ha_innopart.h	/^  int rnd_end_in_part(uint part_id, bool scan) override;$/;"	m	class:ha_innopart
override	handler/ha_innopart.h	/^  int rnd_init_in_part(uint part_id, bool scan) override;$/;"	m	class:ha_innopart
override	handler/ha_innopart.h	/^  int rnd_next_in_part(uint part_id, uchar *buf) override;$/;"	m	class:ha_innopart
override	handler/ha_innopart.h	/^  int rnd_pos(uchar *record, uchar *pos) override;$/;"	m	class:ha_innopart
override	handler/ha_innopart.h	/^  int rnd_pos_by_record(uchar *record) override;$/;"	m	class:ha_innopart
override	handler/ha_innopart.h	/^  int sample_end(void *scan_ctx) override;$/;"	m	class:ha_innopart
override	handler/ha_innopart.h	/^  int sample_next(void *scan_ctx, uchar *buf) override;$/;"	m	class:ha_innopart
override	handler/ha_innopart.h	/^  int start_stmt(THD *thd, thr_lock_type lock_type) override;$/;"	m	class:ha_innopart
override	handler/ha_innopart.h	/^  int truncate_partition_low(dd::Table *dd_table) override;$/;"	m	class:ha_innopart
override	handler/ha_innopart.h	/^  int write_row_in_new_part(uint new_part) override;$/;"	m	class:ha_innopart
override	handler/ha_innopart.h	/^  int write_row_in_part(uint part_id, uchar *record) override;$/;"	m	class:ha_innopart
override	handler/ha_innopart.h	/^  void copy_cached_row(uchar *buf, const uchar *cached_row) override;$/;"	m	class:ha_innopart
override	handler/ha_innopart.h	/^  void destroy_record_priority_queue_for_parts() override;$/;"	m	class:ha_innopart
override	handler/ha_innopart.h	/^  void parallel_scan_end(void *parallel_scan_ctx) override;$/;"	m	class:ha_innopart
override	handler/ha_innopart.h	/^  void position_in_last_part(uchar *ref_arg, const uchar *record) override;$/;"	m	class:ha_innopart
override	handler/ha_innopart.h	/^  void print_error(int error, myf errflag) override;$/;"	m	class:ha_innopart
override	handler/ha_innopart.h	/^  void save_auto_increment(ulonglong nr) override;$/;"	m	class:ha_innopart
override	handler/ha_innopart.h	/^  void try_semi_consistent_read(bool yes) override;$/;"	m	class:ha_innopart
override	handler/ha_innopart.h	/^  void unlock_row() override;$/;"	m	class:ha_innopart
override	handler/ha_innopart.h	/^  void update_create_info(HA_CREATE_INFO *create_info) override;$/;"	m	class:ha_innopart
override	handler/ha_innopart.h	/^  ~Ha_innopart_share() override;$/;"	m	class:Ha_innopart_share
override	handler/ha_innopart.h	/^  ~ha_innopart() override;$/;"	m	class:ha_innopart
override	handler/handler0alter.cc	/^                 dd::Partition *new_part) override;$/;"	m	class:alter_part_change	file:
override	handler/handler0alter.cc	/^              dd::Partition *new_part) override;$/;"	m	class:alter_part_change	file:
override	handler/handler0alter.cc	/^  ~alter_parts() override;$/;"	m	class:alter_parts	file:
override	handler/p_s.cc	/^             bool with_lock_data) override;$/;"	m	class:Innodb_data_lock_iterator	file:
override	handler/p_s.cc	/^             size_t blocking_engine_lock_id_length) override;$/;"	m	class:Innodb_data_lock_wait_iterator	file:
override	handler/p_s.cc	/^            bool with_lock_data) override;$/;"	m	class:Innodb_data_lock_iterator	file:
override	handler/p_s.cc	/^  bool scan(PSI_server_data_lock_wait_container *container) override;$/;"	m	class:Innodb_data_lock_wait_iterator	file:
override	handler/p_s.cc	/^  ~Innodb_data_lock_iterator() override;$/;"	m	class:Innodb_data_lock_iterator	file:
override	handler/p_s.cc	/^  ~Innodb_data_lock_wait_iterator() override;$/;"	m	class:Innodb_data_lock_wait_iterator	file:
override	handler/p_s.h	/^      PSI_engine_data_lock_wait_iterator *it) override;$/;"	m	class:Innodb_data_lock_inspector
override	handler/p_s.h	/^  PSI_engine_data_lock_iterator *create_data_lock_iterator() override;$/;"	m	class:Innodb_data_lock_inspector
override	handler/p_s.h	/^  PSI_engine_data_lock_wait_iterator *create_data_lock_wait_iterator() override;$/;"	m	class:Innodb_data_lock_inspector
override	handler/p_s.h	/^  void destroy_data_lock_iterator(PSI_engine_data_lock_iterator *it) override;$/;"	m	class:Innodb_data_lock_inspector
override	handler/p_s.h	/^  ~Innodb_data_lock_inspector() override;$/;"	m	class:Innodb_data_lock_inspector
override	include/buf0buf.h	/^  void adjust(const buf_page_t *bpage) override;$/;"	m	class:Cache_hint::FlushHp
override	include/buf0buf.h	/^  void adjust(const buf_page_t *bpage) override;$/;"	m	class:Cache_hint::LRUHp
override	include/dict0mem.h	/^              ulint size) const override;$/;"	m	class:AutoIncPersister
override	include/dict0mem.h	/^              ulint size) const override;$/;"	m	class:CorruptedIndexPersister
override	include/dict0mem.h	/^             bool *corrupt) const override;$/;"	m	class:AutoIncPersister
override	include/dict0mem.h	/^             bool *corrupt) const override;$/;"	m	class:CorruptedIndexPersister
override	include/dict0mem.h	/^  ulint get_write_size(const PersistentTableMetadata &metadata) const override;$/;"	m	class:CorruptedIndexPersister
override	include/row0row.h	/^  dfield_t *find_multi_value_field() override;$/;"	m	class:Multi_value_entry_builder_normal
override	include/sync0rw.h	/^  virtual std::string locked_from() const override;$/;"	m	struct:rw_lock_t
override	include/sync0rw.h	/^  virtual std::string to_string() const override;$/;"	m	struct:rw_lock_t
override	include/ut0ut.h	/^  ~fatal() override;$/;"	m	class:ib::fatal
override	include/ut0ut.h	/^  ~fatal_or_error() override;$/;"	m	class:ib::fatal_or_error
own_latch	include/trx0purge.h	/^  bool own_latch() {$/;"	f	class:undo::Tablespaces
owns_exclusive_global_latch	include/lock0latches.h	/^  bool owns_exclusive_global_latch() const { return global_latch.x_own(); }$/;"	f	class:locksys::Latches
owns_exclusive_global_latch	lock/lock0lock.cc	/^bool owns_exclusive_global_latch() {$/;"	f	namespace:locksys
owns_lock_shard	lock/lock0lock.cc	/^bool owns_lock_shard(const lock_t *lock) {$/;"	f	namespace:locksys
owns_page_shard	include/lock0latches.h	/^  bool owns_page_shard(const page_id_t &page_id) const {$/;"	f	class:locksys::Latches
owns_page_shard	lock/lock0lock.cc	/^bool owns_page_shard(const page_id_t &page_id) {$/;"	f	namespace:locksys
owns_shared_global_latch	include/lock0latches.h	/^  bool owns_shared_global_latch() const { return global_latch.s_own(); }$/;"	f	class:locksys::Latches
owns_shared_global_latch	lock/lock0lock.cc	/^bool owns_shared_global_latch() {$/;"	f	namespace:locksys
owns_table_shard	include/lock0latches.h	/^  bool owns_table_shard(const dict_table_t &table) const {$/;"	f	class:locksys::Latches
owns_table_shard	lock/lock0lock.cc	/^bool owns_table_shard(const dict_table_t &table) {$/;"	f	namespace:locksys
p_s_fill_lock_data	trx/trx0i_s.cc	/^void p_s_fill_lock_data(const char **lock_data, const lock_t *lock,$/;"	f
p_s_h	handler/p_s.h	33;"	d
pad	include/dict0mem.h	/^  std::atomic<ulint> pad; \/*!< number of bytes used as pad *\/$/;"	m	struct:zip_pad_info_t
pad	include/os0file.h	/^  byte pad[ut::INNODB_CACHE_LINE_SIZE];$/;"	m	struct:file::Block
pad	include/ut0cpu_cache.h	/^  char pad[INNODB_CACHE_LINE_SIZE];$/;"	m	struct:ut::Cacheline_padded
pad	srv/srv0conc.cc	/^  char pad[ut::INNODB_CACHE_LINE_SIZE];$/;"	m	struct:srv_conc_t	file:
pad1	include/lock0latches.h	/^  char pad1[ut::INNODB_CACHE_LINE_SIZE] = {};$/;"	m	class:locksys::Latches
pad1	include/read0types.h	/^  byte pad1[64 - sizeof(node_t)];$/;"	m	class:ReadView
pad1	include/trx0sys.h	/^  char pad1[64];             \/*!< To avoid false sharing *\/$/;"	m	struct:trx_sys_t
pad2	include/lock0lock.h	/^  char pad2[ut::INNODB_CACHE_LINE_SIZE];$/;"	m	struct:lock_sys_t
pad2	include/trx0sys.h	/^  char pad2[64];                \/*!< To avoid false sharing *\/$/;"	m	struct:trx_sys_t
pad3	include/trx0sys.h	/^  char pad3[64]; \/*!< To avoid false sharing *\/$/;"	m	struct:trx_sys_t
page	include/buf0buf.h	/^  buf_page_t page;$/;"	m	struct:Cache_hint::buf_block_t
page	include/dict0mem.h	/^  unsigned page : 32; \/*!< index tree root page number *\/$/;"	m	struct:dict_index_t
page	include/fil0fil.h	/^  page_no_t page;$/;"	m	struct:fil_addr_t
page0cur_h	include/page0cur.h	34;"	d
page0page_h	include/page0page.h	37;"	d
page0size_t	include/page0size.h	34;"	d
page0types_h	include/page0types.h	34;"	d
page0zip_h	include/page0zip.h	35;"	d
pageAbort	include/btr0bulk.h	/^  void pageAbort(PageBulk *page_bulk) { page_bulk->commit(false); }$/;"	f	class:BtrBulk
pageCommit	btr/btr0bulk.cc	/^dberr_t BtrBulk::pageCommit(PageBulk *page_bulk, PageBulk *next_page_bulk,$/;"	f	class:BtrBulk
pageSplit	btr/btr0bulk.cc	/^dberr_t BtrBulk::pageSplit(PageBulk *page_bulk, PageBulk *next_page_bulk) {$/;"	f	class:BtrBulk
page_align	include/lob0lob.h	/^  page_t *page_align() const { return (::page_align(m_ref)); }$/;"	f	struct:lob::ref_t
page_archiver_thread	arch/arch0page.cc	/^void page_archiver_thread() {$/;"	f
page_archiver_thread_event	arch/arch0page.cc	/^os_event_t page_archiver_thread_event;$/;"	v
page_archiver_thread_key	srv/srv0start.cc	/^mysql_pfs_key_t page_archiver_thread_key;$/;"	v
page_avg_rate	buf/buf0flu.cc	/^ulint page_avg_rate = 0;$/;"	m	namespace:Adaptive_flush	file:
page_check_dir	page/page0page.cc	/^void page_check_dir(const page_t *page) \/*!< in: index page *\/$/;"	f
page_cleaner	buf/buf0flu.cc	/^static page_cleaner_t *page_cleaner = nullptr;$/;"	v	file:
page_cleaner_mutex_key	sync/sync0sync.cc	/^mysql_pfs_key_t page_cleaner_mutex_key;$/;"	v
page_cleaner_slot_t	buf/buf0flu.cc	/^struct page_cleaner_slot_t {$/;"	s	file:
page_cleaner_state_t	buf/buf0flu.cc	/^enum page_cleaner_state_t {$/;"	g	file:
page_cleaner_t	buf/buf0flu.cc	/^struct page_cleaner_t {$/;"	s	file:
page_copy_rec_list_end	page/page0page.cc	/^rec_t *page_copy_rec_list_end($/;"	f
page_copy_rec_list_end_no_locks	page/page0page.cc	/^void page_copy_rec_list_end_no_locks($/;"	f
page_copy_rec_list_end_to_created_page	page/page0cur.cc	/^void page_copy_rec_list_end_to_created_page($/;"	f
page_copy_rec_list_start	page/page0page.cc	/^rec_t *page_copy_rec_list_start($/;"	f
page_copy_rec_list_to_created_page_write_log	page/page0cur.cc	/^bool page_copy_rec_list_to_created_page_write_log(page_t *page,$/;"	f
page_create	page/page0page.cc	/^page_t *page_create(buf_block_t *block, mtr_t *mtr, ulint comp,$/;"	f
page_create_empty	page/page0page.cc	/^void page_create_empty(buf_block_t *block, dict_index_t *index, mtr_t *mtr) {$/;"	f
page_create_low	page/page0page.cc	/^static page_t *page_create_low(buf_block_t *block, ulint comp,$/;"	f	file:
page_create_write_log	page/page0page.cc	/^void page_create_write_log(buf_frame_t *frame, mtr_t *mtr, ibool comp,$/;"	f
page_create_write_log	page/page0page.cc	281;"	d	file:
page_create_zip	page/page0page.cc	/^page_t *page_create_zip(buf_block_t *block, dict_index_t *index, ulint level,$/;"	f
page_cur	include/btr0cur.h	/^  page_cur_t page_cur;               \/*!< page cursor *\/$/;"	m	struct:btr_cur_t
page_cur_delete_rec	page/page0cur.cc	/^void page_cur_delete_rec($/;"	f
page_cur_delete_rec_write_log	page/page0cur.cc	/^void page_cur_delete_rec_write_log($/;"	f
page_cur_delete_rec_write_log	page/page0cur.cc	2240;"	d	file:
page_cur_direct_insert_rec_low	page/page0cur.cc	/^rec_t *page_cur_direct_insert_rec_low(rec_t *current_rec, dict_index_t *index,$/;"	f
page_cur_get_block	include/page0cur.h	66;"	d
page_cur_get_page	include/page0cur.h	65;"	d
page_cur_get_page_zip	include/page0cur.h	67;"	d
page_cur_get_rec	include/page0cur.h	68;"	d
page_cur_insert_rec_low	page/page0cur.cc	/^rec_t *page_cur_insert_rec_low($/;"	f
page_cur_insert_rec_write_log	page/page0cur.cc	/^static void page_cur_insert_rec_write_log($/;"	f	file:
page_cur_insert_rec_write_log	page/page0cur.cc	1026;"	d	file:
page_cur_insert_rec_zip	page/page0cur.cc	/^rec_t *page_cur_insert_rec_zip($/;"	f
page_cur_lcg_prng	page/page0cur.cc	/^static ib_uint64_t page_cur_lcg_prng(void) {$/;"	f	file:
page_cur_mode_t	include/page0types.h	/^enum page_cur_mode_t {$/;"	g
page_cur_open_on_rnd_user_rec	page/page0cur.cc	/^void page_cur_open_on_rnd_user_rec(buf_block_t *block, \/*!< in: page *\/$/;"	f
page_cur_parse_delete_rec	page/page0cur.cc	/^byte *page_cur_parse_delete_rec($/;"	f
page_cur_parse_insert_rec	page/page0cur.cc	/^byte *page_cur_parse_insert_rec($/;"	f
page_cur_rec_field_extends	page/page0cur.cc	/^static ibool page_cur_rec_field_extends(const dtuple_t *tuple, const rec_t *rec,$/;"	f	file:
page_cur_search_with_match	page/page0cur.cc	/^void page_cur_search_with_match(const buf_block_t *block,$/;"	f
page_cur_search_with_match_bytes	page/page0cur.cc	/^void page_cur_search_with_match_bytes($/;"	f
page_cur_short_succ	page/page0cur.cc	/^static ulint page_cur_short_succ = 0;$/;"	v	file:
page_cur_t	include/page0cur.h	/^struct page_cur_t {$/;"	s
page_cur_try_search_shortcut	page/page0cur.cc	/^bool page_cur_try_search_shortcut($/;"	f
page_cur_try_search_shortcut_bytes	page/page0cur.cc	/^bool page_cur_try_search_shortcut_bytes($/;"	f
page_delete_rec	page/page0page.cc	/^bool page_delete_rec($/;"	f
page_delete_rec_list_end	page/page0page.cc	/^void page_delete_rec_list_end($/;"	f
page_delete_rec_list_start	page/page0page.cc	/^void page_delete_rec_list_start($/;"	f
page_delete_rec_list_write_log	page/page0page.cc	/^void page_delete_rec_list_write_log($/;"	f
page_delete_rec_list_write_log	page/page0page.cc	821;"	d	file:
page_dir_add_slot	page/page0page.cc	/^void page_dir_add_slot($/;"	f
page_dir_balance_slot	page/page0page.cc	/^void page_dir_balance_slot(page_t *page, page_zip_des_t *page_zip,$/;"	f
page_dir_delete_slot	page/page0page.cc	/^void page_dir_delete_slot($/;"	f
page_dir_find_owner_slot	page/page0page.cc	/^ulint page_dir_find_owner_slot(const rec_t *rec) \/*!< in: the physical record *\/$/;"	f
page_dir_get_nth_slot	include/page0page.h	312;"	d
page_dir_print	page/page0page.cc	/^void page_dir_print(page_t *page, \/*!< in: index page *\/$/;"	f
page_dir_slot_check	page/page0page.cc	/^static ibool page_dir_slot_check(const page_dir_slot_t *slot) \/*!< in: slot *\/$/;"	f	file:
page_dir_slot_t	include/page0page.h	/^typedef byte page_dir_slot_t;$/;"	t
page_dir_split_slot	page/page0page.cc	/^void page_dir_split_slot(page_t *page, page_zip_des_t *page_zip,$/;"	f
page_dir_t	include/page0page.h	/^typedef page_dir_slot_t page_dir_t;$/;"	t
page_find_rec_last_not_deleted	page/page0page.cc	/^const rec_t *page_find_rec_last_not_deleted(const page_t *page) {$/;"	f
page_find_rec_with_heap_no	page/page0page.cc	/^const rec_t *page_find_rec_with_heap_no($/;"	f
page_flush_coordinator_thread_key	buf/buf0flu.cc	/^mysql_pfs_key_t page_flush_coordinator_thread_key;$/;"	v
page_flush_thread_key	buf/buf0flu.cc	/^mysql_pfs_key_t page_flush_thread_key;$/;"	v
page_get_infimum_rec	include/page0page.h	222;"	d
page_get_supremum_rec	include/page0page.h	223;"	d
page_hash	include/buf0buf.h	/^  hash_table_t *page_hash;$/;"	m	struct:Cache_hint::buf_pool_t
page_hash_old	include/buf0buf.h	/^  hash_table_t *page_hash_old;$/;"	m	struct:Cache_hint::buf_pool_t
page_header_get_ptr	include/page0page.h	185;"	d
page_header_print	page/page0page.cc	/^void page_header_print(const page_t *page) {$/;"	f
page_header_t	include/page0types.h	/^typedef byte page_header_t;$/;"	t
page_id	include/lock0priv.h	/^  page_id_t page_id;$/;"	m	struct:lock_rec_t
page_id_t	include/buf0types.h	/^  page_id_t(space_id_t space, page_no_t page_no)$/;"	f	class:page_id_t
page_id_t	include/buf0types.h	/^class page_id_t {$/;"	c
page_is_spatial_non_leaf	page/page0page.cc	/^bool page_is_spatial_non_leaf(const rec_t *rec, dict_index_t *index) {$/;"	f
page_is_uncompressed_type	buf/buf0flu.cc	/^bool page_is_uncompressed_type(const byte *page) {$/;"	f
page_made_young_rate	include/buf0buf.h	/^  double page_made_young_rate;     \/*!< page made young rate in pages$/;"	m	struct:Cache_hint::buf_pool_info_t
page_mem_alloc_heap	page/page0page.cc	/^byte *page_mem_alloc_heap($/;"	f
page_move_rec_list_end	page/page0page.cc	/^ibool page_move_rec_list_end($/;"	f
page_move_rec_list_start	page/page0page.cc	/^ibool page_move_rec_list_start($/;"	f
page_no	include/buf0types.h	/^  inline page_no_t page_no() const { return (m_page_no); }$/;"	f	class:page_id_t
page_no	include/dict0crea.h	/^  ulint page_no;                 \/* root page number of the index *\/$/;"	m	struct:ind_node_t
page_no	include/gis0type.h	/^  page_no_t page_no;  \/*!< the page number *\/$/;"	m	struct:node_visit
page_no	include/lob0lob.h	/^  page_no_t page_no() const {$/;"	f	struct:lob::ref_t
page_no	include/lob0lob.h	/^  static page_no_t page_no(const byte *ref) {$/;"	f	struct:lob::ref_t
page_no	include/log0recv.h	/^    page_no_t page_no;$/;"	m	struct:recv_sys_t::Mlog_record
page_no	include/log0recv.h	/^  page_no_t page_no;$/;"	m	struct:recv_addr_t
page_no	include/trx0purge.h	/^  page_no_t page_no;$/;"	m	struct:trx_purge_t
page_no_map	row/row0log.cc	/^    page_no_map;$/;"	t	file:
page_no_t	include/api0api.h	/^typedef uint32 page_no_t;$/;"	t
page_not_made_young_rate	include/buf0buf.h	/^  double page_not_made_young_rate; \/*!< page not made young rate$/;"	m	struct:Cache_hint::buf_pool_info_t
page_parse_copy_rec_list_to_created_page	page/page0cur.cc	/^byte *page_parse_copy_rec_list_to_created_page($/;"	f
page_parse_create	page/page0page.cc	/^void page_parse_create(buf_block_t *block, ulint comp, page_type_t page_type) {$/;"	f
page_parse_delete_rec_list	page/page0page.cc	/^byte *page_parse_delete_rec_list($/;"	f
page_print	page/page0page.cc	/^void page_print(buf_block_t *block,  \/*!< in: index page *\/$/;"	f
page_print_list	page/page0page.cc	/^void page_print_list($/;"	f
page_read_delta	include/buf0buf.h	/^  ulint page_read_delta;           \/*!< num of pages read since last$/;"	m	struct:Cache_hint::buf_pool_info_t
page_rec_get_n_recs_before	page/page0page.cc	/^ulint page_rec_get_n_recs_before($/;"	f
page_rec_get_nth_const	page/page0page.cc	/^const rec_t *page_rec_get_nth_const(const page_t *page, \/*!< in: page *\/$/;"	f
page_rec_print	page/page0page.cc	/^void page_rec_print(const rec_t *rec, const ulint *offsets) {$/;"	f
page_rec_validate	page/page0page.cc	/^ibool page_rec_validate($/;"	f
page_recommendation	buf/buf0flu.cc	/^ulint page_recommendation(ulint last_pages_in, bool is_sync_flush,$/;"	f	namespace:Adaptive_flush
page_scan_method_t	dict/dict0stats.cc	/^enum page_scan_method_t {$/;"	g	file:
page_set_max_trx_id	page/page0page.cc	/^void page_set_max_trx_id(buf_block_t *block, page_zip_des_t *page_zip,$/;"	f
page_shards	include/lock0latches.h	/^  Page_shards page_shards;$/;"	m	class:locksys::Latches
page_simple_validate_new	page/page0page.cc	/^ibool page_simple_validate_new($/;"	f
page_simple_validate_old	page/page0page.cc	/^ibool page_simple_validate_old($/;"	f
page_size	api/api0api.cc	/^  ulint page_size; \/*!< Page size *\/$/;"	m	struct:ib_table_def_t	file:
page_size	fts/fts0que.cc	/^  const page_size_t page_size;$/;"	m	struct:fts_phrase_t	file:
page_size	include/lob0lob.h	/^  const page_size_t page_size() const {$/;"	f	class:lob::BtrContext
page_size	include/row0ext.h	/^  page_size_t page_size;$/;"	m	struct:row_ext_t
page_size	include/trx0types.h	/^  page_size_t page_size;$/;"	m	struct:trx_rseg_t
page_size	include/trx0undo.h	/^  page_size_t page_size;$/;"	m	struct:trx_undo_t
page_size_t	include/page0size.h	/^  explicit page_size_t(uint32_t fsp_flags) {$/;"	f	class:page_size_t
page_size_t	include/page0size.h	/^  page_size_t(uint32_t physical, uint32_t logical, bool is_compressed) {$/;"	f	class:page_size_t
page_size_t	include/page0size.h	/^class page_size_t {$/;"	c
page_sys_arch_client_mutex_key	sync/sync0sync.cc	/^mysql_pfs_key_t page_sys_arch_client_mutex_key;$/;"	v
page_sys_arch_mutex_key	sync/sync0sync.cc	/^mysql_pfs_key_t page_sys_arch_mutex_key;$/;"	v
page_sys_arch_oper_mutex_key	sync/sync0sync.cc	/^mysql_pfs_key_t page_sys_arch_oper_mutex_key;$/;"	v
page_t	include/page0types.h	/^typedef byte page_t;$/;"	t
page_t	include/page0types.h	146;"	d
page_update_for_flush	clone/clone0snapshot.cc	/^void Clone_Snapshot::page_update_for_flush(const page_size_t &page_size,$/;"	f	class:Clone_Snapshot
page_validate	page/page0page.cc	/^ibool page_validate($/;"	f
page_warn_strict_checksum	buf/checksum.cc	/^void BlockReporter::page_warn_strict_checksum($/;"	f	class:BlockReporter
page_warn_strict_checksum	page/page0page.cc	/^void page_warn_strict_checksum(srv_checksum_algorithm_t curr_algo,$/;"	f
page_zip_apply_log	page/zipdecompress.cc	/^static const byte *page_zip_apply_log($/;"	f	file:
page_zip_apply_log_ext	page/zipdecompress.cc	/^static const byte *page_zip_apply_log_ext($/;"	f	file:
page_zip_clear_rec	page/page0zip.cc	/^static void page_zip_clear_rec($/;"	f	file:
page_zip_compress	page/page0zip.cc	/^ibool page_zip_compress(page_zip_des_t *page_zip, \/*!< in: size; out: data,$/;"	f
page_zip_compress_clust	page/page0zip.cc	/^static int page_zip_compress_clust($/;"	f	file:
page_zip_compress_clust_ext	page/page0zip.cc	/^static int page_zip_compress_clust_ext($/;"	f	file:
page_zip_compress_dbg	page/page0zip.cc	/^static ibool page_zip_compress_dbg;$/;"	v	file:
page_zip_compress_deflate	page/page0zip.cc	/^static int page_zip_compress_deflate($/;"	f	file:
page_zip_compress_log	page/page0zip.cc	/^static unsigned page_zip_compress_log;$/;"	v	file:
page_zip_compress_node_ptrs	page/page0zip.cc	/^static int page_zip_compress_node_ptrs($/;"	f	file:
page_zip_compress_sec	page/page0zip.cc	/^static int page_zip_compress_sec($/;"	f	file:
page_zip_compress_write_log	page/page0zip.cc	/^static void page_zip_compress_write_log($/;"	f	file:
page_zip_copy_recs	page/page0zip.cc	/^void page_zip_copy_recs($/;"	f
page_zip_decompress	page/page0zip.cc	/^ibool page_zip_decompress($/;"	f
page_zip_decompress_clust	page/zipdecompress.cc	/^static ibool page_zip_decompress_clust($/;"	f	file:
page_zip_decompress_clust_ext	page/zipdecompress.cc	/^static ibool page_zip_decompress_clust_ext($/;"	f	file:
page_zip_decompress_heap_no	page/zipdecompress.cc	/^static ibool page_zip_decompress_heap_no($/;"	f	file:
page_zip_decompress_low	page/zipdecompress.cc	/^ibool page_zip_decompress_low($/;"	f
page_zip_decompress_node_ptrs	page/zipdecompress.cc	/^static ibool page_zip_decompress_node_ptrs($/;"	f	file:
page_zip_decompress_sec	page/zipdecompress.cc	/^static ibool page_zip_decompress_sec($/;"	f	file:
page_zip_des_t	include/page0types.h	/^struct page_zip_des_t {$/;"	s
page_zip_dir_add_slot	page/page0zip.cc	/^void page_zip_dir_add_slot(page_zip_des_t *page_zip, bool is_clustered) {$/;"	f
page_zip_dir_decode	page/zipdecompress.cc	/^static MY_ATTRIBUTE((warn_unused_result)) ibool page_zip_dir_decode($/;"	f
page_zip_dir_delete	page/page0zip.cc	/^void page_zip_dir_delete(page_zip_des_t *page_zip, byte *rec,$/;"	f
page_zip_dir_encode	page/page0zip.cc	/^static void page_zip_dir_encode($/;"	f	file:
page_zip_dir_find	page/page0zip.cc	/^byte *page_zip_dir_find(page_zip_des_t *page_zip, \/*!< in: compressed page *\/$/;"	f
page_zip_dir_insert	page/page0zip.cc	/^void page_zip_dir_insert(page_zip_des_t *page_zip, const byte *prev_rec,$/;"	f
page_zip_dir_start	page/page0zip.cc	181;"	d	file:
page_zip_dir_start_low	page/page0zip.cc	175;"	d	file:
page_zip_empty_size	page/page0zip.cc	/^ulint page_zip_empty_size($/;"	f
page_zip_fail	page/page0zip.cc	1348;"	d	file:
page_zip_fail	page/zipdecompress.cc	72;"	d	file:
page_zip_fail	page/zipdecompress.cc	76;"	d	file:
page_zip_fail_func	page/zipdecompress.cc	/^int page_zip_fail_func(const char *fmt, \/*!< in: printf(3) format string *\/$/;"	f
page_zip_fields_decode	page/zipdecompress.cc	/^static dict_index_t *page_zip_fields_decode(const byte *buf, const byte *end,$/;"	f	file:
page_zip_fields_encode	page/page0zip.cc	/^ulint page_zip_fields_encode($/;"	f
page_zip_fields_free	page/zipdecompress.cc	/^static void page_zip_fields_free($/;"	f	file:
page_zip_fixed_field_encode	page/page0zip.cc	/^static byte *page_zip_fixed_field_encode($/;"	f	file:
page_zip_free	page/zipdecompress.cc	/^static void page_zip_free($/;"	f	file:
page_zip_get_n_prev_extern	page/page0zip.cc	/^static ulint page_zip_get_n_prev_extern(const page_zip_des_t *page_zip,$/;"	f	file:
page_zip_header_cmp	page/page0zip.cc	/^static ibool page_zip_header_cmp($/;"	f	file:
page_zip_hexdump	page/page0zip.cc	1343;"	d	file:
page_zip_hexdump_func	page/page0zip.cc	/^static void page_zip_hexdump_func($/;"	f	file:
page_zip_is_too_big	page/page0zip.cc	/^bool page_zip_is_too_big(const dict_index_t *index, const dtuple_t *entry) {$/;"	f
page_zip_level	page/page0zip.cc	/^uint page_zip_level = DEFAULT_COMPRESSION_LEVEL;$/;"	v
page_zip_log_pages	page/page0zip.cc	/^bool page_zip_log_pages = true;$/;"	v
page_zip_parse_compress	page/page0zip.cc	/^byte *page_zip_parse_compress($/;"	f
page_zip_parse_write_blob_ptr	page/page0zip.cc	/^byte *page_zip_parse_write_blob_ptr($/;"	f
page_zip_parse_write_header	page/page0zip.cc	/^byte *page_zip_parse_write_header($/;"	f
page_zip_parse_write_node_ptr	page/page0zip.cc	/^byte *page_zip_parse_write_node_ptr($/;"	f
page_zip_rec_set_deleted	page/page0zip.cc	/^void page_zip_rec_set_deleted($/;"	f
page_zip_rec_set_owned	page/page0zip.cc	/^void page_zip_rec_set_owned(page_zip_des_t *page_zip, const byte *rec,$/;"	f
page_zip_reorganize	page/page0zip.cc	/^ibool page_zip_reorganize($/;"	f
page_zip_set_alloc	page/zipdecompress.cc	/^void page_zip_set_alloc(void *stream, mem_heap_t *heap) {$/;"	f
page_zip_set_extra_bytes	page/zipdecompress.cc	/^static ibool page_zip_set_extra_bytes($/;"	f	file:
page_zip_stat	page/page0zip.cc	/^page_zip_stat_t page_zip_stat[PAGE_ZIP_SSIZE_MAX];$/;"	v
page_zip_stat_per_index	page/page0zip.cc	/^page_zip_stat_per_index_t page_zip_stat_per_index;$/;"	v
page_zip_stat_per_index_mutex	srv/srv0srv.cc	/^ib_mutex_t page_zip_stat_per_index_mutex;$/;"	v
page_zip_stat_per_index_mutex_key	sync/sync0sync.cc	/^mysql_pfs_key_t page_zip_stat_per_index_mutex_key;$/;"	v
page_zip_stat_per_index_t	include/page0types.h	/^    page_zip_stat_per_index_t;$/;"	t
page_zip_stat_t	include/page0types.h	/^  page_zip_stat_t()$/;"	f	struct:page_zip_stat_t
page_zip_stat_t	include/page0types.h	/^struct page_zip_stat_t {$/;"	s
page_zip_t	include/page0types.h	/^typedef byte page_zip_t;$/;"	t
page_zip_validate	page/page0zip.cc	/^ibool page_zip_validate($/;"	f
page_zip_validate_header_only	page/page0zip.cc	/^ibool page_zip_validate_header_only = FALSE;$/;"	v
page_zip_validate_low	page/page0zip.cc	/^ibool page_zip_validate_low($/;"	f
page_zip_write_blob_ptr	page/page0zip.cc	/^void page_zip_write_blob_ptr($/;"	f
page_zip_write_header_log	page/page0zip.cc	/^void page_zip_write_header_log($/;"	f
page_zip_write_node_ptr	page/page0zip.cc	/^void page_zip_write_node_ptr(page_zip_des_t *page_zip, byte *rec, ulint size,$/;"	f
page_zip_write_rec	page/page0zip.cc	/^void page_zip_write_rec($/;"	f
page_zip_write_rec_ext	page/page0zip.cc	/^static byte *page_zip_write_rec_ext($/;"	f	file:
page_zip_write_trx_id_and_roll_ptr	page/page0zip.cc	/^void page_zip_write_trx_id_and_roll_ptr(page_zip_des_t *page_zip, byte *rec,$/;"	f
page_zip_zalloc	page/zipdecompress.cc	/^static void *page_zip_zalloc(void *opaque, \/*!< in\/out: memory heap *\/$/;"	f	file:
pages_created_rate	include/buf0buf.h	/^  double pages_created_rate;       \/*!< num of pages create per second *\/$/;"	m	struct:Cache_hint::buf_pool_info_t
pages_evicted_rate	include/buf0buf.h	/^  double pages_evicted_rate;       \/*!< rate of readahead page evicted$/;"	m	struct:Cache_hint::buf_pool_info_t
pages_in_extent	include/lob0lob.h	/^  page_no_t pages_in_extent() const {$/;"	f	class:lob::BtrContext
pages_read_rate	include/buf0buf.h	/^  double pages_read_rate;          \/*!< num of pages read per second *\/$/;"	m	struct:Cache_hint::buf_pool_info_t
pages_readahead_rate	include/buf0buf.h	/^  double pages_readahead_rate;     \/*!< readahead rate in pages per$/;"	m	struct:Cache_hint::buf_pool_info_t
pages_readahead_rnd_rate	include/buf0buf.h	/^  double pages_readahead_rnd_rate; \/*!< random readahead rate in pages per$/;"	m	struct:Cache_hint::buf_pool_info_t
pages_undone	include/trx0trx.h	/^  ulint pages_undone; \/*!< number of undo log pages undone$/;"	m	struct:trx_t
pages_written_rate	include/buf0buf.h	/^  double pages_written_rate;       \/*!< num of  pages written per second *\/$/;"	m	struct:Cache_hint::buf_pool_info_t
par_for	include/os0thread-create.h	/^void par_for(mysql_pfs_key_t pfs_key, const Container &c, size_t n, F &&f,$/;"	f
par_for	include/os0thread-create.h	295;"	d
par_for	include/os0thread-create.h	297;"	d
parallel_check_table	row/row0mysql.cc	/^static dberr_t parallel_check_table(trx_t *trx, dict_index_t *index,$/;"	f	file:
parallel_read	row/row0pread.cc	/^void Parallel_reader::parallel_read() {$/;"	f	class:Parallel_reader
parallel_read_mutex_key	sync/sync0sync.cc	/^mysql_pfs_key_t parallel_read_mutex_key;$/;"	v
parallel_read_thread_key	row/row0pread.cc	/^mysql_pfs_key_t parallel_read_thread_key;$/;"	v
parallel_scan	handler/handler0alter.cc	/^int ha_innobase::parallel_scan(void *scan_ctx, void **thread_ctxs,$/;"	f	class:ha_innobase
parallel_scan	handler/handler0alter.cc	/^int ha_innopart::parallel_scan(void *scan_ctx, void **thread_ctxs,$/;"	f	class:ha_innopart
parallel_scan_end	handler/handler0alter.cc	/^void ha_innobase::parallel_scan_end(void *parallel_scan_ctx) {$/;"	f	class:ha_innobase
parallel_scan_end	handler/handler0alter.cc	/^void ha_innopart::parallel_scan_end(void *parallel_scan_ctx) {$/;"	f	class:ha_innopart
parallel_scan_init	handler/handler0alter.cc	/^int ha_innobase::parallel_scan_init(void *&scan_ctx, size_t *num_threads,$/;"	f	class:ha_innobase
parallel_scan_init	handler/handler0alter.cc	/^int ha_innopart::parallel_scan_init(void *&scan_ctx, size_t *num_threads,$/;"	f	class:ha_innopart
param_list	include/pars0pars.h	/^  sym_node_t *param_list; \/*!< input and output parameters *\/$/;"	m	struct:proc_node_t
param_type	include/pars0sym.h	/^  ulint param_type;              \/*!< PARS_INPUT,$/;"	m	struct:sym_node_t
parameter_declaration	pars/pars0grm.y	/^parameter_declaration:$/;"	l
parameter_declaration_list	pars/pars0grm.y	/^parameter_declaration_list:$/;"	l
parent	include/fts0fts.h	/^  const char *parent; \/*!< Parent table name, this is$/;"	m	struct:fts_table_t
parent	include/que0types.h	/^  que_node_t *parent;  \/*!< back pointer to parent node, or NULL *\/$/;"	m	struct:que_common_t
parent	include/row0purge.h	/^  dict_table_t *parent;$/;"	m	struct:purge_node_t
parent	include/ut0rbt.h	/^  ib_rbt_node_t *parent; \/* points parent node *\/$/;"	m	struct:ib_rbt_node_t
parent_id	include/dict0mem.h	/^  table_id_t parent_id;$/;"	m	struct:dict_table_t
parent_id	include/fts0fts.h	/^  table_id_t parent_id;$/;"	m	struct:fts_aux_table_t
parent_mdl	include/row0purge.h	/^  MDL_ticket *parent_mdl;$/;"	m	struct:purge_node_t
parent_path	include/gis0type.h	/^  rtr_node_path_t *parent_path;$/;"	m	struct:rtr_info
pars0opt_h	include/pars0opt.h	34;"	d
pars0pars_h	include/pars0pars.h	34;"	d
pars0sym_h	include/pars0sym.h	34;"	d
pars0types_h	include/pars0types.h	34;"	d
pars_asc_token	pars/pars0pars.cc	/^pars_res_word_t pars_asc_token = {PARS_ASC_TOKEN};$/;"	v
pars_assignment_statement	pars/pars0pars.cc	/^assign_node_t *pars_assignment_statement($/;"	f
pars_bigint_token	pars/pars0pars.cc	/^pars_res_word_t pars_bigint_token = {PARS_BIGINT_TOKEN};$/;"	v
pars_binary_token	pars/pars0pars.cc	/^pars_res_word_t pars_binary_token = {PARS_BINARY_TOKEN};$/;"	v
pars_blob_token	pars/pars0pars.cc	/^pars_res_word_t pars_blob_token = {PARS_BLOB_TOKEN};$/;"	v
pars_bound_id_t	include/pars0pars.h	/^struct pars_bound_id_t {$/;"	s
pars_bound_lit_t	include/pars0pars.h	/^struct pars_bound_lit_t {$/;"	s
pars_char_token	pars/pars0pars.cc	/^pars_res_word_t pars_char_token = {PARS_CHAR_TOKEN};$/;"	v
pars_check_aggregate	pars/pars0pars.cc	/^static void pars_check_aggregate($/;"	f	file:
pars_close	pars/pars0pars.cc	/^void pars_close() { mutex_free(&pars_mutex); }$/;"	f
pars_close_token	pars/pars0pars.cc	/^pars_res_word_t pars_close_token = {PARS_CLOSE_TOKEN};$/;"	v
pars_clustered_token	pars/pars0pars.cc	/^pars_res_word_t pars_clustered_token = {PARS_CLUSTERED_TOKEN};$/;"	v
pars_column_assignment	pars/pars0pars.cc	/^col_assign_node_t *pars_column_assignment($/;"	f
pars_column_def	pars/pars0pars.cc	/^sym_node_t *pars_column_def(sym_node_t *sym_node,  \/*!< in: column node in the$/;"	f
pars_commit_statement	pars/pars0pars.cc	/^commit_node_t *pars_commit_statement(void) {$/;"	f
pars_complete_graph_for_exec	pars/pars0pars.cc	/^que_thr_t *pars_complete_graph_for_exec(que_node_t *node, trx_t *trx,$/;"	f
pars_concat_token	pars/pars0pars.cc	/^pars_res_word_t pars_concat_token = {PARS_CONCAT_TOKEN};$/;"	v
pars_count_token	pars/pars0pars.cc	/^pars_res_word_t pars_count_token = {PARS_COUNT_TOKEN};$/;"	v
pars_create_index	pars/pars0pars.cc	/^ind_node_t *pars_create_index($/;"	f
pars_create_table	pars/pars0pars.cc	/^tab_node_t *pars_create_table(sym_node_t *table_sym, sym_node_t *column_defs,$/;"	f
pars_cursor_declaration	pars/pars0pars.cc	/^que_node_t *pars_cursor_declaration($/;"	f
pars_desc_token	pars/pars0pars.cc	/^pars_res_word_t pars_desc_token = {PARS_DESC_TOKEN};$/;"	v
pars_distinct_token	pars/pars0pars.cc	/^pars_res_word_t pars_distinct_token = {PARS_DISTINCT_TOKEN};$/;"	v
pars_elsif_element	pars/pars0pars.cc	/^elsif_node_t *pars_elsif_element($/;"	f
pars_exit_statement	pars/pars0pars.cc	/^exit_node_t *pars_exit_statement(void) {$/;"	f
pars_fetch_statement	pars/pars0pars.cc	/^fetch_node_t *pars_fetch_statement($/;"	f
pars_float_token	pars/pars0pars.cc	/^pars_res_word_t pars_float_token = {PARS_FLOAT_TOKEN};$/;"	v
pars_for_statement	pars/pars0pars.cc	/^for_node_t *pars_for_statement($/;"	f
pars_func	pars/pars0pars.cc	/^func_node_t *pars_func($/;"	f
pars_func_get_class	pars/pars0pars.cc	/^static ulint pars_func_get_class($/;"	f	file:
pars_func_low	pars/pars0pars.cc	/^static func_node_t *pars_func_low($/;"	f	file:
pars_function_declaration	pars/pars0pars.cc	/^que_node_t *pars_function_declaration($/;"	f
pars_get_lex_chars	pars/pars0pars.cc	/^int pars_get_lex_chars(char *buf, size_t max_size) {$/;"	f
pars_if_statement	pars/pars0pars.cc	/^if_node_t *pars_if_statement($/;"	f
pars_info_add_int4_literal	pars/pars0pars.cc	/^void pars_info_add_int4_literal(pars_info_t *info, \/*!< in: info struct *\/$/;"	f
pars_info_add_literal	pars/pars0pars.cc	/^void pars_info_add_literal(pars_info_t *info, const char *name,$/;"	f
pars_info_add_str_literal	pars/pars0pars.cc	/^void pars_info_add_str_literal(pars_info_t *info, \/*!< in: info struct *\/$/;"	f
pars_info_add_ull_literal	pars/pars0pars.cc	/^void pars_info_add_ull_literal(pars_info_t *info, \/*!< in: info struct *\/$/;"	f
pars_info_bind_function	pars/pars0pars.cc	/^void pars_info_bind_function(pars_info_t *info, const char *name,$/;"	f
pars_info_bind_id	pars/pars0pars.cc	/^void pars_info_bind_id(pars_info_t *info, ibool copy_name, const char *name,$/;"	f
pars_info_bind_int4_literal	pars/pars0pars.cc	/^void pars_info_bind_int4_literal(pars_info_t *info, const char *name,$/;"	f
pars_info_bind_int8_literal	pars/pars0pars.cc	/^void pars_info_bind_int8_literal(pars_info_t *info, const char *name,$/;"	f
pars_info_bind_literal	pars/pars0pars.cc	/^void pars_info_bind_literal(pars_info_t *info,   \/* in: info struct *\/$/;"	f
pars_info_bind_ull_literal	pars/pars0pars.cc	/^void pars_info_bind_ull_literal(pars_info_t *info, const char *name,$/;"	f
pars_info_bind_varchar_literal	pars/pars0pars.cc	/^void pars_info_bind_varchar_literal(pars_info_t *info, const char *name,$/;"	f
pars_info_create	pars/pars0pars.cc	/^pars_info_t *pars_info_create(void) {$/;"	f
pars_info_free	pars/pars0pars.cc	/^void pars_info_free(pars_info_t *info) \/*!< in, own: info struct *\/$/;"	f
pars_info_get_bound_id	pars/pars0pars.cc	/^pars_bound_id_t *pars_info_get_bound_id(pars_info_t *info, const char *name) {$/;"	f
pars_info_get_bound_lit	pars/pars0pars.cc	/^pars_bound_lit_t *pars_info_get_bound_lit($/;"	f
pars_info_lookup_bound_id	pars/pars0pars.cc	/^pars_bound_id_t *pars_info_lookup_bound_id($/;"	f
pars_info_lookup_bound_lit	pars/pars0pars.cc	/^pars_bound_lit_t *pars_info_lookup_bound_lit($/;"	f
pars_info_lookup_user_func	pars/pars0pars.cc	/^pars_user_func_t *pars_info_lookup_user_func($/;"	f
pars_info_t	include/pars0pars.h	/^struct pars_info_t {$/;"	s
pars_init	pars/pars0pars.cc	/^void pars_init() { mutex_create(LATCH_ID_PARSER, &pars_mutex); }$/;"	f
pars_insert_statement	pars/pars0pars.cc	/^ins_node_t *pars_insert_statement($/;"	f
pars_instr_token	pars/pars0pars.cc	/^pars_res_word_t pars_instr_token = {PARS_INSTR_TOKEN};$/;"	v
pars_int_token	pars/pars0pars.cc	/^pars_res_word_t pars_int_token = {PARS_INT_TOKEN};$/;"	v
pars_is_string_type	pars/pars0pars.cc	/^static ibool pars_is_string_type(ulint mtype) \/*!< in: main data type *\/$/;"	f	file:
pars_length_token	pars/pars0pars.cc	/^pars_res_word_t pars_length_token = {PARS_LENGTH_TOKEN};$/;"	v
pars_lexer_close	pars/lexyy.cc	/^pars_lexer_close(void)$/;"	f
pars_like_op	pars/pars0pars.cc	/^static int pars_like_op($/;"	f	file:
pars_like_rebind	pars/pars0pars.cc	/^int pars_like_rebind($/;"	f
pars_mutex	pars/pars0pars.cc	/^ib_mutex_t pars_mutex;$/;"	v
pars_op	pars/pars0pars.cc	/^func_node_t *pars_op(int func,         \/*!< in: operator token code *\/$/;"	f
pars_open_statement	pars/pars0pars.cc	/^open_node_t *pars_open_statement(ulint type, \/*!< in: ROW_SEL_OPEN_CURSOR$/;"	f
pars_open_token	pars/pars0pars.cc	/^pars_res_word_t pars_open_token = {PARS_OPEN_TOKEN};$/;"	v
pars_order_by	pars/pars0pars.cc	/^order_node_t *pars_order_by($/;"	f
pars_parameter_declaration	pars/pars0pars.cc	/^sym_node_t *pars_parameter_declaration($/;"	f
pars_procedure_definition	pars/pars0pars.cc	/^que_fork_t *pars_procedure_definition($/;"	f
pars_process_assign_list	pars/pars0pars.cc	/^static void pars_process_assign_list(upd_node_t *node) \/*!< in: update node *\/$/;"	f	file:
pars_res_word_t	include/pars0pars.h	/^struct pars_res_word_t {$/;"	s
pars_resolve_exp_columns	pars/pars0pars.cc	/^static void pars_resolve_exp_columns($/;"	f	file:
pars_resolve_exp_list_columns	pars/pars0pars.cc	/^static void pars_resolve_exp_list_columns($/;"	f	file:
pars_resolve_exp_list_variables_and_types	pars/pars0pars.cc	/^static void pars_resolve_exp_list_variables_and_types($/;"	f	file:
pars_resolve_exp_variables_and_types	pars/pars0pars.cc	/^static void pars_resolve_exp_variables_and_types($/;"	f	file:
pars_resolve_func_data_type	pars/pars0pars.cc	/^static void pars_resolve_func_data_type($/;"	f	file:
pars_retrieve_table_def	pars/pars0pars.cc	/^static void pars_retrieve_table_def(sym_node_t *sym_node) \/*!< in: table node *\/$/;"	f	file:
pars_retrieve_table_list_defs	pars/pars0pars.cc	/^static ulint pars_retrieve_table_list_defs($/;"	f	file:
pars_return_statement	pars/pars0pars.cc	/^return_node_t *pars_return_statement(void) {$/;"	f
pars_rollback_statement	pars/pars0pars.cc	/^roll_node_t *pars_rollback_statement(void) {$/;"	f
pars_select_all_columns	pars/pars0pars.cc	/^static void pars_select_all_columns($/;"	f	file:
pars_select_list	pars/pars0pars.cc	/^sel_node_t *pars_select_list($/;"	f
pars_select_statement	pars/pars0pars.cc	/^sel_node_t *pars_select_statement($/;"	f
pars_set_dfield_type	pars/pars0pars.cc	/^static void pars_set_dfield_type(dfield_t *dfield,      \/*!< in: dfield *\/$/;"	f	file:
pars_set_parent_in_list	pars/pars0pars.cc	/^static void pars_set_parent_in_list($/;"	f	file:
pars_share_token	pars/pars0pars.cc	/^pars_res_word_t pars_share_token = {PARS_SHARE_TOKEN};$/;"	v
pars_sql	pars/pars0pars.cc	/^que_t *pars_sql(pars_info_t *info, \/*!< in: extra information, or NULL *\/$/;"	f
pars_star_denoter	pars/pars0pars.cc	/^ulint pars_star_denoter = 12345678;$/;"	v
pars_substr_token	pars/pars0pars.cc	/^pars_res_word_t pars_substr_token = {PARS_SUBSTR_TOKEN};$/;"	v
pars_sum_token	pars/pars0pars.cc	/^pars_res_word_t pars_sum_token = {PARS_SUM_TOKEN};$/;"	v
pars_sym_tab_global	pars/pars0pars.cc	/^sym_tab_t *pars_sym_tab_global;$/;"	v
pars_to_binary_token	pars/pars0pars.cc	/^pars_res_word_t pars_to_binary_token = {PARS_TO_BINARY_TOKEN};$/;"	v
pars_unique_token	pars/pars0pars.cc	/^pars_res_word_t pars_unique_token = {PARS_UNIQUE_TOKEN};$/;"	v
pars_update_statement	pars/pars0pars.cc	/^upd_node_t *pars_update_statement($/;"	f
pars_update_statement_start	pars/pars0pars.cc	/^upd_node_t *pars_update_statement_start($/;"	f
pars_update_token	pars/pars0pars.cc	/^pars_res_word_t pars_update_token = {PARS_UPDATE_TOKEN};$/;"	v
pars_user_func_cb_t	include/pars0pars.h	/^typedef ibool (*pars_user_func_cb_t)(void *arg, void *user_arg);$/;"	t
pars_user_func_t	include/pars0pars.h	/^struct pars_user_func_t {$/;"	s
pars_variable_declaration	pars/pars0pars.cc	/^sym_node_t *pars_variable_declaration($/;"	f
pars_while_statement	pars/pars0pars.cc	/^while_node_t *pars_while_statement($/;"	f
parse	include/lob0lob.h	/^  void parse(ref_mem_t &obj) const {$/;"	f	struct:lob::ref_t
parseMetadataLog	log/log0recv.cc	/^byte *MetadataRecover::parseMetadataLog(table_id_t id, uint64_t version,$/;"	f	class:MetadataRecover
parse_file_name	fsp/fsp0sysspace.cc	/^char *SysTablespace::parse_file_name(char *ptr) {$/;"	f	class:SysTablespace
parse_file_path	fil/fil0fil.cc	/^bool Fil_path::parse_file_path(const std::string &file_path,$/;"	f	class:Fil_path
parse_id	log/log0ddl.cc	/^ulint DDL_Log_Table::parse_id(const dict_index_t *index, rec_t *rec,$/;"	f	class:DDL_Log_Table
parse_mem_key_to_sdi_key	api/api0api.cc	/^static ib_err_t parse_mem_key_to_sdi_key(const char *key_str, sdi_key_t *sk) {$/;"	f	file:
parse_mlog_rec	log/log0test.cc	/^byte *Log_test::parse_mlog_rec(byte *begin, byte *end) {$/;"	f	class:Log_test
parse_mlog_rec	log/log0test.cc	/^byte *Log_test::parse_mlog_rec(byte *begin, byte *end, Key &key, Value &value,$/;"	f	class:Log_test
parse_params	fsp/fsp0sysspace.cc	/^bool SysTablespace::parse_params(const char *filepath_spec, bool supports_raw) {$/;"	f	class:SysTablespace
parse_start_lsn	include/log0recv.h	/^  lsn_t parse_start_lsn;$/;"	m	struct:recv_sys_t
parse_string_to_number	api/api0api.cc	/^static ib_err_t parse_string_to_number(const char *num_str,$/;"	f	file:
parse_table_name	handler/ha_innodb.cc	/^int create_table_info_t::parse_table_name(const char *name) {$/;"	f	class:create_table_info_t
parse_table_path	handler/p_s.cc	/^void parse_table_path(PSI_server_data_lock_container *container,$/;"	f
parse_units	fsp/fsp0sysspace.cc	/^page_no_t SysTablespace::parse_units(char *&ptr) {$/;"	f	class:SysTablespace
parser	fts/fts0que.cc	/^  st_mysql_ftparser *parser; \/*!< fts plugin parser *\/$/;"	m	struct:fts_query_t	file:
parser	fts/fts0que.cc	/^  st_mysql_ftparser *parser;$/;"	m	struct:fts_phrase_t	file:
parser	include/dict0mem.h	/^  st_mysql_ftparser *parser; \/*!< fulltext parser plugin *\/$/;"	m	struct:dict_index_t
parser	include/fts0types.h	/^  st_mysql_ftparser *parser; \/*!< fts plugin parser *\/$/;"	m	struct:fts_doc_t
parser	include/row0merge.h	/^  st_mysql_ftparser *parser; \/*!< fulltext parser plugin *\/$/;"	m	struct:index_def_t
parser_mutex_key	sync/sync0sync.cc	/^mysql_pfs_key_t parser_mutex_key;$/;"	v
part	handler/handler0alter.cc	/^  dict_table_t *part(uint part_id) {$/;"	f	class:Altered_partitions
part_id	handler/handler0alter.cc	/^  virtual uint part_id() const { return (m_part_id); }$/;"	f	class:alter_part
partial	include/row0undo.h	/^  bool partial;             \/*!< true if partial rollback *\/$/;"	m	struct:undo_node_t
partial	include/trx0roll.h	/^  bool partial;               \/*!< TRUE if we want a partial$/;"	m	struct:roll_node_t
partition	row/row0pread.cc	/^dberr_t Parallel_reader::Scan_ctx::partition($/;"	f	class:Parallel_reader::Scan_ctx
partition_get_tablespace	handler/ha_innopart.cc	/^const char *partition_get_tablespace(const char *tablespace,$/;"	f
pass	include/sync0rw.h	/^  ulint pass;                \/*!< Pass value given in the lock operation *\/$/;"	m	struct:rw_lock_debug_t
path	dict/dict0upgrade.cc	/^  const char *path;$/;"	m	struct:__anon1	file:
path	fil/fil0fil.cc	/^  const std::string &path() const { return m_dir.path(); }$/;"	f	class:Tablespace_files
path	include/fsp0space.h	/^  const char *path() const { return (m_path); }$/;"	f	class:Tablespace
path	include/gis0type.h	/^  rtr_node_path_t *path; \/*!< vector holding matching pages *\/$/;"	m	struct:rtr_info
path	row/row0log.cc	/^  const char *path; \/*!< where to create temporary file during$/;"	m	struct:row_log_t	file:
path	srv/srv0tmp.cc	/^std::string Tablespace::path() const {$/;"	f	class:ibt::Tablespace
path_type	include/fil0fil.h	/^  enum path_type { absolute, relative, file_name_only, invalid };$/;"	g	class:Fil_path
payload	include/lob0first.h	/^  static ulint payload() {$/;"	f	struct:lob::first_page_t
payload	include/lob0impl.h	/^  static ulint payload() {$/;"	f	struct:lob::node_page_t
payload	include/lob0impl.h	/^  ulint payload() const { return (get_total_len() - header_size()); }$/;"	f	struct:lob::frag_node_t
payload	include/lob0impl.h	/^  ulint payload() const {$/;"	f	struct:lob::z_frag_node_page_t
payload	include/lob0impl.h	/^  ulint payload() const {$/;"	f	struct:lob::z_index_page_t
payload	include/lob0impl.h	/^  ulint payload() { return (z_frag_page_t::max_payload(m_index)); }$/;"	f	struct:lob::z_frag_page_t
payload	include/lob0impl.h	/^  ulint payload() {$/;"	f	struct:lob::z_data_page_t
payload	include/lob0ins.h	/^  ulint payload() const {$/;"	f	class:lob::Inserter
payload	include/lob0pages.h	/^  static ulint payload() {$/;"	f	struct:lob::data_page_t
payload	include/zlob0first.h	/^  ulint payload() {$/;"	f	struct:lob::z_first_page_t
pc_flush_slot	buf/buf0flu.cc	/^static ulint pc_flush_slot(void) {$/;"	f	file:
pc_request	buf/buf0flu.cc	/^static void pc_request(ulint min_n, lsn_t lsn_limit) {$/;"	f	file:
pc_sleep_if_needed	buf/buf0flu.cc	/^static ulint pc_sleep_if_needed(ib_time_monotonic_ms_t next_loop_time,$/;"	f	file:
pc_wait_finished	buf/buf0flu.cc	/^static bool pc_wait_finished(ulint *n_flushed_lru, ulint *n_flushed_list) {$/;"	f	file:
pcur	include/row0mysql.h	/^  btr_pcur_t *pcur;       \/*!< persistent cursor used in selects$/;"	m	struct:row_prebuilt_t
pcur	include/row0purge.h	/^  btr_pcur_t pcur;$/;"	m	struct:purge_node_t
pcur	include/row0sel.h	/^  btr_pcur_t pcur;     \/*!< persistent cursor used to search$/;"	m	struct:plan_t
pcur	include/row0undo.h	/^  btr_pcur_t pcur;          \/*!< persistent cursor used in searching the$/;"	m	struct:undo_node_t
pcur	include/row0upd.h	/^  btr_pcur_t *pcur;    \/*!< persistent cursor placed on the clustered$/;"	m	struct:upd_node_t
pcur_is_open	include/row0sel.h	/^  ibool pcur_is_open;  \/*!< TRUE if pcur has been positioned$/;"	m	struct:plan_t
pcur_pos_t	include/btr0pcur.h	/^enum pcur_pos_t {$/;"	g
pending_io_count	os/os0file.cc	/^ulint AIO::pending_io_count() const {$/;"	f	class:AIO
periodic_write	clone/clone0repl.cc	/^void Clone_persist_gtid::periodic_write() {$/;"	f	class:Clone_persist_gtid
persistent_type_t	include/dict0mem.h	/^enum persistent_type_t {$/;"	g
persisters	include/dict0dict.h	/^  Persisters *persisters;$/;"	m	struct:dict_persist_t
persisters_t	include/dict0mem.h	/^      persisters_t;$/;"	t	class:Persisters
persists_gtid	clone/clone0repl.cc	/^trx_undo_t::Gtid_storage Clone_persist_gtid::persists_gtid(const trx_t *trx) {$/;"	f	class:Clone_persist_gtid
persists_gtid	include/trx0trx.h	/^  bool persists_gtid;$/;"	m	struct:trx_t
pfs_info	ut/ut0new.cc	/^static PSI_memory_info pfs_info[] = {$/;"	v	file:
pfs_info_auto	ut/ut0new.cc	/^PSI_memory_info pfs_info_auto[n_auto];$/;"	v
pfs_key_t	include/sync0types.h	/^  typedef mysql_pfs_key_t pfs_key_t;$/;"	t	class:LatchMeta
pfs_os_file_t	include/os0file.h	/^struct pfs_os_file_t {$/;"	s
pfs_psi	include/sync0rw.h	/^  struct PSI_rwlock *pfs_psi;$/;"	m	struct:rw_lock_t	typeref:struct:rw_lock_t::PSI_rwlock
pfs_register_buffer_block	buf/buf0buf.cc	/^static void pfs_register_buffer_block($/;"	f	file:
phrase	fts/fts0que.cc	/^  fts_phrase_t *phrase; \/*!< Match phrase instance *\/$/;"	m	struct:fts_phrase_param_t	file:
physical	include/page0size.h	/^  inline size_t physical() const {$/;"	f	class:page_size_t
pick_next	gis/gis0geo.cc	/^static void pick_next($/;"	f	file:
pick_seeds	gis/gis0geo.cc	/^static void pick_seeds($/;"	f	file:
plan_reset_cursor	row/row0sel.cc	/^void plan_reset_cursor(plan_t *plan) \/*!< in: plan *\/$/;"	f
plan_t	include/row0sel.h	/^struct plan_t {$/;"	s
plans	include/row0sel.h	/^  plan_t *plans;             \/*!< array of n_tables many plan nodes$/;"	m	struct:sel_node_t
please	handler/ha_innodb.h	/^  struct _ft_vft *please;$/;"	m	struct:new_ft_info	typeref:struct:new_ft_info::_ft_vft
plist_base_node_t	include/lob0impl.h	/^  plist_base_node_t(byte *frame, byte *base, mtr_t *mtr)$/;"	f	struct:lob::plist_base_node_t
plist_base_node_t	include/lob0impl.h	/^struct plist_base_node_t {$/;"	s	namespace:lob
plist_node_t	include/lob0impl.h	/^  explicit plist_node_t(mtr_t *mtr)$/;"	f	class:lob::plist_node_t
plist_node_t	include/lob0impl.h	/^  plist_node_t() : m_frame(nullptr), m_node(nullptr), m_mtr(nullptr) {}$/;"	f	class:lob::plist_node_t
plist_node_t	include/lob0impl.h	/^  plist_node_t(byte *frame, byte *node)$/;"	f	class:lob::plist_node_t
plist_node_t	include/lob0impl.h	/^  plist_node_t(byte *frame, byte *node, mtr_t *mtr)$/;"	f	class:lob::plist_node_t
plist_node_t	include/lob0impl.h	/^  plist_node_t(mtr_t *mtr, byte *frame)$/;"	f	class:lob::plist_node_t
plist_node_t	include/lob0impl.h	/^class plist_node_t {$/;"	c	namespace:lob
plugin_author	handler/i_s.cc	/^constexpr char plugin_author[] = PLUGIN_AUTHOR_ORACLE;$/;"	v
pointer	include/mem0mem.h	/^  typedef T *pointer;$/;"	t	class:mem_heap_allocator
pointer	include/ut0new.h	/^  typedef T *pointer;$/;"	t	class:ut_allocator
poll	os/os0file.cc	/^dberr_t LinuxAIOHandler::poll(fil_node_t **m1, void **m2, IORequest *request) {$/;"	f	class:LinuxAIOHandler
pool_size	include/buf0buf.h	/^  ulint pool_size;                   \/*!< Buffer Pool size in pages *\/$/;"	m	struct:Cache_hint::buf_pool_info_t
pool_unique_id	include/buf0buf.h	/^  ulint pool_unique_id;              \/*!< Buffer Pool ID *\/$/;"	m	struct:Cache_hint::buf_pool_info_t
populate_offsets	page/page0cur.cc	/^static ulint *populate_offsets(const rec_t *rec, const dtuple_t *tuple,$/;"	f	file:
pos	fts/fts0opt.cc	/^  ulint pos; \/*!< Offset into blocks *\/$/;"	m	struct:fts_zip_t	file:
pos	include/arch0arch.h	/^  Arch_Page_Pos pos;$/;"	m	struct:Arch_Point
pos	include/fts0tokenize.h	/^  uchar *pos;    \/*!< word start pointer *\/$/;"	m	struct:FT_WORD
pos_vector_t	fts/fts0que.cc	/^typedef std::vector<ulint, ut_allocator<ulint>> pos_vector_t;$/;"	t	file:
position	handler/ha_innodb.cc	/^void ha_innobase::position(const uchar *record) {$/;"	f	class:ha_innobase
position	include/row0ftsort.h	/^  ulint position;     \/*!< token position in the document *\/$/;"	m	struct:row_fts_token_t
position_in_last_part	handler/ha_innopart.cc	/^void ha_innopart::position_in_last_part(uchar *ref_arg, const uchar *record) {$/;"	f	class:ha_innopart
positions	fts/fts0que.cc	/^  ib_vector_t *positions; \/*!< Offsets of a word in a$/;"	m	struct:fts_match_t	file:
positions	include/fts0types.h	/^  ib_vector_t *positions; \/*!< an array of the positions the$/;"	m	struct:fts_token_t
posix_fadvise	row/row0merge.cc	66;"	d	file:
post_ddl	log/log0ddl.cc	/^dberr_t Log_DDL::post_ddl(THD *thd) {$/;"	f	class:Log_DDL
post_io_processing	os/os0file.cc	/^dberr_t AIOHandler::post_io_processing(Slot *slot) {$/;"	f	class:AIOHandler
post_recovery_init	arch/arch0page.cc	/^void Arch_Page_Sys::post_recovery_init() {$/;"	f	class:Arch_Page_Sys
pq_mutex	include/trx0purge.h	/^  PQMutex pq_mutex;$/;"	m	struct:trx_purge_t
pqueue_t	include/ut0pool.h	/^      pqueue_t;$/;"	t	struct:Pool
prdt_get_mbr_from_prdt	lock/lock0prdt.cc	/^rtr_mbr_t *prdt_get_mbr_from_prdt($/;"	f
prdt_hash	include/lock0lock.h	/^  hash_table_t *prdt_hash;$/;"	m	struct:lock_sys_t
prdt_page_hash	include/lock0lock.h	/^  hash_table_t *prdt_page_hash;$/;"	m	struct:lock_sys_t
preamble	include/os0thread-create.h	/^  void preamble() {$/;"	f	class:Runnable
prebuilt	api/api0api.cc	/^  row_prebuilt_t *prebuilt; \/*!< For reading rows *\/$/;"	m	struct:ib_cursor_t	file:
prebuilt	handler/handler0alter.cc	/^  row_prebuilt_t *prebuilt;$/;"	m	struct:ha_innobase_inplace_ctx	file:
prebuilt	include/que0que.h	/^  row_prebuilt_t *prebuilt; \/*!< prebuilt structure processed by$/;"	m	struct:que_thr_t
prebuilt_array	handler/handler0alter.cc	/^  row_prebuilt_t **prebuilt_array;$/;"	m	class:ha_innopart_inplace_ctx	file:
predefine_tablespace	handler/ha_innodb.cc	/^static bool predefine_tablespace(dd::cache::Dictionary_client *dd_client,$/;"	f	file:
predefine_undo_tablespaces	handler/ha_innodb.cc	/^static bool predefine_undo_tablespaces(dd::cache::Dictionary_client *dd_client,$/;"	f	file:
predefined_flags	handler/ha_innodb.cc	/^uint32_t predefined_flags;$/;"	v
prefetch_buf	include/pars0sym.h	/^  sel_buf_t *prefetch_buf;       \/*!< NULL, or a buffer$/;"	m	struct:sym_node_t
prefix	fts/fts0pars.y	/^prefix	: '-'		{$/;"	l
prefix_len	api/api0api.cc	/^  ulint prefix_len; \/*!< Column index prefix len or 0 *\/$/;"	m	struct:ib_key_col_t	file:
prefix_len	include/dict0mem.h	/^  unsigned prefix_len : 12;  \/*!< 0 or the length of the column$/;"	m	struct:dict_field_t
prefix_len	include/row0merge.h	/^  ulint prefix_len;    \/*!< column prefix length, or 0$/;"	m	struct:index_field_t
prepare	handler/ha_innodb.cc	/^int innobase_truncate<Table>::prepare() {$/;"	f	class:innobase_truncate
prepare	handler/handler0alter.cc	/^  virtual int prepare(TABLE *altered_table, const dd::Partition *old_part,$/;"	f	class:alter_part
prepare	handler/handler0alter.cc	/^int alter_part_change::prepare(TABLE *altered_table,$/;"	f	class:alter_part_change
prepare	handler/handler0alter.cc	/^int alter_parts::prepare(const dd::Table &old_dd_tab, dd::Table &new_dd_tab,$/;"	f	class:alter_parts
prepare	lob/zlob0ins.cc	/^dberr_t zInserter::prepare() {$/;"	f	class:lob::zInserter
prepare	lock/lock0lock.cc	/^void RecLock::prepare() const {$/;"	f	class:RecLock
prepare	read/read0read.cc	/^void ReadView::prepare(trx_id_t id) {$/;"	f	class:ReadView
prepareSpace	btr/btr0bulk.cc	/^dberr_t BtrBulk::prepareSpace(PageBulk *&page_bulk, ulint level,$/;"	f	class:BtrBulk
prepare_create_table	handler/ha_innodb.cc	/^int create_table_info_t::prepare_create_table(const char *name) {$/;"	f	class:create_table_info_t
prepare_entry_if_necessary	include/row0row.h	/^  virtual void prepare_entry_if_necessary() { return; }$/;"	f	class:Multi_value_entry_builder
prepare_file_for_io	fil/fil0fil.cc	/^bool Fil_shard::prepare_file_for_io(fil_node_t *file, bool extend) {$/;"	f	class:Fil_shard
prepare_for_copy_partitions	handler/handler0alter.cc	/^bool ha_innopart::prepare_for_copy_partitions($/;"	f	class:ha_innopart
prepare_for_write_ahead	log/log0write.cc	/^static inline size_t prepare_for_write_ahead(log_t &log, uint64_t real_offset,$/;"	f	namespace:Log_files_write_impl
prepare_full_blocks	log/log0write.cc	/^static inline void prepare_full_blocks(const log_t &log, byte *buffer,$/;"	f	namespace:Log_files_write_impl
prepare_inplace_add_virtual	handler/handler0alter.cc	/^static bool prepare_inplace_add_virtual(Alter_inplace_info *ha_alter_info,$/;"	f	file:
prepare_inplace_alter_partition	handler/handler0alter.cc	/^bool ha_innopart::prepare_inplace_alter_partition($/;"	f	class:ha_innopart
prepare_inplace_alter_table	handler/handler0alter.cc	/^bool ha_innobase::prepare_inplace_alter_table(TABLE *altered_table,$/;"	f	class:ha_innobase
prepare_inplace_alter_table	handler/handler0alter.cc	/^bool ha_innopart::prepare_inplace_alter_table(TABLE *altered_table,$/;"	f	class:ha_innopart
prepare_inplace_alter_table_dict	handler/handler0alter.cc	/^static MY_ATTRIBUTE((warn_unused_result)) bool prepare_inplace_alter_table_dict($/;"	f
prepare_inplace_alter_table_impl	handler/handler0alter.cc	/^bool ha_innobase::prepare_inplace_alter_table_impl($/;"	f	class:ha_innobase
prepare_inplace_change_implicit_tablespace_option	handler/handler0alter.cc	/^static bool prepare_inplace_change_implicit_tablespace_option($/;"	f	file:
prepare_inplace_drop_virtual	handler/handler0alter.cc	/^static bool prepare_inplace_drop_virtual(Alter_inplace_info *ha_alter_info,$/;"	f	file:
prepare_multi_value_field	include/row0row.h	/^  virtual bool prepare_multi_value_field() {$/;"	f	class:Multi_value_entry_builder
prepare_next_scan	handler/p_s.cc	/^  void prepare_next_scan() {$/;"	f	class:Innodb_trx_scan_state
prepare_open_for_business	fil/fil0fil.cc	/^dberr_t Fil_system::prepare_open_for_business(bool read_only_mode) {$/;"	f	class:Fil_system
prepare_or_commit_for_new	handler/handler0alter.cc	/^int alter_parts::prepare_or_commit_for_new(const dd::Table &old_dd_tab,$/;"	f	class:alter_parts
prepare_or_commit_for_old	handler/handler0alter.cc	/^int alter_parts::prepare_or_commit_for_old(const dd::Table &old_dd_tab,$/;"	f	class:alter_parts
prepare_to_free_file	fil/fil0fil.cc	/^void Fil_shard::prepare_to_free_file(fil_node_t *file) {$/;"	f	class:Fil_shard
prepare_write	handler/handler0alter.cc	/^  void prepare_write(row_prebuilt_t *prebuilt, uint new_part_id) const {$/;"	f	class:Altered_partitions
prepare_write	mtr/mtr0mtr.cc	/^ulint mtr_t::Command::prepare_write() {$/;"	f	class:mtr_t::Command
prev	include/ut0list.h	/^  ib_list_node_t *prev; \/*!< previous node *\/$/;"	m	struct:ib_list_node_t
prev	include/ut0lst.h	/^  Type *prev; \/*!< pointer to the previous$/;"	m	struct:ut_list_node
prev_iter_pages_dirty	buf/buf0flu.cc	/^ulint prev_iter_pages_dirty = 0;$/;"	m	namespace:Adaptive_flush	file:
prev_iter_pages_flushed	buf/buf0flu.cc	/^ulint prev_iter_pages_flushed = 0;$/;"	m	namespace:Adaptive_flush	file:
prev_iter_time	buf/buf0flu.cc	/^ib_time_monotonic_ms_t prev_iter_time;$/;"	m	namespace:Adaptive_flush	file:
prev_lsn	buf/buf0flu.cc	/^lsn_t prev_lsn = 0;$/;"	m	namespace:Adaptive_flush	file:
prev_node	include/que0que.h	/^  que_node_t *prev_node; \/*!< pointer to the node from which$/;"	m	struct:que_thr_t
prev_time	buf/buf0flu.cc	/^ib_time_monotonic_ms_t prev_time;$/;"	m	namespace:Adaptive_flush	file:
previous_recovered_lsn	include/log0recv.h	/^  lsn_t previous_recovered_lsn;$/;"	m	struct:recv_sys_t
primary_key_is_clustered	handler/ha_innodb.cc	/^bool ha_innobase::primary_key_is_clustered() const { return (true); }$/;"	f	class:ha_innobase
print	arch/arch0page.cc	/^void Arch_Page_Sys::print() {$/;"	f	class:Arch_Page_Sys
print	arch/arch0page.cc	/^void Page_Arch_Client_Ctx::print() {$/;"	f	class:Page_Arch_Client_Ctx
print	arch/arch0recv.cc	/^void Arch_Page_Sys::Recv::print() {$/;"	f	class:Arch_Page_Sys::Recv
print	data/data0data.cc	/^std::ostream &big_rec_field_t::print(std::ostream &out) const {$/;"	f	class:big_rec_field_t
print	data/data0data.cc	/^std::ostream &big_rec_t::print(std::ostream &out) const {$/;"	f	class:big_rec_t
print	data/data0data.cc	/^std::ostream &dfield_t::print(std::ostream &out) const {$/;"	f	class:dfield_t
print	data/data0type.cc	/^std::ostream &dtype_t::print(std::ostream &out) const {$/;"	f	class:dtype_t
print	fsp/fsp0fsp.cc	/^std::ostream &File_segment_inode::print(std::ostream &out) const {$/;"	f	class:File_segment_inode
print	fsp/fsp0fsp.cc	/^std::ostream &fsp_header_mem_t::print(std::ostream &out) const {$/;"	f	class:fsp_header_mem_t
print	fsp/fsp0fsp.cc	/^std::ostream &xdes_mem_t::print(std::ostream &out) const {$/;"	f	class:xdes_mem_t
print	include/data0data.h	/^  std::ostream &print(std::ostream &out) const {$/;"	f	struct:dtuple_t
print	include/fil0fil.h	/^  std::ostream &print(std::ostream &out) const {$/;"	f	struct:fil_addr_t
print	include/fut0lst.h	/^  std::ostream &print(std::ostream &out) const {$/;"	f	struct:flst_bnode_t
print	include/lob0impl.h	/^  std::ostream &print(std::ostream &out) const {$/;"	f	class:lob::plist_node_t
print	include/lob0impl.h	/^  std::ostream &print(std::ostream &out) const {$/;"	f	struct:lob::frag_node_t
print	include/lob0impl.h	/^  std::ostream &print(std::ostream &out) const {$/;"	f	struct:lob::plist_base_node_t
print	include/lob0impl.h	/^  std::ostream &print(std::ostream &out) const {$/;"	f	struct:lob::z_frag_page_t
print	include/lock0priv.h	/^inline std::ostream &lock_rec_t::print(std::ostream &out) const {$/;"	f	class:lock_rec_t
print	include/lock0priv.h	/^inline std::ostream &lock_t::print(std::ostream &out) const {$/;"	f	class:lock_t
print	include/lock0priv.h	/^inline std::ostream &lock_table_t::print(std::ostream &out) const {$/;"	f	class:lock_table_t
print	include/row0ext.h	/^  std::ostream &print(std::ostream &out) const {$/;"	f	struct:row_ext_t
print	include/row0upd.h	/^  std::ostream &print(std::ostream &out) const {$/;"	f	struct:Lob_diff
print	include/row0upd.h	/^  std::ostream &print(std::ostream &out) const {$/;"	f	struct:lob_index_diff_t
print	include/trx0types.h	/^  std::ostream &print(std::ostream &out) const {$/;"	f	struct:trx_rseg_t
print	include/ut0stateful_latching_rules.h	/^  void print(T &sout, const latches_set_t &latches) const {$/;"	f	class:ut::Stateful_latching_rules
print	lob/lob0impl.cc	/^std::ostream &z_frag_entry_t::print(std::ostream &out) const {$/;"	f	class:lob::z_frag_entry_t
print	lob/lob0impl.cc	/^void print(trx_t *trx, dict_index_t *index, std::ostream &out, ref_t ref,$/;"	f	namespace:lob
print	lob/lob0index.cc	/^std::ostream &index_entry_mem_t::print(std::ostream &out) const {$/;"	f	class:lob::index_entry_mem_t
print	lob/lob0index.cc	/^std::ostream &index_entry_t::print(std::ostream &out) const {$/;"	f	class:lob::index_entry_t
print	lob/lob0lob.cc	/^std::ostream &blob_dir_t::print(std::ostream &out) const {$/;"	f	class:lob::blob_dir_t
print	lob/lob0lob.cc	/^std::ostream &blob_page_info_t::print(std::ostream &out) const {$/;"	f	class:lob::blob_page_info_t
print	lob/lob0lob.cc	/^std::ostream &ref_t::print(std::ostream &out) const {$/;"	f	class:lob::ref_t
print	lob/lob0undo.cc	/^std::ostream &undo_data_t::print(std::ostream &out) const {$/;"	f	class:lob::undo_data_t
print	lob/zlob0first.cc	/^std::ostream &z_first_page_t::print(std::ostream &out) const {$/;"	f	class:lob::z_first_page_t
print	lob/zlob0index.cc	/^std::ostream &z_index_entry_mem_t::print(std::ostream &out) const {$/;"	f	class:lob::z_index_entry_mem_t
print	lob/zlob0index.cc	/^std::ostream &z_index_entry_t::print(std::ostream &out) const {$/;"	f	class:lob::z_index_entry_t
print	lock/lock0lock.cc	/^void Deadlock_notifier::print(const char *msg) {$/;"	f	class:Deadlock_notifier
print	lock/lock0lock.cc	/^void Deadlock_notifier::print(const lock_t *lock) {$/;"	f	class:Deadlock_notifier
print	lock/lock0lock.cc	/^void Deadlock_notifier::print(const trx_t *trx, ulint max_query_len) {$/;"	f	class:Deadlock_notifier
print	log/log0ddl.cc	/^std::ostream &DDL_Record::print(std::ostream &out) const {$/;"	f	class:DDL_Record
print	mtr/mtr0mtr.cc	/^void mtr_t::print() const {$/;"	f	class:mtr_t
print	os/os0file.cc	/^void AIO::print(FILE *file) {$/;"	f	class:AIO
print	row/row0upd.cc	/^std::ostream &upd_field_t::print(std::ostream &out) const {$/;"	f	class:upd_field_t
print	row/row0upd.cc	/^std::ostream &upd_t::print(std::ostream &out) const {$/;"	f	class:upd_t
print	ut/ut.h	/^  std::ostream &print(std::ostream &out) const {$/;"	f	struct:PrintBuffer
print_all	os/os0file.cc	/^void AIO::print_all(FILE *file) {$/;"	f	class:AIO
print_binary_diff	row/row0upd.cc	/^static std::ostream &print_binary_diff(std::ostream &out, upd_field_t *uf,$/;"	f	file:
print_binary_diff	row/row0upd.cc	/^std::ostream &print_binary_diff(std::ostream &out, const Binary_diff *bdiff,$/;"	f
print_chunk_info	clone/clone0clone.cc	/^static void print_chunk_info(Chunk_Info *chunk_info) {$/;"	f	file:
print_compressed_checksum	include/buf0checksum.h	/^  virtual inline void print_compressed_checksum(ib_uint32_t calc,$/;"	f	class:BlockReporter
print_crc32_checksum	include/buf0checksum.h	/^  virtual inline void print_crc32_checksum(ulint checksum_field1,$/;"	f	class:BlockReporter
print_crc32_fail	include/buf0checksum.h	/^  virtual inline void print_crc32_fail() const {}$/;"	f	class:BlockReporter
print_duplicates	fil/fil0fil.cc	/^void Tablespace_dirs::print_duplicates(const Space_id_set &duplicates) {$/;"	f	class:Tablespace_dirs
print_error	handler/ha_innopart.cc	/^void ha_innopart::print_error(int error, myf errflag) {$/;"	f	class:ha_innopart
print_frag_entries	lob/zlob0first.cc	/^std::ostream &z_first_page_t::print_frag_entries(std::ostream &out) const {$/;"	f	class:lob::z_first_page_t
print_frag_id	include/lob0impl.h	/^  std::ostream &print_frag_id(std::ostream &out) {$/;"	f	struct:lob::z_frag_page_t
print_frag_list	include/lob0impl.h	/^  std::ostream &print_frag_list(std::ostream &out) const {$/;"	f	struct:lob::z_frag_page_t
print_frags_in_order	lob/lob0impl.cc	/^std::ostream &z_frag_page_t::print_frags_in_order(std::ostream &out) const {$/;"	f	class:lob::z_frag_page_t
print_free_list	include/lob0impl.h	/^  std::ostream &print_free_list(std::ostream &out) const {$/;"	f	struct:lob::z_frag_page_t
print_index_entries	lob/lob0first.cc	/^std::ostream &first_page_t::print_index_entries(std::ostream &out) const {$/;"	f	class:lob::first_page_t
print_index_entries	lob/zlob0first.cc	/^std::ostream &z_first_page_t::print_index_entries(std::ostream &out) const {$/;"	f	class:lob::z_first_page_t
print_index_entries_cache_s	lob/lob0first.cc	/^std::ostream &first_page_t::print_index_entries_cache_s($/;"	f	class:lob::first_page_t
print_innodb_checksum	include/buf0checksum.h	/^  virtual inline void print_innodb_checksum($/;"	f	class:BlockReporter
print_innodb_fail	include/buf0checksum.h	/^  virtual inline void print_innodb_fail() const {}$/;"	f	class:BlockReporter
print_limits	include/read0types.h	/^  void print_limits(FILE *file) const {$/;"	f	class:ReadView
print_list	include/lob0impl.h	/^  std::ostream &print_list(std::ostream &out) const {$/;"	f	struct:lob::plist_base_node_t
print_lock_id	handler/p_s.cc	/^void print_lock_id(const lock_t *lock, ulint heap_no, char *lock_id,$/;"	f
print_none_fail	include/buf0checksum.h	/^  virtual inline void print_none_fail() const {}$/;"	f	class:BlockReporter
print_page_dir	include/lob0impl.h	/^  std::ostream &print_page_dir(std::ostream &out) const {$/;"	f	struct:lob::z_frag_page_t
print_pages	lob/zlob0index.cc	/^std::ostream &z_index_entry_t::print_pages(std::ostream &out) const {$/;"	f	class:lob::z_index_entry_t
print_partial_update_hit	lob/lob0update.cc	/^static void print_partial_update_hit(upd_field_t *uf, dict_index_t *index) {$/;"	f	namespace:lob
print_puvect	row/row0upd.cc	/^std::ostream &upd_t::print_puvect(std::ostream &out, upd_field_t *uf) const {$/;"	f	class:upd_t
print_record_lock_id	handler/p_s.cc	/^void print_record_lock_id(const lock_t *lock, ulint heap_no, char *lock_id,$/;"	f
print_segment_info	os/os0file.cc	/^void AIO::print_segment_info(FILE *file, const ulint *segments) {$/;"	f	class:AIO
print_stats	include/ut0lock_free_hash.h	/^  void print_stats() {$/;"	f	class:ut_lock_free_hash_t
print_strict_crc32	include/buf0checksum.h	/^  virtual inline void print_strict_crc32(ulint checksum_field1,$/;"	f	class:BlockReporter
print_strict_innodb	include/buf0checksum.h	/^  virtual inline void print_strict_innodb(ulint checksum_field1,$/;"	f	class:BlockReporter
print_strict_none	include/buf0checksum.h	/^  virtual inline void print_strict_none(ulint checksum_field1,$/;"	f	class:BlockReporter
print_table_lock_id	handler/p_s.cc	/^void print_table_lock_id(const lock_t *lock, char *lock_id,$/;"	f
print_title	lock/lock0lock.cc	/^void Deadlock_notifier::print_title(size_t pos_on_cycle, const char *title) {$/;"	f	class:Deadlock_notifier
print_to_file	os/os0file.cc	/^void AIO::print_to_file(FILE *file) {$/;"	f	class:AIO
print_xdes_pages	fil/fil0fil.cc	/^std::ostream &fil_space_t::print_xdes_pages(std::ostream &out) const {$/;"	f	class:fil_space_t
print_xdes_pages	fil/fil0fil.cc	/^void fil_space_t::print_xdes_pages(const char *filename) const {$/;"	f	class:fil_space_t
proc_id	include/pars0pars.h	/^  sym_node_t *proc_id;    \/*!< procedure name symbol in the symbol$/;"	m	struct:proc_node_t
proc_node_t	include/pars0pars.h	/^struct proc_node_t {$/;"	s
procedure_definition	pars/pars0grm.y	/^procedure_definition:$/;"	l
process_chunk	clone/clone0copy.cc	/^int Clone_Handle::process_chunk(Clone_Task *task, uint32_t chunk_num,$/;"	f	class:Clone_Handle
process_inclomplete_chunk	include/clone0clone.h	/^  inline bool process_inclomplete_chunk() {$/;"	f	class:Clone_Task_Manager
process_leaf_rec	row/row0pread-histogram.cc	/^dberr_t Histogram_sampler::process_leaf_rec(const Parallel_reader::Ctx *ctx,$/;"	f	class:Histogram_sampler
process_non_leaf_rec	row/row0pread-histogram.cc	/^dberr_t Histogram_sampler::process_non_leaf_rec($/;"	f	class:Histogram_sampler
process_rows	row/row0pread-adapter.cc	/^dberr_t Parallel_reader_adapter::process_rows($/;"	f	class:Parallel_reader_adapter
proximity_pos	fts/fts0que.cc	/^  fts_proximity_t *proximity_pos;$/;"	m	struct:fts_phrase_t	file:
prtype	include/data0type.h	/^  unsigned prtype : 32; \/*!< precise type; MySQL data$/;"	m	struct:dtype_t
prtype	include/dict0mem.h	/^  unsigned prtype : 32; \/*!< precise type; MySQL data$/;"	m	struct:dict_col_t
prtype	include/pars0pars.h	/^  ulint prtype;        \/*!< precise type, e.g. DATA_UNSIGNED *\/$/;"	m	struct:pars_bound_lit_t
psort_common	include/row0ftsort.h	/^  fts_psort_common_t *psort_common; \/*!< ptr to all psort info *\/$/;"	m	struct:fts_psort_t
psort_id	include/row0ftsort.h	/^  ulint psort_id; \/*!< Parallel sort ID *\/$/;"	m	struct:fts_psort_t
ptr	api/api0api.cc	/^  dtuple_t *ptr; \/*!< The internal tuple$/;"	m	struct:ib_tuple_t	file:
ptr	fts/fts0opt.cc	/^  void *ptr; \/*!< The message contents *\/$/;"	m	struct:fts_msg_t	file:
ptr	include/data0data.h	/^  byte *ptr() const { return (static_cast<byte *>(data)); }$/;"	f	struct:big_rec_field_t
ptr	include/fts0ast.h	/^  fts_ast_string_t *ptr; \/*!< Pointer to term string.*\/$/;"	m	struct:fts_ast_term_t
ptr	include/fts0ast.h	/^  fts_ast_string_t *ptr; \/*!< Pointer to text string.*\/$/;"	m	struct:fts_ast_text_t
ptr	include/lob0impl.h	/^  byte *ptr() const { return (m_node); }$/;"	f	class:lob::plist_node_t
ptr	include/lob0impl.h	/^  byte *ptr() const {$/;"	f	struct:lob::frag_node_t
ptr	include/log0recv.h	/^    byte *ptr;$/;"	m	struct:recv_sys_t::Encryption_Key
ptr	include/ut0new.h	/^  T *ptr = nullptr;$/;"	m	class:ut::aligned_array_pointer
ptr	include/ut0new.h	/^  T *ptr = nullptr;$/;"	m	class:ut::aligned_pointer
ptr	log/log0meb.cc	/^  const char *ptr = irla_dirs;$/;"	m	struct:meb::value	file:
punch_hole	include/fil0fil.h	/^  bool punch_hole;$/;"	m	struct:fil_node_t
punch_holes	clone/clone0apply.cc	/^dberr_t Clone_Handle::punch_holes(os_file_t file, const byte *buffer,$/;"	f	class:Clone_Handle
purge	arch/arch0page.cc	/^lsn_t Arch_File_Ctx::purge(lsn_t begin_lsn, lsn_t end_lsn, lsn_t purge_lsn) {$/;"	f	class:Arch_File_Ctx
purge	arch/arch0page.cc	/^uint Arch_Group::purge(lsn_t purge_lsn, lsn_t &group_purged_lsn) {$/;"	f	class:Arch_Group
purge	arch/arch0page.cc	/^uint Arch_Page_Sys::purge(lsn_t *purge_lsn) {$/;"	f	class:Arch_Page_Sys
purge	fil/fil0fil.cc	/^  void purge() {$/;"	f	class:Fil_shard
purge	fil/fil0fil.cc	/^  void purge() {$/;"	f	class:Fil_system
purge	lob/lob0impl.cc	/^void z_frag_entry_t::purge(flst_base_node_t *used_lst,$/;"	f	class:lob::z_frag_entry_t
purge	lob/lob0index.cc	/^void index_entry_t::purge(dict_index_t *index) {$/;"	f	class:lob::index_entry_t
purge	lob/lob0purge.cc	/^void purge(DeleteContext *ctx, dict_index_t *index, trx_id_t trxid,$/;"	f	namespace:lob
purge	lob/zlob0index.cc	/^void z_index_entry_t::purge(dict_index_t *index, z_first_page_t &first) {$/;"	f	class:lob::z_index_entry_t
purge	log/log0test.cc	/^void Log_test::purge(lsn_t max_dirty_page_age) {$/;"	f	class:Log_test
purge_iter_t	include/trx0purge.h	/^  purge_iter_t() : trx_no(), undo_no(), undo_rseg_space(SPACE_UNKNOWN) {$/;"	f	struct:purge_iter_t
purge_iter_t	include/trx0purge.h	/^struct purge_iter_t {$/;"	s
purge_node_t	include/row0purge.h	/^struct purge_node_t {$/;"	s
purge_pq_t	include/trx0types.h	/^    purge_pq_t;$/;"	t
purge_queue	include/trx0purge.h	/^  purge_pq_t *purge_queue;$/;"	m	struct:trx_purge_t
purge_state_t	include/trx0purge.h	/^enum purge_state_t {$/;"	g
purge_sys	trx/trx0purge.cc	/^trx_purge_t *purge_sys = nullptr;$/;"	v
purge_sys_pq_mutex_key	sync/sync0sync.cc	/^mysql_pfs_key_t purge_sys_pq_mutex_key;$/;"	v
purge_sys_trx	include/trx0trx.h	/^  bool purge_sys_trx;$/;"	m	struct:trx_t
purge_version	lob/lob0index.cc	/^fil_addr_t index_entry_t::purge_version(dict_index_t *index, trx_id_t trxid,$/;"	f	class:lob::index_entry_t
purge_version	lob/zlob0index.cc	/^fil_addr_t z_index_entry_t::purge_version(dict_index_t *index, trx_id_t trxid,$/;"	f	class:lob::z_index_entry_t
purpose	include/fil0fil.h	/^  fil_type_t purpose;$/;"	m	struct:fil_space_t
purpose	include/srv0tmp.h	/^  enum tbsp_purpose purpose() const { return (m_purpose); }$/;"	f	class:ibt::Tablespace
push	include/dyn0buf.h	/^    Type push(ib_uint32_t size) {$/;"	f	class:dyn_buf_t::block_t
push	include/dyn0buf.h	/^  Type push(ib_uint32_t size) {$/;"	f	class:dyn_buf_t
push	include/dyn0buf.h	/^  void push(const byte *ptr, ib_uint32_t len) {$/;"	f	class:dyn_buf_t
push_back	include/dyn0buf.h	/^  void push_back(block_t *block) {$/;"	f	class:dyn_buf_t
push_back	include/lob0impl.h	/^  void push_back(flst_base_node_t *bnode) {$/;"	f	struct:lob::z_frag_entry_t
push_back	include/lob0impl.h	/^  void push_back(plist_node_t &node) {$/;"	f	struct:lob::plist_base_node_t
push_back	include/lob0index.h	/^  void push_back(flst_base_node_t *bnode) {$/;"	f	struct:lob::index_entry_t
push_back	include/lob0undo.h	/^  void push_back(undo_data_t &u1) {$/;"	f	struct:lob::undo_seq_t
push_back	include/trx0types.h	/^  void push_back(trx_rseg_t *rseg) { m_rsegs.push_back(rseg); }$/;"	f	class:Rsegs
push_back	include/trx0types.h	/^  void push_back(trx_rseg_t *rseg) { m_rsegs.push_back(rseg); }$/;"	f	class:TrxUndoRsegs
push_back	include/zlob0index.h	/^  void push_back(flst_base_node_t *bnode) {$/;"	f	struct:lob::z_index_entry_t
push_back	read/read0read.cc	/^void ReadView::ids_t::push_back(value_type value) {$/;"	f	class:ReadView::ids_t
push_front	include/lob0impl.h	/^  void push_front(flst_base_node_t *bnode) {$/;"	f	struct:lob::z_frag_entry_t
push_front	include/lob0impl.h	/^  void push_front(plist_node_t &node) {$/;"	f	struct:lob::plist_base_node_t
push_front	include/zlob0index.h	/^  void push_front(flst_base_node_t *bnode) {$/;"	f	struct:lob::z_index_entry_t
push_lob_diff	include/row0upd.h	/^  void push_lob_diff(const Lob_diff &lob_diff) {$/;"	f	struct:upd_field_t
put	include/ut0pool.h	/^  void put(Element *elem) {$/;"	f	struct:Pool
put_nth_field	trx/trx0i_s.cc	/^static ulint put_nth_field($/;"	f	file:
q_proc	api/api0api.cc	/^  ib_qry_proc_t q_proc; \/*!< Query processing info *\/$/;"	m	struct:ib_cursor_t	file:
que0que_h	include/que0que.h	34;"	d
que0types_h	include/que0types.h	34;"	d
que_close	que/que0que.cc	/^void que_close(void) { \/* No op *\/$/;"	f
que_common_t	include/que0types.h	/^struct que_common_t {$/;"	s
que_cur_t	include/que0que.h	/^enum que_cur_t { QUE_CUR_NOT_DEFINED, QUE_CUR_START, QUE_CUR_END };$/;"	g
que_eval_sql	que/que0que.cc	/^dberr_t que_eval_sql(pars_info_t *info, \/*!< in: info struct, or NULL *\/$/;"	f
que_fork_create	que/que0que.cc	/^que_fork_t *que_fork_create($/;"	f
que_fork_scheduler_round_robin	que/que0que.cc	/^que_thr_t *que_fork_scheduler_round_robin($/;"	f
que_fork_start_command	que/que0que.cc	/^que_thr_t *que_fork_start_command(que_fork_t *fork) \/*!< in: a query fork *\/$/;"	f
que_fork_t	include/que0que.h	/^struct que_fork_t {$/;"	s
que_graph_free	que/que0que.cc	/^void que_graph_free(que_t *graph) \/*!< in: query graph; we assume that the$/;"	f
que_graph_free_recursive	que/que0que.cc	/^void que_graph_free_recursive(que_node_t *node) \/*!< in: query graph node *\/$/;"	f
que_graph_free_stat_list	que/que0que.cc	/^static void que_graph_free_stat_list($/;"	f	file:
que_init	que/que0que.cc	/^void que_init(void) { \/* No op *\/$/;"	f
que_node_get_containing_loop_node	que/que0que.cc	/^que_node_t *que_node_get_containing_loop_node(que_node_t *node) \/*!< in: node *\/$/;"	f
que_node_get_like_node	eval/eval0eval.cc	/^que_node_t *que_node_get_like_node($/;"	f
que_node_t	include/que0types.h	/^typedef void que_node_t;$/;"	t
que_node_type_string	que/que0que.cc	/^static MY_ATTRIBUTE((warn_unused_result)) const char *que_node_type_string($/;"	f
que_run_threads	que/que0que.cc	/^void que_run_threads(que_thr_t *thr) \/*!< in: query thread *\/$/;"	f
que_run_threads_low	que/que0que.cc	/^static void que_run_threads_low(que_thr_t *thr) \/*!< in: query thread *\/$/;"	f	file:
que_state	include/trx0trx.h	/^  trx_que_t que_state; \/*!< valid when trx->state$/;"	m	struct:trx_lock_t
que_t	include/que0types.h	/^typedef struct que_fork_t que_t;$/;"	t	typeref:struct:que_fork_t
que_thr_create	que/que0que.cc	/^que_thr_t *que_thr_create(que_fork_t *parent, mem_heap_t *heap,$/;"	f
que_thr_dec_refer_count	que/que0que.cc	/^static void que_thr_dec_refer_count($/;"	f	file:
que_thr_end_lock_wait	que/que0que.cc	/^que_thr_t *que_thr_end_lock_wait(trx_t *trx) \/*!< in: transaction with que_state$/;"	f
que_thr_init_command	que/que0que.cc	/^void que_thr_init_command(que_thr_t *thr) \/*!< in: query thread *\/$/;"	f
que_thr_lock_t	include/que0que.h	/^enum que_thr_lock_t {$/;"	g
que_thr_move_to_run_state	que/que0que.cc	/^static void que_thr_move_to_run_state($/;"	f	file:
que_thr_move_to_run_state_for_mysql	que/que0que.cc	/^void que_thr_move_to_run_state_for_mysql($/;"	f
que_thr_node_step	que/que0que.cc	/^static que_thr_t *que_thr_node_step($/;"	f	file:
que_thr_state_t	include/que0que.h	/^enum que_thr_state_t {$/;"	g
que_thr_step	que/que0que.cc	/^que_thr_t *que_thr_step(que_thr_t *thr) \/*!< in: query thread *\/$/;"	f
que_thr_stop	que/que0que.cc	/^bool que_thr_stop(que_thr_t *thr) {$/;"	f
que_thr_stop_for_mysql	que/que0que.cc	/^void que_thr_stop_for_mysql(que_thr_t *thr) \/*!< in: query thread *\/$/;"	f
que_thr_stop_for_mysql_no_error	que/que0que.cc	/^void que_thr_stop_for_mysql_no_error(que_thr_t *thr, trx_t *trx) {$/;"	f
que_thr_t	include/que0que.h	/^struct que_thr_t {$/;"	s
query	fts/fts0pars.y	/^query	: expr_lst	{$/;"	l
query	include/trx0purge.h	/^  que_t *query;$/;"	m	struct:trx_purge_t
query_graph	include/pars0sym.h	/^  que_t *query_graph;$/;"	m	struct:sym_tab_t
query_heap	api/api0api.cc	/^  mem_heap_t *query_heap; \/*!< Heap to use for query graphs *\/$/;"	m	struct:ib_cursor_t	file:
queue	include/que0que.h	/^  queue;                    \/*!< list of runnable thread nodes in$/;"	m	struct:que_thr_t
quiesce	include/dict0mem.h	/^  ib_quiesce_t quiesce;$/;"	m	struct:dict_table_t
quoted	pars/lexyy.cc	960;"	d	file:
r_rec	include/gis0type.h	/^  rec_t *r_rec; \/*!< matched record *\/$/;"	m	struct:rtr_rec
rank	include/fts0fts.h	/^  fts_rank_t rank; \/*!< Rank is between 0 .. 1 *\/$/;"	m	struct:fts_ranking_t
rankings_by_id	include/fts0fts.h	/^  ib_rbt_t *rankings_by_id;   \/*!< RB tree of type fts_ranking_t$/;"	m	struct:fts_result_t
rankings_by_rank	include/fts0fts.h	/^  ib_rbt_t *rankings_by_rank; \/*!< RB tree of type fts_ranking_t$/;"	m	struct:fts_result_t
rbt_add_node	ut/ut0rbt.cc	/^const ib_rbt_node_t *rbt_add_node(ib_rbt_t *tree,         \/*!< in: rb tree *\/$/;"	f
rbt_balance_left	ut/ut0rbt.cc	/^static ib_rbt_node_t *rbt_balance_left($/;"	f	file:
rbt_balance_right	ut/ut0rbt.cc	/^static ib_rbt_node_t *rbt_balance_right($/;"	f	file:
rbt_balance_tree	ut/ut0rbt.cc	/^static void rbt_balance_tree($/;"	f	file:
rbt_check_ordering	ut/ut0rbt.cc	/^static ibool rbt_check_ordering($/;"	f	file:
rbt_compare	include/ut0rbt.h	112;"	d
rbt_count_black_nodes	ut/ut0rbt.cc	/^static ibool rbt_count_black_nodes($/;"	f	file:
rbt_create	ut/ut0rbt.cc	/^ib_rbt_t *rbt_create(size_t sizeof_value,    \/*!< in: sizeof data item *\/$/;"	f
rbt_create_arg_cmp	ut/ut0rbt.cc	/^ib_rbt_t *rbt_create_arg_cmp($/;"	f
rbt_delete	ut/ut0rbt.cc	/^ibool rbt_delete(ib_rbt_t *tree,  \/*!< in: rb tree *\/$/;"	f
rbt_detach_node	ut/ut0rbt.cc	/^static ib_rbt_node_t *rbt_detach_node($/;"	f	file:
rbt_eject_node	ut/ut0rbt.cc	/^static void rbt_eject_node(ib_rbt_node_t *eject, \/*!< in: node to eject *\/$/;"	f	file:
rbt_empty	include/ut0rbt.h	106;"	d
rbt_find_predecessor	ut/ut0rbt.cc	/^static ib_rbt_node_t *rbt_find_predecessor($/;"	f	file:
rbt_find_successor	ut/ut0rbt.cc	/^static ib_rbt_node_t *rbt_find_successor($/;"	f	file:
rbt_first	ut/ut0rbt.cc	/^const ib_rbt_node_t *rbt_first($/;"	f
rbt_free	ut/ut0rbt.cc	/^void rbt_free(ib_rbt_t *tree) \/*!< in: rb tree to free *\/$/;"	f
rbt_free_node	ut/ut0rbt.cc	/^static void rbt_free_node(ib_rbt_node_t *node, \/*!< in: node to free *\/$/;"	f	file:
rbt_insert	ut/ut0rbt.cc	/^const ib_rbt_node_t *rbt_insert($/;"	f
rbt_last	ut/ut0rbt.cc	/^const ib_rbt_node_t *rbt_last(const ib_rbt_t *tree) \/*!< in: rb tree *\/$/;"	f
rbt_lookup	ut/ut0rbt.cc	/^static const ib_rbt_node_t *rbt_lookup($/;"	f	file:
rbt_merge_uniq	ut/ut0rbt.cc	/^ulint rbt_merge_uniq(ib_rbt_t *dst,       \/*!< in: dst rb tree *\/$/;"	f
rbt_next	ut/ut0rbt.cc	/^const ib_rbt_node_t *rbt_next($/;"	f
rbt_prev	ut/ut0rbt.cc	/^const ib_rbt_node_t *rbt_prev($/;"	f
rbt_remove_node	ut/ut0rbt.cc	/^ib_rbt_node_t *rbt_remove_node($/;"	f
rbt_remove_node_and_rebalance	ut/ut0rbt.cc	/^static void rbt_remove_node_and_rebalance($/;"	f	file:
rbt_replace_node	ut/ut0rbt.cc	/^static void rbt_replace_node($/;"	f	file:
rbt_rotate_left	ut/ut0rbt.cc	/^static void rbt_rotate_left($/;"	f	file:
rbt_rotate_right	ut/ut0rbt.cc	/^static void rbt_rotate_right($/;"	f	file:
rbt_search	ut/ut0rbt.cc	/^int rbt_search(const ib_rbt_t *tree,   \/*!< in: rb tree *\/$/;"	f
rbt_search_cmp	ut/ut0rbt.cc	/^int rbt_search_cmp(const ib_rbt_t *tree,   \/*!< in: rb tree *\/$/;"	f
rbt_size	include/ut0rbt.h	103;"	d
rbt_tree_add_child	ut/ut0rbt.cc	/^static ib_rbt_node_t *rbt_tree_add_child(const ib_rbt_t *tree,$/;"	f	file:
rbt_tree_insert	ut/ut0rbt.cc	/^static ib_rbt_node_t *rbt_tree_insert(ib_rbt_t *tree, const void *key,$/;"	f	file:
rbt_validate	ut/ut0rbt.cc	/^ibool rbt_validate(const ib_rbt_t *tree) \/*!< in: RB tree to validate *\/$/;"	f
rbt_value	include/ut0rbt.h	109;"	d
read	arch/arch0arch.cc	/^dberr_t Arch_File_Ctx::read(byte *to_buffer, uint64_t offset, uint size) {$/;"	f	class:Arch_File_Ctx
read	arch/arch0page.cc	/^void Arch_Block::read(Arch_Group *group, uint64_t offset) {$/;"	f	class:Arch_Block
read	data/data0data.cc	/^const byte *Multi_value_logger::read(const byte *ptr, dfield_t *field,$/;"	f	class:Multi_value_logger
read	dict/dict0dict.cc	/^ulint AutoIncPersister::read(PersistentTableMetadata &metadata,$/;"	f	class:AutoIncPersister
read	dict/dict0dict.cc	/^ulint CorruptedIndexPersister::read(PersistentTableMetadata &metadata,$/;"	f	class:CorruptedIndexPersister
read	include/trx0rec.h	/^  const byte *read(const byte *ptr) {$/;"	f	struct:type_cmpl_t
read	lob/lob0first.cc	/^ulint first_page_t::read(ulint offset, byte *ptr, ulint want) {$/;"	f	class:lob::first_page_t
read	lob/lob0impl.cc	/^ulint read(ReadContext *ctx, ref_t ref, ulint offset, ulint len, byte *buf) {$/;"	f	namespace:lob
read	lob/lob0index.cc	/^void index_entry_t::read(index_entry_mem_t &entry_mem) const {$/;"	f	class:lob::index_entry_t
read	lob/lob0pages.cc	/^ulint data_page_t::read(ulint offset, byte *ptr, ulint want) {$/;"	f	class:lob::data_page_t
read	lob/zlob0index.cc	/^void z_index_entry_t::read(z_index_entry_mem_t &entry_mem) const {$/;"	f	class:lob::z_index_entry_t
read	os/os0file.cc	/^  void read(Slot *slot) {$/;"	f	class:SimulatedAIOHandler	file:
read0read_h	include/read0read.h	34;"	d
read0types_h	include/read0types.h	34;"	d
read_ahead_area	include/buf0buf.h	/^  page_no_t read_ahead_area;$/;"	m	struct:Cache_hint::buf_pool_t
read_and_commit	include/zlob0index.h	/^  void read_and_commit(z_index_entry_mem_t &entry_mem) {$/;"	f	struct:lob::z_index_entry_t
read_arg	include/fts0types.h	/^  void *read_arg; \/*!< Arg for the sql_callback *\/$/;"	m	struct:fts_fetch_t
read_binlog_position	trx/trx0sys.cc	/^static bool read_binlog_position(const byte *binlog_buf, const char *&file_name,$/;"	f	file:
read_blobref	include/lob0lob.h	/^  void read_blobref() {$/;"	f	struct:lob::ReadContext
read_blocks	arch/arch0recv.cc	/^dberr_t Arch_Dblwr_Ctx::read_blocks() {$/;"	f	class:Arch_Dblwr_Ctx
read_data	arch/arch0page.cc	/^int Arch_Group::read_data(Arch_Page_Pos cur_pos, byte *buff, uint buff_len) {$/;"	f	class:Arch_Group
read_first_page	fsp/fsp0file.cc	/^dberr_t Datafile::read_first_page(bool read_only_mode) {$/;"	f	class:Datafile
read_from_file	arch/arch0page.cc	/^int Arch_Group::read_from_file(Arch_Page_Pos *read_pos, uint read_len,$/;"	f	class:Arch_Group
read_group_dirs	arch/arch0recv.cc	/^void Arch_Page_Sys::Recv::read_group_dirs(const std::string file_path) {$/;"	f	class:Arch_Page_Sys::Recv
read_group_files	arch/arch0recv.cc	/^void Arch_Page_Sys::Recv::read_group_files(const std::string dir_path,$/;"	f	class:Arch_Page_Sys::Recv
read_just_key	include/row0mysql.h	/^  unsigned read_just_key : 1;              \/*!< set to 1 when MySQL calls$/;"	m	struct:row_prebuilt_t
read_length	include/row0upd.h	/^  const byte *read_length(const byte *undo_ptr) {$/;"	f	struct:Lob_diff
read_log_len	data/data0data.cc	/^uint32_t Multi_value_logger::read_log_len(const byte *ptr) {$/;"	f	class:Multi_value_logger
read_lsn_and_check_flags	fsp/fsp0sysspace.cc	/^dberr_t SysTablespace::read_lsn_and_check_flags(lsn_t *flushed_lsn) {$/;"	f	class:SysTablespace
read_nodes_graph	fts/fts0opt.cc	/^  que_t *read_nodes_graph;$/;"	m	struct:fts_optimize_graph_t	file:
read_nodes_graph	fts/fts0que.cc	/^  que_t *read_nodes_graph;$/;"	m	struct:fts_query_t	file:
read_not_full_n_used	fsp/fsp0fsp.cc	/^uint32_t File_segment_inode::read_not_full_n_used() const {$/;"	f	class:File_segment_inode
read_offset	include/row0upd.h	/^  const byte *read_offset(const byte *undo_ptr) {$/;"	f	struct:Lob_diff
read_only	include/trx0trx.h	/^  bool read_only;        \/*!< true if transaction is flagged$/;"	m	struct:trx_t
read_page	buf/buf0buf.cc	/^void Buf_fetch<T>::read_page() {$/;"	f	class:Buf_fetch
read_range_first	handler/ha_innodb.cc	/^int ha_innobase::read_range_first(const key_range *start_key,$/;"	f	class:ha_innobase
read_range_first_in_part	handler/ha_innopart.cc	/^int ha_innopart::read_range_first_in_part(uint part, uchar *record,$/;"	f	class:ha_innopart
read_range_next	handler/ha_innodb.cc	/^int ha_innobase::read_range_next() {$/;"	f	class:ha_innobase
read_range_next_in_part	handler/ha_innopart.cc	/^int ha_innopart::read_range_next_in_part(uint part, uchar *record) {$/;"	f	class:ha_innopart
read_record	include/fts0types.h	/^  fts_sql_callback read_record; \/*!< Callback for reading index$/;"	m	struct:fts_fetch_t
read_time	handler/ha_innodb.cc	/^double ha_innobase::read_time($/;"	f	class:ha_innobase
read_view	include/row0sel.h	/^  ReadView *read_view;       \/*!< if the query is a non-locking$/;"	m	struct:sel_node_t
read_view	include/trx0trx.h	/^  ReadView *read_view; \/*!< consistent read view used in the$/;"	m	struct:trx_t
read_write	include/trx0trx.h	/^  bool read_write;             \/*!< if read and write operation *\/$/;"	m	struct:trx_t
reader_thread	include/sync0rw.h	/^  Atomic_xor_of_thread_id reader_thread;$/;"	m	struct:rw_lock_t
realloc	include/fts0ast.h	43;"	d
realloc	pars/lexyy.cc	916;"	d	file:
reallocate	include/ut0new.h	/^  pointer reallocate(void *ptr, size_type n_elements, PSI_memory_key key) {$/;"	f	class:ut_allocator
rebind	include/mem0mem.h	/^  struct rebind {$/;"	s	class:mem_heap_allocator
rebind	include/ut0new.h	/^  struct rebind {$/;"	s	class:ut_allocator
rebuild	dict/dict0dd.cc	/^void rebuild(std::string &dict_name) {$/;"	f	namespace:dict_name
rebuild	include/row0merge.h	/^  bool rebuild;              \/*!< whether the table is rebuilt *\/$/;"	m	struct:index_def_t
rebuild_space	dict/dict0dd.cc	/^void rebuild_space(const std::string &dict_name, std::string &space_name) {$/;"	f	namespace:dict_name
rec	include/dict0mem.h	/^  rec_t *rec;$/;"	m	class:last_ops_cur_t
rec	include/lob0lob.h	/^  rec_t *rec() const {$/;"	f	class:lob::BtrContext
rec_1_get_field_end_info	rem/rec.h	/^    rec_1_get_field_end_info(const rec_t *rec, \/*!< in: record *\/$/;"	f
rec_2_get_field_end_info	rem/rec.h	/^    rec_2_get_field_end_info(const rec_t *rec, \/*!< in: record *\/$/;"	f
rec_block_fix	include/lob0lob.h	/^  void rec_block_fix() {$/;"	f	class:lob::BtrContext
rec_block_unfix	include/lob0lob.h	/^  void rec_block_unfix() {$/;"	f	class:lob::BtrContext
rec_buf	include/gis0type.h	/^  byte rec_buf[UNIV_PAGE_SIZE_MAX * 2];$/;"	m	struct:matched_rec
rec_cache	include/dict0mem.h	/^  rec_cache_t rec_cache;$/;"	m	struct:dict_index_t
rec_cache_t	include/dict0mem.h	/^  rec_cache_t()$/;"	f	class:rec_cache_t
rec_cache_t	include/dict0mem.h	/^class rec_cache_t {$/;"	c
rec_cached	include/trx0trx.h	/^  ulint rec_cached;$/;"	m	struct:trx_lock_t
rec_check_lobref_space_id	lob/lob0lob.cc	/^bool rec_check_lobref_space_id(dict_index_t *index, const rec_t *rec,$/;"	f	namespace:lob
rec_convert_dtuple_to_rec	rem/rem0rec.cc	/^rec_t *rec_convert_dtuple_to_rec($/;"	f
rec_convert_dtuple_to_rec_comp	rem/rem0rec.cc	/^bool rec_convert_dtuple_to_rec_comp(rec_t *rec, const dict_index_t *index,$/;"	f
rec_convert_dtuple_to_rec_new	rem/rem0rec.cc	/^static rec_t *rec_convert_dtuple_to_rec_new($/;"	f	file:
rec_convert_dtuple_to_rec_old	rem/rem0rec.cc	/^static rec_t *rec_convert_dtuple_to_rec_old($/;"	f	file:
rec_convert_dtuple_to_temp	rem/rem0rec.cc	/^void rec_convert_dtuple_to_temp($/;"	f
rec_copy_prefix_to_buf	rem/rem0rec.cc	/^rec_t *rec_copy_prefix_to_buf(const rec_t *rec, const dict_index_t *index,$/;"	f
rec_copy_prefix_to_buf_old	rem/rem0rec.cc	/^static rec_t *rec_copy_prefix_to_buf_old($/;"	f	file:
rec_copy_prefix_to_dtuple	rem/rem0rec.cc	/^void rec_copy_prefix_to_dtuple($/;"	f
rec_field_no	include/row0mysql.h	/^  ulint rec_field_no;           \/*!< field number of the column in an$/;"	m	struct:mysql_row_templ_t
rec_format_enum	include/rem0types.h	/^enum rec_format_enum {$/;"	g
rec_format_t	include/rem0types.h	/^typedef enum rec_format_enum rec_format_t;$/;"	t	typeref:enum:rec_format_enum
rec_frame	include/lob0lob.h	/^  const page_t *rec_frame() const {$/;"	f	class:lob::BtrContext
rec_get_1byte_offs_flag	rem/rec.h	/^    rec_get_1byte_offs_flag(const rec_t *rec) \/*!< in: physical record *\/$/;"	f
rec_get_bit_field_1	rem/rec.h	/^ulint rec_get_bit_field_1($/;"	f
rec_get_bit_field_2	rem/rec.h	/^uint16_t rec_get_bit_field_2($/;"	f
rec_get_converted_size_comp	rem/rem0rec.cc	/^ulint rec_get_converted_size_comp($/;"	f
rec_get_converted_size_comp_prefix	rem/rem0rec.cc	/^ulint rec_get_converted_size_comp_prefix($/;"	f
rec_get_converted_size_comp_prefix_low	rem/rem0rec.cc	/^    rec_get_converted_size_comp_prefix_low($/;"	f
rec_get_converted_size_temp	rem/rem0rec.cc	/^ulint rec_get_converted_size_temp($/;"	f
rec_get_end	include/rem0rec.h	558;"	d
rec_get_info_bits	rem/rec.h	/^ulint rec_get_info_bits(const rec_t *rec, ulint comp) {$/;"	f
rec_get_info_bits_temp	rem/rec.h	/^ulint rec_get_info_bits_temp(const rec_t *rec) {$/;"	f
rec_get_instant_flag_new	rem/rec.h	/^bool rec_get_instant_flag_new(const rec_t *rec) {$/;"	f
rec_get_instant_flag_new_temp	rem/rec.h	/^bool rec_get_instant_flag_new_temp(const rec_t *rec) {$/;"	f
rec_get_instant_offset	rem/rec.h	/^uint64_t rec_get_instant_offset(const dict_index_t *index, ulint n,$/;"	f
rec_get_n_extern_new	rem/rem0rec.cc	/^ulint rec_get_n_extern_new($/;"	f
rec_get_n_fields	rem/rec.h	/^ulint rec_get_n_fields(const rec_t *rec,          \/*!< in: physical record *\/$/;"	f
rec_get_n_fields_instant	rem/rec.h	/^uint32_t rec_get_n_fields_instant(const rec_t *rec, const ulint extra_bytes,$/;"	f
rec_get_n_fields_old	rem/rec.h	/^    rec_get_n_fields_old(const rec_t *rec, const dict_index_t *index) {$/;"	f
rec_get_n_fields_old_raw	rem/rec.h	/^    rec_get_n_fields_old_raw(const rec_t *rec) \/*!< in: physical record *\/$/;"	f
rec_get_nth_field	include/rem0rec.h	/^inline byte *rec_get_nth_field(const rec_t *rec, const ulint *offsets, ulint n,$/;"	f
rec_get_nth_field	include/rem0rec.h	328;"	d
rec_get_nth_field_offs_old	rem/rem0rec.cc	/^ulint rec_get_nth_field_offs_old(const rec_t *rec, \/*!< in: record *\/$/;"	f
rec_get_nth_field_old	include/rem0rec.h	285;"	d
rec_get_offsets	include/rem0rec.h	257;"	d
rec_get_offsets	include/rem0rec.h	260;"	d
rec_get_offsets_func	rem/rec.cc	/^ulint *rec_get_offsets_func($/;"	f
rec_get_offsets_reverse	rem/rec.cc	/^void rec_get_offsets_reverse($/;"	f
rec_get_start	include/rem0rec.h	557;"	d
rec_get_status	rem/rec.h	/^    rec_get_status(const rec_t *rec) \/*!< in: physical record *\/$/;"	f
rec_get_trx_id	rem/rem0rec.cc	/^trx_id_t rec_get_trx_id(const rec_t *rec,          \/*!< in: record *\/$/;"	f
rec_hash	include/lock0lock.h	/^  hash_table_t *rec_hash;$/;"	m	struct:lock_sys_t
rec_index_print	include/rem0rec.h	/^  rec_index_print(const rec_t *rec, const dict_index_t *index)$/;"	f	struct:rec_index_print
rec_index_print	include/rem0rec.h	/^struct rec_index_print {$/;"	s
rec_info_bits_valid	rem/rec.h	/^inline bool rec_info_bits_valid(ulint bits) {$/;"	f
rec_init_null_and_len_comp	rem/rec.h	/^uint16_t rec_init_null_and_len_comp(const rec_t *rec, const dict_index_t *index,$/;"	f
rec_init_null_and_len_temp	rem/rec.h	/^uint16_t rec_init_null_and_len_temp(const rec_t *rec, const dict_index_t *index,$/;"	f
rec_init_offsets	rem/rec.cc	/^void rec_init_offsets(const rec_t *rec,          \/*!< in: physical record *\/$/;"	f
rec_init_offsets_comp_ordinary	rem/rec.h	/^void rec_init_offsets_comp_ordinary($/;"	f
rec_init_offsets_temp	rem/rem0rec.cc	/^void rec_init_offsets_temp($/;"	f
rec_len	include/dict0mem.h	/^  ulint rec_len;$/;"	m	struct:dict_vcol_templ_t
rec_list	include/log0recv.h	/^  List rec_list;$/;"	m	struct:recv_addr_t
rec_list	include/log0recv.h	/^  Node rec_list;$/;"	m	struct:recv_t
rec_lock	include/lock0priv.h	/^    lock_rec_t rec_lock;$/;"	m	union:lock_t::__anon9
rec_n_fields_is_sane	rem/rec.h	/^bool rec_n_fields_is_sane(dict_index_t *index, const rec_t *rec,$/;"	f
rec_offs_base	rem/rec.h	173;"	d
rec_offs_cmp	rem/rec.cc	/^bool rec_offs_cmp(ulint *offsets1, ulint *offsets2) {$/;"	f
rec_offs_get_n_alloc	rem/rec.h	/^UNIV_INLINE MY_ATTRIBUTE((warn_unused_result)) ulint rec_offs_get_n_alloc($/;"	f
rec_offs_init	include/rem0rec.h	441;"	d
rec_offs_make_nth_extern	rem/rem0rec.cc	/^void rec_offs_make_nth_extern(ulint *offsets, const ulint n) {$/;"	f
rec_offs_make_valid	rem/rec.h	/^void rec_offs_make_valid($/;"	f
rec_offs_make_valid	rem/rec.h	579;"	d
rec_offs_n_fields	rem/rec.h	/^UNIV_INLINE MY_ATTRIBUTE((warn_unused_result)) ulint rec_offs_n_fields($/;"	f
rec_offs_print	rem/rec.cc	/^std::ostream &rec_offs_print(std::ostream &out, const ulint *offsets) {$/;"	f
rec_offs_set_n_alloc	rem/rec.h	/^void rec_offs_set_n_alloc(ulint *offsets, \/*!< out: array for rec_get_offsets(),$/;"	f
rec_offs_set_n_fields	rem/rec.h	/^void rec_offs_set_n_fields(ulint *offsets, \/*!< in\/out: array returned by$/;"	f
rec_offs_validate	include/lob0lob.h	/^  bool rec_offs_validate() const {$/;"	f	class:lob::BtrContext
rec_offs_validate	rem/rec.h	/^UNIV_INLINE MY_ATTRIBUTE((warn_unused_result)) ibool rec_offs_validate($/;"	f
rec_offsets_print	include/rem0rec.h	/^  rec_offsets_print(const rec_t *rec, const ulint *offsets)$/;"	f	struct:rec_offsets_print
rec_offsets_print	include/rem0rec.h	/^struct rec_offsets_print {$/;"	s
rec_pool	include/trx0trx.h	/^  lock_pool_t rec_pool;$/;"	m	struct:trx_lock_t
rec_print	rem/rem0rec.cc	/^void rec_print(FILE *file, const rec_t *rec, const dict_index_t *index) {$/;"	f
rec_print	rem/rem0rec.cc	/^void rec_print(std::ostream &o, const rec_t *rec, ulint info,$/;"	f
rec_print_comp	rem/rem0rec.cc	/^static void rec_print_comp($/;"	f	file:
rec_print_mbr_old	rem/rem0rec.cc	/^static void rec_print_mbr_old(FILE *file,       \/*!< in: file where to print *\/$/;"	f	file:
rec_print_mbr_rec	rem/rem0rec.cc	/^void rec_print_mbr_rec(FILE *file, const rec_t *rec, const ulint *offsets) {$/;"	f
rec_print_new	rem/rem0rec.cc	/^void rec_print_new($/;"	f
rec_print_old	rem/rem0rec.cc	/^void rec_print_old(FILE *file, const rec_t *rec) {$/;"	f
rec_printer	include/rem0rec.h	/^  rec_printer(const dfield_t *field, ulint n) : std::ostringstream() {$/;"	f	class:rec_printer
rec_printer	include/rem0rec.h	/^  rec_printer(const dtuple_t *tuple) : std::ostringstream() {$/;"	f	class:rec_printer
rec_printer	include/rem0rec.h	/^  rec_printer(const rec_t *rec, const ulint *offsets) : std::ostringstream() {$/;"	f	class:rec_printer
rec_printer	include/rem0rec.h	/^  rec_printer(const rec_t *rec, ulint info, const ulint *offsets)$/;"	f	class:rec_printer
rec_printer	include/rem0rec.h	/^class rec_printer : public std::ostringstream {$/;"	c
rec_queue_latch_and_validate	lock/lock0lock.cc	/^static void rec_queue_latch_and_validate(const buf_block_t *block,$/;"	f	namespace:locksys
rec_queue_validate_latched	lock/lock0lock.cc	/^static void rec_queue_validate_latched(const buf_block_t *block,$/;"	f	namespace:locksys
rec_set_nth_field_null_bit	rem/rem0rec.cc	/^void rec_set_nth_field_null_bit(rec_t *rec, \/*!< in: record *\/$/;"	f
rec_set_nth_field_sql_null	rem/rem0rec.cc	/^void rec_set_nth_field_sql_null(rec_t *rec, \/*!< in: record *\/$/;"	f
rec_size	include/dict0mem.h	/^  ulint rec_size;$/;"	m	class:rec_cache_t
rec_t	include/rem0types.h	/^typedef byte rec_t;$/;"	t
rec_t	include/row0purge.h	/^  struct rec_t {$/;"	s	struct:purge_node_t
rec_type	include/row0purge.h	/^  ulint rec_type;$/;"	m	struct:purge_node_t
rec_type	include/row0undo.h	/^  ulint rec_type;           \/*!< undo log record type: TRX_UNDO_INSERT_REC,$/;"	m	struct:undo_node_t
rec_validate	rem/rem0rec.cc	/^ibool rec_validate($/;"	f
rec_validate_old	rem/rem0rec.cc	/^static ibool rec_validate_old(const rec_t *rec) \/*!< in: physical record *\/$/;"	f	file:
recalc	include/lob0lob.h	/^  void recalc() {$/;"	f	class:lob::BtrContext
recalc_pool	dict/dict0stats_bg.cc	/^static recalc_pool_t *recalc_pool;$/;"	v	file:
recalc_pool_allocator_t	dict/dict0stats_bg.cc	/^typedef ut_allocator<table_id_t> recalc_pool_allocator_t;$/;"	t	file:
recalc_pool_iterator_t	dict/dict0stats_bg.cc	/^typedef recalc_pool_t::iterator recalc_pool_iterator_t;$/;"	t	file:
recalc_pool_mutex	dict/dict0stats_bg.cc	/^static ib_mutex_t recalc_pool_mutex;$/;"	v	file:
recalc_pool_mutex_key	sync/sync0sync.cc	/^mysql_pfs_key_t recalc_pool_mutex_key;$/;"	v
recalc_pool_t	dict/dict0stats_bg.cc	/^typedef std::vector<table_id_t, recalc_pool_allocator_t> recalc_pool_t;$/;"	t	file:
receive_data	clone/clone0apply.cc	/^int Clone_Handle::receive_data(Clone_Task *task, uint64_t offset,$/;"	f	class:Clone_Handle
records	handler/ha_innodb.cc	/^int ha_innobase::records(ha_rows *num_rows) \/*!< out: number of rows *\/$/;"	f	class:ha_innobase
records	handler/ha_innopart.cc	/^int ha_innopart::records(ha_rows *num_rows) {$/;"	f	class:ha_innopart
records_in_range	handler/ha_innodb.cc	/^ha_rows ha_innobase::records_in_range($/;"	f	class:ha_innobase
records_in_range	handler/ha_innopart.cc	/^ha_rows ha_innopart::records_in_range(uint keynr, key_range *min_key,$/;"	f	class:ha_innopart
recover	arch/arch0recv.cc	/^dberr_t Arch_Group::recover(Arch_Recv_Group_Info *group_info,$/;"	f	class:Arch_Group
recover	arch/arch0recv.cc	/^dberr_t Arch_Page_Sys::recover() {$/;"	f	class:Arch_Page_Sys
recover	log/log0ddl.cc	/^dberr_t Log_DDL::recover() {$/;"	f	class:Log_DDL
recover_if_single	include/os0thread.h	/^  T_thing recover_if_single() {$/;"	f	class:Atomic_xor_of_things
recovered	log/log0test.cc	/^const Log_test::Pages &Log_test::recovered() const { return (m_recovered); }$/;"	f	class:Log_test
recovered_add	log/log0test.cc	/^void Log_test::recovered_add(Key key, Value value, lsn_t oldest_modification,$/;"	f	class:Log_test
recovered_lsn	include/log0recv.h	/^  lsn_t recovered_lsn;$/;"	m	struct:recv_sys_t
recovered_offset	include/log0recv.h	/^  ulint recovered_offset;$/;"	m	struct:recv_sys_t
recovered_reset	log/log0test.cc	/^void Log_test::recovered_reset(Key key, lsn_t oldest_modification,$/;"	f	class:Log_test
recovery_cleanup_if_required	arch/arch0recv.cc	/^dberr_t Arch_Group::recovery_cleanup_if_required(uint &num_files,$/;"	f	class:Arch_Group
recovery_fetch_info	include/arch0arch.h	/^  void recovery_fetch_info(Arch_Reset_File &reset_file, lsn_t &stop_lsn) {$/;"	f	class:Arch_File_Ctx
recovery_fetch_info	include/arch0arch.h	/^  void recovery_fetch_info(Arch_Reset_File &reset_file, lsn_t &stop_lsn) {$/;"	f	class:Arch_Group
recovery_parse	arch/arch0recv.cc	/^dberr_t Arch_Group::recovery_parse(Arch_Page_Pos &write_pos,$/;"	f	class:Arch_Group
recovery_read_latest_blocks	arch/arch0recv.cc	/^dberr_t Arch_Group::recovery_read_latest_blocks(byte *buf, uint64_t offset,$/;"	f	class:Arch_Group
recovery_replace_pages_from_dblwr	arch/arch0recv.cc	/^dberr_t Arch_Group::recovery_replace_pages_from_dblwr($/;"	f	class:Arch_Group
recovery_reset_print	arch/arch0recv.cc	/^void Arch_File_Ctx::recovery_reset_print(uint file_start_index) {$/;"	f	class:Arch_File_Ctx
recovery_reset_print	include/arch0arch.h	/^  void recovery_reset_print(uint file_start_index) {$/;"	f	class:Arch_Group
recs	include/row0purge.h	/^  Recs *recs;$/;"	m	struct:purge_node_t
recursive	include/sync0rw.h	/^  std::atomic<bool> recursive;$/;"	m	struct:rw_lock_t
recv	buf/buf0dblwr.cc	/^namespace recv {$/;"	n	namespace:dblwr	file:
recv	include/log0recv.h	/^namespace recv {$/;"	n	namespace:dblwr
recv_add_to_hash_table	log/log0recv.cc	/^static void recv_add_to_hash_table(mlog_id_t type, space_id_t space_id,$/;"	f	file:
recv_addr_state	include/log0recv.h	/^enum recv_addr_state {$/;"	g
recv_addr_t	include/log0recv.h	/^struct recv_addr_t {$/;"	s
recv_apply_hashed_log_recs	log/log0recv.cc	/^void recv_apply_hashed_log_recs(log_t &log, bool allow_ibuf) {$/;"	f
recv_apply_log_rec	log/log0recv.cc	/^static void recv_apply_log_rec(recv_addr_t *recv_addr) {$/;"	f	file:
recv_calc_lsn_on_data_add	log/log0recv.cc	/^lsn_t recv_calc_lsn_on_data_add(lsn_t lsn, uint64_t len) {$/;"	f
recv_check_log_header_checksum	log/log0recv.cc	/^    recv_check_log_header_checksum(const byte *buf) {$/;"	f	file:
recv_data_copy_to_buf	log/log0recv.cc	/^static void recv_data_copy_to_buf(byte *buf, recv_t *recv) {$/;"	f	file:
recv_data_t	include/log0recv.h	/^struct recv_data_t {$/;"	s
recv_encr_ts_list	log/log0recv.cc	/^std::list<space_id_t> recv_encr_ts_list;$/;"	v
recv_find_max_checkpoint	log/log0recv.cc	/^    recv_find_max_checkpoint(log_t &log, ulint *max_field) {$/;"	f
recv_get_page_map	log/log0recv.cc	/^static recv_sys_t::Space *recv_get_page_map(space_id_t space_id, bool create) {$/;"	f	file:
recv_get_rec	log/log0recv.cc	/^static recv_addr_t *recv_get_rec(space_id_t space_id, page_no_t page_no) {$/;"	f	file:
recv_heap_used	log/log0recv.cc	/^static size_t recv_heap_used()$/;"	f	file:
recv_init_crash_recovery	log/log0recv.cc	/^static void recv_init_crash_recovery() {$/;"	f	file:
recv_is_from_backup	log/log0recv.cc	/^bool recv_is_from_backup = false;$/;"	v
recv_is_making_a_backup	log/log0recv.cc	/^bool recv_is_making_a_backup = false;$/;"	v
recv_log_recover_pre_8_0_4	log/log0recv.cc	/^static dberr_t recv_log_recover_pre_8_0_4(log_t &log,$/;"	f	file:
recv_lsn_checks_on	log/log0recv.cc	/^bool recv_lsn_checks_on;$/;"	v
recv_max_page_lsn	log/log0recv.cc	/^static lsn_t recv_max_page_lsn;$/;"	v	file:
recv_multi_rec	log/log0recv.cc	/^static bool recv_multi_rec(byte *ptr, byte *end_ptr) {$/;"	f	file:
recv_mutex	log/log0recv.cc	/^meb::Mutex recv_mutex;$/;"	v
recv_n_pool_free_frames	log/log0recv.cc	/^ulint recv_n_pool_free_frames;$/;"	v
recv_needed_recovery	log/log0recv.cc	/^bool recv_needed_recovery;$/;"	v
recv_no_ibuf_operations	log/log0recv.cc	/^bool recv_no_ibuf_operations;$/;"	v
recv_page_is_brand_new	log/log0recv.cc	/^bool recv_page_is_brand_new(buf_block_t *block) {$/;"	f
recv_parse_log_rec	log/log0recv.cc	/^static ulint recv_parse_log_rec(mlog_id_t *type, byte *ptr, byte *end_ptr,$/;"	f	file:
recv_parse_log_recs	log/log0recv.cc	/^static void recv_parse_log_recs(lsn_t checkpoint_lsn) {$/;"	f	file:
recv_parse_or_apply_log_rec_body	log/log0recv.cc	/^static byte *recv_parse_or_apply_log_rec_body($/;"	f	file:
recv_previous_parsed_rec_is_multi	log/log0recv.cc	/^static ulint recv_previous_parsed_rec_is_multi;$/;"	v	file:
recv_previous_parsed_rec_offset	log/log0recv.cc	/^static ulint recv_previous_parsed_rec_offset;$/;"	v	file:
recv_previous_parsed_rec_type	log/log0recv.cc	/^static mlog_id_t recv_previous_parsed_rec_type;$/;"	v	file:
recv_read_in_area	log/log0recv.cc	/^static ulint recv_read_in_area(const page_id_t &page_id) {$/;"	f	file:
recv_read_log_seg	log/log0recv.cc	/^static void recv_read_log_seg(log_t &log, byte *buf, lsn_t start_lsn,$/;"	f	file:
recv_recover_page	include/log0recv.h	182;"	d
recv_recover_page	include/log0recv.h	97;"	d
recv_recover_page_func	log/log0recv.cc	/^void recv_recover_page_func($/;"	f
recv_recovery_begin	log/log0recv.cc	/^static void recv_recovery_begin(log_t &log, lsn_t *contiguous_lsn) {$/;"	f	file:
recv_recovery_from_checkpoint_finish	log/log0recv.cc	/^MetadataRecover *recv_recovery_from_checkpoint_finish(log_t &log,$/;"	f
recv_recovery_from_checkpoint_start	log/log0recv.cc	/^dberr_t recv_recovery_from_checkpoint_start(log_t &log, lsn_t flush_lsn) {$/;"	f
recv_recovery_on	log/log0recv.cc	/^volatile bool recv_recovery_on;$/;"	v
recv_report_corrupt_log	log/log0recv.cc	/^static bool recv_report_corrupt_log(const byte *ptr, int type, space_id_t space,$/;"	f	file:
recv_reset_buffer	log/log0recv.cc	/^static void recv_reset_buffer() {$/;"	f	file:
recv_scan_log_recs	log/log0recv.cc	/^static bool recv_scan_log_recs(log_t &log,$/;"	f	file:
recv_scan_print_counter	log/log0recv.cc	/^static ulint recv_scan_print_counter;$/;"	v	file:
recv_single_rec	log/log0recv.cc	/^static bool recv_single_rec(byte *ptr, byte *end_ptr) {$/;"	f	file:
recv_spaces	fil/fil0fil.cc	/^static MEB_recv_spaces recv_spaces;$/;"	v	file:
recv_sys	log/log0recv.cc	/^recv_sys_t *recv_sys = nullptr;$/;"	v
recv_sys_add_to_parsing_buf	log/log0recv.cc	/^static bool recv_sys_add_to_parsing_buf(const byte *log_block,$/;"	f	file:
recv_sys_close	log/log0recv.cc	/^void recv_sys_close() {$/;"	f
recv_sys_create	log/log0recv.cc	/^void recv_sys_create() {$/;"	f
recv_sys_empty_hash	log/log0recv.cc	/^static void recv_sys_empty_hash() {$/;"	f	file:
recv_sys_finish	log/log0recv.cc	/^static void recv_sys_finish() {$/;"	f	file:
recv_sys_free	log/log0recv.cc	/^void recv_sys_free() {$/;"	f
recv_sys_init	log/log0recv.cc	/^void recv_sys_init(ulint max_mem) {$/;"	f
recv_sys_mutex_key	sync/sync0sync.cc	/^mysql_pfs_key_t recv_sys_mutex_key;$/;"	v
recv_sys_resize_buf	log/log0recv.cc	/^static bool recv_sys_resize_buf() {$/;"	f	file:
recv_sys_t	include/log0recv.h	/^struct recv_sys_t {$/;"	s
recv_sys_var_init	log/log0recv.cc	/^void recv_sys_var_init() {$/;"	f
recv_t	include/log0recv.h	/^struct recv_t {$/;"	s
recv_track_changes_of_recovered_lsn	log/log0recv.cc	/^static void recv_track_changes_of_recovered_lsn() {$/;"	f	file:
recv_update_bytes_to_ignore_before_checkpoint	log/log0recv.cc	/^static bool recv_update_bytes_to_ignore_before_checkpoint($/;"	f	file:
recv_writer_is_active	log/log0recv.cc	/^static bool recv_writer_is_active() {$/;"	f	file:
recv_writer_mutex_key	sync/sync0sync.cc	/^mysql_pfs_key_t recv_writer_mutex_key;$/;"	v
recv_writer_thread	log/log0recv.cc	/^static void recv_writer_thread() {$/;"	f	file:
recv_writer_thread_key	log/log0recv.cc	/^mysql_pfs_key_t recv_writer_thread_key;$/;"	v
redo_log_archive_admin_mutex	log/log0meb.cc	/^static ib_mutex_t redo_log_archive_admin_mutex;$/;"	m	namespace:meb	file:
redo_log_archive_consumer	log/log0meb.cc	/^static void redo_log_archive_consumer() {$/;"	f	namespace:meb
redo_log_archive_consumer_thread_key	log/log0meb.cc	/^mysql_pfs_key_t redo_log_archive_consumer_thread_key;$/;"	m	namespace:meb	file:
redo_log_archive_deinit	log/log0meb.cc	/^void redo_log_archive_deinit() {$/;"	f	namespace:meb
redo_log_archive_file_key	log/log0meb.cc	/^mysql_pfs_key_t redo_log_archive_file_key;$/;"	m	namespace:meb	file:
redo_log_archive_flush	log/log0meb.cc	/^static bool redo_log_archive_flush(THD *thd) {$/;"	f	namespace:meb
redo_log_archive_init	log/log0meb.cc	/^void redo_log_archive_init() {$/;"	f	namespace:meb
redo_log_archive_is_active	log/log0meb.cc	/^bool redo_log_archive_is_active() {$/;"	f	namespace:meb
redo_log_archive_produce	log/log0meb.cc	/^void redo_log_archive_produce(const byte *write_buf, const size_t write_size) {$/;"	f	namespace:meb
redo_log_archive_session_end	log/log0meb.cc	/^void redo_log_archive_session_end(innodb_session_t *session) {$/;"	f	namespace:meb
redo_log_archive_start	log/log0meb.cc	/^static bool redo_log_archive_start(THD *thd, const char *label,$/;"	f	namespace:meb
redo_log_archive_stop	log/log0meb.cc	/^static bool redo_log_archive_stop(THD *thd) {$/;"	f	namespace:meb
redo_rotate_default_master_key	log/log0write.cc	/^void redo_rotate_default_master_key() {$/;"	f
redo_space_flush	fil/fil0fil.cc	/^void Fil_shard::redo_space_flush() {$/;"	f	class:Fil_shard
reduce_low_limit	include/read0types.h	/^  void reduce_low_limit(trx_id_t trx_no) {$/;"	f	class:ReadView
reestimate	include/ut0stage.h	/^inline void ut_stage_alter_t::reestimate() {$/;"	f	class:ut_stage_alter_t
ref	include/row0purge.h	/^  dtuple_t *ref;$/;"	m	struct:purge_node_t
ref	include/row0undo.h	/^  dtuple_t *ref;            \/*!< row reference to the next row to handle *\/$/;"	m	struct:undo_node_t
ref_count	include/btr0sea.h	/^  ulint ref_count; \/*!< Number of blocks in this index tree$/;"	m	struct:btr_search_t
ref_mem_t	include/lob0lob.h	/^struct ref_mem_t {$/;"	s	namespace:lob
ref_t	include/lob0lob.h	/^  explicit ref_t(byte *ptr) : m_ref(ptr) {}$/;"	f	struct:lob::ref_t
ref_t	include/lob0lob.h	/^struct ref_t {$/;"	s	namespace:lob
reference	include/mem0mem.h	/^  typedef T &reference;$/;"	t	class:mem_heap_allocator
reference	include/ut0new.h	/^  typedef T &reference;$/;"	t	class:ut_allocator
referenced_col_names	include/dict0mem.h	/^  const char **referenced_col_names; \/*!< names of the referenced$/;"	m	struct:dict_foreign_t
referenced_index	include/dict0mem.h	/^  dict_index_t *referenced_index;    \/*!< referenced index *\/$/;"	m	struct:dict_foreign_t
referenced_list	include/dict0mem.h	/^  UT_LIST_BASE_NODE_T(dict_foreign_t) referenced_list;$/;"	m	struct:dict_table_t
referenced_set	include/dict0mem.h	/^  dict_foreign_set referenced_set;$/;"	m	struct:dict_table_t
referenced_table	include/dict0mem.h	/^  dict_table_t *referenced_table;    \/*!< table where the referenced key$/;"	m	struct:dict_foreign_t
referenced_table_name	include/dict0mem.h	/^  char *referenced_table_name;    \/*!< referenced table name *\/$/;"	m	struct:dict_foreign_t
referenced_table_name_lookup	include/dict0mem.h	/^  char *referenced_table_name_lookup;$/;"	m	struct:dict_foreign_t
refresh_fk	include/dict0mem.h	/^  bool refresh_fk;$/;"	m	struct:dict_table_t
reg_srv	handler/ha_innodb.cc	/^SERVICE_TYPE(registry) *reg_srv = nullptr;$/;"	m	namespace:innobase::component_services	file:
reg_srv	include/os0enc.h	/^bool init_keyring_services(SERVICE_TYPE(registry) * reg_srv);$/;"	m	namespace:innobase::encryption
reg_srv	include/os0enc.h	/^void deinit_keyring_services(SERVICE_TYPE(registry) * reg_srv);$/;"	m	namespace:innobase::encryption
register_pfs_file_close_begin	include/os0file.h	917;"	d
register_pfs_file_close_end	include/os0file.h	928;"	d
register_pfs_file_io_begin	include/os0file.h	935;"	d
register_pfs_file_io_end	include/os0file.h	946;"	d
register_pfs_file_open_begin	include/os0file.h	881;"	d
register_pfs_file_open_end	include/os0file.h	892;"	d
register_pfs_file_rename_begin	include/os0file.h	899;"	d
register_pfs_file_rename_end	include/os0file.h	910;"	d
register_privilege	log/log0meb.cc	/^bool register_privilege(const char *priv_name) {$/;"	f	namespace:meb
register_sync_point_handler	log/log0test.cc	/^void Log_test::register_sync_point_handler($/;"	f	class:Log_test
register_table_handler	include/sess0sess.h	/^  void register_table_handler(const char *table_name, dict_table_t *table) {$/;"	f	class:innodb_session_t
register_udfs	log/log0meb.cc	/^static bool register_udfs() {$/;"	f	namespace:meb
reinit_apply_state	clone/clone0clone.cc	/^void Clone_Task_Manager::reinit_apply_state(const byte *ref_loc, uint ref_len,$/;"	f	class:Clone_Task_Manager
reinit_copy_state	clone/clone0clone.cc	/^void Clone_Task_Manager::reinit_copy_state(const byte *loc, uint loc_len) {$/;"	f	class:Clone_Task_Manager
reinit_io_fix	include/buf0buf.h	/^  void reinit_io_fix() {$/;"	f	class:Cache_hint::buf_page_t
relative	include/fil0fil.h	/^  enum path_type { absolute, relative, file_name_only, invalid };$/;"	e	enum:Fil_path::path_type
release	arch/arch0log.cc	/^void Arch_Log_Sys::release(Arch_Group *group, bool is_durable) {$/;"	f	class:Arch_Log_Sys
release	arch/arch0log.cc	/^void Log_Arch_Client_Ctx::release() {$/;"	f	class:Log_Arch_Client_Ctx
release	arch/arch0page.cc	/^void Arch_Page_Sys::release(Arch_Group *group, bool is_durable,$/;"	f	class:Arch_Page_Sys
release	arch/arch0page.cc	/^void Page_Arch_Client_Ctx::release() {$/;"	f	class:Page_Arch_Client_Ctx
release	btr/btr0bulk.cc	/^void BtrBulk::release() {$/;"	f	class:BtrBulk
release	btr/btr0bulk.cc	/^void PageBulk::release() {$/;"	f	class:PageBulk
release	include/arch0arch.h	/^  void release(bool is_durable) {$/;"	f	class:Arch_Group
release	include/buf0buf.h	/^    void release() {$/;"	f	class:Cache_hint::buf_page_t::io_responsibility_t
release	include/dict0mem.h	/^  void release() {$/;"	f	class:last_ops_cur_t
release	include/srv0tmp.h	/^  void release() { mutex_exit(&m_mutex); }$/;"	f	class:ibt::Tablespace_pool
release	os/os0file.cc	/^  void release() const { mutex_exit(&m_mutex); }$/;"	f	class:AIO
release	os/os0file.cc	/^void AIO::release(Slot *slot) {$/;"	f	class:AIO
release_all	mtr/mtr0mtr.cc	/^void mtr_t::Command::release_all() {$/;"	f	class:mtr_t::Command
release_auto_increment	handler/ha_innodb.cc	/^void ha_innobase::release_auto_increment() {$/;"	f	class:ha_innobase
release_free_extents	fil/fil0fil.cc	/^void fil_space_t::release_free_extents(ulint n_reserved) {$/;"	f	class:fil_space_t
release_heap	include/clone0snapshot.h	/^  void release_heap(mem_heap_t *&heap) {$/;"	f	class:Clone_Snapshot
release_io_responsibility	include/buf0buf.h	/^  void release_io_responsibility() { io_responsibility.release(); }$/;"	f	class:Cache_hint::buf_page_t
release_open_slot	fil/fil0fil.cc	/^void Fil_shard::release_open_slot(size_t shard_id) {$/;"	f	class:Fil_shard
release_page	mtr/mtr0mtr.cc	/^void mtr_t::release_page(const void *ptr, mtr_memo_type_t type) {$/;"	f	class:mtr_t
release_plugin_services	handler/ha_innodb.cc	/^static void release_plugin_services() {$/;"	f	file:
release_resources	mtr/mtr0mtr.cc	/^void mtr_t::Command::release_resources() {$/;"	f	class:mtr_t::Command
release_threads	include/row0pread.h	/^  static void release_threads(size_t n_threads) {$/;"	f
release_uncached_table	dict/dict0dd.cc	/^void release_uncached_table(TABLE_SHARE *ts, TABLE *td) {$/;"	f
release_unused_threads	include/row0pread.h	/^  void release_unused_threads(size_t unused_threads) {$/;"	f
release_with_mutex	os/os0file.cc	/^void AIO::release_with_mutex(Slot *slot) {$/;"	f	class:AIO
relocated	include/buf0buf.h	/^    uint64_t relocated;$/;"	m	struct:Cache_hint::buf_buddy_stat_t::snapshot_t
relocated	include/buf0buf.h	/^  uint64_t relocated;$/;"	m	struct:Cache_hint::buf_buddy_stat_t
relocated_usec	include/buf0buf.h	/^    uint64_t relocated_usec;$/;"	m	struct:Cache_hint::buf_buddy_stat_t::snapshot_t
relocated_usec	include/buf0buf.h	/^  uint64_t relocated_usec;$/;"	m	struct:Cache_hint::buf_buddy_stat_t
rem0cmp_h	include/rem0cmp.h	34;"	d
rem0rec_h	include/rem0rec.h	34;"	d
rem0types_h	include/rem0types.h	34;"	d
rem_gen_ts_dirs	fil/fil0fil.cc	/^Dir_set rem_gen_ts_dirs;$/;"	v
rem_rec_h	rem/rec.h	38;"	d
remove	dict/dict0dict.cc	/^dberr_t DDTableBuffer::remove(table_id_t id) {$/;"	f	class:DDTableBuffer
remove	dict/dict0dict.cc	/^void Persisters::remove(persistent_type_t type) {$/;"	f	class:Persisters
remove	include/lob0impl.h	/^  void remove(flst_base_node_t *bnode) {$/;"	f	struct:lob::z_frag_entry_t
remove	include/lob0impl.h	/^  void remove(plist_node_t &node) {$/;"	f	struct:lob::plist_base_node_t
remove	include/lob0index.h	/^  void remove(flst_base_node_t *bnode) { flst_remove(bnode, m_node, m_mtr); }$/;"	f	struct:lob::index_entry_t
remove	include/zlob0index.h	/^  void remove(flst_base_node_t *bnode) {$/;"	f	struct:lob::z_index_entry_t
remove	log/log0ddl.cc	/^dberr_t DDL_Log_Table::remove(const DDL_Records &records) {$/;"	f	class:DDL_Log_Table
remove	log/log0ddl.cc	/^dberr_t DDL_Log_Table::remove(ulint id) {$/;"	f	class:DDL_Log_Table
remove_file	clone/clone0api.cc	/^static void remove_file(std::string &file) {$/;"	f	file:
remove_from_LRU	fil/fil0fil.cc	/^void Fil_shard::remove_from_LRU(fil_node_t *file) {$/;"	f	class:Fil_shard
remove_from_debug_list	mtr/mtr0mtr.cc	/^void mtr_t::remove_from_debug_list() const {$/;"	f	class:mtr_t
remove_from_trx_locks	lock/lock0lock.cc	/^static void remove_from_trx_locks(lock_t *lock) {$/;"	f	namespace:locksys
remove_from_unflushed_list	fil/fil0fil.cc	/^void Fil_shard::remove_from_unflushed_list(fil_space_t *space) {$/;"	f	class:Fil_shard
remove_key	os/os0enc.cc	/^void remove_key(const char *key_id) {$/;"	f	namespace:innobase::encryption
remove_quotes	include/fil0fil.h	/^  static std::string remove_quotes(const char *pathspec) {$/;"	f	class:Fil_path
rename	handler/handler0alter.cc	/^  dict_index_t **rename;$/;"	m	struct:ha_innobase_inplace_ctx	file:
rename_file	clone/clone0api.cc	/^static void rename_file(std::string &from_file, std::string &to_file) {$/;"	f	file:
rename_impl	handler/ha_innodb.cc	/^int innobase_basic_ddl::rename_impl(THD *thd, const char *from, const char *to,$/;"	f	class:innobase_basic_ddl
rename_index_in_cache	handler/handler0alter.cc	/^static void rename_index_in_cache(dict_index_t *index, const char *new_name) {$/;"	f	file:
rename_indexes_in_cache	handler/handler0alter.cc	/^static void rename_indexes_in_cache(const ha_innobase_inplace_ctx *ctx,$/;"	f	file:
rename_partition_files	fil/fil0fil.cc	/^void Fil_system::rename_partition_files(bool revert) {$/;"	f	class:Fil_system
rename_table	handler/ha_innodb.cc	/^int ha_innobase::rename_table(const char *from, const char *to,$/;"	f	class:ha_innobase
rename_table	handler/ha_innopart.cc	/^int ha_innopart::rename_table(const char *from, const char *to,$/;"	f	class:ha_innopart
rename_tablespace	handler/ha_innodb.cc	/^int innobase_truncate<Table>::rename_tablespace() {$/;"	f	class:innobase_truncate
rename_tablespace_name	fil/fil0fil.cc	/^dberr_t Fil_system::rename_tablespace_name(space_id_t space_id,$/;"	f	class:Fil_system
repair	handler/ha_innopart.cc	/^int ha_innopart::repair(THD *thd, HA_CHECK_OPT *repair_opt) {$/;"	f	class:ha_innopart
replace	dict/dict0dict.cc	/^dberr_t DDTableBuffer::replace(table_id_t id, uint64_t version,$/;"	f	class:DDTableBuffer
replace	include/row0mysql.h	/^  unsigned replace : 1;$/;"	m	struct:row_prebuilt_t
replace	lob/lob0first.cc	/^buf_block_t *first_page_t::replace(trx_t *trx, ulint offset, const byte *&ptr,$/;"	f	class:lob::first_page_t
replace	lob/lob0pages.cc	/^buf_block_t *data_page_t::replace(trx_t *trx, ulint offset, const byte *&ptr,$/;"	f	class:lob::data_page_t
replace	lob/lob0update.cc	/^dberr_t replace(InsertContext &ctx, trx_t *trx, dict_index_t *index, ref_t ref,$/;"	f	namespace:lob
replace_and_insert	log/log0ddl.cc	/^static dberr_t replace_and_insert(DDL_Record *record) {$/;"	f	file:
replace_datadir	include/clone0clone.h	/^  bool replace_datadir() const {$/;"	f	class:Clone_Handle
replace_inline	lob/lob0first.cc	/^void first_page_t::replace_inline(trx_t *trx, ulint offset, const byte *&ptr,$/;"	f	class:lob::first_page_t
replace_inline	lob/lob0pages.cc	/^void data_page_t::replace_inline(trx_t *trx, ulint offset, const byte *&ptr,$/;"	f	class:lob::data_page_t
replace_inline	lob/lob0update.cc	/^static dberr_t replace_inline(InsertContext &ctx, trx_t *trx,$/;"	f	namespace:lob
replace_space_name_in_file_name	dict/dict0dd.cc	/^static void replace_space_name_in_file_name(dd::Tablespace_file *dd_file,$/;"	f	file:
replace_table_name	handler/handler0alter.cc	/^static void replace_table_name(const char *filename, char *new_filename,$/;"	f	file:
replay	log/log0ddl.cc	/^dberr_t Log_DDL::replay(DDL_Record &record) {$/;"	f	class:Log_DDL
replay_all	log/log0ddl.cc	/^dberr_t Log_DDL::replay_all() {$/;"	f	class:Log_DDL
replay_alter_encrypt_space_log	log/log0ddl.cc	/^dberr_t Log_DDL::replay_alter_encrypt_space_log(DDL_Record &record) {$/;"	f	class:Log_DDL
replay_by_thread_id	log/log0ddl.cc	/^dberr_t Log_DDL::replay_by_thread_id(ulint thread_id) {$/;"	f	class:Log_DDL
replay_delete_space_log	log/log0ddl.cc	/^void Log_DDL::replay_delete_space_log(space_id_t space_id,$/;"	f	class:Log_DDL
replay_drop_log	log/log0ddl.cc	/^void Log_DDL::replay_drop_log(const table_id_t table_id) {$/;"	f	class:Log_DDL
replay_free_tree_log	log/log0ddl.cc	/^void Log_DDL::replay_free_tree_log(space_id_t space_id, page_no_t page_no,$/;"	f	class:Log_DDL
replay_in_datadir	fil/fil0fil.cc	/^bool replay_in_datadir = false;$/;"	v
replay_remove_cache_log	log/log0ddl.cc	/^void Log_DDL::replay_remove_cache_log(table_id_t table_id,$/;"	f	class:Log_DDL
replay_rename_space_log	log/log0ddl.cc	/^void Log_DDL::replay_rename_space_log(space_id_t space_id,$/;"	f	class:Log_DDL
replay_rename_table_log	log/log0ddl.cc	/^void Log_DDL::replay_rename_table_log(table_id_t table_id, const char *old_name,$/;"	f	class:Log_DDL
report_empty_page	include/buf0checksum.h	/^  virtual inline void report_empty_page(bool empty) const {}$/;"	f	class:BlockReporter
reposition	lock/lock0lock.cc	/^  const trx_t *reposition() const {$/;"	f	class:TrxListIterator	file:
request_immediate_flush	include/clone0repl.h	/^  uint64_t request_immediate_flush(bool compress) {$/;"	f	class:Clone_persist_gtid
request_type	include/sync0arr_impl.h	/^  ulint request_type = 0;      \/*!< lock type requested on the$/;"	m	struct:sync_cell_t
requested	buf/buf0flu.cc	/^  bool requested;          \/*!< true if requested pages$/;"	m	struct:page_cleaner_t	file:
requested_lock_row	include/trx0i_s.h	/^  const i_s_locks_row_t *requested_lock_row;$/;"	m	struct:i_s_trx_row_t
res_count	include/sync0arr_impl.h	/^  ulint res_count;       \/*!< count of cell reservations$/;"	m	struct:sync_array_t
reservation_no	include/srv0srv.h	/^  uint64_t reservation_no;$/;"	m	struct:srv_slot_t
reservation_no	lock/lock0wait.cc	/^  uint64_t reservation_no;$/;"	m	struct:waiting_trx_info_t	file:
reservation_time	include/sync0arr_impl.h	/^  ib_time_monotonic_t reservation_time = 0;$/;"	m	struct:sync_cell_t
reserve	read/read0read.cc	/^void ReadView::ids_t::reserve(ulint n) {$/;"	f	class:ReadView::ids_t
reserve_coords	include/gis0geo.h	/^inline static double *reserve_coords(double **d_buffer, \/*!< in\/out: buffer. *\/$/;"	f
reserve_next_chunk	clone/clone0clone.cc	/^int Clone_Task_Manager::reserve_next_chunk(Clone_Task *task,$/;"	f	class:Clone_Task_Manager
reserve_open_slot	fil/fil0fil.cc	/^bool Fil_shard::reserve_open_slot(size_t shard_id) {$/;"	f	class:Fil_shard
reserve_slot	os/os0file.cc	/^Slot *AIO::reserve_slot(IORequest &type, fil_node_t *m1, void *m2,$/;"	f	class:AIO
reserve_task	clone/clone0clone.cc	/^void Clone_Task_Manager::reserve_task(THD *thd, uint &task_id) {$/;"	f	class:Clone_Task_Manager
reserved_implicit_name	include/dict0dd.h	/^static constexpr char reserved_implicit_name[] = "innodb_file_per_table";$/;"	v
reset	clone/clone0desc.cc	/^uint32_t *Chnunk_Bitmap::reset(uint32_t max_bits, mem_heap_t *heap) {$/;"	f	class:Chnunk_Bitmap
reset	handler/ha_innodb.cc	/^int ha_innobase::reset() { return (end_stmt()); }$/;"	f	class:ha_innobase
reset	handler/ha_innopart.cc	/^int ha_innopart::reset() {$/;"	f	class:ha_innopart
reset	include/btr0pcur.h	/^inline void btr_pcur_t::reset() {$/;"	f	class:btr_pcur_t
reset	include/buf0buf.h	/^  void reset() {$/;"	f	struct:Cache_hint::buf_pool_stat_t
reset	include/buf0types.h	/^  inline void reset(space_id_t space, page_no_t page_no) {$/;"	f	class:page_id_t
reset	include/data0data.h	/^  void reset() {$/;"	f	struct:dfield_t
reset	include/fut0lst.h	/^  void reset() {$/;"	f	struct:flst_bnode_t
reset	include/lob0impl.h	/^  void reset(flst_node_t *node) { m_node = node; }$/;"	f	struct:lob::z_frag_entry_t
reset	include/lob0index.h	/^  void reset(fil_addr_t &addr) {$/;"	f	struct:lob::index_entry_t
reset	include/lob0index.h	/^  void reset(flst_node_t *node) { m_node = node; }$/;"	f	struct:lob::index_entry_t
reset	include/lob0lob.h	/^  void reset() {$/;"	f	struct:lob::blob_page_info_t
reset	include/lob0undo.h	/^  void reset() {$/;"	f	struct:lob::undo_vers_t
reset	include/row0upd.h	/^  void reset() {$/;"	f	struct:upd_field_t
reset	include/row0upd.h	/^  void reset() {$/;"	f	struct:upd_t
reset	include/trx0purge.h	/^  void reset() {$/;"	f	class:undo::Truncate
reset	include/ut0bitset.h	/^  void reset() { memset(m_bitset, 0, m_size); }$/;"	f	class:Bitset
reset	include/ut0dbg.h	/^  void reset() {$/;"	f	class:ut_chrono_t
reset	include/ut0ut.h	/^  void reset() { m_start = SC::now(); }$/;"	f	class:ib::Timer
reset	include/zlob0index.h	/^  void reset() {$/;"	f	struct:lob::z_index_entry_mem_t
reset	include/zlob0index.h	/^  void reset(const z_index_entry_t &entry) { m_node = entry.m_node; }$/;"	f	struct:lob::z_index_entry_t
reset	include/zlob0index.h	/^  void reset(flst_node_t *node) { m_node = node; }$/;"	f	struct:lob::z_index_entry_t
reset	lob/lob0index.cc	/^void index_entry_mem_t::reset() {$/;"	f	class:lob::index_entry_mem_t
reset	log/log0meb.cc	/^  void reset() {$/;"	f	class:meb::Block
reset	sync/sync0sync.cc	/^void MutexMonitor::reset() {$/;"	f	class:MutexMonitor
reset_chunk	include/clone0clone.h	/^  void reset_chunk(Clone_Task *task) {$/;"	f	class:Clone_Task_Manager
reset_column_ord_part	handler/handler0alter.cc	/^static inline void reset_column_ord_part(dict_table_t *table) {$/;"	f	file:
reset_error	include/clone0clone.h	/^  void reset_error() {$/;"	f	class:Clone_Task_Manager
reset_error_state	include/row0pread.h	/^  void reset_error_state() { m_err = DB_SUCCESS; }$/;"	f
reset_page_id	include/buf0buf.h	/^  inline void reset_page_id() {$/;"	f	class:Cache_hint::buf_page_t
reset_page_id	include/buf0buf.h	/^  inline void reset_page_id(page_id_t new_page_id) {$/;"	f	class:Cache_hint::buf_page_t
reset_template	handler/ha_innodb.cc	/^void ha_innobase::reset_template(void) {$/;"	f	class:ha_innobase
reset_thread_id_and_purpose	include/srv0tmp.h	/^  void reset_thread_id_and_purpose() {$/;"	f	class:ibt::Tablespace
reset_timer	include/trx0purge.h	/^  void reset_timer() { m_timer.reset(); }$/;"	f	class:undo::Truncate
reset_transition	include/clone0clone.h	/^  void reset_transition() {$/;"	f	class:Clone_Task_Manager
resize	include/read0types.h	/^    void resize(ulint n) {$/;"	f	class:ReadView::ids_t
resolved	include/pars0sym.h	/^  ibool resolved;                \/*!< TRUE if the$/;"	m	struct:sym_node_t
resource	include/que0que.h	/^  ulint resource;        \/*!< resource usage of the query thread$/;"	m	struct:que_thr_t
restart_apply	clone/clone0apply.cc	/^int Clone_Handle::restart_apply(THD *thd, const byte *&loc, uint &loc_len) {$/;"	f	class:Clone_Handle
restart_copy	clone/clone0copy.cc	/^int Clone_Handle::restart_copy(THD *thd, const byte *loc, uint loc_len) {$/;"	f	class:Clone_Handle
restart_mtr	include/lob0first.h	/^  void restart_mtr(mtr_t *mtr) {$/;"	f	struct:lob::first_page_t
restart_mtr	include/zlob0first.h	/^  void restart_mtr(mtr_t *mtr) {$/;"	f	struct:lob::z_first_page_t
restore_from_doublewrite	fsp/fsp0file.cc	/^dberr_t Datafile::restore_from_doublewrite(page_no_t restore_page_no) {$/;"	f	class:Datafile
restore_position	btr/btr0pcur.cc	/^bool btr_pcur_t::restore_position(ulint latch_mode, mtr_t *mtr,$/;"	f	class:btr_pcur_t
restore_position	include/lob0lob.h	/^  void restore_position() {$/;"	f	class:lob::BtrContext
restore_position	row/row0pread.cc	/^  void restore_position() {$/;"	f	class:PCursor
resubmit	os/os0file.cc	/^dberr_t LinuxAIOHandler::resubmit(Slot *slot) {$/;"	f	class:LinuxAIOHandler
result	include/ut0rbt.h	/^  int result; \/* Result of comparing with$/;"	m	struct:ib_rbt_bound_t
result_doc	fts/fts0fts.cc	/^  fts_doc_t *result_doc; \/*!< Result doc for tokens *\/$/;"	m	struct:fts_tokenize_param_t	file:
resume_alter_encrypt_tablespace	fsp/fsp0fsp.cc	/^static void resume_alter_encrypt_tablespace(THD *thd) {$/;"	f	file:
resume_encryption_cond	handler/ha_innodb.cc	/^mysql_cond_t resume_encryption_cond;$/;"	v
resume_encryption_cond_key	handler/ha_innodb.cc	/^mysql_pfs_key_t resume_encryption_cond_key;$/;"	v
resume_encryption_cond_m	handler/ha_innodb.cc	/^mysql_mutex_t resume_encryption_cond_m;$/;"	v
resume_encryption_cond_mutex_key	handler/ha_innodb.cc	/^mysql_pfs_key_t resume_encryption_cond_mutex_key;$/;"	v
resurrected_trx_tables	trx/trx0trx.cc	/^static trx_table_map resurrected_trx_tables;$/;"	v	file:
ret	log/log0meb.cc	/^  int ret = 0;$/;"	m	struct:meb::value	file:
return_node_t	include/pars0pars.h	/^struct return_node_t {$/;"	s
return_statement	pars/pars0grm.y	/^return_statement:$/;"	l
return_step	eval/eval0proc.cc	/^que_thr_t *return_step(que_thr_t *thr) \/*!< in: query thread *\/$/;"	f
reverse	include/ut0lst.h	/^  void reverse() {$/;"	f	struct:ut_list_base
reverse	include/ut0lst.h	/^  void reverse() {$/;"	f	struct:ut_list_node
rewind	lock/lock0lock.cc	/^  void rewind() { m_index = 0; }$/;"	f	class:TrxLockIterator
rhs	include/ut0link_buf.h	/^  Link_buf &operator=(const Link_buf &rhs) = delete;$/;"	m	class:Link_buf
rhs	include/ut0link_buf.h	/^  Link_buf(const Link_buf &rhs) = delete;$/;"	m	class:Link_buf
right	include/ut0rbt.h	/^  ib_rbt_node_t *right;  \/* points right child *\/$/;"	m	struct:ib_rbt_node_t
rnd_end	handler/ha_innodb.cc	/^int ha_innobase::rnd_end(void) { return (index_end()); }$/;"	f	class:ha_innobase
rnd_end_in_part	handler/ha_innopart.cc	/^int ha_innopart::rnd_end_in_part(uint part_id, bool scan) {$/;"	f	class:ha_innopart
rnd_init	handler/ha_innodb.cc	/^int ha_innobase::rnd_init(bool scan) {$/;"	f	class:ha_innobase
rnd_init_in_part	handler/ha_innopart.cc	/^int ha_innopart::rnd_init_in_part(uint part_id, bool scan) {$/;"	f	class:ha_innopart
rnd_next	handler/ha_innodb.cc	/^int ha_innobase::rnd_next(uchar *buf) \/*!< in\/out: returns the row in this$/;"	f	class:ha_innobase
rnd_next_in_part	handler/ha_innopart.cc	/^int ha_innopart::rnd_next_in_part(uint part_id, uchar *buf) {$/;"	f	class:ha_innopart
rnd_pos	handler/ha_innodb.cc	/^int ha_innobase::rnd_pos($/;"	f	class:ha_innobase
rnd_pos	handler/ha_innopart.cc	/^int ha_innopart::rnd_pos(uchar *buf, uchar *pos) {$/;"	f	class:ha_innopart
rnd_pos_by_record	handler/ha_innopart.cc	/^int ha_innopart::rnd_pos_by_record(uchar *record) {$/;"	f	class:ha_innopart
roll_limit	include/trx0trx.h	/^  undo_no_t roll_limit; \/*!< least undo number to undo during$/;"	m	struct:trx_t
roll_node_create	trx/trx0roll.cc	/^roll_node_t *roll_node_create($/;"	f
roll_node_state	include/trx0roll.h	/^enum roll_node_state {$/;"	g
roll_node_t	include/trx0roll.h	/^struct roll_node_t {$/;"	s
roll_ptr	include/row0purge.h	/^    roll_ptr_t roll_ptr;$/;"	m	struct:purge_node_t::rec_t
roll_ptr	include/row0purge.h	/^  roll_ptr_t roll_ptr;$/;"	m	struct:purge_node_t
roll_ptr	include/row0undo.h	/^  roll_ptr_t roll_ptr;      \/*!< roll pointer to undo log record *\/$/;"	m	struct:undo_node_t
roll_ptr_t	include/trx0types.h	/^typedef ib_id_t roll_ptr_t;$/;"	t
rollback	handler/handler0alter.cc	/^  virtual void rollback() { return; }$/;"	f	class:alter_part
rollback	handler/handler0alter.cc	/^void alter_parts::rollback() {$/;"	f	class:alter_parts
rollback	lob/lob0purge.cc	/^static void rollback(DeleteContext *ctx, dict_index_t *index, trx_id_t trxid,$/;"	f	namespace:lob
rollback_complete	include/lock0lock.h	/^  bool rollback_complete;$/;"	m	struct:lock_sys_t
rollback_from_undolog	lob/lob0purge.cc	/^static void rollback_from_undolog(DeleteContext *ctx, dict_index_t *index,$/;"	f	namespace:lob
rollback_inplace_alter_table	handler/handler0alter.cc	/^inline MY_ATTRIBUTE((warn_unused_result)) bool rollback_inplace_alter_table($/;"	f
rollback_statement	pars/pars0grm.y	/^rollback_statement:$/;"	l
root	fil/fil0fil.cc	/^  const Fil_path &root() const { return m_dir; }$/;"	f	class:Tablespace_files
root	fts/fts0que.cc	/^  fts_ast_node_t *root; \/*!< Abstract syntax tree *\/$/;"	m	struct:fts_query_t	file:
root	include/fts0ast.h	/^  fts_ast_node_t *root; \/*!< If all goes OK, then this$/;"	m	struct:fts_ast_state_t
root	include/ut0rbt.h	/^  ib_rbt_node_t *root; \/* Root of the tree, this is$/;"	m	struct:ib_rbt_t
root_guess	include/btr0sea.h	/^  buf_block_t *root_guess; \/*!< the root page frame when it was last time$/;"	m	struct:btr_search_t
row	include/row0ins.h	/^  dtuple_t *row;           \/*!< row to insert *\/$/;"	m	struct:ins_node_t
row	include/row0purge.h	/^  dtuple_t *row;$/;"	m	struct:purge_node_t
row	include/row0undo.h	/^  dtuple_t *row;            \/*!< a copy (also fields copied to heap) of the$/;"	m	struct:undo_node_t
row	include/row0upd.h	/^  dtuple_t *row;       \/*!< NULL, or a copy (also fields copied to$/;"	m	struct:upd_node_t
row0ext_h	include/row0ext.h	34;"	d
row0ftsort_h	include/row0ftsort.h	34;"	d
row0import_h	include/row0import.h	34;"	d
row0ins_h	include/row0ins.h	34;"	d
row0log_h	include/row0log.h	36;"	d
row0merge_h	include/row0merge.h	34;"	d
row0mysql_h	include/row0mysql.h	35;"	d
row0par_read_h	include/row0pread.h	33;"	d
row0pread_adapter_h	include/row0pread-adapter.h	33;"	d
row0pread_histogram_h	include/row0pread-histogram.h	33;"	d
row0purge_h	include/row0purge.h	34;"	d
row0quiesce_h	include/row0quiesce.h	35;"	d
row0row_h	include/row0row.h	34;"	d
row0sel_h	include/row0sel.h	34;"	d
row0types_h	include/row0types.h	34;"	d
row0uins_h	include/row0uins.h	34;"	d
row0umod_h	include/row0umod.h	34;"	d
row0undo_h	include/row0undo.h	34;"	d
row0upd_h	include/row0upd.h	34;"	d
row0vers_h	include/row0vers.h	34;"	d
row_add_table_to_background_drop_list	row/row0mysql.cc	/^static ibool row_add_table_to_background_drop_list($/;"	f	file:
row_allow_duplicates	row/row0ins.cc	/^static bool row_allow_duplicates(que_thr_t *thr) {$/;"	f	file:
row_build	row/row0row.cc	/^dtuple_t *row_build(ulint type,                \/*!< in: ROW_COPY_POINTERS or$/;"	f
row_build_index_entry_low	row/row0row.cc	/^dtuple_t *row_build_index_entry_low($/;"	f
row_build_low	row/row0row.cc	/^static inline dtuple_t *row_build_low(ulint type, const dict_index_t *index,$/;"	f	file:
row_build_row_ref	row/row0row.cc	/^dtuple_t *row_build_row_ref($/;"	f
row_build_row_ref_in_tuple	row/row0row.cc	/^void row_build_row_ref_in_tuple(dtuple_t *ref, const rec_t *rec,$/;"	f
row_build_w_add_vcol	row/row0row.cc	/^dtuple_t *row_build_w_add_vcol(ulint type, const dict_index_t *index,$/;"	f
row_can_be_in_range	row/row0sel.cc	/^  bool row_can_be_in_range;$/;"	m	struct:row_to_range_relation_t	file:
row_clust_vers_matches_sec	row/row0vers.cc	/^static bool row_clust_vers_matches_sec($/;"	f	file:
row_compare_row_to_range	row/row0sel.cc	/^static row_to_range_relation_t row_compare_row_to_range($/;"	f	file:
row_convert_impl_to_expl_if_needed	row/row0undo.cc	/^void row_convert_impl_to_expl_if_needed(btr_cur_t *cursor, undo_node_t *node) {$/;"	f
row_count_rtree_recs	row/row0sel.cc	/^dberr_t row_count_rtree_recs($/;"	f
row_create_index_for_mysql	row/row0mysql.cc	/^dberr_t row_create_index_for_mysql($/;"	f
row_create_prebuilt	row/row0mysql.cc	/^row_prebuilt_t *row_create_prebuilt($/;"	f
row_create_table_for_mysql	row/row0mysql.cc	/^dberr_t row_create_table_for_mysql(dict_table_t *table, const char *compression,$/;"	f
row_create_update_node_for_mysql	row/row0mysql.cc	/^upd_node_t *row_create_update_node_for_mysql($/;"	f
row_del_upd_for_mysql_using_cursor	row/row0mysql.cc	/^static dberr_t row_del_upd_for_mysql_using_cursor(const byte *mysql_rec,$/;"	f	file:
row_delete_all_rows	row/row0mysql.cc	/^void row_delete_all_rows(dict_table_t *table) {$/;"	f
row_delete_for_mysql_using_cursor	row/row0mysql.cc	/^static dberr_t row_delete_for_mysql_using_cursor(const upd_node_t *node,$/;"	f	file:
row_discard_tablespace	row/row0mysql.cc	/^static dberr_t row_discard_tablespace(trx_t *trx, dict_table_t *table,$/;"	f	file:
row_discard_tablespace_begin	row/row0mysql.cc	/^static dict_table_t *row_discard_tablespace_begin($/;"	f	file:
row_discard_tablespace_end	row/row0mysql.cc	/^static dberr_t row_discard_tablespace_end(trx_t *trx, dict_table_t *table,$/;"	f	file:
row_discard_tablespace_for_mysql	row/row0mysql.cc	/^dberr_t row_discard_tablespace_for_mysql($/;"	f
row_discard_tablespace_foreign_key_checks	row/row0mysql.cc	/^static dberr_t row_discard_tablespace_foreign_key_checks($/;"	f	file:
row_drop_ancillary_fts_tables	row/row0mysql.cc	/^dberr_t row_drop_ancillary_fts_tables(dict_table_t *table,$/;"	f
row_drop_list_mutex	row/row0mysql.cc	/^static ib_mutex_t row_drop_list_mutex;$/;"	v	file:
row_drop_list_mutex_key	sync/sync0sync.cc	/^mysql_pfs_key_t row_drop_list_mutex_key;$/;"	v
row_drop_table_for_mysql	include/row0mysql.h	/^inline dberr_t row_drop_table_for_mysql(const char *name, trx_t *trx) {$/;"	f
row_drop_table_for_mysql	row/row0mysql.cc	/^dberr_t row_drop_table_for_mysql(const char *name, trx_t *trx, bool nonatomic,$/;"	f
row_drop_table_for_mysql_in_background	row/row0mysql.cc	/^static dberr_t row_drop_table_for_mysql_in_background($/;"	f	file:
row_drop_table_from_cache	row/row0mysql.cc	/^dberr_t row_drop_table_from_cache(dict_table_t *table, trx_t *trx) {$/;"	f
row_drop_tables_for_mysql_in_background	row/row0mysql.cc	/^ulint row_drop_tables_for_mysql_in_background(void) {$/;"	f
row_drop_tablespace	row/row0mysql.cc	/^dberr_t row_drop_tablespace(space_id_t space_id, const char *filepath) {$/;"	f
row_explicit_rollback	row/row0mysql.cc	/^static dberr_t row_explicit_rollback(dict_index_t *index, const dtuple_t *entry,$/;"	f	file:
row_ext_cache_fill	row/row0ext.cc	43;"	d	file:
row_ext_cache_fill	row/row0ext.cc	46;"	d	file:
row_ext_cache_fill_func	row/row0ext.cc	/^static void row_ext_cache_fill_func(const dict_index_t *index, row_ext_t *ext,$/;"	f	file:
row_ext_create	include/row0ext.h	44;"	d
row_ext_create	include/row0ext.h	47;"	d
row_ext_create_func	row/row0ext.cc	/^row_ext_t *row_ext_create_func(const dict_index_t *index, ulint n_ext,$/;"	f
row_ext_t	include/row0ext.h	/^struct row_ext_t {$/;"	s
row_fts_build_sel_tree	row/row0ftsort.cc	/^static ulint row_fts_build_sel_tree($/;"	f	file:
row_fts_build_sel_tree_level	row/row0ftsort.cc	/^static void row_fts_build_sel_tree_level($/;"	f	file:
row_fts_do_update	row/row0mysql.cc	/^static void row_fts_do_update($/;"	f	file:
row_fts_free_pll_merge_buf	row/row0ftsort.cc	/^void row_fts_free_pll_merge_buf($/;"	f
row_fts_insert_tuple	row/row0ftsort.cc	/^static void row_fts_insert_tuple($/;"	f	file:
row_fts_merge_insert	row/row0ftsort.cc	/^dberr_t row_fts_merge_insert(dict_index_t *index, dict_table_t *table,$/;"	f
row_fts_psort_info_destroy	row/row0ftsort.cc	/^void row_fts_psort_info_destroy($/;"	f
row_fts_psort_info_init	row/row0ftsort.cc	/^dberr_t row_fts_psort_info_init(trx_t *trx, row_merge_dup_t *dup,$/;"	f
row_fts_sel_tree_propagate	row/row0ftsort.cc	/^static int row_fts_sel_tree_propagate($/;"	f	file:
row_fts_sel_tree_update	row/row0ftsort.cc	/^static int row_fts_sel_tree_update($/;"	f	file:
row_fts_start_parallel_merge	row/row0ftsort.cc	/^void row_fts_start_parallel_merge(fts_psort_t *merge_info) {$/;"	f
row_fts_start_psort	row/row0ftsort.cc	/^void row_fts_start_psort(fts_psort_t *psort_info) {$/;"	f
row_fts_token_t	include/row0ftsort.h	/^struct row_fts_token_t {$/;"	s
row_fts_update_or_delete	row/row0mysql.cc	/^static dberr_t row_fts_update_or_delete($/;"	f	file:
row_geo_field_is_valid	row/row0merge.cc	/^static bool row_geo_field_is_valid(const dtuple_t *row, dict_index_t *index) {$/;"	f	file:
row_get_autoinc_counter	row/row0row.cc	/^ib_uint64_t row_get_autoinc_counter(const dtuple_t *row, ulint n) {$/;"	f
row_get_background_drop_list_len_low	row/row0mysql.cc	/^ulint row_get_background_drop_list_len_low(void) {$/;"	f
row_get_clust_rec	row/row0row.cc	/^rec_t *row_get_clust_rec($/;"	f
row_get_prebuilt_insert_row	row/row0mysql.cc	/^static dtuple_t *row_get_prebuilt_insert_row($/;"	f	file:
row_get_prebuilt_update_vector	row/row0mysql.cc	/^upd_t *row_get_prebuilt_update_vector($/;"	f
row_id	include/dict0dict.h	/^  row_id_t row_id;             \/*!< the next row id to assign;$/;"	m	struct:dict_sys_t
row_id	include/row0mysql.h	/^  byte row_id[DATA_ROW_ID_LEN];$/;"	m	struct:row_prebuilt_t
row_id_buf	include/row0ins.h	/^  byte *row_id_buf; \/* buffer for the row id sys field in row *\/$/;"	m	struct:ins_node_t
row_id_t	include/trx0types.h	/^typedef ib_id_t row_id_t;$/;"	t
row_import	row/row0import.cc	/^struct row_import {$/;"	s	file:
row_import_adjust_root_pages_of_secondary_indexes	row/row0import.cc	/^    row_import_adjust_root_pages_of_secondary_indexes($/;"	f
row_import_cfg_read_index_fields	row/row0import.cc	/^    row_import_cfg_read_index_fields($/;"	f
row_import_cfg_read_string	row/row0import.cc	/^static dberr_t row_import_cfg_read_string($/;"	f	file:
row_import_check_corruption	row/row0import.cc	/^dberr_t row_import_check_corruption(dict_table_t *table, THD *thd,$/;"	f
row_import_cleanup	row/row0import.cc	/^static MY_ATTRIBUTE((warn_unused_result)) dberr_t row_import_cleanup($/;"	f
row_import_discard_changes	row/row0import.cc	/^static void row_import_discard_changes($/;"	f	file:
row_import_error	row/row0import.cc	/^static MY_ATTRIBUTE((warn_unused_result)) dberr_t row_import_error($/;"	f
row_import_for_mysql	row/row0import.cc	/^dberr_t row_import_for_mysql(dict_table_t *table, dd::Table *table_def,$/;"	f
row_import_read_bytes	row/row0import.cc	/^static MY_ATTRIBUTE((warn_unused_result)) byte *row_import_read_bytes($/;"	f
row_import_read_cfg	row/row0import.cc	/^    row_import_read_cfg(dict_table_t *table, dd::Table *table_def, THD *thd,$/;"	f
row_import_read_cfp	row/row0import.cc	/^static dberr_t row_import_read_cfp(dict_table_t *table, THD *thd,$/;"	f	file:
row_import_read_columns	row/row0import.cc	/^    row_import_read_columns(FILE *file,      \/*!< in: file to write to *\/$/;"	f
row_import_read_common	row/row0import.cc	/^    row_import_read_common(FILE *file, THD *thd, row_import *cfg) {$/;"	f
row_import_read_default_values	row/row0import.cc	/^    row_import_read_default_values(FILE *file, dict_col_t *col,$/;"	f
row_import_read_encryption_data	row/row0import.cc	/^static dberr_t row_import_read_encryption_data(dict_table_t *table, FILE *file,$/;"	f	file:
row_import_read_index_data	row/row0import.cc	/^    row_import_read_index_data(FILE *file,      \/*!< in: File to read from *\/$/;"	f
row_import_read_indexes	row/row0import.cc	/^static dberr_t row_import_read_indexes($/;"	f	file:
row_import_read_meta_data	row/row0import.cc	/^static MY_ATTRIBUTE((warn_unused_result)) dberr_t row_import_read_meta_data($/;"	f
row_import_read_v1	row/row0import.cc	/^    row_import_read_v1(FILE *file,      \/*!< in: File to read from *\/$/;"	f
row_import_read_v2	row/row0import.cc	/^    row_import_read_v2(FILE *file, THD *thd, row_import *cfg) {$/;"	f
row_import_set_sys_max_row_id	row/row0import.cc	/^static MY_ATTRIBUTE((warn_unused_result)) dberr_t row_import_set_sys_max_row_id($/;"	f
row_index_t	row/row0import.cc	/^struct row_index_t {$/;"	s	file:
row_ins	row/row0ins.cc	/^    row_ins(ins_node_t *node, \/*!< in: row insert node *\/$/;"	f
row_ins_alloc_row_id_step	row/row0ins.cc	/^void row_ins_alloc_row_id_step(ins_node_t *node) \/*!< in: row insert node *\/$/;"	f
row_ins_alloc_sys_fields	row/row0ins.cc	/^static void row_ins_alloc_sys_fields(ins_node_t *node) \/*!< in: insert node *\/$/;"	f	file:
row_ins_cascade_ancestor_updates_table	row/row0ins.cc	/^static ibool row_ins_cascade_ancestor_updates_table($/;"	f	file:
row_ins_cascade_calc_update_vec	row/row0ins.cc	/^static MY_ATTRIBUTE((warn_unused_result)) ulint row_ins_cascade_calc_update_vec($/;"	f
row_ins_cascade_n_ancestors	row/row0ins.cc	/^static MY_ATTRIBUTE((warn_unused_result)) ulint row_ins_cascade_n_ancestors($/;"	f
row_ins_check_foreign_constraint	row/row0ins.cc	/^dberr_t row_ins_check_foreign_constraint($/;"	f
row_ins_check_foreign_constraints	row/row0ins.cc	/^    row_ins_check_foreign_constraints($/;"	f
row_ins_clust_index_entry	row/row0ins.cc	/^dberr_t row_ins_clust_index_entry($/;"	f
row_ins_clust_index_entry_by_modify	row/row0ins.cc	/^    row_ins_clust_index_entry_by_modify($/;"	f
row_ins_clust_index_entry_low	row/row0ins.cc	/^dberr_t row_ins_clust_index_entry_low($/;"	f
row_ins_dupl_error_with_rec	row/row0ins.cc	/^static ibool row_ins_dupl_error_with_rec($/;"	f	file:
row_ins_duplicate_error_in_clust	row/row0ins.cc	/^    row_ins_duplicate_error_in_clust($/;"	f
row_ins_duplicate_error_in_clust_online	row/row0ins.cc	/^    row_ins_duplicate_error_in_clust_online($/;"	f
row_ins_duplicate_online	row/row0ins.cc	/^    row_ins_duplicate_online(ulint n_uniq, const dtuple_t *entry,$/;"	f
row_ins_foreign_check_on_constraint	row/row0ins.cc	/^    row_ins_foreign_check_on_constraint($/;"	f
row_ins_foreign_fill_virtual	row/row0ins.cc	/^static void row_ins_foreign_fill_virtual(trx_t *trx, upd_node_t *cascade,$/;"	f	file:
row_ins_foreign_report_add_err	row/row0ins.cc	/^static void row_ins_foreign_report_add_err($/;"	f	file:
row_ins_foreign_report_err	row/row0ins.cc	/^static void row_ins_foreign_report_err($/;"	f	file:
row_ins_foreign_trx_print	row/row0ins.cc	/^static void row_ins_foreign_trx_print(trx_t *trx) \/*!< in: transaction *\/$/;"	f	file:
row_ins_get_row_from_query_block	row/row0ins.cc	/^void row_ins_get_row_from_query_block($/;"	f
row_ins_get_row_from_values	row/row0ins.cc	/^void row_ins_get_row_from_values(ins_node_t *node) \/*!< in: row insert node *\/$/;"	f
row_ins_index_entry	row/row0ins.cc	/^static dberr_t row_ins_index_entry(dict_index_t *index, dtuple_t *entry,$/;"	f	file:
row_ins_index_entry_big_rec	row/row0ins.cc	2300;"	d	file:
row_ins_index_entry_big_rec	row/row0ins.cc	2303;"	d	file:
row_ins_index_entry_big_rec_func	row/row0ins.cc	/^static dberr_t row_ins_index_entry_big_rec_func(trx_t *trx,$/;"	f	file:
row_ins_index_entry_set_vals	row/row0ins.cc	/^dberr_t row_ins_index_entry_set_vals(const dict_index_t *index, dtuple_t *entry,$/;"	f
row_ins_index_entry_step	row/row0ins.cc	/^    row_ins_index_entry_step(ins_node_t *node, \/*!< in: row insert node *\/$/;"	f
row_ins_must_modify_rec	row/row0ins.cc	/^ibool row_ins_must_modify_rec(const btr_cur_t *cursor) \/*!< in: B-tree cursor *\/$/;"	f
row_ins_scan_sec_index_for_duplicate	row/row0ins.cc	/^    row_ins_scan_sec_index_for_duplicate($/;"	f
row_ins_sec_index_entry	row/row0ins.cc	/^dberr_t row_ins_sec_index_entry($/;"	f
row_ins_sec_index_entry_by_modify	row/row0ins.cc	/^    row_ins_sec_index_entry_by_modify($/;"	f
row_ins_sec_index_entry_low	row/row0ins.cc	/^dberr_t row_ins_sec_index_entry_low(uint32_t flags, ulint mode,$/;"	f
row_ins_sec_index_multi_value_entry	row/row0ins.cc	/^static dberr_t row_ins_sec_index_multi_value_entry(dict_index_t *index,$/;"	f	file:
row_ins_sec_mtr_start_and_check_if_aborted	row/row0ins.cc	/^static MY_ATTRIBUTE((warn_unused_result)) bool row_ins_sec_mtr_start_and_check_if_aborted($/;"	f
row_ins_set_detailed	row/row0ins.cc	/^static void row_ins_set_detailed($/;"	f	file:
row_ins_set_rec_lock	row/row0ins.cc	/^static dberr_t row_ins_set_rec_lock(lock_mode mode, ulint type,$/;"	f	file:
row_ins_sorted_clust_index_entry	row/row0ins.cc	/^static dberr_t row_ins_sorted_clust_index_entry(ulint mode, dict_index_t *index,$/;"	f	file:
row_ins_spatial_index_entry_set_mbr_field	row/row0ins.cc	/^static void row_ins_spatial_index_entry_set_mbr_field($/;"	f	file:
row_ins_step	row/row0ins.cc	/^que_thr_t *row_ins_step(que_thr_t *thr) \/*!< in: query thread *\/$/;"	f
row_ins_temp_prebuilt_tree_modified	row/row0ins.cc	/^static void row_ins_temp_prebuilt_tree_modified(dict_table_t *table) {$/;"	f	file:
row_insert_for_mysql	row/row0mysql.cc	/^dberr_t row_insert_for_mysql(const byte *mysql_rec, row_prebuilt_t *prebuilt) {$/;"	f
row_insert_for_mysql_using_cursor	row/row0mysql.cc	/^static dberr_t row_insert_for_mysql_using_cursor(const byte *mysql_rec,$/;"	f	file:
row_insert_for_mysql_using_ins_graph	row/row0mysql.cc	/^static dberr_t row_insert_for_mysql_using_ins_graph(const byte *mysql_rec,$/;"	f	file:
row_is_mysql_tmp_table_name	row/row0mysql.cc	/^bool row_is_mysql_tmp_table_name(const char *name) {$/;"	f
row_is_reading_range_guard_t	include/row0mysql.h	/^    explicit row_is_reading_range_guard_t(row_prebuilt_t &prebuilt)$/;"	f	class:row_prebuilt_t::row_is_reading_range_guard_t
row_is_reading_range_guard_t	include/row0mysql.h	/^  class row_is_reading_range_guard_t : private ut::bool_scope_guard_t {$/;"	c	struct:row_prebuilt_t
row_lock_mode	include/row0sel.h	/^  ulint row_lock_mode;       \/*!< LOCK_X or LOCK_S *\/$/;"	m	struct:sel_node_t
row_lock_table	row/row0mysql.cc	/^dberr_t row_lock_table(row_prebuilt_t *prebuilt) {$/;"	f
row_lock_table_autoinc_for_mysql	row/row0mysql.cc	/^dberr_t row_lock_table_autoinc_for_mysql($/;"	f
row_log_allocate	row/row0log.cc	/^bool row_log_allocate($/;"	f
row_log_apply	row/row0log.cc	/^dberr_t row_log_apply(const trx_t *trx, dict_index_t *index,$/;"	f
row_log_apply_op	row/row0log.cc	/^static MY_ATTRIBUTE((warn_unused_result)) const mrec_t *row_log_apply_op($/;"	f
row_log_apply_op_low	row/row0log.cc	/^static void row_log_apply_op_low($/;"	f	file:
row_log_apply_ops	row/row0log.cc	/^static dberr_t row_log_apply_ops(const trx_t *trx, dict_index_t *index,$/;"	f	file:
row_log_block_allocate	row/row0log.cc	/^static MY_ATTRIBUTE((warn_unused_result)) bool row_log_block_allocate($/;"	f
row_log_block_free	row/row0log.cc	/^static void row_log_block_free(row_log_buf_t &log_buf) {$/;"	f	file:
row_log_buf_t	row/row0log.cc	/^struct row_log_buf_t {$/;"	s	file:
row_log_col_is_indexed	row/row0log.cc	/^bool row_log_col_is_indexed(const dict_index_t *index, ulint v_no) {$/;"	f
row_log_estimate_work	row/row0log.cc	/^ulint row_log_estimate_work(const dict_index_t *index) {$/;"	f
row_log_free	row/row0log.cc	/^void row_log_free(row_log_t *&log) \/*!< in,own: row log *\/$/;"	f
row_log_get_max_trx	row/row0log.cc	/^trx_id_t row_log_get_max_trx($/;"	f
row_log_online_op	row/row0log.cc	/^void row_log_online_op($/;"	f
row_log_progress_inc_per_block	row/row0log.cc	/^inline ulint row_log_progress_inc_per_block() { return (0); }$/;"	f
row_log_progress_inc_per_block	row/row0log.cc	/^inline ulint row_log_progress_inc_per_block() {$/;"	f
row_log_t	row/row0log.cc	/^struct row_log_t {$/;"	s	file:
row_log_table_apply	row/row0log.cc	/^dberr_t row_log_table_apply(que_thr_t *thr, dict_table_t *old_table,$/;"	f
row_log_table_apply_convert_mrec	row/row0log.cc	/^    const dtuple_t *row_log_table_apply_convert_mrec($/;"	f
row_log_table_apply_delete	row/row0log.cc	/^static MY_ATTRIBUTE((warn_unused_result)) dberr_t row_log_table_apply_delete($/;"	f
row_log_table_apply_delete_low	row/row0log.cc	/^    row_log_table_apply_delete_low($/;"	f
row_log_table_apply_insert	row/row0log.cc	/^static MY_ATTRIBUTE((warn_unused_result)) dberr_t row_log_table_apply_insert($/;"	f
row_log_table_apply_insert_low	row/row0log.cc	/^    row_log_table_apply_insert_low($/;"	f
row_log_table_apply_op	row/row0log.cc	/^static MY_ATTRIBUTE((warn_unused_result)) const mrec_t *row_log_table_apply_op($/;"	f
row_log_table_apply_ops	row/row0log.cc	/^    row_log_table_apply_ops(que_thr_t *thr, row_merge_dup_t *dup,$/;"	f
row_log_table_apply_update	row/row0log.cc	/^static MY_ATTRIBUTE((warn_unused_result)) dberr_t row_log_table_apply_update($/;"	f
row_log_table_blob_alloc	row/row0log.cc	/^void row_log_table_blob_alloc($/;"	f
row_log_table_blob_free	row/row0log.cc	/^void row_log_table_blob_free($/;"	f
row_log_table_blob_t	row/row0log.cc	/^  row_log_table_blob_t(ulonglong offset_arg)$/;"	f	class:row_log_table_blob_t
row_log_table_blob_t	row/row0log.cc	/^class row_log_table_blob_t {$/;"	c	file:
row_log_table_close	row/row0log.cc	492;"	d	file:
row_log_table_close	row/row0log.cc	495;"	d	file:
row_log_table_close_func	row/row0log.cc	/^static void row_log_table_close_func($/;"	f	file:
row_log_table_delete	row/row0log.cc	/^void row_log_table_delete($/;"	f
row_log_table_delete_sec	row/row0log.cc	/^    row_log_table_delete_sec(dict_index_t *index, const dtuple_t *entry,$/;"	f
row_log_table_get_error	row/row0log.cc	/^dberr_t row_log_table_get_error($/;"	f
row_log_table_get_pk	row/row0log.cc	/^const dtuple_t *row_log_table_get_pk($/;"	f
row_log_table_get_pk_col	row/row0log.cc	/^static dberr_t row_log_table_get_pk_col(trx_t *trx, dict_index_t *index,$/;"	f	file:
row_log_table_get_pk_old_col	row/row0log.cc	/^static const dict_col_t *row_log_table_get_pk_old_col(const dict_table_t *table,$/;"	f	file:
row_log_table_insert	row/row0log.cc	/^void row_log_table_insert($/;"	f
row_log_table_low	row/row0log.cc	/^static void row_log_table_low($/;"	f	file:
row_log_table_low_redundant	row/row0log.cc	/^static void row_log_table_low_redundant($/;"	f	file:
row_log_table_open	row/row0log.cc	/^static MY_ATTRIBUTE((warn_unused_result)) byte *row_log_table_open($/;"	f
row_log_table_update	row/row0log.cc	/^void row_log_table_update($/;"	f
row_log_tmpfile	row/row0log.cc	/^static MY_ATTRIBUTE((warn_unused_result)) int row_log_tmpfile(row_log_t *log) {$/;"	f
row_make_new_pathname	row/row0merge.cc	/^char *row_make_new_pathname(dict_table_t *table, \/*!< in: table to be renamed *\/$/;"	f
row_merge	row/row0merge.cc	/^static dberr_t row_merge(trx_t *trx, const row_merge_dup_t *dup,$/;"	f	file:
row_merge_block_t	include/row0merge.h	/^typedef byte row_merge_block_t;$/;"	t
row_merge_blocks	row/row0merge.cc	/^    row_merge_blocks(const row_merge_dup_t *dup, const merge_file_t *file,$/;"	f
row_merge_blocks_copy	row/row0merge.cc	/^    row_merge_blocks_copy(const dict_index_t *index, const merge_file_t *file,$/;"	f
row_merge_buf_add	row/row0merge.cc	/^static ulint row_merge_buf_add(row_merge_buf_t *buf, dict_index_t *fts_index,$/;"	f	file:
row_merge_buf_create	row/row0merge.cc	/^row_merge_buf_t *row_merge_buf_create($/;"	f
row_merge_buf_create_low	row/row0merge.cc	/^static MY_ATTRIBUTE((malloc)) row_merge_buf_t *row_merge_buf_create_low($/;"	f
row_merge_buf_empty	row/row0merge.cc	/^row_merge_buf_t *row_merge_buf_empty($/;"	f
row_merge_buf_encode	row/row0merge.cc	/^static void row_merge_buf_encode($/;"	f	file:
row_merge_buf_free	row/row0merge.cc	/^void row_merge_buf_free($/;"	f
row_merge_buf_redundant_convert	row/row0merge.cc	402;"	d	file:
row_merge_buf_redundant_convert	row/row0merge.cc	407;"	d	file:
row_merge_buf_redundant_convert_func	row/row0merge.cc	/^static void row_merge_buf_redundant_convert_func($/;"	f	file:
row_merge_buf_sort	row/row0merge.cc	/^void row_merge_buf_sort(row_merge_buf_t *buf, row_merge_dup_t *dup) {$/;"	f
row_merge_buf_t	include/row0merge.h	/^struct row_merge_buf_t {$/;"	s
row_merge_buf_write	row/row0merge.cc	/^void row_merge_buf_write($/;"	f
row_merge_build_indexes	row/row0merge.cc	/^dberr_t row_merge_build_indexes($/;"	f
row_merge_copy_blobs	row/row0merge.cc	2908;"	d	file:
row_merge_copy_blobs	row/row0merge.cc	2913;"	d	file:
row_merge_copy_blobs_func	row/row0merge.cc	/^static void row_merge_copy_blobs_func(trx_t *trx, const dict_index_t *index,$/;"	f	file:
row_merge_create_fts_sort_index	row/row0ftsort.cc	/^dict_index_t *row_merge_create_fts_sort_index($/;"	f
row_merge_create_index	row/row0merge.cc	/^dict_index_t *row_merge_create_index(trx_t *trx, dict_table_t *table,$/;"	f
row_merge_drop_indexes	row/row0merge.cc	/^void row_merge_drop_indexes($/;"	f
row_merge_drop_table	row/row0merge.cc	/^dberr_t row_merge_drop_table(trx_t *trx,          \/*!< in: transaction *\/$/;"	f
row_merge_dup_report	row/row0merge.cc	/^void row_merge_dup_report(row_merge_dup_t *dup, const dfield_t *entry) {$/;"	f
row_merge_dup_t	include/row0merge.h	/^struct row_merge_dup_t {$/;"	s
row_merge_file_create	row/row0merge.cc	/^int row_merge_file_create(merge_file_t *merge_file, const char *path) {$/;"	f
row_merge_file_create_if_needed	row/row0merge.cc	/^static MY_ATTRIBUTE((warn_unused_result)) int row_merge_file_create_if_needed($/;"	f
row_merge_file_create_low	row/row0merge.cc	/^int row_merge_file_create_low(const char *path) {$/;"	f
row_merge_file_destroy	row/row0merge.cc	/^void row_merge_file_destroy($/;"	f
row_merge_file_destroy_low	row/row0merge.cc	/^void row_merge_file_destroy_low(int fd) \/*!< in: merge file descriptor *\/$/;"	f
row_merge_fts_doc_add_word_for_parser	row/row0ftsort.cc	/^static int row_merge_fts_doc_add_word_for_parser($/;"	f	file:
row_merge_fts_doc_tokenize	row/row0ftsort.cc	/^static ibool row_merge_fts_doc_tokenize($/;"	f	file:
row_merge_fts_doc_tokenize_by_parser	row/row0ftsort.cc	/^static void row_merge_fts_doc_tokenize_by_parser($/;"	f	file:
row_merge_fts_get_next_doc_item	row/row0ftsort.cc	/^void row_merge_fts_get_next_doc_item($/;"	f
row_merge_heap_create	row/row0merge.cc	/^static mem_heap_t *row_merge_heap_create($/;"	f	file:
row_merge_insert_index_tuples	row/row0merge.cc	/^static MY_ATTRIBUTE((warn_unused_result)) dberr_t row_merge_insert_index_tuples($/;"	f
row_merge_lock_table	row/row0merge.cc	/^dberr_t row_merge_lock_table(trx_t *trx,          \/*!< in\/out: transaction *\/$/;"	f
row_merge_mtuple_to_dtuple	row/row0merge.cc	/^static void row_merge_mtuple_to_dtuple(dict_index_t *index, dtuple_t *dtuple,$/;"	f	file:
row_merge_read	row/row0merge.cc	/^ibool row_merge_read(int fd,                 \/*!< in: file descriptor *\/$/;"	f
row_merge_read_clustered_index	row/row0merge.cc	/^    row_merge_read_clustered_index($/;"	f
row_merge_read_rec	row/row0merge.cc	/^const byte *row_merge_read_rec($/;"	f
row_merge_sort	row/row0merge.cc	/^dberr_t row_merge_sort(trx_t *trx, const row_merge_dup_t *dup,$/;"	f
row_merge_spatial_rows	row/row0merge.cc	/^static dberr_t row_merge_spatial_rows(trx_id_t trx_id,$/;"	f	file:
row_merge_tmpfile_if_needed	row/row0merge.cc	/^static MY_ATTRIBUTE((warn_unused_result)) int row_merge_tmpfile_if_needed($/;"	f
row_merge_tuple_cmp	row/row0merge.cc	/^static MY_ATTRIBUTE((warn_unused_result)) int row_merge_tuple_cmp($/;"	f
row_merge_tuple_cmp_ctx	row/row0merge.cc	969;"	d	file:
row_merge_tuple_sort	row/row0merge.cc	/^static void row_merge_tuple_sort($/;"	f	file:
row_merge_tuple_sort_ctx	row/row0merge.cc	961;"	d	file:
row_merge_write	row/row0merge.cc	/^ibool row_merge_write(int fd,          \/*!< in: file descriptor *\/$/;"	f
row_merge_write_eof	row/row0merge.cc	/^static byte *row_merge_write_eof($/;"	f	file:
row_merge_write_fts_node	row/row0ftsort.cc	/^static dberr_t row_merge_write_fts_node(const fts_psort_insert_t *ins_ctx,$/;"	f	file:
row_merge_write_fts_word	row/row0ftsort.cc	/^static dberr_t row_merge_write_fts_word($/;"	f	file:
row_merge_write_rec	row/row0merge.cc	/^static byte *row_merge_write_rec($/;"	f	file:
row_merge_write_rec_low	row/row0merge.cc	/^static void row_merge_write_rec_low($/;"	f	file:
row_merge_write_rec_low	row/row0merge.cc	1296;"	d	file:
row_merge_write_redo	row/row0merge.cc	/^static void row_merge_write_redo(const dict_index_t *index) {$/;"	f	file:
row_mtuple_cmp	row/row0merge.cc	/^static int row_mtuple_cmp(const mtuple_t *prev_mtuple,$/;"	f	file:
row_mtuple_create	row/row0merge.cc	/^static void row_mtuple_create(const mtuple_t *mtuple, mtuple_t *prev_mtuple,$/;"	f	file:
row_must_be_at_end	row/row0sel.cc	/^  bool row_must_be_at_end;$/;"	m	struct:row_to_range_relation_t	file:
row_mysql_close	row/row0mysql.cc	/^void row_mysql_close(void) {$/;"	f
row_mysql_convert_row_to_innobase	row/row0mysql.cc	/^static void row_mysql_convert_row_to_innobase($/;"	f	file:
row_mysql_delay_if_needed	row/row0mysql.cc	/^static void row_mysql_delay_if_needed(void) {$/;"	f	file:
row_mysql_drop_list	row/row0mysql.cc	/^  UT_LIST_NODE_T(row_mysql_drop_t) row_mysql_drop_list;$/;"	m	struct:row_mysql_drop_t	file:
row_mysql_drop_list_inited	row/row0mysql.cc	/^static ibool row_mysql_drop_list_inited = FALSE;$/;"	v	file:
row_mysql_drop_t	row/row0mysql.cc	/^struct row_mysql_drop_t {$/;"	s	file:
row_mysql_freeze_data_dictionary	include/row0mysql.h	326;"	d
row_mysql_freeze_data_dictionary_func	row/row0mysql.cc	/^void row_mysql_freeze_data_dictionary_func(trx_t *trx, const char *file,$/;"	f
row_mysql_handle_errors	row/row0mysql.cc	/^bool row_mysql_handle_errors($/;"	f
row_mysql_init	row/row0mysql.cc	/^void row_mysql_init(void) {$/;"	f
row_mysql_lock_data_dictionary	include/row0mysql.h	313;"	d
row_mysql_lock_data_dictionary_func	row/row0mysql.cc	/^void row_mysql_lock_data_dictionary_func(trx_t *trx, const char *file,$/;"	f
row_mysql_lock_table	row/row0mysql.cc	/^dberr_t row_mysql_lock_table($/;"	f
row_mysql_pad_col	row/row0mysql.cc	/^void row_mysql_pad_col(ulint mbminlen, byte *pad, ulint len) {$/;"	f
row_mysql_parallel_select_count_star	row/row0mysql.cc	/^dberr_t row_mysql_parallel_select_count_star($/;"	f
row_mysql_prebuilt_free_blob_heap	row/row0mysql.cc	/^void row_mysql_prebuilt_free_blob_heap(row_prebuilt_t *prebuilt) {$/;"	f
row_mysql_read_blob_ref	row/row0mysql.cc	/^const byte *row_mysql_read_blob_ref(ulint *len, const byte *ref,$/;"	f
row_mysql_read_geometry	row/row0mysql.cc	/^static const byte *row_mysql_read_geometry($/;"	f	file:
row_mysql_read_true_varchar	row/row0mysql.cc	/^const byte *row_mysql_read_true_varchar($/;"	f
row_mysql_store_blob_ref	row/row0mysql.cc	/^void row_mysql_store_blob_ref(byte *dest, ulint col_len, const void *data,$/;"	f
row_mysql_store_col_in_innobase_format	row/row0mysql.cc	/^byte *row_mysql_store_col_in_innobase_format($/;"	f
row_mysql_store_geometry	row/row0mysql.cc	/^void row_mysql_store_geometry($/;"	f
row_mysql_store_true_var_len	row/row0mysql.cc	/^byte *row_mysql_store_true_var_len($/;"	f
row_mysql_table_id_reassign	row/row0mysql.cc	/^static dberr_t row_mysql_table_id_reassign(dict_table_t *table,$/;"	f	file:
row_mysql_to_innobase	row/row0mysql.cc	/^static void row_mysql_to_innobase(dtuple_t *row, row_prebuilt_t *prebuilt,$/;"	f	file:
row_mysql_unfreeze_data_dictionary	row/row0mysql.cc	/^void row_mysql_unfreeze_data_dictionary(trx_t *trx) \/*!< in\/out: transaction *\/$/;"	f
row_mysql_unlock_data_dictionary	row/row0mysql.cc	/^void row_mysql_unlock_data_dictionary(trx_t *trx) \/*!< in\/out: transaction *\/$/;"	f
row_op	row/row0log.cc	/^enum row_op {$/;"	g	file:
row_parse_int_from_field	row/row0row.cc	/^ib_uint64_t row_parse_int_from_field(const dfield_t *field) {$/;"	f
row_prebuild_sel_graph	row/row0mysql.cc	/^void row_prebuild_sel_graph(row_prebuilt_t *prebuilt) {$/;"	f
row_prebuilt_free	row/row0mysql.cc	/^void row_prebuilt_free(row_prebuilt_t *prebuilt, ibool dict_locked) {$/;"	f
row_prebuilt_t	include/row0mysql.h	/^struct row_prebuilt_t {$/;"	s
row_purge	row/row0purge.cc	/^static void row_purge(purge_node_t *node,       \/*!< in: row purge node *\/$/;"	f	file:
row_purge_del_mark	row/row0purge.cc	/^static MY_ATTRIBUTE((warn_unused_result)) bool row_purge_del_mark($/;"	f
row_purge_end	row/row0purge.cc	/^static void row_purge_end(que_thr_t *thr) {$/;"	f	file:
row_purge_node_create	row/row0purge.cc	/^purge_node_t *row_purge_node_create(que_thr_t *parent, mem_heap_t *heap) {$/;"	f
row_purge_parse_undo_rec	row/row0purge.cc	/^static bool row_purge_parse_undo_rec(purge_node_t *node,$/;"	f	file:
row_purge_poss_sec	row/row0purge.cc	/^bool row_purge_poss_sec(purge_node_t *node,    \/*!< in\/out: row purge node *\/$/;"	f
row_purge_record	row/row0purge.cc	1144;"	d	file:
row_purge_record	row/row0purge.cc	1147;"	d	file:
row_purge_record_func	row/row0purge.cc	/^static MY_ATTRIBUTE((warn_unused_result)) bool row_purge_record_func($/;"	f
row_purge_remove_clust_if_poss	row/row0purge.cc	/^static MY_ATTRIBUTE((warn_unused_result)) bool row_purge_remove_clust_if_poss($/;"	f
row_purge_remove_clust_if_poss_low	row/row0purge.cc	/^static MY_ATTRIBUTE((warn_unused_result)) bool row_purge_remove_clust_if_poss_low($/;"	f
row_purge_remove_multi_sec_if_poss	row/row0purge.cc	/^static inline void row_purge_remove_multi_sec_if_poss(purge_node_t *node,$/;"	f	file:
row_purge_remove_sec_if_poss	row/row0purge.cc	/^void row_purge_remove_sec_if_poss(purge_node_t *node, \/*!< in: row purge node *\/$/;"	f
row_purge_remove_sec_if_poss_leaf	row/row0purge.cc	/^static MY_ATTRIBUTE((warn_unused_result)) bool row_purge_remove_sec_if_poss_leaf($/;"	f
row_purge_remove_sec_if_poss_tree	row/row0purge.cc	/^    row_purge_remove_sec_if_poss_tree($/;"	f
row_purge_reposition_pcur	row/row0purge.cc	/^static ibool row_purge_reposition_pcur($/;"	f	file:
row_purge_skip_uncommitted_virtual_index	row/row0purge.cc	/^static inline void row_purge_skip_uncommitted_virtual_index($/;"	f	file:
row_purge_step	row/row0purge.cc	/^que_thr_t *row_purge_step(que_thr_t *thr) {$/;"	f
row_purge_upd_exist_or_extern	row/row0purge.cc	821;"	d	file:
row_purge_upd_exist_or_extern	row/row0purge.cc	824;"	d	file:
row_purge_upd_exist_or_extern_func	row/row0purge.cc	/^static void row_purge_upd_exist_or_extern_func($/;"	f	file:
row_quiesce_set_state	row/row0quiesce.cc	/^dberr_t row_quiesce_set_state($/;"	f
row_quiesce_table_complete	row/row0quiesce.cc	/^void row_quiesce_table_complete(dict_table_t *table, trx_t *trx) {$/;"	f
row_quiesce_table_has_fts_index	row/row0quiesce.cc	/^static bool row_quiesce_table_has_fts_index($/;"	f	file:
row_quiesce_table_start	row/row0quiesce.cc	/^void row_quiesce_table_start(dict_table_t *table, trx_t *trx) {$/;"	f
row_quiesce_write_cfg	row/row0quiesce.cc	/^    row_quiesce_write_cfg(dict_table_t *table, \/*!< in: write the meta data for$/;"	f
row_quiesce_write_cfp	row/row0quiesce.cc	/^    row_quiesce_write_cfp(dict_table_t *table, THD *thd) {$/;"	f
row_quiesce_write_default_value	row/row0quiesce.cc	/^    row_quiesce_write_default_value(const dict_col_t *col, FILE *file) {$/;"	f
row_quiesce_write_header	row/row0quiesce.cc	/^    row_quiesce_write_header(const dict_table_t *table, \/*!< in: write the meta$/;"	f
row_quiesce_write_index_fields	row/row0quiesce.cc	/^    row_quiesce_write_index_fields($/;"	f
row_quiesce_write_indexes	row/row0quiesce.cc	/^    row_quiesce_write_indexes(const dict_table_t *table, \/*!< in: write the meta$/;"	f
row_quiesce_write_one_index	row/row0quiesce.cc	/^    row_quiesce_write_one_index(const dict_index_t *index, FILE *file,$/;"	f
row_quiesce_write_table	row/row0quiesce.cc	/^    row_quiesce_write_table(const dict_table_t *table, \/*!< in: write the meta$/;"	f
row_quiesce_write_transfer_key	row/row0quiesce.cc	/^    row_quiesce_write_transfer_key(const dict_table_t *table, FILE *file,$/;"	f
row_raw_format	row/row0row.cc	/^ulint row_raw_format(const char *data,               \/*!< in: raw data *\/$/;"	f
row_raw_format_int	row/row0row.cc	/^static ulint row_raw_format_int(const char *data, \/*!< in: raw data *\/$/;"	f	file:
row_raw_format_str	row/row0row.cc	/^static ulint row_raw_format_str(const char *data, \/*!< in: raw data *\/$/;"	f	file:
row_read_type	include/row0mysql.h	/^  ulint row_read_type;          \/*!< ROW_READ_WITH_LOCKS if row locks$/;"	m	struct:row_prebuilt_t
row_rec_to_index_entry	row/row0row.cc	/^dtuple_t *row_rec_to_index_entry($/;"	f
row_rec_to_index_entry_low	row/row0row.cc	/^dtuple_t *row_rec_to_index_entry_low($/;"	f
row_rename_table_for_mysql	row/row0mysql.cc	/^dberr_t row_rename_table_for_mysql(const char *old_name, const char *new_name,$/;"	f
row_rollback_on_timeout	row/row0mysql.cc	/^ibool row_rollback_on_timeout = FALSE;$/;"	v
row_scan_index_for_mysql	row/row0mysql.cc	/^dberr_t row_scan_index_for_mysql(row_prebuilt_t *prebuilt, dict_index_t *index,$/;"	f
row_search_autoinc_read_column	row/row0sel.cc	/^static ib_uint64_t row_search_autoinc_read_column($/;"	f	file:
row_search_debug_copy_rec_order_prefix	row/row0sel.cc	/^static inline rec_t *row_search_debug_copy_rec_order_prefix($/;"	f	file:
row_search_end_range_check	row/row0sel.cc	/^static bool row_search_end_range_check(byte *mysql_rec, const rec_t *rec,$/;"	f	file:
row_search_get_max_rec	row/row0sel.cc	/^static const rec_t *row_search_get_max_rec(dict_index_t *index, mtr_t *mtr) {$/;"	f	file:
row_search_idx_cond_check	row/row0sel.cc	/^static ICP_RESULT row_search_idx_cond_check($/;"	f	file:
row_search_index_entry	row/row0row.cc	/^enum row_search_result row_search_index_entry($/;"	f
row_search_index_stats	row/row0sel.cc	/^bool row_search_index_stats(const char *db_name, const char *tbl_name,$/;"	f
row_search_max_autoinc	row/row0sel.cc	/^dberr_t row_search_max_autoinc($/;"	f
row_search_mvcc	row/row0sel.cc	/^dberr_t row_search_mvcc(byte *buf, page_cur_mode_t mode,$/;"	f
row_search_no_mvcc	row/row0sel.cc	/^dberr_t row_search_no_mvcc(byte *buf, page_cur_mode_t mode,$/;"	f
row_search_on_row_ref	row/row0row.cc	/^ibool row_search_on_row_ref(btr_pcur_t *pcur, \/*!< out: persistent cursor, which$/;"	f
row_search_result	include/row0row.h	/^enum row_search_result {$/;"	g
row_search_table_stats	row/row0sel.cc	/^bool row_search_table_stats(const char *db_name, const char *tbl_name,$/;"	f
row_search_traverse	row/row0sel.cc	/^static dberr_t row_search_traverse(bool moves_up, ulint match_mode,$/;"	f	file:
row_sel	row/row0sel.cc	/^    row_sel(sel_node_t *node, \/*!< in: select node *\/$/;"	f
row_sel_build_committed_vers_for_mysql	row/row0sel.cc	/^static void row_sel_build_committed_vers_for_mysql($/;"	f	file:
row_sel_build_prev_vers	row/row0sel.cc	/^static MY_ATTRIBUTE((warn_unused_result)) dberr_t row_sel_build_prev_vers($/;"	f
row_sel_build_prev_vers_for_mysql	row/row0sel.cc	/^    row_sel_build_prev_vers_for_mysql(ReadView *read_view,$/;"	f
row_sel_convert_mysql_key_to_innobase	row/row0sel.cc	/^void row_sel_convert_mysql_key_to_innobase($/;"	f
row_sel_copy_cached_field_for_mysql	row/row0sel.cc	/^static void row_sel_copy_cached_field_for_mysql($/;"	f	file:
row_sel_copy_cached_fields_for_mysql	row/row0sel.cc	/^void row_sel_copy_cached_fields_for_mysql(byte *buf, const byte *cached_rec,$/;"	f
row_sel_copy_input_variable_vals	row/row0sel.cc	/^void row_sel_copy_input_variable_vals(sel_node_t *node) \/*!< in: select node *\/$/;"	f
row_sel_dequeue_cached_row_for_mysql	row/row0sel.cc	/^void row_sel_dequeue_cached_row_for_mysql($/;"	f
row_sel_direction	include/row0sel.h	/^enum row_sel_direction {$/;"	g
row_sel_enqueue_cache_row_for_mysql	row/row0sel.cc	/^void row_sel_enqueue_cache_row_for_mysql($/;"	f
row_sel_fetch_columns	row/row0sel.cc	/^static void row_sel_fetch_columns(trx_t *trx, dict_index_t *index,$/;"	f	file:
row_sel_fetch_last_buf	row/row0sel.cc	/^byte *row_sel_fetch_last_buf($/;"	f
row_sel_field_store_in_mysql_format	include/row0sel.h	442;"	d
row_sel_field_store_in_mysql_format	include/row0sel.h	448;"	d
row_sel_field_store_in_mysql_format	row/row0sel.cc	2551;"	d	file:
row_sel_field_store_in_mysql_format	row/row0sel.cc	2557;"	d	file:
row_sel_field_store_in_mysql_format_func	row/row0sel.cc	/^void row_sel_field_store_in_mysql_format_func(byte *dest,$/;"	f
row_sel_fill_vrow	row/row0sel.cc	/^static void row_sel_fill_vrow(const rec_t *rec, dict_index_t *index,$/;"	f	file:
row_sel_get_clust_rec	row/row0sel.cc	/^static MY_ATTRIBUTE((warn_unused_result)) dberr_t row_sel_get_clust_rec($/;"	f
row_sel_get_record_buffer	row/row0sel.cc	/^static Record_buffer *row_sel_get_record_buffer($/;"	f	file:
row_sel_match_mode	include/row0sel.h	/^enum row_sel_match_mode {$/;"	g
row_sel_open_pcur	row/row0sel.cc	/^static void row_sel_open_pcur(plan_t *plan, \/*!< in: table plan *\/$/;"	f	file:
row_sel_prefetch_cache_init	row/row0sel.cc	/^void row_sel_prefetch_cache_init($/;"	f
row_sel_restore_pcur_pos	row/row0sel.cc	/^static ibool row_sel_restore_pcur_pos(plan_t *plan, \/*!< in: table plan *\/$/;"	f	file:
row_sel_sec_rec_is_for_blob	row/row0sel.cc	/^static ibool row_sel_sec_rec_is_for_blob($/;"	f	file:
row_sel_sec_rec_is_for_clust_rec	row/row0sel.cc	/^static dberr_t row_sel_sec_rec_is_for_clust_rec($/;"	f	file:
row_sel_step	row/row0sel.cc	/^que_thr_t *row_sel_step(que_thr_t *thr) \/*!< in: query thread *\/$/;"	f
row_sel_store_mysql_field	row/row0sel.cc	2785;"	d	file:
row_sel_store_mysql_field_func	row/row0sel.cc	/^static MY_ATTRIBUTE((warn_unused_result)) bool row_sel_store_mysql_field_func($/;"	f
row_sel_store_mysql_rec	row/row0sel.cc	/^bool row_sel_store_mysql_rec(byte *mysql_rec, row_prebuilt_t *prebuilt,$/;"	f
row_sel_store_row_id_to_prebuilt	row/row0sel.cc	/^static void row_sel_store_row_id_to_prebuilt($/;"	f	file:
row_sel_test_end_conds	row/row0sel.cc	/^ibool row_sel_test_end_conds($/;"	f
row_sel_test_other_conds	row/row0sel.cc	/^ibool row_sel_test_other_conds($/;"	f
row_sel_try_search_shortcut	row/row0sel.cc	/^static ulint row_sel_try_search_shortcut($/;"	f	file:
row_sel_try_search_shortcut_for_mysql	row/row0sel.cc	/^static ulint row_sel_try_search_shortcut_for_mysql($/;"	f	file:
row_size	trx/trx0i_s.cc	/^  ulint row_size;    \/*!< size of a single row *\/$/;"	m	struct:i_s_table_cache_t	file:
row_stats_t	row/row0import.cc	/^struct row_stats_t {$/;"	s	file:
row_tab_op	row/row0log.cc	/^enum row_tab_op {$/;"	g	file:
row_table_got_default_clust_index	row/row0mysql.cc	/^ibool row_table_got_default_clust_index($/;"	f
row_table_load_foreign_constraints	row/row0mysql.cc	/^dberr_t row_table_load_foreign_constraints(trx_t *trx, const char *name,$/;"	f
row_to_range_relation_t	row/row0sel.cc	/^struct row_to_range_relation_t {$/;"	s	file:
row_undo	row/row0undo.cc	/^    row_undo(undo_node_t *node, \/*!< in: row undo node *\/$/;"	f
row_undo_ins	row/row0uins.cc	/^dberr_t row_undo_ins(undo_node_t *node, \/*!< in: row undo node *\/$/;"	f
row_undo_ins_parse_undo_rec	row/row0uins.cc	/^static void row_undo_ins_parse_undo_rec(undo_node_t *node, THD *thd,$/;"	f	file:
row_undo_ins_remove_clust_rec	row/row0uins.cc	/^    row_undo_ins_remove_clust_rec(undo_node_t *node) \/*!< in: undo node *\/$/;"	f
row_undo_ins_remove_multi_sec	row/row0uins.cc	/^static dberr_t row_undo_ins_remove_multi_sec(dict_index_t *index,$/;"	f	file:
row_undo_ins_remove_sec	row/row0uins.cc	/^    row_undo_ins_remove_sec(dict_index_t *index, dtuple_t *entry,$/;"	f
row_undo_ins_remove_sec_low	row/row0uins.cc	/^    row_undo_ins_remove_sec_low(ulint mode, dict_index_t *index,$/;"	f
row_undo_ins_remove_sec_rec	row/row0uins.cc	/^    row_undo_ins_remove_sec_rec(undo_node_t *node, \/*!< in\/out: row undo node *\/$/;"	f
row_undo_mod	row/row0umod.cc	/^dberr_t row_undo_mod(undo_node_t *node, \/*!< in: row undo node *\/$/;"	f
row_undo_mod_clust	row/row0umod.cc	/^    row_undo_mod_clust(undo_node_t *node, \/*!< in: row undo node *\/$/;"	f
row_undo_mod_clust_low	row/row0umod.cc	/^static MY_ATTRIBUTE((warn_unused_result)) dberr_t row_undo_mod_clust_low($/;"	f
row_undo_mod_del_mark_multi_sec	row/row0umod.cc	/^    row_undo_mod_del_mark_multi_sec(undo_node_t *node, que_thr_t *thr,$/;"	f
row_undo_mod_del_mark_or_remove_sec	row/row0umod.cc	/^    row_undo_mod_del_mark_or_remove_sec($/;"	f
row_undo_mod_del_mark_or_remove_sec_low	row/row0umod.cc	/^    row_undo_mod_del_mark_or_remove_sec_low($/;"	f
row_undo_mod_del_mark_sec	row/row0umod.cc	/^    row_undo_mod_del_mark_sec(undo_node_t *node, \/*!< in: row undo node *\/$/;"	f
row_undo_mod_del_unmark_sec_and_undo_update	row/row0umod.cc	/^    row_undo_mod_del_unmark_sec_and_undo_update($/;"	f
row_undo_mod_parse_undo_rec	row/row0umod.cc	/^static void row_undo_mod_parse_undo_rec(undo_node_t *node, THD *thd,$/;"	f	file:
row_undo_mod_remove_clust_low	row/row0umod.cc	/^static MY_ATTRIBUTE((warn_unused_result)) dberr_t row_undo_mod_remove_clust_low($/;"	f
row_undo_mod_sec_flag_corrupted	row/row0umod.cc	/^static void row_undo_mod_sec_flag_corrupted($/;"	f	file:
row_undo_mod_upd_del_multi_sec	row/row0umod.cc	/^    row_undo_mod_upd_del_multi_sec(undo_node_t *node, que_thr_t *thr,$/;"	f
row_undo_mod_upd_del_sec	row/row0umod.cc	/^    row_undo_mod_upd_del_sec(undo_node_t *node, \/*!< in: row undo node *\/$/;"	f
row_undo_mod_upd_exist_multi_sec	row/row0umod.cc	/^static dberr_t row_undo_mod_upd_exist_multi_sec(undo_node_t *node,$/;"	f	file:
row_undo_mod_upd_exist_sec	row/row0umod.cc	/^    row_undo_mod_upd_exist_sec(undo_node_t *node, \/*!< in: row undo node *\/$/;"	f
row_undo_node_create	row/row0undo.cc	/^undo_node_t *row_undo_node_create(trx_t *trx, que_thr_t *parent,$/;"	f
row_undo_search_clust_to_pcur	row/row0undo.cc	/^bool row_undo_search_clust_to_pcur($/;"	f
row_undo_step	row/row0undo.cc	/^que_thr_t *row_undo_step(que_thr_t *thr) \/*!< in: query thread *\/$/;"	f
row_unlock_for_mysql	row/row0mysql.cc	/^void row_unlock_for_mysql(row_prebuilt_t *prebuilt, ibool has_latches_on_recs) {$/;"	f
row_upd	row/row0upd.cc	/^static dberr_t row_upd(upd_node_t *node, \/*!< in: row update node *\/$/;"	f	file:
row_upd_build_difference_binary	row/row0upd.cc	/^upd_t *row_upd_build_difference_binary(dict_index_t *index,$/;"	f
row_upd_build_sec_rec_difference_binary	row/row0upd.cc	/^upd_t *row_upd_build_sec_rec_difference_binary($/;"	f
row_upd_changes_disowned_external	row/row0upd.cc	/^bool row_upd_changes_disowned_external($/;"	f
row_upd_changes_doc_id	row/row0upd.cc	/^bool row_upd_changes_doc_id(dict_table_t *table,    \/*!< in: table *\/$/;"	f
row_upd_changes_field_size_or_external	row/row0upd.cc	/^ibool row_upd_changes_field_size_or_external($/;"	f
row_upd_changes_first_fields_binary	row/row0upd.cc	/^static ibool row_upd_changes_first_fields_binary($/;"	f	file:
row_upd_changes_fts_column	row/row0upd.cc	/^ulint row_upd_changes_fts_column($/;"	f
row_upd_changes_ord_field_binary	include/row0upd.h	301;"	d
row_upd_changes_ord_field_binary	include/row0upd.h	306;"	d
row_upd_changes_ord_field_binary_func	row/row0upd.cc	/^bool row_upd_changes_ord_field_binary_func(dict_index_t *index,$/;"	f
row_upd_changes_some_index_ord_field_binary	row/row0upd.cc	/^ibool row_upd_changes_some_index_ord_field_binary($/;"	f
row_upd_check_autoinc_counter	row/row0upd.cc	/^static void row_upd_check_autoinc_counter(const upd_node_t *node, mtr_t *mtr) {$/;"	f	file:
row_upd_check_references_constraints	row/row0upd.cc	/^    row_upd_check_references_constraints($/;"	f
row_upd_clust_rec	row/row0upd.cc	/^static MY_ATTRIBUTE((warn_unused_result)) dberr_t row_upd_clust_rec($/;"	f
row_upd_clust_rec_by_insert	row/row0upd.cc	/^static MY_ATTRIBUTE((warn_unused_result)) dberr_t row_upd_clust_rec_by_insert($/;"	f
row_upd_clust_rec_by_insert_inherit	row/row0upd.cc	2493;"	d	file:
row_upd_clust_rec_by_insert_inherit	row/row0upd.cc	2496;"	d	file:
row_upd_clust_rec_by_insert_inherit_func	row/row0upd.cc	/^static bool row_upd_clust_rec_by_insert_inherit_func($/;"	f	file:
row_upd_clust_step	row/row0upd.cc	/^    row_upd_clust_step(upd_node_t *node,     \/*!< in: row update node *\/$/;"	f
row_upd_copy_columns	row/row0upd.cc	/^void row_upd_copy_columns(rec_t *rec, const ulint *offsets,$/;"	f
row_upd_del_mark_clust_rec	row/row0upd.cc	/^static MY_ATTRIBUTE((warn_unused_result)) dberr_t row_upd_del_mark_clust_rec($/;"	f
row_upd_del_multi_sec_index_entry	row/row0upd.cc	/^    row_upd_del_multi_sec_index_entry(upd_node_t *node, que_thr_t *thr) {$/;"	f
row_upd_del_one_multi_sec_index_entry	row/row0upd.cc	/^static inline dberr_t row_upd_del_one_multi_sec_index_entry(dict_index_t *index,$/;"	f	file:
row_upd_eval_new_vals	row/row0upd.cc	/^void row_upd_eval_new_vals(upd_t *update) \/*!< in\/out: update vector *\/$/;"	f
row_upd_ext_fetch	row/row0upd.cc	958;"	d	file:
row_upd_ext_fetch	row/row0upd.cc	968;"	d	file:
row_upd_ext_fetch_func	row/row0upd.cc	/^static byte *row_upd_ext_fetch_func(dict_index_t *clust_index, const byte *data,$/;"	f	file:
row_upd_get_new_autoinc_counter	row/row0upd.cc	/^ib_uint64_t row_upd_get_new_autoinc_counter(const upd_t *update,$/;"	f
row_upd_index_entry_sys_field	row/row0upd.cc	/^void row_upd_index_entry_sys_field(dtuple_t *entry, dict_index_t *index,$/;"	f
row_upd_index_is_referenced	row/row0upd.cc	/^static ibool row_upd_index_is_referenced(dict_index_t *index, \/*!< in: index *\/$/;"	f	file:
row_upd_index_parse	row/row0upd.cc	/^byte *row_upd_index_parse(const byte *ptr,     \/*!< in: buffer *\/$/;"	f
row_upd_index_replace_new_col_val	row/row0upd.cc	963;"	d	file:
row_upd_index_replace_new_col_val	row/row0upd.cc	972;"	d	file:
row_upd_index_replace_new_col_val_func	row/row0upd.cc	/^static void row_upd_index_replace_new_col_val_func($/;"	f	file:
row_upd_index_replace_new_col_vals	row/row0upd.cc	/^void row_upd_index_replace_new_col_vals(dtuple_t *entry,$/;"	f
row_upd_index_replace_new_col_vals_index_pos	row/row0upd.cc	/^void row_upd_index_replace_new_col_vals_index_pos(dtuple_t *entry,$/;"	f
row_upd_index_write_log	row/row0upd.cc	/^void row_upd_index_write_log(dict_index_t *index, const upd_t *update,$/;"	f
row_upd_multi_sec_index_entry	row/row0upd.cc	/^    row_upd_multi_sec_index_entry(upd_node_t *node, que_thr_t *thr,$/;"	f
row_upd_parse_sys_vals	row/row0upd.cc	/^byte *row_upd_parse_sys_vals(const byte *ptr,     \/*!< in: buffer *\/$/;"	f
row_upd_rec_in_place	row/row0upd.cc	/^void row_upd_rec_in_place($/;"	f
row_upd_rec_sys_fields_in_recovery	row/row0upd.cc	/^void row_upd_rec_sys_fields_in_recovery(rec_t *rec, page_zip_des_t *page_zip,$/;"	f
row_upd_replace	row/row0upd.cc	/^void row_upd_replace(trx_t *trx, dtuple_t *row, row_ext_t **ext,$/;"	f
row_upd_replace_vcol	row/row0upd.cc	/^void row_upd_replace_vcol(dtuple_t *row, const dict_table_t *table,$/;"	f
row_upd_sec_index_entry	row/row0upd.cc	/^    row_upd_sec_index_entry(upd_node_t *node, que_thr_t *thr) {$/;"	f
row_upd_sec_index_entry_low	row/row0upd.cc	/^    row_upd_sec_index_entry_low(upd_node_t *node, dtuple_t *old_entry,$/;"	f
row_upd_sec_step	row/row0upd.cc	/^    row_upd_sec_step(upd_node_t *node, \/*!< in: row update node *\/$/;"	f
row_upd_set_vcol_data	row/row0upd.cc	/^static void row_upd_set_vcol_data(dtuple_t *row, const byte *field, ulint len,$/;"	f	file:
row_upd_step	row/row0upd.cc	/^que_thr_t *row_upd_step(que_thr_t *thr) \/*!< in: query thread *\/$/;"	f
row_upd_store_row	row/row0upd.cc	/^void row_upd_store_row(trx_t *trx, upd_node_t *node, THD *thd,$/;"	f
row_upd_store_v_row	row/row0upd.cc	/^static void row_upd_store_v_row(upd_node_t *node, const upd_t *update, THD *thd,$/;"	f	file:
row_upd_write_sys_vals_to_log	row/row0upd.cc	/^byte *row_upd_write_sys_vals_to_log($/;"	f
row_update_cascade_for_mysql	row/row0mysql.cc	/^dberr_t row_update_cascade_for_mysql($/;"	f
row_update_for_mysql	row/row0mysql.cc	/^dberr_t row_update_for_mysql(const byte *mysql_rec, row_prebuilt_t *prebuilt) {$/;"	f
row_update_for_mysql_using_cursor	row/row0mysql.cc	/^static dberr_t row_update_for_mysql_using_cursor(const upd_node_t *node,$/;"	f	file:
row_update_for_mysql_using_upd_graph	row/row0mysql.cc	/^static dberr_t row_update_for_mysql_using_upd_graph(const byte *mysql_rec,$/;"	f	file:
row_update_inplace_for_intrinsic	row/row0mysql.cc	/^static dberr_t row_update_inplace_for_intrinsic(const upd_node_t *node) {$/;"	f	file:
row_update_prebuilt_trx	row/row0mysql.cc	/^void row_update_prebuilt_trx(row_prebuilt_t *prebuilt, trx_t *trx) {$/;"	f
row_update_statistics_if_needed	row/row0mysql.cc	/^void row_update_statistics_if_needed(dict_table_t *table) \/*!< in: table *\/$/;"	f
row_vers_build_clust_v_col	row/row0vers.cc	/^static void row_vers_build_clust_v_col(dtuple_t *row, dict_index_t *clust_index,$/;"	f	file:
row_vers_build_cur_vrow	row/row0vers.cc	/^static const dtuple_t *row_vers_build_cur_vrow($/;"	f	file:
row_vers_build_cur_vrow_low	row/row0vers.cc	/^static void row_vers_build_cur_vrow_low($/;"	f	file:
row_vers_build_for_consistent_read	row/row0vers.cc	/^dberr_t row_vers_build_for_consistent_read($/;"	f
row_vers_build_for_semi_consistent_read	row/row0vers.cc	/^void row_vers_build_for_semi_consistent_read($/;"	f
row_vers_find_matching	row/row0vers.cc	/^static bool row_vers_find_matching($/;"	f	file:
row_vers_impl_x_locked	row/row0vers.cc	/^trx_t *row_vers_impl_x_locked(const rec_t *rec, const dict_index_t *index,$/;"	f
row_vers_impl_x_locked_low	row/row0vers.cc	/^trx_t *row_vers_impl_x_locked_low(const rec_t *const clust_rec,$/;"	f
row_vers_must_preserve_del_marked	row/row0vers.cc	/^ibool row_vers_must_preserve_del_marked(trx_id_t trx_id,$/;"	f
row_vers_non_vc_index_entry_match	row/row0vers.cc	/^static bool row_vers_non_vc_index_entry_match(dict_index_t *index,$/;"	f	file:
row_vers_old_has_index_entry	row/row0vers.cc	/^ibool row_vers_old_has_index_entry($/;"	f
row_vers_vc_matches_cluster	row/row0vers.cc	/^static bool row_vers_vc_matches_cluster($/;"	f	file:
row_wait_for_background_drop_list_empty	row/row0mysql.cc	/^void row_wait_for_background_drop_list_empty() {$/;"	f
rows	include/fts0fts.h	/^  ib_rbt_t *rows; \/*!< rows changed; indexed by doc-id,$/;"	m	struct:fts_trx_table_t
rows_allocd	trx/trx0i_s.cc	/^  ulint rows_allocd; \/*!< number of allocated rows *\/$/;"	m	struct:i_s_table_cache_t	file:
rows_allocd	trx/trx0i_s.cc	/^  ulint rows_allocd; \/*!< the size of this chunk, in number$/;"	m	struct:i_s_mem_chunk_t	file:
rows_in_range_arbitrary_ret_val	btr/btr0cur.cc	/^static const int64_t rows_in_range_arbitrary_ret_val = 10;$/;"	v	file:
rows_in_range_max_retries	btr/btr0cur.cc	/^static const unsigned rows_in_range_max_retries = 4;$/;"	v	file:
rows_used	trx/trx0i_s.cc	/^  ulint rows_used;   \/*!< number of used rows *\/$/;"	m	struct:i_s_table_cache_t	file:
rpl_slave_tblsp	srv/srv0tmp.cc	/^static Tablespace *rpl_slave_tblsp = nullptr;$/;"	m	namespace:ibt	file:
rseg	include/row0purge.h	/^  trx_rseg_t *rseg;$/;"	m	struct:purge_node_t
rseg	include/trx0purge.h	/^  trx_rseg_t *rseg;$/;"	m	struct:trx_purge_t
rseg	include/trx0trx.h	/^  trx_rseg_t *rseg;        \/*!< rollback segment assigned to the$/;"	m	struct:trx_undo_ptr_t
rseg	include/trx0undo.h	/^  trx_rseg_t *rseg;     \/*!< rseg where the undo log belongs *\/$/;"	m	struct:trx_undo_t
rseg_hdr	trx/trx0undo.cc	/^    trx_rsegf_t *rseg_hdr, \/*!< in: rollback segment header, page$/;"	v
rseg_history_len	include/trx0sys.h	/^  std::atomic<uint64_t> rseg_history_len;$/;"	m	struct:trx_sys_t
rseg_iter	include/trx0purge.h	/^  TrxUndoRsegsIterator *rseg_iter;$/;"	m	struct:trx_purge_t
rsegs	include/trx0purge.h	/^  Rsegs *rsegs() { return (m_rsegs); }$/;"	f	struct:undo::Tablespace
rsegs	include/trx0sys.h	/^  Rsegs rsegs; \/*!< Vector of pointers to rollback$/;"	m	struct:trx_sys_t
rsegs	include/trx0trx.h	/^  trx_rsegs_t rsegs;    \/* rollback segments for undo logging *\/$/;"	m	struct:trx_t
rsegs_lock_key	sync/sync0sync.cc	/^mysql_pfs_key_t rsegs_lock_key;$/;"	v
rtr_active	include/gis0type.h	/^  rtr_info_active *rtr_active; \/*!< Active search info *\/$/;"	m	struct:rtr_info_track
rtr_active_mutex	include/gis0type.h	/^  ib_mutex_t rtr_active_mutex;$/;"	m	struct:rtr_info_track
rtr_active_mutex_key	sync/sync0sync.cc	/^mysql_pfs_key_t rtr_active_mutex_key;$/;"	v
rtr_adjust_parent_path	gis/gis0sea.cc	/^static void rtr_adjust_parent_path($/;"	f	file:
rtr_adjust_upper_level	gis/gis0rtree.cc	/^static void rtr_adjust_upper_level($/;"	f	file:
rtr_check_discard_page	gis/gis0sea.cc	/^void rtr_check_discard_page(dict_index_t *index, btr_cur_t *cursor,$/;"	f
rtr_check_same_block	gis/gis0rtree.cc	/^bool rtr_check_same_block($/;"	f
rtr_clean_rtr_info	gis/gis0sea.cc	/^void rtr_clean_rtr_info(rtr_info_t *rtr_info, \/*!< in: RTree search info *\/$/;"	f
rtr_compare_cursor_rec	gis/gis0sea.cc	/^static bool rtr_compare_cursor_rec($/;"	f	file:
rtr_copy_buf	gis/gis0sea.cc	/^static void rtr_copy_buf(matched_rec_t *matches, const buf_block_t *block) {$/;"	f	file:
rtr_create_rtr_info	gis/gis0sea.cc	/^rtr_info_t *rtr_create_rtr_info(bool need_prdt, bool init_matches,$/;"	f
rtr_cur_restore_position	gis/gis0sea.cc	/^static bool rtr_cur_restore_position($/;"	f	file:
rtr_cur_search_with_match	gis/gis0sea.cc	/^bool rtr_cur_search_with_match(const buf_block_t *block, dict_index_t *index,$/;"	f
rtr_estimate_n_rows_in_range	gis/gis0rtree.cc	/^int64_t rtr_estimate_n_rows_in_range(dict_index_t *index, const dtuple_t *tuple,$/;"	f
rtr_get_father_node	gis/gis0sea.cc	/^void rtr_get_father_node($/;"	f
rtr_get_mbr_from_rec	gis/gis0sea.cc	/^void rtr_get_mbr_from_rec(const rec_t *rec, const ulint *offsets,$/;"	f
rtr_get_mbr_from_tuple	gis/gis0sea.cc	/^void rtr_get_mbr_from_tuple(const dtuple_t *dtuple, \/*!< in: data tuple *\/$/;"	f
rtr_index_build_node_ptr	gis/gis0rtree.cc	/^dtuple_t *rtr_index_build_node_ptr($/;"	f
rtr_info	include/gis0type.h	/^typedef struct rtr_info {$/;"	s
rtr_info	include/row0mysql.h	/^  rtr_info_t *rtr_info; \/*!< R-tree Search Info *\/$/;"	m	struct:row_prebuilt_t
rtr_info_active	include/gis0type.h	/^typedef std::list<rtr_info_t *, ut_allocator<rtr_info_t *>> rtr_info_active;$/;"	t
rtr_info_t	include/gis0type.h	/^} rtr_info_t;$/;"	t	typeref:struct:rtr_info
rtr_info_track	include/gis0type.h	/^typedef struct rtr_info_track {$/;"	s
rtr_info_track_t	include/gis0type.h	/^} rtr_info_track_t;$/;"	t	typeref:struct:rtr_info_track
rtr_info_update_btr	gis/gis0sea.cc	/^void rtr_info_update_btr(btr_cur_t *cursor, rtr_info_t *rtr_info) {$/;"	f
rtr_init_match	gis/gis0sea.cc	/^static void rtr_init_match($/;"	f	file:
rtr_init_rtr_info	gis/gis0sea.cc	/^void rtr_init_rtr_info($/;"	f
rtr_ins_enlarge_mbr	gis/gis0rtree.cc	/^dberr_t rtr_ins_enlarge_mbr(btr_cur_t *btr_cur, \/*!< in: btr cursor *\/$/;"	f
rtr_leaf_push_match_rec	gis/gis0sea.cc	/^static void rtr_leaf_push_match_rec($/;"	f	file:
rtr_match_mutex	include/gis0type.h	/^  ib_mutex_t rtr_match_mutex;   \/*!< mutex protect the match_recs$/;"	m	struct:matched_rec
rtr_match_mutex_key	sync/sync0sync.cc	/^mysql_pfs_key_t rtr_match_mutex_key;$/;"	v
rtr_merge_and_update_mbr	gis/gis0rtree.cc	/^dberr_t rtr_merge_and_update_mbr(btr_cur_t *cursor, btr_cur_t *cursor2,$/;"	f
rtr_merge_mbr_changed	gis/gis0rtree.cc	/^bool rtr_merge_mbr_changed(btr_cur_t *cursor, btr_cur_t *cursor2,$/;"	f
rtr_node_path_t	include/gis0type.h	/^typedef std::vector<node_visit_t, ut_allocator<node_visit_t>> rtr_node_path_t;$/;"	t
rtr_node_ptr_delete	gis/gis0rtree.cc	/^void rtr_node_ptr_delete(dict_index_t *index, btr_cur_t *sea_cur,$/;"	f
rtr_non_leaf_insert_stack_push	gis/gis0sea.cc	/^static void rtr_non_leaf_insert_stack_push($/;"	f	file:
rtr_page_copy_rec_list_end_no_locks	gis/gis0rtree.cc	/^void rtr_page_copy_rec_list_end_no_locks(buf_block_t *new_block,$/;"	f
rtr_page_copy_rec_list_start_no_locks	gis/gis0rtree.cc	/^void rtr_page_copy_rec_list_start_no_locks($/;"	f
rtr_page_get_father	gis/gis0sea.cc	/^void rtr_page_get_father(dict_index_t *index, buf_block_t *block, mtr_t *mtr,$/;"	f
rtr_page_get_father_block	gis/gis0sea.cc	/^ulint *rtr_page_get_father_block($/;"	f
rtr_page_get_father_node_ptr	gis/gis0sea.cc	/^static ulint *rtr_page_get_father_node_ptr($/;"	f	file:
rtr_page_split_and_insert	gis/gis0rtree.cc	/^rec_t *rtr_page_split_and_insert($/;"	f
rtr_page_split_initialize_nodes	gis/gis0rtree.cc	/^static rtr_split_node_t *rtr_page_split_initialize_nodes($/;"	f	file:
rtr_path_mutex	include/gis0type.h	/^  ib_mutex_t rtr_path_mutex;$/;"	m	struct:rtr_info
rtr_path_mutex_key	sync/sync0sync.cc	/^mysql_pfs_key_t rtr_path_mutex_key;$/;"	v
rtr_pcur_getnext_from_path	gis/gis0sea.cc	/^static bool rtr_pcur_getnext_from_path($/;"	f	file:
rtr_pcur_move_to_next	gis/gis0sea.cc	/^bool rtr_pcur_move_to_next(const dtuple_t *tuple, page_cur_mode_t mode,$/;"	f
rtr_pcur_open	include/gis0rtree.h	292;"	d
rtr_pcur_open_low	gis/gis0sea.cc	/^void rtr_pcur_open_low($/;"	f
rtr_rebuild_path	gis/gis0sea.cc	/^static void rtr_rebuild_path($/;"	f	file:
rtr_rec	include/gis0type.h	/^typedef struct rtr_rec {$/;"	s
rtr_rec_cal_increase	gis/gis0rtree.cc	/^double rtr_rec_cal_increase($/;"	f
rtr_rec_move	include/gis0type.h	/^typedef struct rtr_rec_move {$/;"	s
rtr_rec_move_t	include/gis0type.h	/^} rtr_rec_move_t;$/;"	t	typeref:struct:rtr_rec_move
rtr_rec_t	include/gis0type.h	/^} rtr_rec_t;$/;"	t	typeref:struct:rtr_rec
rtr_rec_vector	include/gis0type.h	/^typedef std::vector<rtr_rec_t, ut_allocator<rtr_rec_t>> rtr_rec_vector;$/;"	t
rtr_split_node_t	include/gis0geo.h	/^struct rtr_split_node_t {$/;"	s
rtr_split_page_move_rec_list	gis/gis0rtree.cc	/^static ibool rtr_split_page_move_rec_list($/;"	f	file:
rtr_srs	include/dict0mem.h	/^  std::unique_ptr<dd::Spatial_reference_system> rtr_srs;$/;"	m	struct:dict_index_t
rtr_ssn	include/dict0mem.h	/^  rtr_ssn_t rtr_ssn;           \/*!< Node sequence number for RTree *\/$/;"	m	struct:dict_index_t
rtr_ssn_mutex_key	sync/sync0sync.cc	/^mysql_pfs_key_t rtr_ssn_mutex_key;$/;"	v
rtr_ssn_t	include/gis0type.h	/^} rtr_ssn_t;$/;"	t	typeref:struct:rtree_ssn
rtr_store_parent_path	gis/gis0sea.cc	/^ulint rtr_store_parent_path($/;"	f
rtr_track	include/dict0mem.h	/^  rtr_info_track_t *rtr_track; \/*!< tracking all R-Tree search cursors *\/$/;"	m	struct:dict_index_t
rtr_update_mbr_field	gis/gis0rtree.cc	/^bool rtr_update_mbr_field($/;"	f
rtr_update_mbr_field_in_place	gis/gis0rtree.cc	/^static void rtr_update_mbr_field_in_place($/;"	f	file:
rtree_key_cmp	gis/gis0geo.cc	/^bool rtree_key_cmp(page_cur_mode_t mode, const uchar *a, int a_len,$/;"	f
rtree_ssn	include/gis0type.h	/^typedef struct rtree_ssn {$/;"	s
run	include/detail/ut0new.h	/^  static void run(void *mem, Tuple &&args) {$/;"	f	struct:ut::detail::Loop
run	include/detail/ut0new.h	/^  static void run(void *mem, Tuple &&args) {}$/;"	f	struct:ut::detail::Loop
run	row/row0pread-adapter.cc	/^dberr_t Parallel_reader_adapter::run(void **thread_ctxs, Init_fn init_fn,$/;"	f	class:Parallel_reader_adapter
run	row/row0pread-histogram.cc	/^dberr_t Histogram_sampler::run() {$/;"	f	class:Histogram_sampler
run	row/row0pread.cc	/^dberr_t Parallel_reader::run(size_t n_threads) {$/;"	f	class:Parallel_reader
run_node	include/que0que.h	/^  que_node_t *run_node;  \/*!< pointer to the node where the$/;"	m	struct:que_thr_t
run_with_hint	include/buf0block_hint.h	/^  auto run_with_hint(F &&f) {$/;"	f	class:buf::Block_hint
running	include/trx0purge.h	/^  volatile bool running;$/;"	m	struct:trx_purge_t
rw_lock	include/lock0latches.h	/^    Sharded_rw_lock rw_lock;$/;"	m	class:locksys::Latches::Unique_sharded_rw_lock
rw_lock	trx/trx0i_s.cc	/^  rw_lock_t *rw_lock;               \/*!< read-write lock protecting$/;"	m	struct:trx_i_s_cache_t	file:
rw_lock_add_debug_info	sync/sync0rw.cc	/^void rw_lock_add_debug_info($/;"	f
rw_lock_create	include/sync0rw.h	128;"	d
rw_lock_create	include/sync0rw.h	131;"	d
rw_lock_create	include/sync0rw.h	198;"	d
rw_lock_create	include/sync0rw.h	201;"	d
rw_lock_create_func	sync/sync0rw.cc	/^void rw_lock_create_func($/;"	f
rw_lock_debug_create	sync/sync0rw.cc	/^static rw_lock_debug_t *rw_lock_debug_create(void) {$/;"	f	file:
rw_lock_debug_event	sync/sync0debug.cc	/^static os_event_t rw_lock_debug_event;$/;"	v	file:
rw_lock_debug_free	sync/sync0rw.cc	/^static void rw_lock_debug_free(rw_lock_debug_t *info) { ut_free(info); }$/;"	f	file:
rw_lock_debug_mutex	sync/sync0debug.cc	/^static ib_mutex_t rw_lock_debug_mutex;$/;"	v	file:
rw_lock_debug_mutex_enter	sync/sync0debug.cc	/^void rw_lock_debug_mutex_enter() {$/;"	f
rw_lock_debug_mutex_exit	sync/sync0debug.cc	/^void rw_lock_debug_mutex_exit() {$/;"	f
rw_lock_debug_mutex_key	sync/sync0sync.cc	/^mysql_pfs_key_t rw_lock_debug_mutex_key;$/;"	v
rw_lock_debug_print	sync/sync0rw.cc	/^void rw_lock_debug_print(FILE *f, const rw_lock_debug_t *info) {$/;"	f
rw_lock_debug_t	include/sync0rw.h	/^struct rw_lock_debug_t {$/;"	s
rw_lock_flag_t	include/sync0types.h	/^enum rw_lock_flag_t {$/;"	g
rw_lock_flags_t	include/sync0types.h	/^typedef ulint rw_lock_flags_t;$/;"	t
rw_lock_free	include/sync0rw.h	192;"	d
rw_lock_free	include/sync0rw.h	264;"	d
rw_lock_free_func	sync/sync0rw.cc	/^void rw_lock_free_func(rw_lock_t *lock) \/*!< in\/out: rw-lock *\/$/;"	f
rw_lock_get_debug_info	sync/sync0rw.cc	/^static void rw_lock_get_debug_info(const rw_lock_t *lock, Infos *infos) {$/;"	f	file:
rw_lock_is_locked	sync/sync0rw.cc	/^bool rw_lock_is_locked(rw_lock_t *lock, \/*!< in: rw-lock *\/$/;"	f
rw_lock_list	sync/sync0rw.cc	/^rw_lock_list_t rw_lock_list;$/;"	v
rw_lock_list_mutex	sync/sync0rw.cc	/^ib_mutex_t rw_lock_list_mutex;$/;"	v
rw_lock_list_mutex_key	sync/sync0sync.cc	/^mysql_pfs_key_t rw_lock_list_mutex_key;$/;"	v
rw_lock_list_print_info	sync/sync0rw.cc	/^void rw_lock_list_print_info(FILE *file) \/*!< in: file where to print *\/$/;"	f
rw_lock_list_t	include/sync0rw.h	/^typedef UT_LIST_BASE_NODE_T(rw_lock_t) rw_lock_list_t;$/;"	t
rw_lock_mutex_key	sync/sync0sync.cc	/^mysql_pfs_key_t rw_lock_mutex_key;$/;"	v
rw_lock_own	include/sync0rw.h	/^bool rw_lock_own(rw_lock_t *lock, ulint lock_type) { return (lock != nullptr); }$/;"	f
rw_lock_own	sync/sync0rw.cc	/^ibool rw_lock_own(rw_lock_t *lock, \/*!< in: rw-lock *\/$/;"	f
rw_lock_own_flagged	include/sync0rw.h	86;"	d
rw_lock_own_flagged	sync/sync0rw.cc	/^bool rw_lock_own_flagged(const rw_lock_t *lock, rw_lock_flags_t flags) {$/;"	f
rw_lock_remove_debug_info	sync/sync0rw.cc	/^void rw_lock_remove_debug_info(rw_lock_t *lock, \/*!< in: rw-lock *\/$/;"	f
rw_lock_s_lock	include/sync0rw.h	137;"	d
rw_lock_s_lock	include/sync0rw.h	209;"	d
rw_lock_s_lock	include/sync0rw.h	71;"	d
rw_lock_s_lock_gen	include/sync0rw.h	142;"	d
rw_lock_s_lock_gen	include/sync0rw.h	214;"	d
rw_lock_s_lock_inline	include/sync0rw.h	139;"	d
rw_lock_s_lock_inline	include/sync0rw.h	211;"	d
rw_lock_s_lock_inline	include/sync0rw.h	78;"	d
rw_lock_s_lock_nowait	include/sync0rw.h	145;"	d
rw_lock_s_lock_nowait	include/sync0rw.h	217;"	d
rw_lock_s_lock_nowait	include/sync0rw.h	85;"	d
rw_lock_s_lock_spin	sync/sync0rw.cc	/^void rw_lock_s_lock_spin($/;"	f
rw_lock_s_unlock	include/sync0rw.h	268;"	d
rw_lock_s_unlock	include/sync0rw.h	72;"	d
rw_lock_s_unlock_gen	include/sync0rw.h	148;"	d
rw_lock_s_unlock_gen	include/sync0rw.h	150;"	d
rw_lock_s_unlock_gen	include/sync0rw.h	220;"	d
rw_lock_s_unlock_gen	include/sync0rw.h	222;"	d
rw_lock_s_unlock_inline	include/sync0rw.h	79;"	d
rw_lock_sx_lock	include/sync0rw.h	153;"	d
rw_lock_sx_lock	include/sync0rw.h	225;"	d
rw_lock_sx_lock	include/sync0rw.h	76;"	d
rw_lock_sx_lock_func	sync/sync0rw.cc	/^void rw_lock_sx_lock_func($/;"	f
rw_lock_sx_lock_gen	include/sync0rw.h	158;"	d
rw_lock_sx_lock_gen	include/sync0rw.h	230;"	d
rw_lock_sx_lock_inline	include/sync0rw.h	155;"	d
rw_lock_sx_lock_inline	include/sync0rw.h	227;"	d
rw_lock_sx_lock_inline	include/sync0rw.h	82;"	d
rw_lock_sx_lock_low	sync/sync0rw.cc	/^bool rw_lock_sx_lock_low($/;"	f
rw_lock_sx_lock_nowait	include/sync0rw.h	161;"	d
rw_lock_sx_lock_nowait	include/sync0rw.h	233;"	d
rw_lock_sx_unlock	include/sync0rw.h	165;"	d
rw_lock_sx_unlock	include/sync0rw.h	168;"	d
rw_lock_sx_unlock	include/sync0rw.h	237;"	d
rw_lock_sx_unlock	include/sync0rw.h	240;"	d
rw_lock_sx_unlock	include/sync0rw.h	77;"	d
rw_lock_sx_unlock_gen	include/sync0rw.h	166;"	d
rw_lock_sx_unlock_gen	include/sync0rw.h	169;"	d
rw_lock_sx_unlock_gen	include/sync0rw.h	238;"	d
rw_lock_sx_unlock_gen	include/sync0rw.h	241;"	d
rw_lock_sx_unlock_inline	include/sync0rw.h	83;"	d
rw_lock_t	include/sync0rw.h	/^struct rw_lock_t$/;"	s
rw_lock_type_t	include/sync0rw.h	/^enum rw_lock_type_t {$/;"	g
rw_lock_validate	sync/sync0rw.cc	/^bool rw_lock_validate(const rw_lock_t *lock) \/*!< in: rw-lock *\/$/;"	f
rw_lock_x_lock	include/sync0rw.h	172;"	d
rw_lock_x_lock	include/sync0rw.h	244;"	d
rw_lock_x_lock	include/sync0rw.h	73;"	d
rw_lock_x_lock_func	sync/sync0rw.cc	/^void rw_lock_x_lock_func($/;"	f
rw_lock_x_lock_func_nowait_inline	include/sync0rw.h	183;"	d
rw_lock_x_lock_func_nowait_inline	include/sync0rw.h	255;"	d
rw_lock_x_lock_gen	include/sync0rw.h	177;"	d
rw_lock_x_lock_gen	include/sync0rw.h	249;"	d
rw_lock_x_lock_inline	include/sync0rw.h	174;"	d
rw_lock_x_lock_inline	include/sync0rw.h	246;"	d
rw_lock_x_lock_inline	include/sync0rw.h	80;"	d
rw_lock_x_lock_low	sync/sync0rw.cc	/^bool rw_lock_x_lock_low($/;"	f
rw_lock_x_lock_move_ownership	sync/sync0rw.cc	/^void rw_lock_x_lock_move_ownership($/;"	f
rw_lock_x_lock_nowait	include/sync0rw.h	180;"	d
rw_lock_x_lock_nowait	include/sync0rw.h	252;"	d
rw_lock_x_lock_nowait	include/sync0rw.h	74;"	d
rw_lock_x_lock_wait	sync/sync0rw.cc	452;"	d	file:
rw_lock_x_lock_wait	sync/sync0rw.cc	455;"	d	file:
rw_lock_x_lock_wait_func	sync/sync0rw.cc	/^void rw_lock_x_lock_wait_func($/;"	f
rw_lock_x_unlock	include/sync0rw.h	269;"	d
rw_lock_x_unlock	include/sync0rw.h	75;"	d
rw_lock_x_unlock_gen	include/sync0rw.h	187;"	d
rw_lock_x_unlock_gen	include/sync0rw.h	189;"	d
rw_lock_x_unlock_gen	include/sync0rw.h	259;"	d
rw_lock_x_unlock_gen	include/sync0rw.h	261;"	d
rw_lock_x_unlock_inline	include/sync0rw.h	81;"	d
rw_locks	include/hash0hash.h	/^    rw_lock_t *rw_locks; \/* NULL, or an array of rw_lcoks$/;"	m	union:hash_table_t::__anon17
rw_max_trx_no	include/trx0sys.h	/^  trx_id_t rw_max_trx_no; \/*!< Max trx number of read-write$/;"	m	struct:trx_sys_t
rw_perm	include/os0file.h	/^  bool rw_perm;                \/*!< true if can be opened$/;"	m	struct:AIO_mode::os_file_stat_t
rw_trx_ids	include/trx0sys.h	/^  trx_ids_t rw_trx_ids; \/*!< Array of Read write transaction IDs$/;"	m	struct:trx_sys_t
rw_trx_list	include/trx0sys.h	/^  trx_ut_list_t rw_trx_list; \/*!< List of active and committed in$/;"	m	struct:trx_sys_t
rw_trx_set	include/trx0sys.h	/^  TrxIdSet rw_trx_set; \/*!< Mapping from transaction id$/;"	m	struct:trx_sys_t
s_LRU_batch_segments	buf/buf0dblwr.cc	/^  static Batch_segments *s_LRU_batch_segments;$/;"	m	class:Double_write	file:
s_active_threads	include/row0pread.h	/^  static std::atomic_size_t s_active_threads;$/;"	v
s_clone_abort_count	clone/clone0clone.cc	/^uint Clone_Sys::s_clone_abort_count = 0;$/;"	m	class:Clone_Sys	file:
s_clone_abort_count	include/clone0clone.h	/^  static uint s_clone_abort_count;$/;"	m	class:Clone_Sys
s_clone_sys_state	clone/clone0clone.cc	/^Clone_Sys_State Clone_Sys::s_clone_sys_state = {CLONE_SYS_INACTIVE};$/;"	m	class:Clone_Sys	file:
s_clone_sys_state	include/clone0clone.h	/^  static Clone_Sys_State s_clone_sys_state;$/;"	m	class:Clone_Sys
s_clone_wait_count	clone/clone0clone.cc	/^uint Clone_Sys::s_clone_wait_count = 0;$/;"	m	class:Clone_Sys	file:
s_clone_wait_count	include/clone0clone.h	/^  static uint s_clone_wait_count;$/;"	m	class:Clone_Sys
s_cols	include/dict0mem.h	/^  dict_s_col_list *s_cols;$/;"	m	struct:dict_table_t
s_compression_threshold	include/clone0repl.h	/^  const static uint32_t s_compression_threshold = 50;$/;"	m	class:Clone_persist_gtid
s_config_tables	clone/clone0api.cc	/^    Fixup_data::s_config_tables = {};$/;"	m	class:__anon2::Fixup_data	file:
s_config_tables	clone/clone0api.cc	/^  static const std::array<const char *, S_NUM_CONFIG_TABLES> s_config_tables;$/;"	m	class:__anon2::Fixup_data	file:
s_count	include/sync0sync.h	/^  static unsigned int s_count;$/;"	m	struct:mysql_pfs_key_t
s_count	sync/sync0sync.cc	/^unsigned int mysql_pfs_key_t::s_count = 0;$/;"	m	class:mysql_pfs_key_t	file:
s_dblwr_file_ctx	arch/arch0page.cc	/^Arch_File_Ctx Arch_Group::s_dblwr_file_ctx;$/;"	m	class:Arch_Group	file:
s_dblwr_file_ctx	include/arch0arch.h	/^  static Arch_File_Ctx s_dblwr_file_ctx;$/;"	m	class:Arch_Group
s_dd_space_file_name	dict/dict0dict.cc	/^const char *dict_sys_t::s_dd_space_file_name = "mysql.ibd";$/;"	m	class:dict_sys_t	file:
s_dd_space_file_name	include/dict0dict.h	/^  static const char *s_dd_space_file_name;$/;"	m	struct:dict_sys_t
s_dd_space_id	include/dict0dict.h	/^  static constexpr dd::Object_id s_dd_space_id = 1;$/;"	m	struct:dict_sys_t
s_dd_space_name	dict/dict0dict.cc	/^const char *dict_sys_t::s_dd_space_name = "mysql";$/;"	m	class:dict_sys_t	file:
s_dd_space_name	include/dict0dict.h	/^  static const char *s_dd_space_name;$/;"	m	struct:dict_sys_t
s_dd_sys_space_id	include/dict0dict.h	/^  static constexpr dd::Object_id s_dd_sys_space_id = 2;$/;"	m	struct:dict_sys_t
s_dd_table_ids	dict/dict0dict.cc	/^std::set<dd::Object_id> dict_sys_t::s_dd_table_ids = {};$/;"	m	class:dict_sys_t	file:
s_dd_table_ids	include/dict0dict.h	/^  static std::set<dd::Object_id> s_dd_table_ids;$/;"	m	struct:dict_sys_t
s_dd_temp_space_id	include/dict0dict.h	/^  static constexpr dd::Object_id s_dd_temp_space_id = 3;$/;"	m	struct:dict_sys_t
s_default_allocate_num	include/data0data.h	/^  static constexpr uint32_t s_default_allocate_num = 24;$/;"	m	struct:multi_value_data
s_default_undo_space_name_1	dict/dict0dict.cc	/^const char *dict_sys_t::s_default_undo_space_name_1 = "innodb_undo_001";$/;"	m	class:dict_sys_t	file:
s_default_undo_space_name_1	include/dict0dict.h	/^  static const char *s_default_undo_space_name_1;$/;"	m	struct:dict_sys_t
s_default_undo_space_name_2	dict/dict0dict.cc	/^const char *dict_sys_t::s_default_undo_space_name_2 = "innodb_undo_002";$/;"	m	class:dict_sys_t	file:
s_default_undo_space_name_2	include/dict0dict.h	/^  static const char *s_default_undo_space_name_2;$/;"	m	struct:dict_sys_t
s_dynamic_meta_index_id	include/dict0dict.h	/^  static constexpr space_index_t s_dynamic_meta_index_id = 2;$/;"	m	struct:dict_sys_t
s_dynamic_meta_table_id	include/dict0dict.h	/^  static constexpr table_id_t s_dynamic_meta_table_id = 2;$/;"	m	struct:dict_sys_t
s_file_per_table_name	dict/dict0dict.cc	/^const char *dict_sys_t::s_file_per_table_name = "innodb_file_per_table";$/;"	m	class:dict_sys_t	file:
s_file_per_table_name	include/dict0dict.h	/^  static const char *s_file_per_table_name;$/;"	m	struct:dict_sys_t
s_files	buf/buf0dblwr.cc	/^  static std::vector<dblwr::File> s_files;$/;"	m	class:Double_write	file:
s_files	buf/buf0dblwr.cc	/^std::vector<dblwr::File> Double_write::s_files;$/;"	m	class:Double_write	file:
s_flush_list_batch_segments	buf/buf0dblwr.cc	/^  static Batch_segments *s_flush_list_batch_segments;$/;"	m	class:Double_write	file:
s_gtid_threshold	include/clone0repl.h	/^  const static int s_gtid_threshold = 1024;$/;"	m	class:Clone_persist_gtid
s_ibuf	os/os0file.cc	/^  static AIO *s_ibuf;$/;"	m	class:AIO	file:
s_ibuf	os/os0file.cc	/^AIO *AIO::s_ibuf;$/;"	m	class:AIO	file:
s_id_col_len	include/log0ddl.h	/^  static constexpr unsigned s_id_col_len = 8;$/;"	m	class:Log_Type::DDL_Log_Table
s_id_col_no	include/log0ddl.h	/^  static constexpr unsigned s_id_col_no = 0;$/;"	m	class:Log_Type::DDL_Log_Table
s_in_recovery	include/log0ddl.h	/^  static bool s_in_recovery;$/;"	m	class:Log_Type::Log_DDL
s_in_recovery	log/log0ddl.cc	/^bool Log_DDL::s_in_recovery = false;$/;"	m	class:Log_DDL	file:
s_index_id_col_len	include/log0ddl.h	/^  static constexpr unsigned s_index_id_col_len = 8;$/;"	m	class:Log_Type::DDL_Log_Table
s_index_id_col_no	include/log0ddl.h	/^  static constexpr unsigned s_index_id_col_no = 5;$/;"	m	class:Log_Type::DDL_Log_Table
s_initialized	sync/sync0debug.cc	/^  static bool s_initialized;$/;"	m	struct:LatchDebug	file:
s_initialized	sync/sync0debug.cc	/^bool LatchDebug::s_initialized = false;$/;"	m	class:LatchDebug	file:
s_instance	sync/sync0debug.cc	/^  static LatchDebug *s_instance;$/;"	m	struct:LatchDebug	file:
s_instance	sync/sync0debug.cc	/^LatchDebug *LatchDebug::s_instance = nullptr;$/;"	m	class:LatchDebug	file:
s_instances	buf/buf0dblwr.cc	/^  static Instances *s_instances;$/;"	m	class:Double_write	file:
s_invalid_space_id	include/dict0dict.h	/^  static constexpr space_id_t s_invalid_space_id = 0xFFFFFFFF;$/;"	m	struct:dict_sys_t
s_lock	include/lock0latches.h	/^    void s_lock(ut::Location location) {$/;"	f	class:locksys::Latches::Unique_sharded_rw_lock
s_lock	include/sync0sharded_rw.h	/^  size_t s_lock() { return 0; }$/;"	f	class:Sharded_rw_lock
s_lock	include/sync0sharded_rw.h	/^  size_t s_lock(ut::Location location) {$/;"	f	class:Sharded_rw_lock
s_lock	include/trx0purge.h	/^  void s_lock() { rw_lock_s_lock(m_latch); }$/;"	f	class:undo::Tablespaces
s_lock	include/trx0types.h	/^  void s_lock() { rw_lock_s_lock(m_latch); }$/;"	f	class:Rsegs
s_log	os/os0file.cc	/^  static AIO *s_log;$/;"	m	class:AIO	file:
s_log	os/os0file.cc	/^AIO *AIO::s_log;$/;"	m	class:AIO	file:
s_log_ext	include/trx0purge.h	/^const char *const s_log_ext = "trunc.log";$/;"	m	namespace:undo
s_log_length_for_null_or_empty	include/data0data.h	/^  static constexpr uint32_t s_log_length_for_null_or_empty = 2;$/;"	m	class:Multi_value_logger
s_log_prefix	include/trx0purge.h	/^const char *const s_log_prefix = "undo_";$/;"	m	namespace:undo
s_log_space_first_id	include/dict0dict.h	/^  static constexpr space_id_t s_log_space_first_id = 0xFFFFFFF0UL;$/;"	m	struct:dict_sys_t
s_logging	include/mtr0mtr.h	/^  static Logging s_logging;$/;"	m	struct:mtr_t
s_logging	mtr/mtr0mtr.cc	/^mtr_t::Logging mtr_t::s_logging;$/;"	m	class:mtr_t	file:
s_magic	include/trx0purge.h	/^const ib_uint32_t s_magic = 76845412;$/;"	m	namespace:undo
s_master_key_id	include/os0enc.h	/^  static uint32_t s_master_key_id;$/;"	m	class:Encryption
s_master_key_id	os/os0enc.cc	/^uint32_t Encryption::s_master_key_id = Encryption::DEFAULT_MASTER_KEY_ID;$/;"	m	class:Encryption	file:
s_max_compressed_mv_key_length_size	include/data0data.h	/^  static constexpr uint8_t s_max_compressed_mv_key_length_size = 2;$/;"	m	class:Multi_value_logger
s_max_gtid_threshold	include/clone0repl.h	/^  const static int s_max_gtid_threshold = 1024 * 1024;$/;"	m	class:Clone_persist_gtid
s_max_temp_space_id	include/dict0dict.h	/^  static constexpr space_id_t s_max_temp_space_id = s_min_undo_space_id - 1;$/;"	m	struct:dict_sys_t
s_max_undo_space_id	include/dict0dict.h	/^  static constexpr space_id_t s_max_undo_space_id = s_log_space_first_id - 1;$/;"	m	struct:dict_sys_t
s_min_temp_space_id	include/dict0dict.h	/^  static constexpr space_id_t s_min_temp_space_id =$/;"	m	struct:dict_sys_t
s_min_undo_space_id	include/dict0dict.h	/^  static constexpr space_id_t s_min_undo_space_id =$/;"	m	struct:dict_sys_t
s_mode_update	include/mtr0mtr.h	/^  static bool s_mode_update[MTR_LOG_MODE_MAX][MTR_LOG_MODE_MAX];$/;"	m	struct:mtr_t
s_mode_update	mtr/mtr0mtr.cc	/^bool mtr_t::s_mode_update[MTR_LOG_MODE_MAX][MTR_LOG_MODE_MAX] = {$/;"	m	class:mtr_t	file:
s_mode_update_valid	include/mtr0mtr.h	/^  static bool s_mode_update_valid[MTR_LOG_MODE_MAX][MTR_LOG_MODE_MAX];$/;"	m	struct:mtr_t
s_mode_update_valid	mtr/mtr0mtr.cc	/^bool mtr_t::s_mode_update_valid[MTR_LOG_MODE_MAX][MTR_LOG_MODE_MAX] = {$/;"	m	class:mtr_t	file:
s_multi_value_no_index_value	include/data0data.h	/^  static constexpr uint16_t s_multi_value_no_index_value = 0x0;$/;"	m	class:Multi_value_logger
s_multi_value_null	include/data0data.h	/^  static constexpr uint16_t s_multi_value_null = 0x1;$/;"	m	class:Multi_value_logger
s_multi_value_virtual_col_length_marker	include/data0data.h	/^  static constexpr uint8_t s_multi_value_virtual_col_length_marker = 0xFF;$/;"	m	class:Multi_value_logger
s_my_thread_active_mtrs	include/mtr0mtr.h	/^  static thread_local ut::unordered_set<const mtr_t *> s_my_thread_active_mtrs;$/;"	m	struct:mtr_t
s_my_thread_active_mtrs	mtr/mtr0mtr.cc	/^thread_local ut::unordered_set<const mtr_t *> mtr_t::s_my_thread_active_mtrs;$/;"	m	class:mtr_t	file:
s_n_instances	buf/buf0dblwr.cc	/^  static uint32_t s_n_instances;$/;"	m	class:Double_write	file:
s_n_pages	buf/buf0dblwr.cc	/^  static uint32_t s_n_pages;$/;"	m	struct:dblwr::File	file:
s_n_spaces_in_lru	fil/fil0fil.cc	/^  static std::atomic_size_t s_n_spaces_in_lru;$/;"	m	class:Fil_shard	file:
s_n_spaces_in_lru	fil/fil0fil.cc	/^std::atomic_size_t Fil_shard::s_n_spaces_in_lru;$/;"	m	class:Fil_shard	file:
s_new_file_path_col_no	include/log0ddl.h	/^  static constexpr unsigned s_new_file_path_col_no = 8;$/;"	m	class:Log_Type::DDL_Log_Table
s_old_file_path_col_no	include/log0ddl.h	/^  static constexpr unsigned s_old_file_path_col_no = 7;$/;"	m	class:Log_Type::DDL_Log_Table
s_open_slot	fil/fil0fil.cc	/^  static std::atomic_size_t s_open_slot;$/;"	m	class:Fil_shard	file:
s_open_slot	fil/fil0fil.cc	/^std::atomic_size_t Fil_shard::s_open_slot;$/;"	m	class:Fil_shard	file:
s_own	include/lock0latches.h	/^    bool s_own() const {$/;"	f	class:locksys::Latches::Unique_sharded_rw_lock
s_own	include/sync0sharded_rw.h	/^  bool s_own(size_t shard_no) const {$/;"	f	class:Sharded_rw_lock
s_page_no_col_len	include/log0ddl.h	/^  static constexpr unsigned s_page_no_col_len = 4;$/;"	m	class:Log_Type::DDL_Log_Table
s_page_no_col_no	include/log0ddl.h	/^  static constexpr unsigned s_page_no_col_no = 4;$/;"	m	class:Log_Type::DDL_Log_Table
s_pos	include/dict0mem.h	/^  ulint s_pos;$/;"	m	struct:dict_s_col_t
s_reads	os/os0file.cc	/^  static AIO *s_reads;$/;"	m	class:AIO	file:
s_reads	os/os0file.cc	/^AIO *AIO::s_reads;$/;"	m	class:AIO	file:
s_redo_space	fil/fil0fil.cc	/^fil_space_t *fil_space_t::s_redo_space;$/;"	m	class:fil_space_t	file:
s_redo_space	include/fil0fil.h	/^  static fil_space_t *s_redo_space;$/;"	m	struct:fil_space_t
s_reserved_space_id	include/dict0dict.h	/^  static constexpr space_id_t s_reserved_space_id = s_min_temp_space_id;$/;"	m	struct:dict_sys_t
s_scan_pos	include/trx0purge.h	/^  static size_t s_scan_pos;$/;"	m	class:undo::Truncate
s_scan_pos	trx/trx0purge.cc	/^size_t undo::Truncate::s_scan_pos;$/;"	m	class:undo::Truncate	file:
s_segments	buf/buf0dblwr.cc	/^  static std::vector<Batch_segment *> s_segments;$/;"	m	class:Double_write	file:
s_single_segments	buf/buf0dblwr.cc	/^  static Segments *s_single_segments;$/;"	m	class:Double_write	file:
s_space_id	include/dict0dict.h	/^  static constexpr space_id_t s_space_id = 0xFFFFFFFE;$/;"	m	struct:dict_sys_t
s_space_id_col_len	include/log0ddl.h	/^  static constexpr unsigned s_space_id_col_len = 4;$/;"	m	class:Log_Type::DDL_Log_Table
s_space_id_col_no	include/log0ddl.h	/^  static constexpr unsigned s_space_id_col_no = 3;$/;"	m	class:Log_Type::DDL_Log_Table
s_sync	os/os0file.cc	/^  static AIO *s_sync;$/;"	m	class:AIO	file:
s_sync	os/os0file.cc	/^AIO *AIO::s_sync;$/;"	m	class:AIO	file:
s_sys_space	fil/fil0fil.cc	/^fil_space_t *fil_space_t::s_sys_space;$/;"	m	class:fil_space_t	file:
s_sys_space	include/fil0fil.h	/^  static fil_space_t *s_sys_space;$/;"	m	struct:fil_space_t
s_sys_space_name	dict/dict0dict.cc	/^const char *dict_sys_t::s_sys_space_name = "innodb_system";$/;"	m	class:dict_sys_t	file:
s_sys_space_name	include/dict0dict.h	/^  static const char *s_sys_space_name;$/;"	m	struct:dict_sys_t
s_table_id_col_len	include/log0ddl.h	/^  static constexpr unsigned s_table_id_col_len = 8;$/;"	m	class:Log_Type::DDL_Log_Table
s_table_id_col_no	include/log0ddl.h	/^  static constexpr unsigned s_table_id_col_no = 6;$/;"	m	class:Log_Type::DDL_Log_Table
s_temp_space_file_name	dict/dict0dict.cc	/^const char *dict_sys_t::s_temp_space_file_name = "ibtmp1";$/;"	m	class:dict_sys_t	file:
s_temp_space_file_name	include/dict0dict.h	/^  static const char *s_temp_space_file_name;$/;"	m	struct:dict_sys_t
s_temp_space_id	include/dict0dict.h	/^  static constexpr space_id_t s_temp_space_id = 0xFFFFFFFD;$/;"	m	struct:dict_sys_t
s_temp_space_id_range	include/dict0dict.h	/^  static constexpr space_id_t s_temp_space_id_range = 400000;$/;"	m	struct:dict_sys_t
s_temp_space_name	dict/dict0dict.cc	/^const char *dict_sys_t::s_temp_space_name = "innodb_temporary";$/;"	m	class:dict_sys_t	file:
s_temp_space_name	include/dict0dict.h	/^  static const char *s_temp_space_name;$/;"	m	struct:dict_sys_t
s_thread_id_col_len	include/log0ddl.h	/^  static constexpr unsigned s_thread_id_col_len = 8;$/;"	m	class:Log_Type::DDL_Log_Table
s_thread_id_col_no	include/log0ddl.h	/^  static constexpr unsigned s_thread_id_col_no = 1;$/;"	m	class:Log_Type::DDL_Log_Table
s_time_threshold_ms	include/clone0repl.h	/^  const static uint32_t s_time_threshold_ms = 100;$/;"	m	class:Clone_persist_gtid
s_type_col_len	include/log0ddl.h	/^  static constexpr unsigned s_type_col_len = 4;$/;"	m	class:Log_Type::DDL_Log_Table
s_type_col_no	include/log0ddl.h	/^  static constexpr unsigned s_type_col_no = 2;$/;"	m	class:Log_Type::DDL_Log_Table
s_undo_space_id_range	include/dict0dict.h	/^  static constexpr space_id_t s_undo_space_id_range = 400000;$/;"	m	struct:dict_sys_t
s_unlock	include/lock0latches.h	/^    void s_unlock() {$/;"	f	class:locksys::Latches::Unique_sharded_rw_lock
s_unlock	include/sync0sharded_rw.h	/^  void s_unlock(size_t shard_no) { ut_a(shard_no == 0); }$/;"	f	class:Sharded_rw_lock
s_unlock	include/sync0sharded_rw.h	/^  void s_unlock(size_t shard_no) {$/;"	f	class:Sharded_rw_lock
s_unlock	include/trx0purge.h	/^  void s_unlock() { rw_lock_s_unlock(m_latch); }$/;"	f	class:undo::Tablespaces
s_unlock	include/trx0types.h	/^  void s_unlock() { rw_lock_s_unlock(m_latch); }$/;"	f	class:Rsegs
s_uuid	include/os0enc.h	/^  static char s_uuid[SERVER_UUID_LEN + 1];$/;"	m	class:Encryption
s_uuid	os/os0enc.cc	/^char Encryption::s_uuid[Encryption::SERVER_UUID_LEN + 1] = {0};$/;"	m	class:Encryption	file:
s_writes	os/os0file.cc	/^  static AIO *s_writes;$/;"	m	class:AIO	file:
s_writes	os/os0file.cc	/^AIO *AIO::s_writes;$/;"	m	class:AIO	file:
same_as	fsp/fsp0file.cc	/^bool Datafile::same_as(const Datafile &other) const {$/;"	f	class:Datafile
same_filepath_as	fsp/fsp0file.cc	/^bool Datafile::same_filepath_as(const char *other) const {$/;"	f	class:Datafile
same_pk	row/row0log.cc	/^  bool same_pk;        \/*!< whether the definition of the PRIMARY KEY$/;"	m	struct:row_log_t	file:
sample_end	handler/ha_innodb.cc	/^int ha_innobase::sample_end(void *scan_ctx) {$/;"	f	class:ha_innobase
sample_end	handler/ha_innopart.cc	/^int ha_innopart::sample_end(void *scan_ctx) {$/;"	f	class:ha_innopart
sample_init	handler/ha_innodb.cc	/^int ha_innobase::sample_init(void *&scan_ctx, double sampling_percentage,$/;"	f	class:ha_innobase
sample_init	handler/ha_innopart.cc	/^int ha_innopart::sample_init(void *&scan_ctx, double sampling_percentage,$/;"	f	class:ha_innopart
sample_next	handler/ha_innodb.cc	/^int ha_innobase::sample_next(void *scan_ctx, uchar *buf) {$/;"	f	class:ha_innobase
sample_next	handler/ha_innopart.cc	/^int ha_innopart::sample_next(void *scan_ctx, uchar *buf) {$/;"	f	class:ha_innopart
sample_rec	row/row0pread-histogram.cc	/^dberr_t Histogram_sampler::sample_rec(const Parallel_reader::Ctx *reader_ctx,$/;"	f	class:Histogram_sampler
save	handler/ha_innodb.cc	/^    const void *save MY_ATTRIBUTE((unused))) {$/;"	f	file:
save	include/log0meb.h	/^                                   void *save, st_mysql_value *value);$/;"	m	namespace:meb
save	log/log0meb.cc	/^                                   void *save, struct st_mysql_value *value) {$/;"	m	namespace:meb	file:
save_auto_increment	handler/ha_innopart.cc	/^void ha_innopart::save_auto_increment(ulonglong nr) {$/;"	f	class:ha_innopart
save_error	include/clone0clone.h	/^  void save_error(int err) {$/;"	f	class:Clone_Handle
save_rec	include/log0recv.h	/^  void save_rec(size_t rec_num, space_id_t space_id, page_no_t page_no,$/;"	f	struct:recv_sys_t
save_reset_point	arch/arch0page.cc	/^bool Arch_Page_Sys::save_reset_point(bool is_durable) {$/;"	f	class:Arch_Page_Sys
save_reset_point_in_mem	arch/arch0page.cc	/^void Arch_File_Ctx::save_reset_point_in_mem(lsn_t lsn, Arch_Page_Pos pos) {$/;"	f	class:Arch_File_Ctx
save_reset_point_in_mem	include/arch0arch.h	/^  void save_reset_point_in_mem(lsn_t lsn, Arch_Page_Pos pos) {$/;"	f	class:Arch_Group
saved_recs	include/log0recv.h	/^  Mlog_records saved_recs;$/;"	m	struct:recv_sys_t
savepoints	include/btr0cur.h	/^  ulint savepoints[3];$/;"	m	struct:btr_latch_leaves_t
savepoints	include/fts0fts.h	/^  ib_vector_t *savepoints; \/*!< Active savepoints, must have at$/;"	m	struct:fts_trx_t
savept	include/trx0roll.h	/^  trx_savept_t savept;        \/*!< savepoint to which to$/;"	m	struct:roll_node_t
savept	include/trx0roll.h	/^  trx_savept_t savept; \/*!< the undo number corresponding to$/;"	m	struct:trx_named_savept_t
scan	fil/fil0fil.cc	/^  dberr_t scan() { return m_dirs.scan(); }$/;"	f	class:Fil_system
scan	fil/fil0fil.cc	/^dberr_t Tablespace_dirs::scan() {$/;"	f	class:Tablespace_dirs
scan	handler/p_s.cc	/^bool Innodb_data_lock_iterator::scan(PSI_server_data_lock_container *container,$/;"	f	class:Innodb_data_lock_iterator
scan	handler/p_s.cc	/^bool Innodb_data_lock_wait_iterator::scan($/;"	f	class:Innodb_data_lock_wait_iterator
scan_group	arch/arch0recv.cc	/^bool Arch_Page_Sys::Recv::scan_group() {$/;"	f	class:Arch_Page_Sys::Recv
scan_lock_id	handler/p_s.cc	/^int scan_lock_id(const char *lock_id, uint64_t *trx_immutable_id,$/;"	f
scan_pass	handler/p_s.cc	/^enum scan_pass {$/;"	g	file:
scan_time	handler/ha_innodb.cc	/^double ha_innobase::scan_time() {$/;"	f	class:ha_innobase
scan_time	handler/ha_innopart.cc	/^double ha_innopart::scan_time() {$/;"	f	class:ha_innopart
scan_trx	handler/p_s.cc	/^size_t Innodb_data_lock_iterator::scan_trx($/;"	f	class:Innodb_data_lock_iterator
scan_trx	handler/p_s.cc	/^size_t Innodb_data_lock_wait_iterator::scan_trx($/;"	f	class:Innodb_data_lock_wait_iterator
scan_trx_list	handler/p_s.cc	/^size_t Innodb_data_lock_iterator::scan_trx_list($/;"	f	class:Innodb_data_lock_iterator
scan_trx_list	handler/p_s.cc	/^size_t Innodb_data_lock_wait_iterator::scan_trx_list($/;"	f	class:Innodb_data_lock_wait_iterator
scanned_checkpoint_no	include/log0recv.h	/^  ulint scanned_checkpoint_no;$/;"	m	struct:recv_sys_t
scanned_lsn	include/log0recv.h	/^  lsn_t scanned_lsn;$/;"	m	struct:recv_sys_t
scanner	fts/fts0pars.cc	/^	fts_scanner	scanner;$/;"	m	struct:fts_lexer_t	file:
schedule_weight	include/trx0trx.h	/^  std::atomic<trx_schedule_weight_t> schedule_weight;$/;"	m	struct:trx_lock_t
schema	api/api0api.cc	/^  ib_table_def_t *schema; \/*!< Parent table schema that owns$/;"	m	struct:ib_index_def_t	file:
sdi_key	include/api0misc.h	/^  const sdi_key_t *sdi_key;$/;"	m	struct:ib_sdi_key
sdi_vector	include/api0misc.h	/^  sdi_vector_t *sdi_vector;$/;"	m	struct:ib_sdi_vector
search	log/log0ddl.cc	/^dberr_t DDL_Log_Table::search(ulint thread_id, DDL_Records &records) {$/;"	f	class:DDL_Log_Table
search	row/row0pread.cc	/^page_no_t Parallel_reader::Scan_ctx::search(const buf_block_t *block,$/;"	f	class:Parallel_reader::Scan_ctx
search_all	log/log0ddl.cc	/^dberr_t DDL_Log_Table::search_all(DDL_Records &records) {$/;"	f	class:DDL_Log_Table
search_by_id	log/log0ddl.cc	/^dberr_t DDL_Log_Table::search_by_id(ulint id, dict_index_t *index,$/;"	f	class:DDL_Log_Table
search_cond	include/row0sel.h	/^  que_node_t *search_cond;   \/*!< search condition *\/$/;"	m	struct:sel_node_t
search_condition	pars/pars0grm.y	/^search_condition:$/;"	l
search_info	include/dict0mem.h	/^  btr_search_t *search_info;$/;"	m	struct:dict_index_t
search_mode	include/gis0type.h	/^  page_cur_mode_t search_mode;$/;"	m	struct:rtr_info
search_tuple	include/gis0type.h	/^  const dtuple_t *search_tuple;$/;"	m	struct:rtr_info
search_tuple	include/row0mysql.h	/^  dtuple_t *search_tuple; \/*!< prebuilt dtuple used in selects *\/$/;"	m	struct:row_prebuilt_t
searched_update	include/row0upd.h	/^  ibool searched_update;$/;"	m	struct:upd_node_t
sees	include/read0types.h	/^  bool sees(trx_id_t id) const { return (id < m_up_limit_id); }$/;"	f	class:ReadView
sel	api/api0api.cc	/^  que_fork_t *sel; \/*!< dummy query graph used in$/;"	m	struct:ib_qry_grph_t	file:
sel	api/api0api.cc	/^  sel_node_t *sel; \/*!< Innobase SQL select node$/;"	m	struct:ib_qry_node_t	file:
sel_assign_into_var_values	row/row0sel.cc	/^void sel_assign_into_var_values(sym_node_t *var,  \/*!< in: first variable in a$/;"	f
sel_buf_t	include/row0sel.h	/^struct sel_buf_t {$/;"	s
sel_col_prefetch_buf_alloc	row/row0sel.cc	/^static void sel_col_prefetch_buf_alloc($/;"	f	file:
sel_col_prefetch_buf_free	row/row0sel.cc	/^void sel_col_prefetch_buf_free($/;"	f
sel_dequeue_prefetched_row	row/row0sel.cc	/^static void sel_dequeue_prefetched_row($/;"	f	file:
sel_enqueue_prefetched_row	row/row0sel.cc	/^void sel_enqueue_prefetched_row(plan_t *plan) \/*!< in: plan node for a table *\/$/;"	f
sel_eval_select_list	row/row0sel.cc	/^void sel_eval_select_list(sel_node_t *node) \/*!< in: select node *\/$/;"	f
sel_graph	include/fts0types.h	/^  que_t **sel_graph;     \/*!< Select query graphs *\/$/;"	m	struct:fts_index_cache_t
sel_graph	include/row0mysql.h	/^  que_fork_t *sel_graph;  \/*!< dummy query graph used in$/;"	m	struct:row_prebuilt_t
sel_node_create	row/row0sel.cc	/^sel_node_t *sel_node_create($/;"	f
sel_node_free_private	row/row0sel.cc	/^void sel_node_free_private(sel_node_t *node) \/*!< in: select node struct *\/$/;"	f
sel_node_state	include/row0sel.h	/^enum sel_node_state {$/;"	g
sel_node_t	include/row0sel.h	/^struct sel_node_t {$/;"	s
sel_reset_aggregate_vals	row/row0sel.cc	/^void sel_reset_aggregate_vals(sel_node_t *node) \/*!< in: select node *\/$/;"	f
sel_restore_position_for_mysql	row/row0sel.cc	/^static ibool sel_restore_position_for_mysql($/;"	f	file:
sel_set_rec_lock	row/row0sel.cc	/^dberr_t sel_set_rec_lock(btr_pcur_t *pcur, const rec_t *rec,$/;"	f
sel_set_rtr_rec_lock	row/row0sel.cc	/^dberr_t sel_set_rtr_rec_lock(btr_pcur_t *pcur, const rec_t *first_rec,$/;"	f
select	include/row0ins.h	/^  sel_node_t *select;      \/*!< select in searched insert *\/$/;"	m	struct:ins_node_t
select	include/row0upd.h	/^  sel_node_t *select;  \/*!< query graph subtree implementing a base$/;"	m	struct:upd_node_t
select	os/os0file.cc	/^  bool select() {$/;"	f	class:SimulatedAIOHandler
select_from_tuple	include/ut0tuple.h	/^constexpr auto select_from_tuple(Tuple &&t) {$/;"	f
select_from_tuple_impl	include/ut0tuple.h	/^constexpr auto select_from_tuple_impl(Tuple &&t, std::index_sequence<Is...>) {$/;"	f	namespace:detail
select_if_older	os/os0file.cc	/^  void select_if_older(Slot *slot) {$/;"	f	class:SimulatedAIOHandler	file:
select_item	pars/pars0grm.y	/^select_item:$/;"	l
select_item_list	pars/pars0grm.y	/^select_item_list:$/;"	l
select_list	include/row0sel.h	/^  que_node_t *select_list;   \/*!< select list *\/$/;"	m	struct:sel_node_t
select_list	pars/pars0grm.y	/^select_list:$/;"	l
select_lock_type	include/row0mysql.h	/^  ulint select_lock_type;       \/*!< LOCK_NONE, LOCK_S, or LOCK_X *\/$/;"	m	struct:row_prebuilt_t
select_lowest_offset	os/os0file.cc	/^  bool select_lowest_offset() {$/;"	f	class:SimulatedAIOHandler	file:
select_mode	include/lock0types.h	/^enum select_mode {$/;"	g
select_mode	include/row0mysql.h	/^  enum select_mode select_mode; \/*!< SELECT_ORDINARY,$/;"	m	struct:row_prebuilt_t	typeref:enum:row_prebuilt_t::select_mode
select_oldest	os/os0file.cc	/^  bool select_oldest() {$/;"	f	class:SimulatedAIOHandler	file:
select_slot_array	os/os0file.cc	/^AIO *AIO::select_slot_array(IORequest &type, bool read_only,$/;"	f	class:AIO
select_statement	pars/pars0grm.y	/^select_statement:$/;"	l
self_heap	fts/fts0opt.cc	/^  ib_alloc_t *self_heap; \/*!< Heap to use for allocations *\/$/;"	m	struct:fts_optimize_t	file:
self_heap	include/fts0fts.h	/^  ib_alloc_t *self_heap; \/*!< Allocator used to create an$/;"	m	struct:fts_doc_ids_t
self_heap	include/fts0types.h	/^  ib_alloc_t *self_heap; \/*!< An instance of this type is$/;"	m	struct:fts_doc_t
self_heap	include/fts0types.h	/^  ib_alloc_t *self_heap; \/*!< This heap is the heap out of$/;"	m	struct:fts_cache_t
send_all_file_metadata	clone/clone0copy.cc	/^int Clone_Handle::send_all_file_metadata(Clone_Task *task,$/;"	f	class:Clone_Handle
send_batch	row/row0pread-adapter.cc	/^dberr_t Parallel_reader_adapter::send_batch($/;"	f	class:Parallel_reader_adapter
send_data	clone/clone0copy.cc	/^int Clone_Handle::send_data(Clone_Task *task, Clone_File_Meta *file_meta,$/;"	f	class:Clone_Handle
send_file_metadata	clone/clone0copy.cc	/^int Clone_Handle::send_file_metadata(Clone_Task *task,$/;"	f	class:Clone_Handle
send_keep_alive	clone/clone0copy.cc	/^int Clone_Handle::send_keep_alive(Clone_Task *task, Ha_clone_cbk *callback) {$/;"	f	class:Clone_Handle
send_state_metadata	clone/clone0copy.cc	/^int Clone_Handle::send_state_metadata(Clone_Task *task, Ha_clone_cbk *callback,$/;"	f	class:Clone_Handle
send_task_metadata	clone/clone0copy.cc	/^int Clone_Handle::send_task_metadata(Clone_Task *task, Ha_clone_cbk *callback) {$/;"	f	class:Clone_Handle
seq_no	include/gis0type.h	/^  node_seq_t seq_no;  \/*!< the SSN (split sequence number *\/$/;"	m	struct:node_visit
seq_no	include/gis0type.h	/^  node_seq_t seq_no; \/*!< the SSN (node sequence number) *\/$/;"	m	struct:rtree_ssn
sequence	handler/handler0alter.cc	/^  ib_sequence_t sequence;$/;"	m	struct:ha_innobase_inplace_ctx	file:
serialisation_list	include/trx0sys.h	/^  trx_ut_list_t serialisation_list;$/;"	m	struct:trx_sys_t
serialize	clone/clone0desc.cc	/^void Chnunk_Bitmap::serialize(byte *&desc_chunk, uint &len) {$/;"	f	class:Chnunk_Bitmap
serialize	clone/clone0desc.cc	/^void Chunk_Info::serialize(byte *desc_chunk, uint &len) {$/;"	f	class:Chunk_Info
serialize	clone/clone0desc.cc	/^void Clone_Desc_Data::serialize(byte *&desc_data, uint &len, mem_heap_t *heap) {$/;"	f	class:Clone_Desc_Data
serialize	clone/clone0desc.cc	/^void Clone_Desc_File_MetaData::serialize(byte *&desc_file, uint &len,$/;"	f	class:Clone_Desc_File_MetaData
serialize	clone/clone0desc.cc	/^void Clone_Desc_Header::serialize(byte *desc_hdr) {$/;"	f	class:Clone_Desc_Header
serialize	clone/clone0desc.cc	/^void Clone_Desc_Locator::serialize(byte *&desc_loc, uint &len,$/;"	f	class:Clone_Desc_Locator
serialize	clone/clone0desc.cc	/^void Clone_Desc_State::serialize(byte *&desc_state, uint &len,$/;"	f	class:Clone_Desc_State
serialize	clone/clone0desc.cc	/^void Clone_Desc_Task_Meta::serialize(byte *&desc_task, uint &len,$/;"	f	class:Clone_Desc_Task_Meta
server_get_hostname	handler/ha_innodb.cc	/^const char *server_get_hostname() { return (glob_hostname); }$/;"	f
server_version	include/fsp0file.h	/^  ulint server_version() const { return (m_server_version); }$/;"	f	class:Datafile
sess	include/trx0purge.h	/^  sess_t *sess;$/;"	m	struct:trx_purge_t
sess	include/trx0trx.h	/^  sess_t *sess;                    \/*!< session of the trx, NULL if none *\/$/;"	m	struct:trx_t
sess0sess_h	include/sess0sess.h	35;"	d
sess_close	usr/usr0sess.cc	/^void sess_close(sess_t *sess) \/*!< in, own: session object *\/$/;"	f
sess_open	usr/usr0sess.cc	/^sess_t *sess_open(void) {$/;"	f
sess_row_id	include/dict0mem.h	/^  ib_uint64_t sess_row_id;$/;"	m	struct:dict_table_t
sess_t	include/usr0sess.h	/^struct sess_t {$/;"	s
sess_trx_id	include/dict0mem.h	/^  ib_uint64_t sess_trx_id;$/;"	m	struct:dict_table_t
session	include/row0mysql.h	/^  innodb_session_t *session; \/*!< InnoDB session handler. *\/$/;"	m	struct:row_prebuilt_t
set	buf/buf0buf.cc	/^void HazardPointer::set(buf_page_t *bpage) {$/;"	f	class:HazardPointer
set	buf/buf0dblwr.cc	/^void dblwr::set() {$/;"	f	class:dblwr
set	include/fut0lst.h	/^  void set(const flst_base_node_t *base, mtr_t *mtr) {$/;"	f	struct:flst_bnode_t
set	include/row0pread-histogram.h	/^  void set(byte *buf) { m_buf = buf; }$/;"	f	class:Histogram_sampler
set	include/ut0bitset.h	/^  void set() { memset(m_bitset, 0xFF, m_size); }$/;"	f	class:Bitset
set	include/ut0bitset.h	/^  void set(size_t pos, bool v = true) {$/;"	f	class:Bitset
set	row/row0pread-adapter.cc	/^void Parallel_reader_adapter::set(row_prebuilt_t *prebuilt) {$/;"	f	class:Parallel_reader_adapter
setNext	btr/btr0bulk.cc	/^void PageBulk::setNext(page_no_t next_page_no) {$/;"	f	class:PageBulk
setPrev	btr/btr0bulk.cc	/^void PageBulk::setPrev(page_no_t prev_page_no) {$/;"	f	class:PageBulk
set_active	include/trx0purge.h	/^  void set_active() {$/;"	f	struct:undo::Tablespace
set_active	include/trx0types.h	/^  void set_active() { m_state = ACTIVE; }$/;"	f	class:Rsegs
set_active	trx/trx0purge.cc	/^void set_active(space_id_t space_id) {$/;"	f	namespace:undo
set_autoextend_size	include/fsp0space.h	/^  void set_autoextend_size(uint64_t size) { m_autoextend_size = size; }$/;"	f	class:Tablespace
set_autoinc	include/dict0mem.h	/^  void set_autoinc(uint64_t autoinc) { m_autoinc = autoinc; }$/;"	f	class:PersistentTableMetadata
set_autoinc_if_bigger	include/dict0mem.h	/^  void set_autoinc_if_bigger(uint64_t autoinc) {$/;"	f	class:PersistentTableMetadata
set_average	buf/buf0flu.cc	/^void set_average() {$/;"	f	namespace:Adaptive_flush
set_being_modified	include/lob0lob.h	/^  static void set_being_modified(byte *ref, bool modifying, mtr_t *mtr) {$/;"	f	struct:lob::ref_t
set_being_modified	include/lob0lob.h	/^  void set_being_modified(bool modifying, mtr_t *mtr) {$/;"	f	struct:lob::ref_t
set_big_free_len	include/lob0impl.h	/^  void set_big_free_len(ulint n) {$/;"	f	struct:lob::z_frag_entry_t
set_block	include/lob0util.h	/^  void set_block(buf_block_t *block) {$/;"	f	struct:lob::basic_page_t
set_block_null	include/lob0impl.h	/^  void set_block_null() { m_block = nullptr; }$/;"	f	struct:lob::z_frag_page_t
set_chunk	clone/clone0clone.cc	/^int Clone_Task_Manager::set_chunk(Clone_Task *task, Clone_Task_Meta *new_meta) {$/;"	f	class:Clone_Task_Manager
set_clustered_index_size	dict/dict0stats.cc	/^void TableStatsRecord::set_clustered_index_size(ulint clust_size) {$/;"	f	class:TableStatsRecord
set_committed	include/dict0mem.h	/^  void set_committed(bool committed) {$/;"	f	struct:dict_index_t
set_compressed_size	include/lob0lob.h	/^  void set_compressed_size(uint bytes) { m_zbytes = bytes; }$/;"	f	struct:lob::blob_page_info_t
set_curr_size	include/trx0types.h	/^  void set_curr_size(page_no_t npages) { curr_size = npages; }$/;"	f	struct:trx_rseg_t
set_data	arch/arch0page.cc	/^bool Arch_Block::set_data(uint read_len, byte *read_buff, uint read_offset) {$/;"	f	class:Arch_Block
set_data	dict/dict0stats.cc	/^void TableStatsRecord::set_data(const byte *data, ulint col_offset, ulint len) {$/;"	f	class:TableStatsRecord
set_data_len	include/arch0arch.h	/^  void set_data_len(uint data_len) { m_data_len = data_len; }$/;"	f	class:Arch_Block
set_data_len	include/lob0first.h	/^  void set_data_len(ulint len) {$/;"	f	struct:lob::first_page_t
set_data_len	include/lob0impl.h	/^  void set_data_len(ulint len) {$/;"	f	struct:lob::z_data_page_t
set_data_len	include/lob0index.h	/^  void set_data_len(ulint len) {$/;"	f	struct:lob::index_entry_t
set_data_len	include/lob0pages.h	/^  void set_data_len(ulint len) {$/;"	f	struct:lob::data_page_t
set_data_len	include/zlob0first.h	/^  void set_data_len(ulint len) {$/;"	f	struct:lob::z_first_page_t
set_data_len	include/zlob0index.h	/^  void set_data_len(ulint len) {$/;"	f	struct:lob::z_index_entry_t
set_db_name	dict/dict0stats.cc	/^void TableStatsRecord::set_db_name(const byte *data, ulint len) {$/;"	f	class:TableStatsRecord
set_dblwr_batch_id	include/buf0buf.h	/^  void set_dblwr_batch_id(uint16_t batch_id) { m_dblwr_id = batch_id; }$/;"	f	class:Cache_hint::buf_page_t
set_dd_discard_attribute	handler/ha_innopart.cc	/^int ha_innopart::set_dd_discard_attribute(dd::Table *table_def, bool discard) {$/;"	f	class:ha_innopart
set_default	dict/dict0mem.cc	/^void dict_col_t::set_default(const byte *value, size_t length,$/;"	f	class:dict_col_t
set_deletable	include/log0ddl.h	/^  void set_deletable(bool deletable) { m_deletable = deletable; }$/;"	f	class:Log_Type::DDL_Record
set_deleted	fil/fil0fil.cc	/^void fil_space_t::set_deleted() {$/;"	f	class:fil_space_t
set_empty	include/trx0purge.h	/^  void set_empty() {$/;"	f	struct:undo::Tablespace
set_empty	include/trx0types.h	/^  void set_empty() {$/;"	f	class:Rsegs
set_enabled	log/log0test.cc	/^void Log_test::set_enabled(Options option, bool enabled) {$/;"	f	class:Log_test
set_error	include/clone0clone.h	/^  void set_error(int err, const char *file_name) {$/;"	f	class:Clone_Task_Manager
set_error_state	include/row0pread-histogram.h	/^  void set_error_state(dberr_t err) { m_err = err; }$/;"	f	class:Histogram_sampler
set_error_state	include/row0pread.h	/^  void set_error_state(dberr_t err) {$/;"	f
set_estimate	include/ut0stage.h	/^  void set_estimate(uint units) {}$/;"	f	class:ut_stage_alter_ts
set_estimate	include/ut0stage.h	/^  void set_estimate(ulint units) {$/;"	f	class:ut_stage_alter_ts
set_fetch_type	include/btr0pcur.h	/^  Page_fetch set_fetch_type(Page_fetch fetch_mode) {$/;"	f	struct:btr_pcur_t
set_field	log/log0ddl.cc	/^void DDL_Log_Table::set_field(const byte *data, ulint index_offset, ulint len,$/;"	f	class:DDL_Log_Table
set_file_meta_transferred	include/clone0clone.h	/^  void set_file_meta_transferred() { m_transferred_file_meta = true; }$/;"	f	class:Clone_Task_Manager
set_file_name	trx/trx0purge.cc	/^void Tablespace::set_file_name(const char *file_name) {$/;"	f	class:undo::Tablespace
set_filename	include/fsp0file.h	/^  void set_filename() {$/;"	f	class:Datafile
set_filepath	fsp/fsp0file.cc	/^void Datafile::set_filepath(const char *filepath) {$/;"	f	class:Datafile
set_finish_callback	include/row0pread.h	/^  void set_finish_callback(Finish &&f) { m_finish_callback = std::move(f); }$/;"	f
set_first	include/lob0impl.h	/^  void set_first(paddr_t addr) {$/;"	f	struct:lob::plist_base_node_t
set_flag	include/page0size.h	/^  inline void set_flag(uint32_t fsp_flags) {$/;"	f	class:page_size_t
set_flags	include/fsp0file.h	/^  void set_flags(uint32_t flags) { m_flags = flags; }$/;"	f	class:Datafile
set_flags	include/fsp0space.h	/^  void set_flags(uint32_t fsp_flags) {$/;"	f	class:Tablespace
set_flush_every	log/log0test.cc	/^void Log_test::set_flush_every(int flush_every) { m_flush_every = flush_every; }$/;"	f	class:Log_test
set_flush_observer	include/mtr0mtr.h	/^  void set_flush_observer(FlushObserver *observer) {$/;"	f	struct:mtr_t
set_flush_target_by_lsn	buf/buf0flu.cc	/^ulint set_flush_target_by_lsn(bool sync_flush, lsn_t sync_flush_limit_lsn) {$/;"	f	namespace:Adaptive_flush
set_flush_target_by_page	buf/buf0flu.cc	/^ulint set_flush_target_by_page(ulint n_pages_lsn) {$/;"	f	namespace:Adaptive_flush
set_flushed	include/arch0arch.h	/^  void set_flushed() { m_state = ARCH_BLOCK_FLUSHED; }$/;"	f	class:Arch_Block
set_frag_entry	include/lob0impl.h	/^  void set_frag_entry(const fil_addr_t &addr) const {$/;"	f	struct:lob::z_frag_page_t
set_frag_entry_null	include/lob0impl.h	/^  void set_frag_entry_null() const {$/;"	f	struct:lob::z_frag_page_t
set_frag_id	include/lob0impl.h	/^  void set_frag_id(ulint id) {$/;"	f	struct:lob::frag_node_t
set_frag_id_null	include/lob0impl.h	/^  void set_frag_id_null() {$/;"	f	struct:lob::frag_node_t
set_frag_node_page_no	include/zlob0first.h	/^  void set_frag_node_page_no(page_no_t page_no) {$/;"	f	struct:lob::z_first_page_t
set_frag_page_no	include/zlob0first.h	/^  void set_frag_page_no(mtr_t *mtr, page_no_t page_no) {$/;"	f	struct:lob::z_first_page_t
set_frag_page_no	include/zlob0first.h	/^  void set_frag_page_no(page_no_t page_no) {$/;"	f	struct:lob::z_first_page_t
set_frame	include/lob0impl.h	/^  void set_frame(byte *frame) { m_frame = frame; }$/;"	f	class:lob::plist_node_t
set_id	include/log0ddl.h	/^  void set_id(ulint id) { m_id = id; }$/;"	f	class:Log_Type::DDL_Record
set_ignore_read_only	include/fsp0space.h	/^  void set_ignore_read_only(bool read_only_status) {$/;"	f	class:Tablespace
set_inactive_explicit	include/trx0purge.h	/^  void set_inactive_explicit() {$/;"	f	struct:undo::Tablespace
set_inactive_explicit	include/trx0types.h	/^  void set_inactive_explicit() { m_state = INACTIVE_EXPLICIT; }$/;"	f	class:Rsegs
set_inactive_implicit	include/trx0purge.h	/^  void set_inactive_implicit(space_id_t *marked_space_id) {$/;"	f	struct:undo::Tablespace
set_inactive_implicit	include/trx0types.h	/^  void set_inactive_implicit() {$/;"	f	class:Rsegs
set_index	include/lob0impl.h	/^  void set_index(dict_index_t *index) { m_index = index; }$/;"	f	struct:lob::z_frag_page_t
set_index	include/zlob0index.h	/^  void set_index(dict_index_t *index) { m_index = index; }$/;"	f	struct:lob::z_index_entry_t
set_index_id	include/log0ddl.h	/^  void set_index_id(ulint index_id) { m_index_id = index_id; }$/;"	f	class:Log_Type::DDL_Record
set_index_page_no	include/zlob0first.h	/^  void set_index_page_no(page_no_t page_no) {$/;"	f	struct:lob::z_first_page_t
set_inherited	include/lob0lob.h	/^  void set_inherited(bool inherited, mtr_t *mtr) {$/;"	f	struct:lob::ref_t
set_initial_vector	os/os0enc.cc	/^void Encryption::set_initial_vector(byte *iv) { m_iv = iv; }$/;"	f	class:Encryption
set_instant_cols	include/dict0mem.h	/^  void set_instant_cols(uint16_t instant_cols) {$/;"	f	struct:dict_table_t
set_io_fix	buf/buf0buf.cc	/^void buf_page_t::set_io_fix(buf_io_fix io_fix) {$/;"	f	class:buf_page_t
set_is_final_block	log/log0meb.cc	/^  void set_is_final_block(const bool is_final_block) {$/;"	f	class:meb::Block
set_key	os/os0enc.cc	/^void Encryption::set_key(byte *key) { m_key = key; }$/;"	f	class:Encryption
set_key_length	os/os0enc.cc	/^void Encryption::set_key_length(ulint klen) { m_klen = klen; }$/;"	f	class:Encryption
set_last	include/lob0impl.h	/^  void set_last(paddr_t addr) {$/;"	f	struct:lob::plist_base_node_t
set_last_file_size	include/fsp0sysspace.h	/^  void set_last_file_size(page_no_t size) {$/;"	f	class:SysTablespace
set_last_trx_id	include/lob0first.h	/^  void set_last_trx_id(trx_id_t id) {$/;"	f	struct:lob::first_page_t
set_last_trx_id	include/zlob0first.h	/^  void set_last_trx_id(trx_id_t tid) {$/;"	f	struct:lob::z_first_page_t
set_last_trx_id_no_redo	include/lob0first.h	/^  void set_last_trx_id_no_redo(trx_id_t id) {$/;"	f	struct:lob::first_page_t
set_last_trx_id_no_redo	include/zlob0first.h	/^  void set_last_trx_id_no_redo(trx_id_t tid) {$/;"	f	struct:lob::z_first_page_t
set_last_trx_undo_no	include/lob0first.h	/^  void set_last_trx_undo_no(undo_no_t undo_no) {$/;"	f	struct:lob::first_page_t
set_last_trx_undo_no	include/zlob0first.h	/^  void set_last_trx_undo_no(undo_no_t undo_no) {$/;"	f	struct:lob::z_first_page_t
set_len	include/lob0impl.h	/^  void set_len(ulint len) {$/;"	f	struct:lob::plist_base_node_t
set_length	include/lob0lob.h	/^  void set_length(const ulint len, mtr_t *mtr) {$/;"	f	struct:lob::ref_t
set_lob_version	include/lob0index.h	/^  void set_lob_version(uint32_t version) {$/;"	f	struct:lob::index_entry_t
set_lob_version	include/zlob0index.h	/^  void set_lob_version(ulint version) {$/;"	f	struct:lob::z_index_entry_t
set_log_mode	mtr/mtr0mtr.cc	/^mtr_log_t mtr_t::set_log_mode(mtr_log_t mode) {$/;"	f	class:mtr_t
set_marked_space_empty	include/trx0purge.h	/^  void set_marked_space_empty() { m_marked_space_is_empty = true; }$/;"	f	class:undo::Truncate
set_maximum_space_id	fil/fil0fil.cc	/^  void set_maximum_space_id(const fil_space_t *space) {$/;"	f	class:Fil_system
set_mbminmaxlen	include/dict0mem.h	/^  void set_mbminmaxlen(ulint mbminlen, ulint mbmaxlen) {$/;"	f	struct:dict_col_t
set_modified	include/mtr0mtr.h	/^  void set_modified() { m_impl.m_modifications = true; }$/;"	f	struct:mtr_t
set_mtr	include/lob0impl.h	/^  void set_mtr(mtr_t *mtr) { m_mtr = mtr; }$/;"	f	class:lob::plist_node_t
set_mtr	include/lob0impl.h	/^  void set_mtr(mtr_t *mtr) { m_mtr = mtr; }$/;"	f	struct:lob::z_frag_page_t
set_mtr	include/lob0util.h	/^  void set_mtr(mtr_t *mtr) { m_mtr = mtr; }$/;"	f	struct:lob::basic_page_t
set_mtr	include/zlob0first.h	/^  void set_mtr(mtr_t *mtr) { m_mtr = mtr; }$/;"	f	struct:lob::z_first_page_t
set_n_dir_entries	include/lob0impl.h	/^  void set_n_dir_entries(ulint n) const {$/;"	f	struct:lob::z_frag_page_t
set_n_frags	include/lob0impl.h	/^  void set_n_frags(ulint frags) const {$/;"	f	struct:lob::z_frag_entry_t
set_n_rows	dict/dict0stats.cc	/^void TableStatsRecord::set_n_rows(ib_uint64_t no_of_rows) {$/;"	f	class:TableStatsRecord
set_name	fsp/fsp0file.cc	/^void Datafile::set_name(const char *name) {$/;"	f	class:Datafile
set_name	include/fsp0space.h	/^  void set_name(const char *name) {$/;"	f	class:Tablespace
set_new	include/trx0purge.h	/^  void set_new() { m_new = true; }$/;"	f	struct:undo::Tablespace
set_new_file_path	log/log0ddl.cc	/^void DDL_Record::set_new_file_path(const byte *data, ulint len) {$/;"	f	class:DDL_Record
set_new_file_path	log/log0ddl.cc	/^void DDL_Record::set_new_file_path(const char *name) {$/;"	f	class:DDL_Record
set_next	arch/arch0page.cc	/^void Arch_Page_Pos::set_next() {$/;"	f	class:Arch_Page_Pos
set_next	include/lob0impl.h	/^  void set_next(const fil_addr_t &addr) {$/;"	f	struct:lob::z_frag_entry_t
set_next	include/lob0impl.h	/^  void set_next(paddr_t addr) {$/;"	f	class:lob::plist_node_t
set_next	trx/trx0purge.cc	/^const page_size_t TrxUndoRsegsIterator::set_next() {$/;"	f	class:TrxUndoRsegsIterator
set_next_node	include/lob0impl.h	/^  void set_next_node(const plist_node_t &next) { set_next(next.addr()); }$/;"	f	class:lob::plist_node_t
set_next_null	include/lob0impl.h	/^  void set_next_null() {$/;"	f	struct:lob::z_frag_entry_t
set_next_null	include/lob0index.h	/^  void set_next_null() {$/;"	f	struct:lob::index_entry_t
set_next_null	include/zlob0index.h	/^  void set_next_null() {$/;"	f	struct:lob::z_index_entry_t
set_next_page	include/lob0impl.h	/^  void set_next_page(page_no_t page_no) {$/;"	f	struct:lob::z_data_page_t
set_next_page	include/lob0util.h	/^  void set_next_page(page_no_t page_no) { set_next_page(page_no, m_mtr); }$/;"	f	struct:lob::basic_page_t
set_next_page	include/lob0util.h	/^  void set_next_page(page_no_t page_no, mtr_t *mtr) {$/;"	f	struct:lob::basic_page_t
set_next_page_no	include/lob0impl.h	/^  void set_next_page_no(page_no_t page_no) {$/;"	f	struct:lob::z_frag_node_page_t
set_next_page_no	include/lob0impl.h	/^  void set_next_page_no(page_no_t page_no) {$/;"	f	struct:lob::z_index_page_t
set_next_page_no	include/zlob0first.h	/^  void set_next_page_no(page_no_t page_no, mtr_t *mtr) {$/;"	f	struct:lob::z_first_page_t
set_next_page_null	include/lob0util.h	/^  void set_next_page_null() {$/;"	f	struct:lob::basic_page_t
set_next_page_null	include/zlob0first.h	/^  void set_next_page_null() { set_next_page_no(FIL_NULL, m_mtr); }$/;"	f	struct:lob::z_first_page_t
set_node	include/lob0impl.h	/^  void set_node(byte *node) { m_node = node; }$/;"	f	class:lob::plist_node_t
set_nth_dir_entry	include/lob0impl.h	/^  void set_nth_dir_entry(ulint frag_id, paddr_t val) {$/;"	f	struct:lob::z_frag_page_t
set_null	include/lob0impl.h	/^  void set_null() { m_node = nullptr; }$/;"	f	struct:lob::z_frag_entry_t
set_null	include/lob0lob.h	/^  void set_null(mtr_t *mtr) {$/;"	f	struct:lob::ref_t
set_num_tasks	clone/clone0api.cc	/^  void set_num_tasks(size_t num_entries) {$/;"	f	class:__anon2::Fixup_data	file:
set_numa_interleave_t	buf/buf0buf.cc	/^  set_numa_interleave_t() {$/;"	f	struct:set_numa_interleave_t
set_numa_interleave_t	buf/buf0buf.cc	/^struct set_numa_interleave_t {$/;"	s	file:
set_offset	include/lob0lob.h	/^  void set_offset(const ulint offset, mtr_t *mtr) {$/;"	f	struct:lob::ref_t
set_old_data	include/row0upd.h	/^  void set_old_data(const byte *undo_ptr) { m_old_data = undo_ptr; }$/;"	f	struct:Lob_diff
set_old_file_path	log/log0ddl.cc	/^void DDL_Record::set_old_file_path(const byte *data, ulint len) {$/;"	f	class:DDL_Record
set_old_file_path	log/log0ddl.cc	/^void DDL_Record::set_old_file_path(const char *name) {$/;"	f	class:DDL_Record
set_old_version	include/lob0index.h	/^  void set_old_version(index_entry_t &entry) {$/;"	f	struct:lob::index_entry_t
set_old_version	lob/zlob0index.cc	/^void z_index_entry_t::set_old_version(z_index_entry_t &entry) {$/;"	f	class:lob::z_index_entry_t
set_oldest_trx_no_recovery	include/clone0repl.h	/^  void set_oldest_trx_no_recovery(trx_id_t max_trx_no) {$/;"	f	class:Clone_persist_gtid
set_oom_not_fatal	include/ut0new.h	/^  ut_allocator &set_oom_not_fatal() {$/;"	f	class:ut_allocator
set_open_flags	include/fsp0file.h	/^  void set_open_flags(os_file_create_t open_flags) {$/;"	f	class:Datafile
set_order	include/ut0counter.h	/^  void set_order(std::memory_order memory_order) {$/;"	f	struct:Counter::Shards
set_owner	include/lob0lob.h	/^  void set_owner(bool owner, mtr_t *mtr) {$/;"	f	struct:lob::ref_t
set_ownership_of_extern_field	include/lob0lob.h	/^  void set_ownership_of_extern_field(ulint i, ibool val) {$/;"	f	class:lob::BtrContext
set_page_next	include/lob0impl.h	/^  void set_page_next(page_no_t page_no) {$/;"	f	struct:lob::z_frag_page_t
set_page_next	lob/lob0ins.cc	/^void Inserter::set_page_next() {$/;"	f	class:lob::Inserter
set_page_next	lob/zlob0ins.cc	/^dberr_t zInserter::set_page_next() {$/;"	f	class:lob::zInserter
set_page_no	include/buf0types.h	/^  inline void set_page_no(page_no_t page_no) { m_page_no = page_no; }$/;"	f	class:page_id_t
set_page_no	include/lob0impl.h	/^  void set_page_no(page_no_t page_no) const {$/;"	f	struct:lob::z_frag_entry_t
set_page_no	include/lob0index.h	/^  void set_page_no(page_no_t num) {$/;"	f	struct:lob::index_entry_t
set_page_no	include/lob0lob.h	/^  void set_page_no(const ulint page_no, mtr_t *mtr) {$/;"	f	struct:lob::ref_t
set_page_no	include/lob0lob.h	/^  void set_page_no(page_no_t page_no) { m_page_no = page_no; }$/;"	f	struct:lob::blob_page_info_t
set_page_no	include/log0ddl.h	/^  void set_page_no(page_no_t page_no) { m_page_no = page_no; }$/;"	f	class:Log_Type::DDL_Record
set_page_prev	include/lob0impl.h	/^  void set_page_prev(page_no_t page_no) { set_page_prev(page_no, m_mtr); }$/;"	f	struct:lob::z_frag_page_t
set_page_prev	include/lob0impl.h	/^  void set_page_prev(page_no_t page_no, mtr_t *mtr) {$/;"	f	struct:lob::z_frag_page_t
set_page_type	include/lob0first.h	/^  void set_page_type() {$/;"	f	struct:lob::first_page_t
set_page_type	include/lob0impl.h	/^  void set_page_type() {$/;"	f	struct:lob::node_page_t
set_page_type	include/lob0impl.h	/^  void set_page_type() {$/;"	f	struct:lob::z_data_page_t
set_page_type	include/lob0impl.h	/^  void set_page_type() {$/;"	f	struct:lob::z_frag_node_page_t
set_page_type	include/lob0impl.h	/^  void set_page_type() {$/;"	f	struct:lob::z_frag_page_t
set_page_type	include/lob0impl.h	/^  void set_page_type(mtr_t *mtr) {$/;"	f	struct:lob::z_index_page_t
set_page_type	include/lob0pages.h	/^  void set_page_type() {$/;"	f	struct:lob::data_page_t
set_page_type	include/zlob0first.h	/^  void set_page_type() {$/;"	f	struct:lob::z_first_page_t
set_page_type_unknown	include/zlob0first.h	/^  void set_page_type_unknown() {$/;"	f	struct:lob::z_first_page_t
set_part	handler/handler0alter.cc	/^  void set_part(ulint new_part_id, dict_table_t *part) {$/;"	f	class:Altered_partitions
set_partition	handler/ha_innopart.cc	/^void ha_innopart::set_partition(uint part_id) {$/;"	f	class:ha_innopart
set_path	include/fsp0space.h	/^  void set_path(const char *path) { set_path(path, strlen(path)); }$/;"	f	class:Tablespace
set_path	include/fsp0space.h	/^  void set_path(const char *path, size_t len) {$/;"	f	class:Tablespace
set_persist_gtid	clone/clone0repl.cc	/^void Clone_persist_gtid::set_persist_gtid(trx_t *trx, bool set) {$/;"	f	class:Clone_persist_gtid
set_prev	include/lob0impl.h	/^  void set_prev(const fil_addr_t &addr) {$/;"	f	struct:lob::z_frag_entry_t
set_prev	include/lob0impl.h	/^  void set_prev(paddr_t addr) {$/;"	f	class:lob::plist_node_t
set_prev_node	include/lob0impl.h	/^  void set_prev_node(plist_node_t &prev) { set_prev(prev.addr()); }$/;"	f	class:lob::plist_node_t
set_prev_null	include/lob0impl.h	/^  void set_prev_null() {$/;"	f	struct:lob::z_frag_entry_t
set_prev_null	include/lob0index.h	/^  void set_prev_null() {$/;"	f	struct:lob::index_entry_t
set_prev_null	include/zlob0index.h	/^  void set_prev_null() {$/;"	f	struct:lob::z_index_entry_t
set_prev_page_no	include/zlob0first.h	/^  void set_prev_page_no(page_no_t page_no, mtr_t *mtr) {$/;"	f	struct:lob::z_first_page_t
set_prev_page_null	include/zlob0first.h	/^  void set_prev_page_null() { set_prev_page_no(FIL_NULL, m_mtr); }$/;"	f	struct:lob::z_first_page_t
set_punch_hole	include/os0file.h	/^  void set_punch_hole() {$/;"	f	class:IORequest
set_random_position	include/btr0pcur.h	/^inline bool btr_pcur_t::set_random_position(dict_index_t *index,$/;"	f	class:btr_pcur_t
set_read_only_mode	include/arch0arch.h	/^  void set_read_only_mode() { m_state = ARCH_STATE_READ_ONLY; }$/;"	f	class:Arch_Page_Sys
set_ref	include/lob0lob.h	/^  void set_ref(byte *ptr) { m_ref = ptr; }$/;"	f	struct:lob::ref_t
set_remote_path_flags	handler/ha_innopart.cc	/^void create_table_info_t::set_remote_path_flags() {$/;"	f	class:create_table_info_t
set_sanity_check_status	include/fsp0sysspace.h	/^  void set_sanity_check_status(bool status) { m_sanity_checks_done = status; }$/;"	f	class:SysTablespace
set_scan_dir	fil/fil0fil.cc	/^  void set_scan_dir(const std::string &directory, bool is_undo_dir) {$/;"	f	class:Fil_system
set_scan_dir	fil/fil0fil.cc	/^void Tablespace_dirs::set_scan_dir(const std::string &in_directory,$/;"	f	class:Tablespace_dirs
set_scan_dirs	fil/fil0fil.cc	/^  void set_scan_dirs(const std::string &directories) {$/;"	f	class:Fil_system
set_scan_dirs	fil/fil0fil.cc	/^void Tablespace_dirs::set_scan_dirs(const std::string &in_directories) {$/;"	f	class:Tablespace_dirs
set_size	fsp/fsp0sysspace.cc	/^dberr_t SysTablespace::set_size(Datafile &file) {$/;"	f	class:SysTablespace
set_space_id	include/fsp0file.h	/^  void set_space_id(space_id_t space_id) {$/;"	f	class:Datafile
set_space_id	include/fsp0space.h	/^  void set_space_id(space_id_t space_id) {$/;"	f	class:Tablespace
set_space_id	include/lob0lob.h	/^  void set_space_id(const space_id_t space_id, mtr_t *mtr) {$/;"	f	struct:lob::ref_t
set_space_id	include/log0ddl.h	/^  void set_space_id(space_id_t space) { m_space_id = space; }$/;"	f	class:Log_Type::DDL_Record
set_space_id	trx/trx0purge.cc	/^void Tablespace::set_space_id(space_id_t space_id) {$/;"	f	class:undo::Tablespace
set_space_id_no_redo	include/lob0impl.h	/^  void set_space_id_no_redo(space_id_t space_id) {$/;"	f	struct:lob::z_data_page_t
set_space_id_no_redo	include/lob0impl.h	/^  void set_space_id_no_redo(space_id_t space_id) {$/;"	f	struct:lob::z_frag_node_page_t
set_space_id_no_redo	include/lob0impl.h	/^  void set_space_id_no_redo(space_id_t space_id) {$/;"	f	struct:lob::z_frag_page_t
set_space_id_no_redo	include/lob0impl.h	/^  void set_space_id_no_redo(space_id_t space_id) {$/;"	f	struct:lob::z_index_page_t
set_space_id_no_redo	include/lob0util.h	/^  void set_space_id_no_redo(space_id_t space_id) {$/;"	f	struct:lob::basic_page_t
set_space_id_no_redo	include/zlob0first.h	/^  void set_space_id_no_redo(space_id_t space_id) {$/;"	f	struct:lob::z_first_page_t
set_space_initialized	include/clone0clone.h	/^  void set_space_initialized() { m_space_initialized.store(true); }$/;"	f	class:Clone_Sys
set_space_name	trx/trx0purge.cc	/^void Tablespace::set_space_name(const char *new_space_name) {$/;"	f	class:undo::Tablespace
set_srv_redo_log	srv/srv0srv.cc	/^void set_srv_redo_log(bool enable) {$/;"	f
set_start_callback	include/row0pread.h	/^  void set_start_callback(Start &&f) { m_start_callback = std::move(f); }$/;"	f
set_state	include/clone0clone.h	/^  void set_state(Clone_Handle_State state) { m_clone_handle_state = state; }$/;"	f	class:Clone_Handle
set_state	os/os0thread.cc	/^void IB_thread::set_state(State new_state) {$/;"	f	class:IB_thread
set_state_info	clone/clone0snapshot.cc	/^void Clone_Snapshot::set_state_info(Clone_Desc_State *state_desc) {$/;"	f	class:Clone_Snapshot
set_sum_of_other_index_size	dict/dict0stats.cc	/^void TableStatsRecord::set_sum_of_other_index_size($/;"	f	class:TableStatsRecord
set_sync	include/mtr0mtr.h	/^  void set_sync() { m_sync = true; }$/;"	f	struct:mtr_t
set_table_id	include/log0ddl.h	/^  void set_table_id(table_id_t table_id) { m_table_id = table_id; }$/;"	f	class:Log_Type::DDL_Record
set_table_part	handler/ha_innopart.h	/^  inline void set_table_part(uint part_id, dict_table_t *table) {$/;"	f	class:Ha_innopart_share
set_table_parts_and_indexes	handler/ha_innopart.cc	/^bool Ha_innopart_share::set_table_parts_and_indexes($/;"	f	class:Ha_innopart_share
set_tablespace_full_status	include/fsp0sysspace.h	/^  void set_tablespace_full_status(bool is_full) {$/;"	f	class:SysTablespace
set_tablespace_type	handler/ha_innodb.cc	/^void create_table_info_t::set_tablespace_type($/;"	f	class:create_table_info_t
set_tbl_name	dict/dict0stats.cc	/^void TableStatsRecord::set_tbl_name(const byte *data, ulint len) {$/;"	f	class:TableStatsRecord
set_templ_icp	handler/ha_innodb.cc	/^static void set_templ_icp(mysql_row_templ_t *templ, const dict_index_t *index,$/;"	f	file:
set_thread_id	include/log0ddl.h	/^  void set_thread_id(ulint thread_id) { m_thread_id = thread_id; }$/;"	f	class:Log_Type::DDL_Record
set_thread_id_and_purpose	include/srv0tmp.h	/^  void set_thread_id_and_purpose(my_thread_id thread_id,$/;"	f	class:ibt::Tablespace
set_total_free_len	include/lob0impl.h	/^  void set_total_free_len(ulint n) {$/;"	f	struct:lob::z_frag_entry_t
set_total_len	include/lob0impl.h	/^  void set_total_len(ulint len) {$/;"	f	struct:lob::frag_node_t
set_tracking_buf_pool	arch/arch0page.cc	/^void Arch_Page_Sys::set_tracking_buf_pool(lsn_t tracking_lsn) {$/;"	f	class:Arch_Page_Sys
set_trx_id	include/lob0first.h	/^  void set_trx_id(trx_id_t id) {$/;"	f	struct:lob::first_page_t
set_trx_id	include/lob0impl.h	/^  void set_trx_id(trx_id_t tid) {$/;"	f	struct:lob::z_data_page_t
set_trx_id	include/lob0index.h	/^  void set_trx_id(trx_id_t id) {$/;"	f	struct:lob::index_entry_t
set_trx_id	include/lob0pages.h	/^  void set_trx_id(trx_id_t id) {$/;"	f	struct:lob::data_page_t
set_trx_id	include/zlob0first.h	/^  void set_trx_id(trx_id_t tid) {$/;"	f	struct:lob::z_first_page_t
set_trx_id	include/zlob0index.h	/^  void set_trx_id(trx_id_t id) {$/;"	f	struct:lob::z_index_entry_t
set_trx_id_modifier	include/lob0index.h	/^  void set_trx_id_modifier(trx_id_t id) {$/;"	f	struct:lob::index_entry_t
set_trx_id_modifier	include/zlob0index.h	/^  void set_trx_id_modifier(trx_id_t id) {$/;"	f	struct:lob::z_index_entry_t
set_trx_id_modifier_no_redo	include/lob0index.h	/^  void set_trx_id_modifier_no_redo(trx_id_t id) {$/;"	f	struct:lob::index_entry_t
set_trx_id_modifier_no_redo	include/zlob0index.h	/^  void set_trx_id_modifier_no_redo(trx_id_t id) {$/;"	f	struct:lob::z_index_entry_t
set_trx_id_no_redo	include/lob0first.h	/^  void set_trx_id_no_redo(trx_id_t id) {$/;"	f	struct:lob::first_page_t
set_trx_id_no_redo	include/lob0impl.h	/^  void set_trx_id_no_redo(trx_id_t tid) {$/;"	f	struct:lob::z_data_page_t
set_trx_id_no_redo	include/lob0index.h	/^  void set_trx_id_no_redo(trx_id_t id) {$/;"	f	struct:lob::index_entry_t
set_trx_id_no_redo	include/lob0pages.h	/^  void set_trx_id_no_redo(trx_id_t id) {$/;"	f	struct:lob::data_page_t
set_trx_id_no_redo	include/zlob0first.h	/^  void set_trx_id_no_redo(trx_id_t tid) {$/;"	f	struct:lob::z_first_page_t
set_trx_id_no_redo	include/zlob0index.h	/^  void set_trx_id_no_redo(trx_id_t id) {$/;"	f	struct:lob::z_index_entry_t
set_trx_undo_no	include/lob0index.h	/^  void set_trx_undo_no(undo_no_t undo_no) {$/;"	f	struct:lob::index_entry_t
set_trx_undo_no	include/zlob0index.h	/^  void set_trx_undo_no(undo_no_t undo_no) {$/;"	f	struct:lob::z_index_entry_t
set_trx_undo_no_modifier	include/lob0index.h	/^  void set_trx_undo_no_modifier(undo_no_t undo_no) {$/;"	f	struct:lob::index_entry_t
set_trx_undo_no_modifier	include/zlob0index.h	/^  void set_trx_undo_no_modifier(undo_no_t undo_no) {$/;"	f	struct:lob::z_index_entry_t
set_type	include/log0ddl.h	/^  void set_type(Log_Type type) { m_type = type; }$/;"	f	class:Log_Type::DDL_Record
set_type	os/os0enc.cc	/^void Encryption::set_type(Encryption::Type type) { m_type = type; }$/;"	f	class:Encryption
set_uncompressed_size	include/lob0lob.h	/^  void set_uncompressed_size(uint bytes) { m_bytes = bytes; }$/;"	f	struct:lob::blob_page_info_t
set_undo_tablespace_encryption	srv/srv0srv.cc	/^bool set_undo_tablespace_encryption(space_id_t space_id, mtr_t *mtr,$/;"	f
set_used_len	include/lob0impl.h	/^  void set_used_len(ulint used) const {$/;"	f	struct:lob::z_frag_entry_t
set_v_templ	handler/ha_innopart.cc	/^void Ha_innopart_share::set_v_templ(TABLE *table, dict_table_t *ib_table,$/;"	f	class:Ha_innopart_share
set_verbosity	log/log0test.cc	/^void Log_test::set_verbosity(int level) {$/;"	f	class:Log_test
set_version	include/dict0mem.h	/^  void set_version(uint64_t version) { m_version = version; }$/;"	f	class:PersistentTableMetadata
set_version_0	include/lob0first.h	/^  void set_version_0() {$/;"	f	struct:lob::first_page_t
set_version_0	include/lob0impl.h	/^  void set_version_0() {$/;"	f	struct:lob::node_page_t
set_version_0	include/lob0impl.h	/^  void set_version_0() {$/;"	f	struct:lob::z_data_page_t
set_version_0	include/lob0impl.h	/^  void set_version_0() {$/;"	f	struct:lob::z_frag_node_page_t
set_version_0	include/lob0impl.h	/^  void set_version_0() {$/;"	f	struct:lob::z_frag_page_t
set_version_0	include/lob0impl.h	/^  void set_version_0() {$/;"	f	struct:lob::z_index_page_t
set_version_0	include/lob0pages.h	/^  void set_version_0() {$/;"	f	struct:lob::data_page_t
set_version_0	include/zlob0first.h	/^  void set_version_0() {$/;"	f	struct:lob::z_first_page_t
set_versions_null	include/lob0index.h	/^  void set_versions_null() {$/;"	f	struct:lob::index_entry_t
set_versions_null	include/zlob0index.h	/^  void set_versions_null() {$/;"	f	struct:lob::z_index_entry_t
set_view_creator_trx_id	read/read0read.cc	/^void MVCC::set_view_creator_trx_id(ReadView *view, trx_id_t id) {$/;"	f	class:MVCC
set_wait_state	lock/lock0lock.cc	/^void RecLock::set_wait_state(lock_t *lock) {$/;"	f	class:RecLock
set_x_locks	include/row0sel.h	/^  ibool set_x_locks;         \/*!< TRUE if the cursor is for update or$/;"	m	struct:sel_node_t
set_z_frag_id	include/zlob0index.h	/^  void set_z_frag_id(frag_id_t id) {$/;"	f	struct:lob::z_index_entry_t
set_z_page_no	include/zlob0index.h	/^  void set_z_page_no(page_no_t page_no) {$/;"	f	struct:lob::z_index_entry_t
set_z_page_no_null	include/zlob0index.h	/^  void set_z_page_no_null(mtr_t *mtr) {$/;"	f	struct:lob::z_index_entry_t
set_zdata_len	include/zlob0index.h	/^  void set_zdata_len(ulint len) {$/;"	f	struct:lob::z_index_entry_t
setup_zstream	lob/lob0lob.cc	/^int zReader::setup_zstream() {$/;"	f	class:lob::zReader
sg_count	sync/sync0arr.cc	/^static ulint sg_count;$/;"	v	file:
share_name	include/dict0mem.h	/^  std::string share_name;$/;"	m	struct:dict_vcol_templ_t
short	fts/fts0pars.cc	182;"	d	file:
short	pars/pars0grm.cc	234;"	d	file:
should_fail	trx/trx0purge.cc	/^bool Inject_failure_once::should_fail() {$/;"	f	class:undo::Inject_failure_once
should_skip	include/buf0stats.h	/^  bool should_skip(const index_id_t &id) {$/;"	f	class:buf_stat_per_index_t
show	include/ut0dbg.h	/^  void show() {$/;"	f	class:ut_chrono_t
show_innodb_vars	handler/ha_innodb.cc	/^static int show_innodb_vars(THD *thd, SHOW_VAR *var, char *buff) {$/;"	f	file:
shutdown	fsp/fsp0file.cc	/^void Datafile::shutdown() {$/;"	f	class:Datafile
shutdown	fsp/fsp0space.cc	/^void Tablespace::shutdown() {$/;"	f	class:Tablespace
shutdown	fsp/fsp0sysspace.cc	/^void SysTablespace::shutdown() {$/;"	f	class:SysTablespace
shutdown	include/arch0arch.h	/^  static void shutdown() { s_dblwr_file_ctx.close(); }$/;"	f	class:Arch_Group
shutdown	os/os0file.cc	/^void AIO::shutdown() {$/;"	f	class:AIO
signal	os/os0file.cc	/^  void signal() {$/;"	f	class:AIO
signal_count	include/sync0arr_impl.h	/^  int64_t signal_count = 0;    \/*!< We capture the signal_count$/;"	m	struct:sync_cell_t
signal_count	os/os0event.cc	/^  int64_t signal_count; \/*!< this is incremented$/;"	m	struct:os_event	file:
signal_end_of_buffering	row/row0pread-histogram.cc	/^void Histogram_sampler::signal_end_of_buffering() {$/;"	f	class:Histogram_sampler
signal_start_of_buffering	row/row0pread-histogram.cc	/^void Histogram_sampler::signal_start_of_buffering() {$/;"	f	class:Histogram_sampler
simulated_put_read_threads_to_sleep	os/os0file.cc	/^void AIO::simulated_put_read_threads_to_sleep() {$/;"	f	class:AIO
single_indexer_t	include/ut0counter.h	/^struct single_indexer_t {$/;"	s
single_page	buf/buf0buf.cc	/^buf_block_t *Buf_fetch<T>::single_page() {$/;"	f	class:Buf_fetch
single_scan_itr	include/buf0buf.h	/^  LRUItr single_scan_itr;$/;"	m	struct:Cache_hint::buf_pool_t
size	include/buf0buf.h	/^    ulint size; \/*!< size of the block *\/$/;"	m	union:Cache_hint::buf_buddy_free_t::__anon15
size	include/buf0buf.h	/^  page_size_t size;$/;"	m	class:Cache_hint::buf_page_t
size	include/clone0desc.h	/^  size_t size() const { return (m_size * 4); }$/;"	f	class:Chnunk_Bitmap
size	include/dict0dict.h	/^  lint size;                   \/*!< varying space in bytes occupied$/;"	m	struct:dict_sys_t
size	include/fil0fil.h	/^  page_no_t size;$/;"	m	struct:fil_node_t
size	include/fsp0file.h	/^  page_no_t size() const { return (m_size); }$/;"	f	class:Datafile
size	include/log0recv.h	/^    size_t size;$/;"	m	struct:recv_sys_t::Mlog_record
size	include/os0file.h	/^  os_offset_t size;            \/*!< file size in bytes *\/$/;"	m	struct:AIO_mode::os_file_stat_t
size	include/read0types.h	/^    ulint size() const { return (m_size); }$/;"	f	class:ReadView::ids_t
size	include/trx0purge.h	/^  ulint size() { return (m_spaces.size()); }$/;"	f	class:undo::Tablespaces
size	include/trx0types.h	/^  ulint size() const { return (m_rsegs.size()); }$/;"	f	class:TrxUndoRsegs
size	include/trx0types.h	/^  ulint size() { return (m_rsegs.size()); }$/;"	f	class:Rsegs
size	include/trx0undo.h	/^  ulint size;             \/*!< current size in pages *\/$/;"	m	struct:trx_undo_t
size	include/ut0bitset.h	/^  size_t size() const { return (m_size); }$/;"	f	class:Bitset
size	read/read0read.cc	/^ulint MVCC::size() const {$/;"	f	class:MVCC
size_bits	include/clone0desc.h	/^  uint32_t size_bits() const { return (m_bits); }$/;"	f	class:Chnunk_Bitmap
size_of_frag_entries	include/zlob0first.h	/^  ulint size_of_frag_entries() const {$/;"	f	struct:lob::z_first_page_t
size_of_index_entries	lob/zlob0first.cc	/^ulint z_first_page_t::size_of_index_entries() const {$/;"	f	class:lob::z_first_page_t
size_t	include/btr0btr.h	/^enum btr_latch_mode : size_t {$/;"	g
size_type	include/mem0mem.h	/^  typedef size_t size_type;$/;"	t	class:mem_heap_allocator
size_type	include/ut0new.h	/^  typedef size_t size_type;$/;"	t	class:ut_allocator
sizeof_value	include/ut0rbt.h	/^  ulint sizeof_value;                  \/* Sizeof the item in bytes *\/$/;"	m	struct:ib_rbt_t
sizeof_value	include/ut0vec.h	/^  ulint sizeof_value;$/;"	m	struct:ib_vector_t
skip	include/row0row.h	/^  virtual uint32_t skip() {$/;"	f	class:Multi_value_entry_builder
skip	log/log0ddl.cc	/^inline bool Log_DDL::skip(const dict_table_t *table, THD *thd) {$/;"	f	class:Log_DDL
skip	row/row0pread-histogram.cc	/^bool Histogram_sampler::skip() {$/;"	f	class:Histogram_sampler
skip_alter_undo	include/dict0mem.h	/^  unsigned skip_alter_undo : 1;$/;"	m	struct:dict_table_t
skip_concurrency_ticket	row/row0mysql.cc	/^bool row_prebuilt_t::skip_concurrency_ticket() const {$/;"	f	class:row_prebuilt_t
skip_gap_locks	include/trx0trx.h	/^  bool skip_gap_locks() const {$/;"	f	struct:trx_t
skip_grants	clone/clone0api.cc	/^static void skip_grants(THD *thd, Security_context &sctx) {$/;"	f	file:
skip_lock_inheritance	include/trx0trx.h	/^  bool skip_lock_inheritance;$/;"	m	struct:trx_t
skip_pk_sort	handler/handler0alter.cc	/^  bool skip_pk_sort;$/;"	m	struct:ha_innobase_inplace_ctx	file:
skip_schema	clone/clone0api.cc	/^  bool skip_schema(const char *schema_name) {$/;"	f	class:__anon2::Fixup_data	file:
skip_schema_tables	clone/clone0api.cc	/^  bool skip_schema_tables(const dd::Table *table, const char *table_name,$/;"	f	class:__anon2::Fixup_data	file:
skip_se_tables	clone/clone0api.cc	/^  bool skip_se_tables(enum legacy_db_type type) {$/;"	f	class:__anon2::Fixup_data	file:
skip_strict	handler/ha_innodb.h	/^  bool skip_strict() const { return (m_skip_strict); }$/;"	f	class:create_table_info_t
skip_tablespace	clone/clone0api.cc	/^  bool skip_tablespace(THD *thd, const dd::Tablespace *dd_space) {$/;"	f	class:__anon2::Fixup_data	file:
slot	include/que0que.h	/^  struct srv_slot_t *slot;$/;"	m	struct:que_thr_t	typeref:struct:que_thr_t::srv_slot_t
slot	lock/lock0wait.cc	/^  srv_slot_t *slot;$/;"	m	struct:waiting_trx_info_t	file:
slot_index	include/ut0link_buf.h	/^inline size_t Link_buf<Position>::slot_index(Position position) const {$/;"	f	class:Link_buf
slots	buf/buf0flu.cc	/^  page_cleaner_slot_t *slots; \/*!< pointer to the slots *\/$/;"	m	struct:page_cleaner_t	file:
slots_end_ptr	include/lob0impl.h	/^  byte *slots_end_ptr() const {$/;"	f	struct:lob::z_frag_page_t
slots_t	os/os0file.cc	/^  typedef std::vector<Slot *> slots_t;$/;"	t	class:SimulatedAIOHandler	file:
sn_t	include/log0types.h	/^typedef uint64_t sn_t;$/;"	t
snapshot_t	include/buf0buf.h	/^  struct snapshot_t {$/;"	s	struct:Cache_hint::buf_buddy_stat_t
someone_has_io_responsibility	include/buf0buf.h	/^  bool someone_has_io_responsibility() const {$/;"	f	class:Cache_hint::buf_page_t
someone_is_responsible	include/buf0buf.h	/^    bool someone_is_responsible() const {$/;"	f	class:Cache_hint::buf_page_t::io_responsibility_t
sort	include/trx0sys.h	/^  void sort() { std::sort(begin(), end()); }$/;"	f	class:Space_Ids
sort	include/trx0types.h	/^  void sort() {$/;"	f	class:Rsegs
sort_event	include/row0ftsort.h	/^  os_event_t sort_event;   \/*!< sort event *\/$/;"	m	struct:fts_psort_common_t
sort_field	include/row0ftsort.h	/^  dfield_t sort_field[FTS_NUM_FIELDS_SORT];$/;"	m	struct:fts_tokenize_ctx
space	include/buf0types.h	/^  inline space_id_t space() const { return (m_space); }$/;"	f	class:page_id_t
space	include/dict0mem.h	/^  space_id_t space;$/;"	m	struct:dict_table_t
space	include/dict0mem.h	/^  unsigned space : 32;$/;"	m	struct:dict_index_t
space	include/lob0lob.h	/^  space_id_t space() const { return (index()->space); }$/;"	f	class:lob::BtrContext
space	include/log0recv.h	/^  space_id_t space;$/;"	m	struct:recv_addr_t
space	include/trx0undo.h	/^  space_id_t space; \/*!< space id where the undo log$/;"	m	struct:trx_undo_t
space_acquire	fil/fil0fil.cc	/^fil_space_t *Fil_system::space_acquire(space_id_t space_id, bool silent) {$/;"	f	class:Fil_system
space_acquire	fil/fil0fil.cc	/^inline bool Fil_shard::space_acquire(fil_space_t *space) {$/;"	f	class:Fil_shard
space_add	fil/fil0fil.cc	/^void Fil_shard::space_add(fil_space_t *space) {$/;"	f	class:Fil_shard
space_belongs_in_LRU	fil/fil0fil.cc	/^bool Fil_system::space_belongs_in_LRU(const fil_space_t *space) {$/;"	f	class:Fil_system
space_check_exists	fil/fil0fil.cc	/^bool Fil_shard::space_check_exists(space_id_t space_id, const char *name,$/;"	f	class:Fil_shard
space_check_pending_operations	fil/fil0fil.cc	/^ulint Fil_shard::space_check_pending_operations(fil_space_t *space,$/;"	f	class:Fil_shard
space_compare	include/dict0load.h	/^struct space_compare {$/;"	s
space_create	fil/fil0fil.cc	/^fil_space_t *Fil_shard::space_create(const char *name, space_id_t space_id,$/;"	f	class:Fil_shard
space_delete	fil/fil0fil.cc	/^dberr_t Fil_shard::space_delete(space_id_t space_id, buf_remove_t buf_remove) {$/;"	f	class:Fil_shard
space_detach	fil/fil0fil.cc	/^void Fil_shard::space_detach(fil_space_t *space) {$/;"	f	class:Fil_shard
space_extend	fil/fil0fil.cc	/^bool Fil_shard::space_extend(fil_space_t *space, page_no_t size) {$/;"	f	class:Fil_shard
space_flush	fil/fil0fil.cc	/^void Fil_shard::space_flush(space_id_t space_id) {$/;"	f	class:Fil_shard
space_free	fil/fil0fil.cc	/^fil_space_t *Fil_shard::space_free(space_id_t space_id) {$/;"	f	class:Fil_shard
space_free_low	fil/fil0fil.cc	/^void Fil_shard::space_free_low(fil_space_t *&space) {$/;"	f	class:Fil_shard
space_id	include/dict0mem.h	/^  space_id_t space_id() const { return space; }$/;"	f	struct:dict_index_t
space_id	include/fsp0file.h	/^  space_id_t space_id() const { return (m_space_id); }$/;"	f	class:Datafile
space_id	include/fsp0space.h	/^  space_id_t space_id() const { return (m_space_id); }$/;"	f	class:Tablespace
space_id	include/lob0lob.h	/^  space_id_t space_id() const { return (mach_read_from_4(m_ref)); }$/;"	f	struct:lob::ref_t
space_id	include/lob0lob.h	/^  static space_id_t space_id(const byte *ref) {$/;"	f	struct:lob::ref_t
space_id	include/log0recv.h	/^    space_id_t space_id;$/;"	m	struct:recv_sys_t::Encryption_Key
space_id	include/log0recv.h	/^    space_id_t space_id;$/;"	m	struct:recv_sys_t::Mlog_record
space_id	include/srv0tmp.h	/^  space_id_t space_id() const { return (m_space_id); }$/;"	f	class:ibt::Tablespace
space_id	include/trx0purge.h	/^  space_id_t space_id;$/;"	m	struct:undo::space_id_account
space_id_account	include/trx0purge.h	/^struct space_id_account {$/;"	s	namespace:undo
space_id_bank	trx/trx0purge.cc	/^struct space_id_account *space_id_bank;$/;"	m	namespace:undo	typeref:struct:undo::space_id_account	file:
space_id_changed	include/buf0buf.h	/^  inline void space_id_changed() {$/;"	f	class:Cache_hint::buf_page_t
space_id_t	include/api0api.h	/^typedef uint32 space_id_t;$/;"	t
space_index_t	include/dict0types.h	/^typedef ib_id_t space_index_t;$/;"	t
space_is_flushed	fil/fil0fil.cc	/^bool Fil_shard::space_is_flushed(const fil_space_t *space) {$/;"	f	class:Fil_shard
space_left	lob/lob0pages.cc	/^ulint data_page_t::space_left() const { return (payload() - get_data_len()); }$/;"	f	class:lob::data_page_t
space_load	fil/fil0fil.cc	/^fil_space_t *Fil_shard::space_load(space_id_t space_id) {$/;"	f	class:Fil_shard
space_name	include/trx0purge.h	/^  char *space_name() {$/;"	f	struct:undo::Tablespace
space_open	fil/fil0fil.cc	/^bool Fil_shard::space_open(space_id_t space_id) {$/;"	f	class:Fil_shard
space_prepare_for_truncate	fil/fil0fil.cc	/^dberr_t Fil_shard::space_prepare_for_truncate(space_id_t space_id,$/;"	f	class:Fil_shard
space_release	fil/fil0fil.cc	/^void Fil_shard::space_release(fil_space_t *space) {$/;"	f	class:Fil_shard
space_remove_from_lookup_maps	fil/fil0fil.cc	/^  void space_remove_from_lookup_maps(space_id_t space_id) {$/;"	f	class:Fil_shard
space_rename	fil/fil0fil.cc	/^dberr_t Fil_shard::space_rename(space_id_t space_id, const char *old_path,$/;"	f	class:Fil_shard
space_truncate	fil/fil0fil.cc	/^bool Fil_shard::space_truncate(space_id_t space_id, page_no_t size_in_pages) {$/;"	f	class:Fil_shard
space_used_by_dir	include/lob0impl.h	/^  ulint space_used_by_dir() const {$/;"	f	struct:lob::z_frag_page_t
space_version	include/fsp0file.h	/^  ulint space_version() const { return (m_space_version); }$/;"	f	class:Datafile
spaces	include/log0recv.h	/^  Spaces *spaces;$/;"	m	struct:recv_sys_t
spaces	trx/trx0purge.cc	/^Tablespaces *spaces;$/;"	m	namespace:undo	file:
spatial_status	include/data0data.h	/^  unsigned spatial_status : 2;$/;"	m	struct:dfield_t
spatial_status_t	include/dict0types.h	/^enum spatial_status_t {$/;"	g
spin_wait_pause_multiplier	ut/ut0ut.cc	/^ulong spin_wait_pause_multiplier = 50;$/;"	m	namespace:ut	file:
split	btr/btr0bulk.cc	/^void PageBulk::split(PageBulk &new_page_bulk) {$/;"	f	class:PageBulk
split	row/row0pread.cc	/^dberr_t Parallel_reader::Ctx::split() {$/;"	f	class:Parallel_reader::Ctx
splitTrim	btr/btr0bulk.cc	/^void PageBulk::splitTrim(const SplitPoint &split_point) {$/;"	f	class:PageBulk
split_free_frag	include/lob0impl.h	/^  void split_free_frag(frag_node_t &free_frag, ulint size) {$/;"	f	struct:lob::z_frag_page_t
split_rtree_node	gis/gis0geo.cc	/^int split_rtree_node($/;"	f
sql_operation	clone/clone0api.cc	/^  const char *sql_operation() {$/;"	f	class:__anon2::Fixup_data	file:
sql_stat_start	include/row0mysql.h	/^  unsigned sql_stat_start : 1; \/*!< TRUE when we start processing of$/;"	m	struct:row_prebuilt_t
sql_string	include/pars0sym.h	/^  const char *sql_string;$/;"	m	struct:sym_tab_t
square	include/gis0geo.h	/^  double square;  \/* square of the mbr.*\/$/;"	m	struct:rtr_split_node_t
src_ilist_ptr	fts/fts0opt.cc	/^  byte *src_ilist_ptr;      \/*!< Current ptr within src ilist *\/$/;"	m	struct:fts_encode_t	file:
src_last_doc_id	fts/fts0opt.cc	/^  doc_id_t src_last_doc_id; \/*!< Last doc id read from src node *\/$/;"	m	struct:fts_encode_t	file:
srch_key_val1	include/row0mysql.h	/^  byte *srch_key_val1;       \/*!< buffer used in converting$/;"	m	struct:row_prebuilt_t
srch_key_val2	include/row0mysql.h	/^  byte *srch_key_val2;       \/*!< buffer used in converting$/;"	m	struct:row_prebuilt_t
srch_key_val_len	include/row0mysql.h	/^  uint srch_key_val_len;     \/*!< Size of search key *\/$/;"	m	struct:row_prebuilt_t
srid	include/dict0mem.h	/^  uint32_t srid; \/* spatial reference id *\/$/;"	m	struct:dict_index_t
srid	include/row0merge.h	/^  uint32_t srid;             \/*!< SRID obtained from dd column *\/$/;"	m	struct:index_def_t
srid_is_valid	include/dict0mem.h	/^  bool srid_is_valid;$/;"	m	struct:dict_index_t
srid_is_valid	include/row0merge.h	/^  bool srid_is_valid;        \/*!< true if we want to check SRID$/;"	m	struct:index_def_t
srv0mon_h	include/srv0mon.h	35;"	d
srv0shutdown_h	include/srv0shutdown.h	33;"	d
srv0srv_h	include/srv0srv.h	49;"	d
srv0start_h	include/srv0start.h	34;"	d
srv0tmp_h	include/srv0tmp.h	28;"	d
srv_LRU_scan_depth	srv/srv0srv.cc	/^ulong srv_LRU_scan_depth = 1024;$/;"	v
srv_active_wake_master_thread	include/srv0srv.h	960;"	d
srv_active_wake_master_thread_low	srv/srv0srv.cc	/^void srv_active_wake_master_thread_low() {$/;"	f
srv_adaptive_flushing	srv/srv0srv.cc	/^bool srv_adaptive_flushing = TRUE;$/;"	v
srv_adaptive_flushing_lwm	srv/srv0srv.cc	/^ulong srv_adaptive_flushing_lwm = 10;$/;"	v
srv_adaptive_max_sleep_delay	srv/srv0conc.cc	/^ulong srv_adaptive_max_sleep_delay = 150000;$/;"	v
srv_boot	srv/srv0srv.cc	/^void srv_boot(void) {$/;"	f
srv_buf_dump_event	srv/srv0srv.cc	/^os_event_t srv_buf_dump_event;$/;"	v
srv_buf_dump_filename	srv/srv0srv.cc	/^char *srv_buf_dump_filename;$/;"	v
srv_buf_pool_base_size	srv/srv0srv.cc	/^ulint srv_buf_pool_base_size = 0;$/;"	v
srv_buf_pool_chunk_unit	srv/srv0srv.cc	/^ulonglong srv_buf_pool_chunk_unit;$/;"	v
srv_buf_pool_chunk_unit_blk_sz	srv/srv0srv.cc	/^const ulonglong srv_buf_pool_chunk_unit_blk_sz = (1024 * 1024);$/;"	v
srv_buf_pool_chunk_unit_max	srv/srv0srv.cc	/^const ulonglong srv_buf_pool_chunk_unit_max =$/;"	v
srv_buf_pool_chunk_unit_min	srv/srv0srv.cc	/^const ulonglong srv_buf_pool_chunk_unit_min = (1024 * 1024);$/;"	v
srv_buf_pool_curr_size	srv/srv0srv.cc	/^long long srv_buf_pool_curr_size = 0;$/;"	v
srv_buf_pool_debug	buf/buf0buf.cc	/^bool srv_buf_pool_debug;$/;"	v
srv_buf_pool_def_size	srv/srv0srv.cc	/^const ulint srv_buf_pool_def_size = 128 * 1024 * 1024;$/;"	v
srv_buf_pool_dump_pct	srv/srv0srv.cc	/^ulong srv_buf_pool_dump_pct;$/;"	v
srv_buf_pool_instances	srv/srv0srv.cc	/^ulong srv_buf_pool_instances;$/;"	v
srv_buf_pool_instances_default	srv/srv0srv.cc	/^const ulong srv_buf_pool_instances_default = 0;$/;"	v
srv_buf_pool_max_size	srv/srv0srv.cc	/^const longlong srv_buf_pool_max_size = LLONG_MAX;$/;"	v
srv_buf_pool_min_size	srv/srv0srv.cc	/^const ulint srv_buf_pool_min_size = 5 * 1024 * 1024;$/;"	v
srv_buf_pool_old_size	srv/srv0srv.cc	/^ulint srv_buf_pool_old_size = 0;$/;"	v
srv_buf_pool_size	srv/srv0srv.cc	/^ulint srv_buf_pool_size = ULINT_MAX;$/;"	v
srv_buf_resize_event	srv/srv0srv.cc	/^os_event_t srv_buf_resize_event;$/;"	v
srv_buffer_pool_dump_at_shutdown	srv/srv0srv.cc	/^bool srv_buffer_pool_dump_at_shutdown = true;$/;"	v
srv_buffer_pool_evict	handler/ha_innodb.cc	/^static char *srv_buffer_pool_evict;$/;"	v	file:
srv_buffer_pool_in_core_file	handler/ha_innodb.cc	/^bool srv_buffer_pool_in_core_file = TRUE;$/;"	v
srv_buffer_pool_load_at_startup	srv/srv0srv.cc	/^bool srv_buffer_pool_load_at_startup = true;$/;"	v
srv_change_buffer_max_size	srv/srv0srv.cc	/^uint srv_change_buffer_max_size = CHANGE_BUFFER_DEFAULT_SIZE;$/;"	v
srv_check_activity	srv/srv0srv.cc	/^ibool srv_check_activity($/;"	f
srv_checkpoint_disabled	srv/srv0srv.cc	/^bool srv_checkpoint_disabled = false;$/;"	v
srv_checksum_algorithm	buf/checksum.cc	/^ulong srv_checksum_algorithm = SRV_CHECKSUM_ALGORITHM_INNODB;$/;"	v
srv_checksum_algorithm_t	include/buf0types.h	/^enum srv_checksum_algorithm_t {$/;"	g
srv_cmp_per_index_enabled	srv/srv0srv.cc	/^bool srv_cmp_per_index_enabled = FALSE;$/;"	v
srv_conc	srv/srv0conc.cc	/^static srv_conc_t srv_conc;$/;"	v	file:
srv_conc_enter_innodb	srv/srv0conc.cc	/^dberr_t srv_conc_enter_innodb(row_prebuilt_t *prebuilt) {$/;"	f
srv_conc_enter_innodb_with_atomics	srv/srv0conc.cc	/^static dberr_t srv_conc_enter_innodb_with_atomics($/;"	f	file:
srv_conc_exit_innodb_with_atomics	srv/srv0conc.cc	/^static void srv_conc_exit_innodb_with_atomics($/;"	f	file:
srv_conc_force_enter_innodb	srv/srv0conc.cc	/^void srv_conc_force_enter_innodb(trx_t *trx) \/*!< in: transaction object$/;"	f
srv_conc_force_exit_innodb	srv/srv0conc.cc	/^void srv_conc_force_exit_innodb(trx_t *trx) \/*!< in: transaction object$/;"	f
srv_conc_get_active_threads	srv/srv0conc.cc	/^int32_t srv_conc_get_active_threads(void) {$/;"	f
srv_conc_get_waiting_threads	srv/srv0conc.cc	/^int32_t srv_conc_get_waiting_threads(void) {$/;"	f
srv_conc_h	include/srv0conc.h	48;"	d
srv_conc_t	srv/srv0conc.cc	/^struct srv_conc_t {$/;"	s	file:
srv_concurrency_enter	handler/ha_innodb.cc	/^int ha_innobase::srv_concurrency_enter() {$/;"	f	class:ha_innobase
srv_concurrency_exit	handler/ha_innodb.cc	/^void ha_innobase::srv_concurrency_exit() {$/;"	f	class:ha_innobase
srv_cpu_usage	srv/srv0srv.cc	/^Srv_cpu_usage srv_cpu_usage;$/;"	v
srv_create_sdi_indexes	srv/srv0start.cc	/^static void srv_create_sdi_indexes() {$/;"	f	file:
srv_data_home	srv/srv0srv.cc	/^char *srv_data_home = nullptr;$/;"	v
srv_data_read	fil/fil0fil.cc	/^static ulint srv_data_read;$/;"	v	file:
srv_data_written	fil/fil0fil.cc	/^static ulint srv_data_written;$/;"	v	file:
srv_debug_compress	srv/srv0srv.cc	/^ulong srv_debug_compress;$/;"	v
srv_debug_loop	handler/ha_innodb.cc	/^void srv_debug_loop(void) {$/;"	f
srv_debug_system_mem_size	srv/srv0srv.cc	/^ulong srv_debug_system_mem_size;$/;"	v
srv_dedicated_server	srv/srv0srv.cc	/^bool srv_dedicated_server = true;$/;"	v
srv_dict_metadata	srv/srv0start.cc	/^static MetadataRecover *srv_dict_metadata;$/;"	v	file:
srv_dict_recover_on_restart	srv/srv0start.cc	/^void srv_dict_recover_on_restart() {$/;"	f
srv_disable_sort_file_cache	row/row0merge.cc	/^bool srv_disable_sort_file_cache;$/;"	v
srv_dml_needed_delay	srv/srv0srv.cc	/^ulint srv_dml_needed_delay = 0;$/;"	v
srv_do_purge	srv/srv0srv.cc	/^static ulint srv_do_purge(ulint *n_total_purged) {$/;"	f	file:
srv_doublewrite_dir	srv/srv0srv.cc	/^char *srv_doublewrite_dir = NULL;$/;"	v
srv_downgrade_logs	srv/srv0srv.cc	/^bool srv_downgrade_logs = false;$/;"	v
srv_downgrade_partition_files	srv/srv0srv.cc	/^bool srv_downgrade_partition_files = false;$/;"	v
srv_enable_redo_encryption	srv/srv0srv.cc	/^bool srv_enable_redo_encryption(bool is_boot) {$/;"	f
srv_enable_undo_encryption	srv/srv0srv.cc	/^bool srv_enable_undo_encryption(bool is_boot) {$/;"	f
srv_enter_innodb_with_tickets	srv/srv0conc.cc	/^static void srv_enter_innodb_with_tickets($/;"	f	file:
srv_error_event	srv/srv0srv.cc	/^os_event_t srv_error_event;$/;"	v
srv_error_monitor_thread	srv/srv0srv.cc	/^void srv_error_monitor_thread() {$/;"	f
srv_error_monitor_thread_key	srv/srv0start.cc	/^mysql_pfs_key_t srv_error_monitor_thread_key;$/;"	v
srv_export_innodb_status	srv/srv0srv.cc	/^void srv_export_innodb_status(void) {$/;"	f
srv_fast_shutdown	srv/srv0srv.cc	/^ulong srv_fast_shutdown;$/;"	v
srv_fatal_error	srv/srv0start.cc	/^void srv_fatal_error() {$/;"	f
srv_fatal_semaphore_wait_threshold	srv/srv0srv.cc	/^ulong srv_fatal_semaphore_wait_threshold = 600;$/;"	v
srv_fil_make_page_dirty_debug	handler/ha_innodb.cc	/^static ulong srv_fil_make_page_dirty_debug = 0;$/;"	v	file:
srv_file_check_mode	srv/srv0start.cc	/^static bool srv_file_check_mode(const char *name) \/*!< in: filename to check *\/$/;"	f	file:
srv_file_per_table	srv/srv0srv.cc	/^bool srv_file_per_table;$/;"	v
srv_flush_log_at_timeout	srv/srv0srv.cc	/^uint srv_flush_log_at_timeout = 1;$/;"	v
srv_flush_log_at_trx_commit	srv/srv0srv.cc	/^ulong srv_flush_log_at_trx_commit = 1;$/;"	v
srv_flush_neighbors	srv/srv0srv.cc	/^ulong srv_flush_neighbors = 1;$/;"	v
srv_flush_sync	srv/srv0srv.cc	/^bool srv_flush_sync = TRUE;$/;"	v
srv_flushing_avg_loops	srv/srv0srv.cc	/^ulong srv_flushing_avg_loops = 30;$/;"	v
srv_force_recovery	srv/srv0srv.cc	/^ulong srv_force_recovery;$/;"	v
srv_force_recovery_crash	srv/srv0srv.cc	/^ulong srv_force_recovery_crash;$/;"	v
srv_free	srv/srv0srv.cc	/^void srv_free(void) {$/;"	f
srv_free_slot	srv/srv0srv.cc	/^static void srv_free_slot(srv_slot_t *slot) \/*!< in\/out: thread slot *\/$/;"	f	file:
srv_general_init	srv/srv0srv.cc	/^static void srv_general_init() {$/;"	f	file:
srv_get_activity_count	srv/srv0srv.cc	/^ulint srv_get_activity_count(void) {$/;"	f
srv_get_encryption_data_filename	srv/srv0start.cc	/^void srv_get_encryption_data_filename(dict_table_t *table, char *filename,$/;"	f
srv_get_server_errmsgs	srv/srv0srv.cc	/^const char *srv_get_server_errmsgs(int errcode) {$/;"	f
srv_get_task_queue_length	srv/srv0srv.cc	/^ulint srv_get_task_queue_length(void) {$/;"	f
srv_ibuf_disable_background_merge	ibuf/ibuf0ibuf.cc	/^bool srv_ibuf_disable_background_merge;$/;"	v
srv_idle_flush_pct	srv/srv0srv.cc	/^ulong srv_idle_flush_pct = srv_idle_flush_pct_default;$/;"	v
srv_idle_flush_pct_default	srv/srv0srv.cc	/^const ulong srv_idle_flush_pct_default = 100;$/;"	v
srv_inc_activity_count	srv/srv0srv.cc	/^void srv_inc_activity_count(void) { srv_sys->activity_count.inc(); }$/;"	f
srv_init	srv/srv0srv.cc	/^static void srv_init(void) {$/;"	f	file:
srv_init_abort	srv/srv0start.cc	1762;"	d	file:
srv_init_abort	srv/srv0start.cc	1765;"	d	file:
srv_init_abort_low	srv/srv0start.cc	/^static dberr_t srv_init_abort_low(bool create_new_db,$/;"	f	file:
srv_inject_too_many_concurrent_trxs	srv/srv0srv.cc	/^bool srv_inject_too_many_concurrent_trxs = false;$/;"	v
srv_innodb_directories	srv/srv0srv.cc	/^char *srv_innodb_directories = nullptr;$/;"	v
srv_innodb_monitor_mutex	srv/srv0srv.cc	/^static ib_mutex_t srv_innodb_monitor_mutex;$/;"	v	file:
srv_innodb_monitor_mutex_key	sync/sync0sync.cc	/^mysql_pfs_key_t srv_innodb_monitor_mutex_key;$/;"	v
srv_innodb_stats_method	srv/srv0srv.cc	/^ulong srv_innodb_stats_method = SRV_STATS_NULLS_EQUAL;$/;"	v
srv_innodb_status	srv/srv0srv.cc	/^ibool srv_innodb_status = FALSE;$/;"	v
srv_io_capacity	srv/srv0srv.cc	/^ulong srv_io_capacity = 200;$/;"	v
srv_io_thread_function	srv/srv0srv.cc	/^const char *srv_io_thread_function[SRV_MAX_N_IO_THREADS];$/;"	v
srv_io_thread_op_info	srv/srv0srv.cc	/^const char *srv_io_thread_op_info[SRV_MAX_N_IO_THREADS];$/;"	v
srv_is_being_started	srv/srv0start.cc	/^bool srv_is_being_started = false;$/;"	v
srv_is_direct_io	include/srv0srv.h	/^inline bool srv_is_direct_io() {$/;"	f
srv_is_upgrade_mode	srv/srv0srv.cc	/^bool srv_is_upgrade_mode = false;$/;"	v
srv_last_monitor_time	srv/srv0srv.cc	/^static ib_time_monotonic_t srv_last_monitor_time;$/;"	v	file:
srv_load_corrupted	dict/dict0load.cc	/^bool srv_load_corrupted = FALSE;$/;"	v
srv_lock_table_size	srv/srv0srv.cc	/^ulint srv_lock_table_size = ULINT_MAX;$/;"	v
srv_lock_timeout_thread_key	srv/srv0start.cc	/^mysql_pfs_key_t srv_lock_timeout_thread_key;$/;"	v
srv_log_buffer_size	srv/srv0srv.cc	/^ulong srv_log_buffer_size;$/;"	v
srv_log_checkpoint_every	srv/srv0srv.cc	/^ulong srv_log_checkpoint_every = INNODB_LOG_CHECKPOINT_EVERY_DEFAULT;$/;"	v
srv_log_checksums	srv/srv0srv.cc	/^bool srv_log_checksums;$/;"	v
srv_log_file_size	srv/srv0srv.cc	/^ulonglong srv_log_file_size;$/;"	v
srv_log_file_size_requested	srv/srv0srv.cc	/^ulonglong srv_log_file_size_requested;$/;"	v
srv_log_flush_events	srv/srv0srv.cc	/^ulong srv_log_flush_events = INNODB_LOG_EVENTS_DEFAULT;$/;"	v
srv_log_flush_notifier_spin_delay	srv/srv0srv.cc	/^ulong srv_log_flush_notifier_spin_delay =$/;"	v
srv_log_flush_notifier_timeout	srv/srv0srv.cc	/^ulong srv_log_flush_notifier_timeout =$/;"	v
srv_log_flusher_spin_delay	srv/srv0srv.cc	/^ulong srv_log_flusher_spin_delay = INNODB_LOG_FLUSHER_SPIN_DELAY_DEFAULT;$/;"	v
srv_log_flusher_timeout	srv/srv0srv.cc	/^ulong srv_log_flusher_timeout = INNODB_LOG_FLUSHER_TIMEOUT_DEFAULT;$/;"	v
srv_log_group_home_dir	srv/srv0srv.cc	/^char *srv_log_group_home_dir = nullptr;$/;"	v
srv_log_recent_closed_size	srv/srv0srv.cc	/^ulong srv_log_recent_closed_size = INNODB_LOG_RECENT_CLOSED_SIZE_DEFAULT;$/;"	v
srv_log_recent_written_size	srv/srv0srv.cc	/^ulong srv_log_recent_written_size = INNODB_LOG_RECENT_WRITTEN_SIZE_DEFAULT;$/;"	v
srv_log_spin_cpu_abs_lwm	srv/srv0srv.cc	/^uint srv_log_spin_cpu_abs_lwm;$/;"	v
srv_log_spin_cpu_pct_hwm	srv/srv0srv.cc	/^uint srv_log_spin_cpu_pct_hwm;$/;"	v
srv_log_wait_for_flush_spin_delay	srv/srv0srv.cc	/^ulong srv_log_wait_for_flush_spin_delay =$/;"	v
srv_log_wait_for_flush_spin_hwm	srv/srv0srv.cc	/^ulong srv_log_wait_for_flush_spin_hwm;$/;"	v
srv_log_wait_for_flush_timeout	srv/srv0srv.cc	/^ulong srv_log_wait_for_flush_timeout =$/;"	v
srv_log_wait_for_write_spin_delay	srv/srv0srv.cc	/^ulong srv_log_wait_for_write_spin_delay =$/;"	v
srv_log_wait_for_write_timeout	srv/srv0srv.cc	/^ulong srv_log_wait_for_write_timeout =$/;"	v
srv_log_write_ahead_size	srv/srv0srv.cc	/^ulong srv_log_write_ahead_size;$/;"	v
srv_log_write_events	srv/srv0srv.cc	/^ulong srv_log_write_events = INNODB_LOG_EVENTS_DEFAULT;$/;"	v
srv_log_write_max_size	srv/srv0srv.cc	/^ulong srv_log_write_max_size = INNODB_LOG_WRITE_MAX_SIZE_DEFAULT;$/;"	v
srv_log_write_notifier_spin_delay	srv/srv0srv.cc	/^ulong srv_log_write_notifier_spin_delay =$/;"	v
srv_log_write_notifier_timeout	srv/srv0srv.cc	/^ulong srv_log_write_notifier_timeout =$/;"	v
srv_log_writer_spin_delay	srv/srv0srv.cc	/^ulong srv_log_writer_spin_delay = INNODB_LOG_WRITER_SPIN_DELAY_DEFAULT;$/;"	v
srv_log_writer_threads	srv/srv0srv.cc	/^bool srv_log_writer_threads;$/;"	v
srv_log_writer_timeout	srv/srv0srv.cc	/^ulong srv_log_writer_timeout = INNODB_LOG_WRITER_TIMEOUT_DEFAULT;$/;"	v
srv_log_writes_and_flush	srv/srv0srv.cc	/^static ulint srv_log_writes_and_flush = 0;$/;"	v	file:
srv_main_active_loops	srv/srv0srv.cc	/^static ulint srv_main_active_loops = 0;$/;"	v	file:
srv_main_idle_loops	srv/srv0srv.cc	/^static ulint srv_main_idle_loops = 0;$/;"	v	file:
srv_main_shutdown_loops	srv/srv0srv.cc	/^static ulint srv_main_shutdown_loops = 0;$/;"	v	file:
srv_main_thread_op_info	srv/srv0srv.cc	/^const char *srv_main_thread_op_info = "";$/;"	v
srv_main_thread_process_no	srv/srv0srv.cc	/^static ulint srv_main_thread_process_no = 0;$/;"	v	file:
srv_master_do_active_tasks	srv/srv0srv.cc	/^static void srv_master_do_active_tasks(void) {$/;"	f	file:
srv_master_do_disabled_loop	srv/srv0srv.cc	/^static void srv_master_do_disabled_loop(void) {$/;"	f	file:
srv_master_do_idle_tasks	srv/srv0srv.cc	/^static void srv_master_do_idle_tasks(void) {$/;"	f	file:
srv_master_do_pre_dd_shutdown_tasks	srv/srv0srv.cc	/^static bool srv_master_do_pre_dd_shutdown_tasks($/;"	f	file:
srv_master_do_shutdown_tasks	srv/srv0srv.cc	/^static bool srv_master_do_shutdown_tasks($/;"	f	file:
srv_master_evict_from_table_cache	srv/srv0srv.cc	/^static ulint srv_master_evict_from_table_cache($/;"	f	file:
srv_master_main_loop	srv/srv0srv.cc	/^static void srv_master_main_loop(srv_slot_t *slot) {$/;"	f	file:
srv_master_pre_dd_shutdown_loop	srv/srv0srv.cc	/^static void srv_master_pre_dd_shutdown_loop() {$/;"	f	file:
srv_master_shutdown_loop	srv/srv0srv.cc	/^static void srv_master_shutdown_loop() {$/;"	f	file:
srv_master_sleep	srv/srv0srv.cc	/^static void srv_master_sleep(void) {$/;"	f	file:
srv_master_thread	srv/srv0srv.cc	/^void srv_master_thread() {$/;"	f
srv_master_thread_disabled_debug	srv/srv0srv.cc	/^bool srv_master_thread_disabled_debug;$/;"	v
srv_master_thread_disabled_debug_update	srv/srv0srv.cc	/^void srv_master_thread_disabled_debug_update(THD *thd, SYS_VAR *var,$/;"	f
srv_master_thread_disabled_event	srv/srv0srv.cc	/^static os_event_t srv_master_thread_disabled_event;$/;"	v	file:
srv_master_thread_is_active	srv/srv0srv.cc	/^bool srv_master_thread_is_active() {$/;"	f
srv_master_thread_key	srv/srv0start.cc	/^mysql_pfs_key_t srv_master_thread_key;$/;"	v
srv_master_wait	srv/srv0srv.cc	/^static void srv_master_wait(srv_slot_t *slot) {$/;"	f	file:
srv_max_buf_pool_modified_pct	srv/srv0srv.cc	/^double srv_max_buf_pool_modified_pct = 75.0;$/;"	v
srv_max_dirty_pages_pct_lwm	srv/srv0srv.cc	/^double srv_max_dirty_pages_pct_lwm = 0.0;$/;"	v
srv_max_io_capacity	srv/srv0srv.cc	/^ulong srv_max_io_capacity = 400;$/;"	v
srv_max_n_open_files	srv/srv0srv.cc	/^ulint srv_max_n_open_files = 300;$/;"	v
srv_max_n_threads	os/os0thread.cc	/^uint32_t srv_max_n_threads = 0;$/;"	v
srv_max_purge_lag	trx/trx0purge.cc	/^ulong srv_max_purge_lag = 0;$/;"	v
srv_max_purge_lag_delay	trx/trx0purge.cc	/^ulong srv_max_purge_lag_delay = 0;$/;"	v
srv_max_undo_tablespace_size	srv/srv0srv.cc	/^unsigned long long srv_max_undo_tablespace_size;$/;"	v
srv_mbr_print	row/row0upd.cc	/^static void srv_mbr_print(const byte *data) {$/;"	f	file:
srv_misc_tmpfile	srv/srv0srv.cc	/^FILE *srv_misc_tmpfile;$/;"	v
srv_misc_tmpfile_mutex	srv/srv0srv.cc	/^ib_mutex_t srv_misc_tmpfile_mutex;$/;"	v
srv_misc_tmpfile_mutex_key	sync/sync0sync.cc	/^mysql_pfs_key_t srv_misc_tmpfile_mutex_key;$/;"	v
srv_mon_default_on	srv/srv0mon.cc	/^void srv_mon_default_on(void) {$/;"	f
srv_mon_get_info	srv/srv0mon.cc	/^monitor_info_t *srv_mon_get_info($/;"	f
srv_mon_get_name	srv/srv0mon.cc	/^const char *srv_mon_get_name($/;"	f
srv_mon_get_rseg_size	srv/srv0mon.cc	/^static ulint srv_mon_get_rseg_size(void) {$/;"	f	file:
srv_mon_process_existing_counter	srv/srv0mon.cc	/^void srv_mon_process_existing_counter($/;"	f
srv_mon_reset	srv/srv0mon.cc	/^void srv_mon_reset(monitor_id_t monitor) \/*!< in: monitor id *\/$/;"	f
srv_mon_set_module_control	srv/srv0mon.cc	/^void srv_mon_set_module_control($/;"	f
srv_monitor_event	srv/srv0srv.cc	/^os_event_t srv_monitor_event;$/;"	v
srv_monitor_file	srv/srv0srv.cc	/^FILE *srv_monitor_file;$/;"	v
srv_monitor_file_mutex	srv/srv0srv.cc	/^ib_mutex_t srv_monitor_file_mutex;$/;"	v
srv_monitor_file_mutex_key	sync/sync0sync.cc	/^mysql_pfs_key_t srv_monitor_file_mutex_key;$/;"	v
srv_monitor_file_name	srv/srv0start.cc	/^static char *srv_monitor_file_name;$/;"	v	file:
srv_monitor_thread	srv/srv0srv.cc	/^void srv_monitor_thread() {$/;"	f
srv_monitor_thread_key	srv/srv0start.cc	/^mysql_pfs_key_t srv_monitor_thread_key;$/;"	v
srv_n_file_io_threads	srv/srv0start.cc	/^ulint srv_n_file_io_threads = 0;$/;"	v
srv_n_free_tickets_to_enter	srv/srv0conc.cc	/^ulong srv_n_free_tickets_to_enter = 500;$/;"	v
srv_n_log_files	srv/srv0srv.cc	/^ulong srv_n_log_files = SRV_N_LOG_FILES_MAX;$/;"	v
srv_n_page_cleaners	srv/srv0srv.cc	/^ulong srv_n_page_cleaners = 4;$/;"	v
srv_n_page_hash_locks	srv/srv0srv.cc	/^ulong srv_n_page_hash_locks = 16;$/;"	v
srv_n_purge_threads	srv/srv0srv.cc	/^ulong srv_n_purge_threads = 4;$/;"	v
srv_n_read_io_threads	srv/srv0srv.cc	/^ulong srv_n_read_io_threads;$/;"	v
srv_n_rows_deleted_old	srv/srv0srv.cc	/^static ulint srv_n_rows_deleted_old = 0;$/;"	v	file:
srv_n_rows_inserted_old	srv/srv0srv.cc	/^static ulint srv_n_rows_inserted_old = 0;$/;"	v	file:
srv_n_rows_read_old	srv/srv0srv.cc	/^static ulint srv_n_rows_read_old = 0;$/;"	v	file:
srv_n_rows_updated_old	srv/srv0srv.cc	/^static ulint srv_n_rows_updated_old = 0;$/;"	v	file:
srv_n_spin_wait_rounds	srv/srv0srv.cc	/^ulong srv_n_spin_wait_rounds = 30;$/;"	v
srv_n_system_rows_deleted_old	srv/srv0srv.cc	/^static ulint srv_n_system_rows_deleted_old = 0;$/;"	v	file:
srv_n_system_rows_inserted_old	srv/srv0srv.cc	/^static ulint srv_n_system_rows_inserted_old = 0;$/;"	v	file:
srv_n_system_rows_read_old	srv/srv0srv.cc	/^static ulint srv_n_system_rows_read_old = 0;$/;"	v	file:
srv_n_system_rows_updated_old	srv/srv0srv.cc	/^static ulint srv_n_system_rows_updated_old = 0;$/;"	v	file:
srv_n_write_io_threads	srv/srv0srv.cc	/^ulong srv_n_write_io_threads;$/;"	v
srv_numa_interleave	srv/srv0srv.cc	/^bool srv_numa_interleave = false;$/;"	v
srv_online_max_size	srv/srv0srv.cc	/^unsigned long long srv_online_max_size;$/;"	v
srv_open_tmp_tablespace	srv/srv0start.cc	/^static dberr_t srv_open_tmp_tablespace(bool create_new_db,$/;"	f	file:
srv_page_size	srv/srv0srv.cc	/^ulong srv_page_size = UNIV_PAGE_SIZE_DEF;$/;"	v
srv_page_size_shift	srv/srv0srv.cc	/^ulong srv_page_size_shift = UNIV_PAGE_SIZE_SHIFT_DEF;$/;"	v
srv_parallel_read_threads	srv/srv0srv.cc	/^ulong srv_parallel_read_threads;$/;"	v
srv_pre_dd_shutdown	srv/srv0start.cc	/^void srv_pre_dd_shutdown() {$/;"	f
srv_prepare_to_delete_redo_log_files	srv/srv0start.cc	/^static lsn_t srv_prepare_to_delete_redo_log_files(ulint n_files) {$/;"	f	file:
srv_print_all_deadlocks	srv/srv0srv.cc	/^bool srv_print_all_deadlocks = FALSE;$/;"	v
srv_print_ddl_logs	srv/srv0srv.cc	/^bool srv_print_ddl_logs = false;$/;"	v
srv_print_innodb_lock_monitor	srv/srv0srv.cc	/^bool srv_print_innodb_lock_monitor = FALSE;$/;"	v
srv_print_innodb_monitor	srv/srv0srv.cc	/^bool srv_print_innodb_monitor = FALSE;$/;"	v
srv_print_master_thread_info	srv/srv0srv.cc	/^static void srv_print_master_thread_info(FILE *file) \/* in: output stream *\/$/;"	f	file:
srv_printf_innodb_monitor	srv/srv0srv.cc	/^bool srv_printf_innodb_monitor(FILE *file, bool nowait, ulint *trx_start_pos,$/;"	f
srv_printf_locks_and_transactions	srv/srv0srv.cc	/^static void srv_printf_locks_and_transactions(FILE *file,$/;"	f	file:
srv_priority_boost	srv/srv0srv.cc	/^ibool srv_priority_boost = TRUE;$/;"	v
srv_purge_batch_size	srv/srv0srv.cc	/^ulong srv_purge_batch_size = 20;$/;"	v
srv_purge_coordinator_suspend	srv/srv0srv.cc	/^static void srv_purge_coordinator_suspend($/;"	f	file:
srv_purge_coordinator_thread	srv/srv0srv.cc	/^void srv_purge_coordinator_thread() {$/;"	f
srv_purge_rseg_truncate_frequency	srv/srv0srv.cc	/^ulong srv_purge_rseg_truncate_frequency =$/;"	v
srv_purge_should_exit	srv/srv0srv.cc	/^static bool srv_purge_should_exit($/;"	f	file:
srv_purge_thread_key	srv/srv0start.cc	/^mysql_pfs_key_t srv_purge_thread_key;$/;"	v
srv_purge_threads_active	srv/srv0srv.cc	/^bool srv_purge_threads_active() {$/;"	f
srv_purge_view_update_only_debug	trx/trx0purge.cc	/^bool srv_purge_view_update_only_debug;$/;"	v
srv_purge_wakeup	srv/srv0srv.cc	/^void srv_purge_wakeup(void) {$/;"	f
srv_que_task_enqueue_low	srv/srv0srv.cc	/^void srv_que_task_enqueue_low(que_thr_t *thr) \/*!< in: query thread *\/$/;"	f
srv_random_read_ahead	srv/srv0srv.cc	/^bool srv_random_read_ahead = FALSE;$/;"	v
srv_read_ahead_threshold	srv/srv0srv.cc	/^ulong srv_read_ahead_threshold = 56;$/;"	v
srv_read_only_mode	srv/srv0srv.cc	/^bool srv_read_only_mode;$/;"	v
srv_redo_log	srv/srv0srv.cc	/^bool srv_redo_log = true;$/;"	v
srv_redo_log_encrypt	srv/srv0srv.cc	/^bool srv_redo_log_encrypt = false;$/;"	v
srv_refresh_innodb_monitor_stats	srv/srv0srv.cc	/^static void srv_refresh_innodb_monitor_stats(void) {$/;"	f	file:
srv_release_threads	srv/srv0srv.cc	/^ulint srv_release_threads(srv_thread_type type, \/*!< in: thread type *\/$/;"	f
srv_replication_delay	srv/srv0srv.cc	/^ulong srv_replication_delay = 0;$/;"	v
srv_reserve_slot	srv/srv0srv.cc	/^static srv_slot_t *srv_reserve_slot($/;"	f	file:
srv_reset_io_thread_op_info	srv/srv0srv.cc	/^void srv_reset_io_thread_op_info() {$/;"	f
srv_rollback_segments	srv/srv0srv.cc	/^ulong srv_rollback_segments = TRX_SYS_N_RSEGS;$/;"	v
srv_saved_page_number_debug	handler/ha_innodb.cc	/^static ulong srv_saved_page_number_debug = 0;$/;"	v	file:
srv_set_io_thread_op_info	srv/srv0srv.cc	/^void srv_set_io_thread_op_info(ulint i, const char *str) {$/;"	f
srv_shutdown	srv/srv0start.cc	/^void srv_shutdown() {$/;"	f
srv_shutdown_arch	srv/srv0start.cc	/^static void srv_shutdown_arch() {$/;"	f	file:
srv_shutdown_cleanup_and_master_stop	srv/srv0start.cc	/^static void srv_shutdown_cleanup_and_master_stop() {$/;"	f	file:
srv_shutdown_exit_threads	srv/srv0start.cc	/^void srv_shutdown_exit_threads() {$/;"	f
srv_shutdown_log	srv/srv0start.cc	/^static lsn_t srv_shutdown_log() {$/;"	f	file:
srv_shutdown_page_cleaners	srv/srv0start.cc	/^static void srv_shutdown_page_cleaners() {$/;"	f	file:
srv_shutdown_print_master_pending	srv/srv0srv.cc	/^static void srv_shutdown_print_master_pending($/;"	f	file:
srv_shutdown_set_state	srv/srv0start.cc	/^static void srv_shutdown_set_state(srv_shutdown_t new_state) {$/;"	f	file:
srv_shutdown_state_matches	include/srv0shutdown.h	/^bool srv_shutdown_state_matches(F &&f) {$/;"	f
srv_shutdown_t	include/srv0shutdown.h	/^enum srv_shutdown_t {$/;"	g
srv_shutdown_waits_for_rollback_of_recovered_transactions	srv/srv0start.cc	/^bool srv_shutdown_waits_for_rollback_of_recovered_transactions() {$/;"	f
srv_skip_temp_table_checks_debug	fsp/fsp0sysspace.cc	/^bool srv_skip_temp_table_checks_debug = true;$/;"	v
srv_slot_get_type	srv/srv0srv.cc	/^static srv_thread_type srv_slot_get_type($/;"	f	file:
srv_slot_t	include/srv0srv.h	/^struct srv_slot_t {$/;"	s
srv_sort_buf_size	srv/srv0srv.cc	/^ulong srv_sort_buf_size = 1048576;$/;"	v
srv_spin_wait_delay	srv/srv0srv.cc	/^ulong srv_spin_wait_delay = 6;$/;"	v
srv_stage_alter_table_end	srv/srv0srv.cc	/^PSI_stage_info srv_stage_alter_table_end = {$/;"	v
srv_stage_alter_table_flush	srv/srv0srv.cc	/^PSI_stage_info srv_stage_alter_table_flush = {$/;"	v
srv_stage_alter_table_insert	srv/srv0srv.cc	/^PSI_stage_info srv_stage_alter_table_insert = {$/;"	v
srv_stage_alter_table_log_index	srv/srv0srv.cc	/^PSI_stage_info srv_stage_alter_table_log_index = {$/;"	v
srv_stage_alter_table_log_table	srv/srv0srv.cc	/^PSI_stage_info srv_stage_alter_table_log_table = {$/;"	v
srv_stage_alter_table_merge_sort	srv/srv0srv.cc	/^PSI_stage_info srv_stage_alter_table_merge_sort = {$/;"	v
srv_stage_alter_table_read_pk_internal_sort	srv/srv0srv.cc	/^PSI_stage_info srv_stage_alter_table_read_pk_internal_sort = {$/;"	v
srv_stage_alter_tablespace_encryption	srv/srv0srv.cc	/^PSI_stage_info srv_stage_alter_tablespace_encryption = {$/;"	v
srv_stage_buffer_pool_load	srv/srv0srv.cc	/^PSI_stage_info srv_stage_buffer_pool_load = {$/;"	v
srv_stage_clone_file_copy	srv/srv0srv.cc	/^PSI_stage_info srv_stage_clone_file_copy = {$/;"	v
srv_stage_clone_page_copy	srv/srv0srv.cc	/^PSI_stage_info srv_stage_clone_page_copy = {$/;"	v
srv_stage_clone_redo_copy	srv/srv0srv.cc	/^PSI_stage_info srv_stage_clone_redo_copy = {$/;"	v
srv_stages	srv/srv0start.cc	/^static PSI_stage_info *srv_stages[] = {$/;"	v	file:
srv_start	srv/srv0start.cc	/^dberr_t srv_start(bool create_new_db) {$/;"	f
srv_start_has_been_called	srv/srv0start.cc	/^static bool srv_start_has_been_called = false;$/;"	v	file:
srv_start_purge_threads	srv/srv0start.cc	/^void srv_start_purge_threads() {$/;"	f
srv_start_raw_disk_in_use	srv/srv0start.cc	/^ibool srv_start_raw_disk_in_use = FALSE;$/;"	v
srv_start_state	srv/srv0start.cc	/^static uint64_t srv_start_state = SRV_START_STATE_NONE;$/;"	v	file:
srv_start_state_is_set	srv/srv0start.cc	/^bool srv_start_state_is_set($/;"	f
srv_start_state_set	srv/srv0start.cc	/^void srv_start_state_set(srv_start_state_t state) \/*!< in: indicate current$/;"	f
srv_start_state_t	srv/srv0start.cc	/^enum srv_start_state_t {$/;"	g	file:
srv_start_threads	srv/srv0start.cc	/^void srv_start_threads(bool bootstrap) {$/;"	f
srv_start_threads_after_ddl_recovery	srv/srv0start.cc	/^void srv_start_threads_after_ddl_recovery() {$/;"	f
srv_start_wait_for_purge_to_start	srv/srv0start.cc	/^static void srv_start_wait_for_purge_to_start() {$/;"	f	file:
srv_startup_is_before_trx_rollback_phase	srv/srv0start.cc	/^bool srv_startup_is_before_trx_rollback_phase = false;$/;"	v
srv_stats	srv/srv0srv.cc	/^srv_stats_t srv_stats;$/;"	v
srv_stats_auto_recalc	srv/srv0srv.cc	/^bool srv_stats_auto_recalc = TRUE;$/;"	v
srv_stats_include_delete_marked	srv/srv0srv.cc	/^bool srv_stats_include_delete_marked = FALSE;$/;"	v
srv_stats_method_name_enum	include/srv0srv.h	/^enum srv_stats_method_name_enum {$/;"	g
srv_stats_method_name_t	include/srv0srv.h	/^typedef enum srv_stats_method_name_enum srv_stats_method_name_t;$/;"	t	typeref:enum:srv_stats_method_name_enum
srv_stats_persistent	srv/srv0srv.cc	/^bool srv_stats_persistent = TRUE;$/;"	v
srv_stats_persistent_sample_pages	srv/srv0srv.cc	/^unsigned long long srv_stats_persistent_sample_pages = 20;$/;"	v
srv_stats_t	include/srv0srv.h	/^struct srv_stats_t {$/;"	s
srv_stats_transient_sample_pages	srv/srv0srv.cc	/^unsigned long long srv_stats_transient_sample_pages = 8;$/;"	v
srv_suspend_thread	srv/srv0srv.cc	/^static int64_t srv_suspend_thread(srv_slot_t *slot) \/*!< in\/out: thread slot *\/$/;"	f	file:
srv_suspend_thread_low	srv/srv0srv.cc	/^static int64_t srv_suspend_thread_low($/;"	f	file:
srv_sync_array_size	sync/sync0arr.cc	/^ulong srv_sync_array_size = 1;$/;"	v
srv_sync_debug	sync/sync0debug.cc	/^bool srv_sync_debug;$/;"	v
srv_sys	srv/srv0srv.cc	/^static srv_sys_t *srv_sys = nullptr;$/;"	v	file:
srv_sys_check_set_encryption	srv/srv0srv.cc	/^static void srv_sys_check_set_encryption() {$/;"	f	file:
srv_sys_mutex_enter	srv/srv0srv.cc	624;"	d	file:
srv_sys_mutex_exit	srv/srv0srv.cc	633;"	d	file:
srv_sys_mutex_key	sync/sync0sync.cc	/^mysql_pfs_key_t srv_sys_mutex_key;$/;"	v
srv_sys_mutex_own	srv/srv0srv.cc	630;"	d	file:
srv_sys_space	fsp/fsp0sysspace.cc	/^SysTablespace srv_sys_space;$/;"	v
srv_sys_t	srv/srv0srv.cc	/^struct srv_sys_t {$/;"	s	file:
srv_sys_tablespaces_open	srv/srv0start.cc	/^bool srv_sys_tablespaces_open = false;$/;"	v
srv_task_execute	srv/srv0srv.cc	/^static bool srv_task_execute(void) {$/;"	f	file:
srv_temp_dir	srv/srv0tmp.cc	/^char *srv_temp_dir = nullptr;$/;"	m	namespace:ibt	file:
srv_thread_concurrency	srv/srv0conc.cc	/^ulong srv_thread_concurrency = 0;$/;"	v
srv_thread_delay_cleanup_if_needed	srv/srv0start.cc	/^void srv_thread_delay_cleanup_if_needed(bool wait_for_signal) {$/;"	f
srv_thread_is_active	srv/srv0srv.cc	/^bool srv_thread_is_active(const IB_thread &thread) {$/;"	f
srv_thread_is_stopped	srv/srv0srv.cc	/^bool srv_thread_is_stopped(const IB_thread &thread) {$/;"	f
srv_thread_sleep_delay	srv/srv0conc.cc	/^ulong srv_thread_sleep_delay = 10000;$/;"	v
srv_thread_type	include/srv0srv.h	/^enum srv_thread_type {$/;"	g
srv_thread_type_validate	srv/srv0srv.cc	/^static ibool srv_thread_type_validate($/;"	f	file:
srv_threads	srv/srv0srv.cc	/^Srv_threads srv_threads;$/;"	v
srv_threads_mutex_key	sync/sync0sync.cc	/^mysql_pfs_key_t srv_threads_mutex_key;$/;"	v
srv_tmp_space	fsp/fsp0sysspace.cc	/^SysTablespace srv_tmp_space;$/;"	v
srv_truncated_status_writes	srv/srv0srv.cc	/^ulint srv_truncated_status_writes = 0;$/;"	v
srv_ts_alter_encrypt_thread_key	srv/srv0start.cc	/^mysql_pfs_key_t srv_ts_alter_encrypt_thread_key;$/;"	v
srv_undo_dir	srv/srv0srv.cc	/^char *srv_undo_dir = nullptr;$/;"	v
srv_undo_log_encrypt	srv/srv0srv.cc	/^bool srv_undo_log_encrypt = FALSE;$/;"	v
srv_undo_log_truncate	srv/srv0srv.cc	/^bool srv_undo_log_truncate = FALSE;$/;"	v
srv_undo_logs	srv/srv0srv.cc	/^ulong srv_undo_logs = 0;$/;"	v
srv_undo_tablespace_create	srv/srv0start.cc	/^dberr_t srv_undo_tablespace_create(const char *space_name,$/;"	f
srv_undo_tablespace_create	srv/srv0start.cc	/^static dberr_t srv_undo_tablespace_create(undo::Tablespace &undo_space) {$/;"	f	file:
srv_undo_tablespace_enable_encryption	srv/srv0start.cc	/^static dberr_t srv_undo_tablespace_enable_encryption(space_id_t space_id) {$/;"	f	file:
srv_undo_tablespace_fixup	srv/srv0start.cc	/^dberr_t srv_undo_tablespace_fixup(const char *space_name, const char *file_name,$/;"	f
srv_undo_tablespace_fixup_57	srv/srv0start.cc	/^static dberr_t srv_undo_tablespace_fixup_57(space_id_t space_id) {$/;"	f	file:
srv_undo_tablespace_fixup_num	srv/srv0start.cc	/^static dberr_t srv_undo_tablespace_fixup_num(space_id_t space_num) {$/;"	f	file:
srv_undo_tablespace_open	srv/srv0start.cc	/^dberr_t srv_undo_tablespace_open(undo::Tablespace &undo_space) {$/;"	f
srv_undo_tablespace_open_by_id	srv/srv0start.cc	/^static dberr_t srv_undo_tablespace_open_by_id(space_id_t space_id) {$/;"	f	file:
srv_undo_tablespace_open_by_num	srv/srv0start.cc	/^static dberr_t srv_undo_tablespace_open_by_num(space_id_t space_num) {$/;"	f	file:
srv_undo_tablespace_read_encryption	srv/srv0start.cc	/^static dberr_t srv_undo_tablespace_read_encryption(pfs_os_file_t fh,$/;"	f	file:
srv_undo_tablespaces	srv/srv0srv.cc	/^ulong srv_undo_tablespaces = FSP_IMPLICIT_UNDO_TABLESPACES;$/;"	v
srv_undo_tablespaces_construct	srv/srv0start.cc	/^static dberr_t srv_undo_tablespaces_construct(bool create_new_db) {$/;"	f	file:
srv_undo_tablespaces_create	srv/srv0start.cc	/^static dberr_t srv_undo_tablespaces_create() {$/;"	f	file:
srv_undo_tablespaces_downgrade	srv/srv0start.cc	/^static void srv_undo_tablespaces_downgrade() {$/;"	f	file:
srv_undo_tablespaces_init	srv/srv0start.cc	/^static dberr_t srv_undo_tablespaces_init(bool create_new_db) {$/;"	f	file:
srv_undo_tablespaces_mark_construction_done	srv/srv0start.cc	/^static void srv_undo_tablespaces_mark_construction_done() {$/;"	f	file:
srv_undo_tablespaces_open	srv/srv0start.cc	/^static dberr_t srv_undo_tablespaces_open() {$/;"	f	file:
srv_undo_tablespaces_upgrade	srv/srv0start.cc	/^dberr_t srv_undo_tablespaces_upgrade() {$/;"	f
srv_unix_file_flush_method	srv/srv0srv.cc	/^enum srv_unix_flush_t srv_unix_file_flush_method = SRV_UNIX_FSYNC;$/;"	v	typeref:enum:srv_unix_flush_t
srv_unix_flush_t	include/srv0srv.h	/^enum srv_unix_flush_t {$/;"	g
srv_update_cpu_usage	srv/srv0srv.cc	/^static void srv_update_cpu_usage() {$/;"	f	file:
srv_upgrade_old_undo_found	srv/srv0srv.cc	/^bool srv_upgrade_old_undo_found = false;$/;"	v
srv_use_native_aio	srv/srv0srv.cc	/^bool srv_use_native_aio = false;$/;"	v
srv_validate_tablespace_paths	srv/srv0srv.cc	/^bool srv_validate_tablespace_paths = true;$/;"	v
srv_wake_master_thread	srv/srv0srv.cc	/^void srv_wake_master_thread(void) {$/;"	f
srv_wake_purge_thread_if_not_active	srv/srv0srv.cc	/^void srv_wake_purge_thread_if_not_active(void) {$/;"	f
srv_win_file_flush_method	srv/srv0srv.cc	/^enum srv_win_flush_t srv_win_file_flush_method = SRV_WIN_IO_UNBUFFERED;$/;"	v	typeref:enum:srv_win_flush_t
srv_win_flush_t	include/srv0srv.h	/^enum srv_win_flush_t {$/;"	g
srv_worker_thread	srv/srv0srv.cc	/^void srv_worker_thread() {$/;"	f
srv_worker_thread_key	srv/srv0start.cc	/^mysql_pfs_key_t srv_worker_thread_key;$/;"	v
ssize	include/page0types.h	/^  uint8_t ssize;$/;"	m	struct:page_zip_des_t
stamp	include/buf0buf.h	/^  } stamp;$/;"	m	struct:Cache_hint::buf_buddy_free_t	typeref:union:Cache_hint::buf_buddy_free_t::__anon15
start	arch/arch0log.cc	/^int Arch_Log_Sys::start(Arch_Group *&group, lsn_t &start_lsn, byte *header,$/;"	f	class:Arch_Log_Sys
start	arch/arch0log.cc	/^int Log_Arch_Client_Ctx::start(byte *header, uint len) {$/;"	f	class:Log_Arch_Client_Ctx
start	arch/arch0page.cc	/^int Arch_Page_Sys::start(Arch_Group **group, lsn_t *start_lsn,$/;"	f	class:Arch_Page_Sys
start	arch/arch0page.cc	/^int Page_Arch_Client_Ctx::start(bool recovery, uint64_t *start_id) {$/;"	f	class:Page_Arch_Client_Ctx
start	buf/buf0buf.cc	/^buf_page_t *LRUItr::start() {$/;"	f	class:LRUItr
start	clone/clone0repl.cc	/^bool Clone_persist_gtid::start() {$/;"	f	class:Clone_persist_gtid
start	fts/fts0que.cc	/^  ulint start; \/*!< Start the phrase match from$/;"	m	struct:fts_match_t	file:
start	include/mem0mem.h	/^  ulint start;      \/*!< the value of the struct field 'free' at the$/;"	m	struct:mem_block_info_t
start	mtr/mtr0mtr.cc	/^void mtr_t::start(bool sync, bool read_only) {$/;"	f	class:mtr_t
start	os/os0file.cc	/^bool AIO::start(ulint n_per_seg, ulint n_readers, ulint n_writers,$/;"	f	class:AIO
start	os/os0thread.cc	/^void IB_thread::start() {$/;"	f	class:IB_thread
start_blob_mtr	include/lob0ins.h	/^  mtr_t *start_blob_mtr() {$/;"	f	struct:lob::BaseInserter
start_btr_mtr	include/lob0lob.h	/^  void start_btr_mtr() {$/;"	f	class:lob::BtrContext
start_callback	row/row0pread-histogram.cc	/^dberr_t Histogram_sampler::start_callback($/;"	f	class:Histogram_sampler
start_during_recovery	arch/arch0page.cc	/^int Arch_Page_Sys::start_during_recovery(Arch_Group *group,$/;"	f	class:Arch_Page_Sys
start_file	include/trx0trx.h	/^  const char *start_file; \/*!< Filename where it was started *\/$/;"	m	struct:trx_t
start_line	include/trx0trx.h	/^  ulint start_line;       \/*!< Track where it was started from *\/$/;"	m	struct:trx_t
start_log_archiver_background	arch/arch0arch.cc	/^int start_log_archiver_background() {$/;"	f
start_logging	trx/trx0purge.cc	/^dberr_t start_logging(Tablespace *undo_space) {$/;"	f	namespace:undo
start_lsn	include/log0recv.h	/^  lsn_t start_lsn;$/;"	m	struct:recv_t
start_lsn	include/log0types.h	/^  lsn_t start_lsn;$/;"	m	struct:Log_handle
start_next_file	log/log0write.cc	/^static void start_next_file(log_t &log, lsn_t start_lsn) {$/;"	f	namespace:Log_files_write_impl
start_page_archiver_background	arch/arch0arch.cc	/^int start_page_archiver_background() {$/;"	f
start_print	lock/lock0lock.cc	/^void Deadlock_notifier::start_print() {$/;"	f	class:Deadlock_notifier
start_query_thread	log/log0ddl.cc	/^void DDL_Log_Table::start_query_thread() {$/;"	f	class:DDL_Log_Table
start_range	row/row0pread.cc	/^page_cur_t Parallel_reader::Scan_ctx::start_range($/;"	f	class:Parallel_reader::Scan_ctx
start_stmt	handler/ha_innodb.cc	/^int ha_innobase::start_stmt(THD *thd, thr_lock_type lock_type) {$/;"	f	class:ha_innobase
start_stmt	handler/ha_innopart.cc	/^int ha_innopart::start_stmt(THD *thd, thr_lock_type lock_type) {$/;"	f	class:ha_innopart
start_stmt	include/trx0trx.h	/^  bool start_stmt;$/;"	m	struct:trx_lock_t
start_time	include/fts0types.h	/^  ib_time_monotonic_t start_time;$/;"	m	struct:fts_sync_t
start_time	include/trx0trx.h	/^  time_t start_time; \/*!< time the state last time became$/;"	m	struct:trx_t
stat	include/buf0buf.h	/^  buf_pool_stat_t stat;$/;"	m	struct:Cache_hint::buf_pool_t
stat_clustered_index_size	include/dict0mem.h	/^  ulint stat_clustered_index_size;$/;"	m	struct:dict_table_t
stat_index_size	include/dict0mem.h	/^  ulint stat_index_size;$/;"	m	struct:dict_index_t
stat_initialized	include/dict0mem.h	/^  unsigned stat_initialized : 1;$/;"	m	struct:dict_table_t
stat_list	include/pars0pars.h	/^  que_node_t *stat_list;        \/*!< statement list *\/$/;"	m	struct:for_node_t
stat_list	include/pars0pars.h	/^  que_node_t *stat_list;    \/*!< statement list *\/$/;"	m	struct:if_node_t
stat_list	include/pars0pars.h	/^  que_node_t *stat_list;  \/*!< statement list *\/$/;"	m	struct:proc_node_t
stat_list	include/pars0pars.h	/^  que_node_t *stat_list; \/*!< statement list *\/$/;"	m	struct:elsif_node_t
stat_list	include/pars0pars.h	/^  que_node_t *stat_list; \/*!< statement list *\/$/;"	m	struct:while_node_t
stat_modified_counter	include/dict0mem.h	/^  ib_uint64_t stat_modified_counter;$/;"	m	struct:dict_table_t
stat_n_diff_key_vals	include/dict0mem.h	/^  ib_uint64_t *stat_n_diff_key_vals;$/;"	m	struct:dict_index_t
stat_n_leaf_pages	include/dict0mem.h	/^  ulint stat_n_leaf_pages;$/;"	m	struct:dict_index_t
stat_n_non_null_key_vals	include/dict0mem.h	/^  ib_uint64_t *stat_n_non_null_key_vals;$/;"	m	struct:dict_index_t
stat_n_rows	include/dict0mem.h	/^  ib_uint64_t stat_n_rows;$/;"	m	struct:dict_table_t
stat_n_sample_sizes	include/dict0mem.h	/^  ib_uint64_t *stat_n_sample_sizes;$/;"	m	struct:dict_index_t
stat_persistent	include/dict0mem.h	/^  ib_uint32_t stat_persistent;$/;"	m	struct:dict_table_t
stat_sum_of_other_index_sizes	include/dict0mem.h	/^  ulint stat_sum_of_other_index_sizes;$/;"	m	struct:dict_table_t
state	buf/buf0flu.cc	/^  page_cleaner_state_t state; \/*!< state of the request.$/;"	m	struct:page_cleaner_slot_t	file:
state	fts/fts0opt.cc	/^  fts_state_t state; \/*!< State of this slot *\/$/;"	m	struct:fts_slot_t	file:
state	handler/handler0alter.cc	/^  virtual partition_state state() const { return (m_state); }$/;"	f	class:alter_part
state	include/buf0buf.h	/^  buf_page_state state;$/;"	m	class:Cache_hint::buf_page_t
state	include/dict0crea.h	/^  ulint state;                   \/*!< node execution state *\/$/;"	m	struct:ind_node_t
state	include/dict0crea.h	/^  ulint state;       \/*!< node execution state *\/$/;"	m	struct:tab_node_t
state	include/fts0fts.h	/^  fts_row_state state; \/*!< state of the row *\/$/;"	m	struct:fts_trx_row_t
state	include/os0thread.h	/^  State state() const {$/;"	f	class:IB_thread
state	include/que0que.h	/^  que_thr_state_t state; \/*!< state of the query thread *\/$/;"	m	struct:que_thr_t
state	include/que0que.h	/^  ulint state;         \/*!< state of the fork node *\/$/;"	m	struct:que_fork_t
state	include/row0ftsort.h	/^  ulint state;                      \/*!< parent thread state *\/$/;"	m	struct:fts_psort_t
state	include/row0ins.h	/^  ulint state;             \/*!< node execution state *\/$/;"	m	struct:ins_node_t
state	include/row0sel.h	/^  enum sel_node_state state; \/*!< node state *\/$/;"	m	struct:sel_node_t	typeref:enum:sel_node_t::sel_node_state
state	include/row0undo.h	/^  enum undo_exec state;     \/*!< node execution state *\/$/;"	m	struct:undo_node_t	typeref:enum:undo_node_t::undo_exec
state	include/row0upd.h	/^  ulint state;         \/*!< node execution state *\/$/;"	m	struct:upd_node_t
state	include/trx0purge.h	/^  volatile purge_state_t state;$/;"	m	struct:trx_purge_t
state	include/trx0roll.h	/^  enum roll_node_state state; \/*!< node execution state *\/$/;"	m	struct:roll_node_t	typeref:enum:roll_node_t::roll_node_state
state	include/trx0trx.h	/^  enum commit_node_state state; \/*!< node execution state *\/$/;"	m	struct:commit_node_t	typeref:enum:commit_node_t::commit_node_state
state	include/trx0trx.h	/^  trx_state_t state;$/;"	m	struct:trx_t
state	include/trx0undo.h	/^  ulint state;     \/*!< state of the corresponding undo log$/;"	m	struct:trx_undo_t
state	include/usr0sess.h	/^  ulint state; \/*!< state of the session *\/$/;"	m	struct:sess_t
state_name	include/fsp0fsp.h	/^inline const char *xdes_mem_t::state_name() const {$/;"	f	class:xdes_mem_t
state_t	include/os0once.h	/^  typedef ib_uint32_t state_t;$/;"	t	class:os_once
statement	pars/pars0grm.y	/^statement:$/;"	l
statement_list	pars/pars0grm.y	/^statement_list:$/;"	l
static_cast	mtr/mtr0mtr.cc	/^                  static_cast<int>(RW_SX_LATCH),$/;"	v
static_cast	mtr/mtr0mtr.cc	/^                  static_cast<int>(RW_S_LATCH),$/;"	v
static_cast	mtr/mtr0mtr.cc	/^                  static_cast<int>(RW_X_LATCH),$/;"	v
stats_auto_recalc	include/dict0mem.h	/^  ib_uint32_t stats_auto_recalc;$/;"	m	struct:dict_table_t
stats_bg_flag	include/dict0mem.h	/^  byte stats_bg_flag;$/;"	m	struct:dict_table_t
stats_last_recalc	include/dict0mem.h	/^  ib_time_monotonic_t stats_last_recalc;$/;"	m	struct:dict_table_t
stats_latch	include/dict0mem.h	/^  rw_lock_t *stats_latch;$/;"	m	struct:dict_table_t
stats_latch_created	include/dict0mem.h	/^  std::atomic<os_once::state_t> stats_latch_created;$/;"	m	struct:dict_table_t
stats_sample_pages	include/dict0mem.h	/^  ulint stats_sample_pages;$/;"	m	struct:dict_table_t
stats_were_modified	dict/dict0stats.cc	/^  bool stats_were_modified; \/*!< will be set to true if at$/;"	m	struct:index_fetch_t	file:
status	fts/fts0opt.cc	/^  lint status; \/*!< Status of (un)\/zip operation *\/$/;"	m	struct:fts_zip_t	file:
status	include/fts0types.h	/^  ulint status;              \/*!< Status of the stopword tree *\/$/;"	m	struct:fts_stopword_t
status_severity	buf/buf0dump.cc	/^enum status_severity { STATUS_VERBOSE, STATUS_INFO, STATUS_ERR };$/;"	g	file:
stime_abs	include/srv0srv.h	/^  double stime_abs;$/;"	m	struct:Srv_cpu_usage
stime_pct	include/srv0srv.h	/^  double stime_pct;$/;"	m	struct:Srv_cpu_usage
stop	arch/arch0log.cc	/^int Arch_Log_Sys::stop(Arch_Group *group, lsn_t &stop_lsn, byte *log_blk,$/;"	f	class:Arch_Log_Sys
stop	arch/arch0log.cc	/^int Log_Arch_Client_Ctx::stop(byte *trailer, uint32_t &len, uint64_t &offset) {$/;"	f	class:Log_Arch_Client_Ctx
stop	arch/arch0page.cc	/^int Arch_Page_Sys::stop(Arch_Group *group, lsn_t *stop_lsn,$/;"	f	class:Arch_Page_Sys
stop	arch/arch0page.cc	/^int Page_Arch_Client_Ctx::stop(lsn_t *stop_id) {$/;"	f	class:Page_Arch_Client_Ctx
stop	clone/clone0repl.cc	/^void Clone_persist_gtid::stop() {$/;"	f	class:Clone_persist_gtid
stop_query_thread	log/log0ddl.cc	/^void DDL_Log_Table::stop_query_thread() {$/;"	f	class:DDL_Log_Table
stopword_info	include/fts0types.h	/^  fts_stopword_t stopword_info; \/*!< Cached stopwords for the FTS *\/$/;"	m	struct:fts_cache_t
stopwords	include/fts0types.h	/^  ib_rbt_t *stopwords; \/*!< Stopwords *\/$/;"	m	struct:fts_doc_t
storage	trx/trx0i_s.cc	/^  ha_storage_t *storage;$/;"	m	struct:trx_i_s_cache_t	file:
store	buf/buf0block_hint.cc	/^void Block_hint::store(buf_block_t *block) {$/;"	f	class:buf::Block_hint
store	log/log0recv.cc	/^void MetadataRecover::store() {$/;"	f	class:MetadataRecover
storeExt	btr/btr0bulk.cc	/^dberr_t PageBulk::storeExt(const big_rec_t *big_rec, ulint *offsets) {$/;"	f	class:PageBulk
store_lock	handler/ha_innodb.cc	/^THR_LOCK_DATA **ha_innobase::store_lock($/;"	f	class:ha_innobase
store_lock	handler/ha_innopart.cc	/^THR_LOCK_DATA **ha_innopart::store_lock(THD *thd, THR_LOCK_DATA **to,$/;"	f	class:ha_innopart
store_position	btr/btr0pcur.cc	/^void btr_pcur_t::store_position(mtr_t *mtr) {$/;"	f	class:btr_pcur_t
store_position	include/lob0lob.h	/^  void store_position() { btr_pcur_store_position(m_pcur, m_mtr); }$/;"	f	class:lob::BtrContext
store_time	handler/i_s.cc	/^  return (field->store_time(&my_time, MYSQL_TIMESTAMP_DATETIME));$/;"	v
stored_cursor_rec_processed	include/row0sel.h	/^  ibool stored_cursor_rec_processed;$/;"	m	struct:plan_t
str	include/fts0ast.h	/^  byte *str;$/;"	m	struct:fts_ast_string_t
string_append	pars/lexyy.cc	/^string_append($/;"	f	file:
string_len	include/pars0sym.h	/^  size_t string_len;$/;"	m	struct:sym_tab_t
stringbuf	pars/lexyy.cc	/^static char*	stringbuf; \/* Start of buffer *\/$/;"	v	file:
stringbuf_len	pars/lexyy.cc	/^static ulint	stringbuf_len = 0; \/* Current length *\/$/;"	v	file:
stringbuf_len_alloc	pars/lexyy.cc	/^static ulint	stringbuf_len_alloc = 0; \/* Allocated length *\/$/;"	v	file:
sub	include/ut0counter.h	/^inline Type sub(Shards<COUNT> &shards, size_t id, size_t n) {$/;"	f	namespace:Counter
sub_expr	fts/fts0pars.y	/^sub_expr: '(' expr_lst ')'		{$/;"	l
succeeded_list	buf/buf0flu.cc	/^  bool succeeded_list;$/;"	m	struct:page_cleaner_slot_t	file:
success	include/dict0mem.h	/^  ulint success;          \/*!< successful compression ops during$/;"	m	struct:zip_pad_info_t
suffix	include/fts0fts.h	/^  const char *suffix;        \/*!< The suffix of the fts auxiliary$/;"	m	struct:fts_table_t
suffix	include/fts0types.h	/^  const char *suffix; \/*!< FTS aux index suffix *\/$/;"	m	struct:fts_index_selector_t
sum_pages	buf/buf0flu.cc	/^ulint sum_pages = 0;$/;"	m	namespace:Adaptive_flush	file:
supremum_extra_data	include/page0page.h	/^static const byte supremum_extra_data[] = {$/;"	v
suspend_time	include/srv0srv.h	/^  ib_time_monotonic_t suspend_time;$/;"	m	struct:srv_slot_t
suspended	include/srv0srv.h	/^  bool suspended;$/;"	m	struct:srv_slot_t
switch_active_list	include/clone0repl.h	/^  uint64_t switch_active_list() {$/;"	f	class:Clone_persist_gtid
sx_recursive	include/sync0rw.h	/^  volatile ulint sx_recursive;$/;"	m	struct:rw_lock_t
sym_list	include/pars0sym.h	/^  sym_list;              \/*!< list of symbol$/;"	m	struct:sym_node_t
sym_list	include/pars0sym.h	/^  sym_node_list_t sym_list;$/;"	m	struct:sym_tab_t
sym_node_list_t	include/pars0types.h	/^typedef UT_LIST_BASE_NODE_T(sym_node_t) sym_node_list_t;$/;"	t
sym_node_t	include/pars0sym.h	/^struct sym_node_t {$/;"	s
sym_tab	include/pars0pars.h	/^  sym_tab_t *sym_tab;     \/*!< symbol table of this procedure *\/$/;"	m	struct:proc_node_t
sym_tab	include/que0que.h	/^  sym_tab_t *sym_tab; \/*!< symbol table of the query,$/;"	m	struct:que_fork_t
sym_tab_add_bound_id	pars/pars0sym.cc	/^sym_node_t *sym_tab_add_bound_id(sym_tab_t *sym_tab, \/*!< in: symbol table *\/$/;"	f
sym_tab_add_bound_lit	pars/pars0sym.cc	/^sym_node_t *sym_tab_add_bound_lit($/;"	f
sym_tab_add_id	pars/pars0sym.cc	/^sym_node_t *sym_tab_add_id(sym_tab_t *sym_tab, \/*!< in: symbol table *\/$/;"	f
sym_tab_add_int_lit	pars/pars0sym.cc	/^sym_node_t *sym_tab_add_int_lit(sym_tab_t *sym_tab, \/*!< in: symbol table *\/$/;"	f
sym_tab_add_null_lit	pars/pars0sym.cc	/^sym_node_t *sym_tab_add_null_lit(sym_tab_t *sym_tab) \/*!< in: symbol table *\/$/;"	f
sym_tab_add_str_lit	pars/pars0sym.cc	/^sym_node_t *sym_tab_add_str_lit(sym_tab_t *sym_tab, \/*!< in: symbol table *\/$/;"	f
sym_tab_create	pars/pars0sym.cc	/^sym_tab_t *sym_tab_create($/;"	f
sym_tab_entry	include/pars0sym.h	/^enum sym_tab_entry {$/;"	g
sym_tab_free_private	pars/pars0sym.cc	/^void sym_tab_free_private(sym_tab_t *sym_tab) \/*!< in, own: symbol table *\/$/;"	f
sym_tab_rebind_lit	pars/pars0sym.cc	/^sym_node_t *sym_tab_rebind_lit($/;"	f
sym_tab_t	include/pars0sym.h	/^struct sym_tab_t {$/;"	s
sym_table	include/pars0sym.h	/^  sym_tab_t *sym_table;          \/*!< back pointer to$/;"	m	struct:sym_node_t
sync	include/fts0types.h	/^  fts_sync_t *sync;      \/*!< sync structure to sync data to$/;"	m	struct:fts_cache_t
sync0arr_h	include/sync0arr.h	34;"	d
sync0debug_h	include/sync0debug.h	40;"	d
sync0policy_h	include/sync0policy.h	34;"	d
sync0rw_h	include/sync0rw.h	41;"	d
sync0sharded_rw_h	include/sync0sharded_rw.h	44;"	d
sync0sync_h	include/sync0sync.h	42;"	d
sync0types_h	include/sync0types.h	34;"	d
sync_allowed_latches	include/sync0types.h	/^  sync_allowed_latches(const latch_level_t *from, const latch_level_t *to)$/;"	f	struct:sync_allowed_latches
sync_allowed_latches	include/sync0types.h	/^struct sync_allowed_latches : public sync_check_functor_t {$/;"	s
sync_arr_cell_can_wake_up	sync/sync0arr.cc	/^static bool sync_arr_cell_can_wake_up($/;"	f	file:
sync_arr_wake_threads_if_sema_free	sync/sync0arr.cc	/^void sync_arr_wake_threads_if_sema_free(void) {$/;"	f
sync_array_cell_print	sync/sync0arr.cc	/^void sync_array_cell_print(FILE *file, sync_cell_t *cell) {$/;"	f
sync_array_close	sync/sync0arr.cc	/^void sync_array_close(void) {$/;"	f
sync_array_deadlock_step	sync/sync0arr.cc	/^static ibool sync_array_deadlock_step($/;"	f	file:
sync_array_detect_deadlock	sync/sync0arr.cc	/^static bool sync_array_detect_deadlock($/;"	f	file:
sync_array_enter	include/sync0arr_impl.h	152;"	d
sync_array_enter	sync/sync0arr.cc	70;"	d	file:
sync_array_exit	include/sync0arr_impl.h	151;"	d
sync_array_exit	sync/sync0arr.cc	69;"	d	file:
sync_array_find_thread	sync/sync0arr.cc	/^static sync_cell_t *sync_array_find_thread($/;"	f	file:
sync_array_free	sync/sync0arr.cc	/^static void sync_array_free(sync_array_t *arr) \/*!< in, own: sync wait array *\/$/;"	f	file:
sync_array_free_cell	sync/sync0arr.cc	/^void sync_array_free_cell($/;"	f
sync_array_get_nth_cell	sync/sync0arr.cc	/^sync_cell_t *sync_array_get_nth_cell(sync_array_t *arr, ulint n) {$/;"	f
sync_array_init	sync/sync0arr.cc	/^void sync_array_init(ulint n_threads) \/*!< in: Number of slots to$/;"	f
sync_array_mutex_key	sync/sync0sync.cc	/^mysql_pfs_key_t sync_array_mutex_key;$/;"	v
sync_array_object_signalled	sync/sync0arr.cc	/^void sync_array_object_signalled() { ++sg_count; }$/;"	f
sync_array_print	sync/sync0arr.cc	/^void sync_array_print(FILE *file) \/*!< in\/out: Print to this stream *\/$/;"	f
sync_array_print_info	sync/sync0arr.cc	/^static void sync_array_print_info(FILE *file, \/*!< in: file where to print *\/$/;"	f	file:
sync_array_print_info_low	sync/sync0arr.cc	/^static void sync_array_print_info_low($/;"	f	file:
sync_array_print_long_waits	sync/sync0arr.cc	/^ibool sync_array_print_long_waits($/;"	f
sync_array_print_long_waits_low	sync/sync0arr.cc	/^static bool sync_array_print_long_waits_low($/;"	f	file:
sync_array_report_error	sync/sync0arr.cc	/^static void sync_array_report_error(rw_lock_t *lock, rw_lock_debug_t *debug,$/;"	f	file:
sync_array_reserve_cell	sync/sync0arr.cc	/^sync_cell_t *sync_array_reserve_cell($/;"	f
sync_array_size	sync/sync0arr.cc	/^ulint sync_array_size;$/;"	v
sync_array_t	include/sync0arr_impl.h	/^struct sync_array_t {$/;"	s
sync_array_validate	sync/sync0arr.cc	/^static void sync_array_validate(sync_array_t *arr) \/*!< in: sync wait array *\/$/;"	f	file:
sync_array_wait_event	sync/sync0arr.cc	/^void sync_array_wait_event($/;"	f
sync_array_wake_threads_if_sema_free_low	sync/sync0arr.cc	/^static void sync_array_wake_threads_if_sema_free_low($/;"	f	file:
sync_basename	sync/sync0sync.cc	/^const char *sync_basename(const char *filename) {$/;"	f
sync_cell_get_event	sync/sync0arr.cc	/^static os_event_t sync_cell_get_event($/;"	f	file:
sync_cell_t	include/sync0arr_impl.h	/^struct sync_cell_t {$/;"	s
sync_check_close	sync/sync0debug.cc	/^void sync_check_close() {$/;"	f
sync_check_enable	sync/sync0debug.cc	/^void sync_check_enable() {$/;"	f
sync_check_find	sync/sync0debug.cc	/^const latch_t *sync_check_find(latch_level_t level) {$/;"	f
sync_check_functor_t	include/sync0types.h	/^struct sync_check_functor_t {$/;"	s
sync_check_init	sync/sync0debug.cc	/^void sync_check_init(size_t max_threads) {$/;"	f
sync_check_iterate	include/sync0rw.h	68;"	d
sync_check_iterate	sync/sync0debug.cc	/^bool sync_check_iterate(sync_check_functor_t &functor) {$/;"	f
sync_check_lock	include/sync0rw.h	84;"	d
sync_check_lock	sync/sync0debug.cc	/^void sync_check_lock(const latch_t *latch, latch_level_t level) {$/;"	f
sync_check_lock_granted	sync/sync0debug.cc	/^void sync_check_lock_granted(const latch_t *latch) {$/;"	f
sync_check_lock_validate	sync/sync0debug.cc	/^void sync_check_lock_validate(const latch_t *latch) {$/;"	f
sync_check_relock	sync/sync0debug.cc	/^void sync_check_relock(const latch_t *latch) {$/;"	f
sync_check_unlock	sync/sync0debug.cc	/^void sync_check_unlock(const latch_t *latch) {$/;"	f
sync_event	include/fil0fil.h	/^  os_event_t sync_event;$/;"	m	struct:fil_node_t
sync_file_created_deregister	sync/sync0debug.cc	/^void sync_file_created_deregister(const void *ptr) {$/;"	f
sync_file_created_get	sync/sync0debug.cc	/^std::string sync_file_created_get(const void *ptr) {$/;"	f
sync_file_created_register	sync/sync0debug.cc	/^void sync_file_created_register(const void *ptr, const char *filename,$/;"	f
sync_heap	include/fts0types.h	/^  ib_alloc_t *sync_heap; \/*!< The heap allocator, for indexes$/;"	m	struct:fts_cache_t
sync_latch_get_counter	include/sync0types.h	/^inline latch_meta_t::CounterType *sync_latch_get_counter(latch_id_t id) {$/;"	f
sync_latch_get_id	sync/sync0debug.cc	/^latch_id_t sync_latch_get_id(const char *name) {$/;"	f
sync_latch_get_level	include/sync0types.h	/^inline latch_level_t sync_latch_get_level(latch_id_t id) {$/;"	f
sync_latch_get_meta	include/sync0types.h	/^inline latch_meta_t &sync_latch_get_meta(latch_id_t id) {$/;"	f
sync_latch_get_name	include/sync0types.h	/^inline const char *sync_latch_get_name(latch_id_t id) {$/;"	f
sync_latch_get_name	sync/sync0debug.cc	/^const char *sync_latch_get_name(latch_level_t level) {$/;"	f
sync_latch_get_pfs_key	include/sync0types.h	/^inline mysql_pfs_key_t sync_latch_get_pfs_key(latch_id_t id) {$/;"	f
sync_latch_meta_destroy	sync/sync0debug.cc	/^static void sync_latch_meta_destroy() {$/;"	f	file:
sync_mutex_to_string	sync/sync0sync.cc	/^std::string sync_mutex_to_string(latch_id_t id, const std::string &created) {$/;"	f
sync_obj	include/hash0hash.h	/^  } sync_obj;$/;"	m	struct:hash_table_t	typeref:union:hash_table_t::__anon17
sync_object_t	include/sync0arr_impl.h	/^union sync_object_t {$/;"	u
sync_point	log/log0test.cc	/^void Log_test::sync_point(const std::string &sync_point_name) {$/;"	f	class:Log_test
sync_print	sync/sync0sync.cc	/^void sync_print(FILE *file) {$/;"	f
sync_print_wait_info	sync/sync0sync.cc	/^static void sync_print_wait_info(FILE *file) {$/;"	f	file:
sync_thread_mutex_key	sync/sync0sync.cc	/^mysql_pfs_key_t sync_thread_mutex_key;$/;"	v
sync_wait_array	sync/sync0arr.cc	/^sync_array_t **sync_wait_array;$/;"	v
synced	include/fts0types.h	/^  bool synced; \/*!< flag whether the node is synced *\/$/;"	m	struct:fts_node_t
synced_doc_id	include/fts0types.h	/^  doc_id_t synced_doc_id; \/*!< Doc ID sync-ed to CONFIG table *\/$/;"	m	struct:fts_cache_t
synchronize_binlog_gtid	clone/clone0copy.cc	/^int Clone_Snapshot::synchronize_binlog_gtid(Clone_Alert_Func cbk) {$/;"	f	class:Clone_Snapshot
sys_columns	include/dict0dict.h	/^  dict_table_t *sys_columns; \/*!< SYS_COLUMNS table *\/$/;"	m	struct:dict_sys_t
sys_fields	include/dict0dict.h	/^  dict_table_t *sys_fields;  \/*!< SYS_FIELDS table *\/$/;"	m	struct:dict_sys_t
sys_indexes	include/dict0dict.h	/^  dict_table_t *sys_indexes; \/*!< SYS_INDEXES table *\/$/;"	m	struct:dict_sys_t
sys_mutex_t	include/sync0types.h	/^typedef CRITICAL_SECTION sys_mutex_t;$/;"	t
sys_mutex_t	include/sync0types.h	/^typedef pthread_mutex_t sys_mutex_t;$/;"	t
sys_tables	include/dict0dict.h	/^  dict_table_t *sys_tables;  \/*!< SYS_TABLES table *\/$/;"	m	struct:dict_sys_t
sys_tablespace_auto_extend_increment	fsp/fsp0sysspace.cc	/^ulong sys_tablespace_auto_extend_increment;$/;"	v
sys_threads	srv/srv0srv.cc	/^  srv_slot_t *sys_threads; \/*!< server thread table *\/$/;"	m	struct:srv_sys_t	file:
sys_virtual	include/dict0dict.h	/^  dict_table_t *sys_virtual; \/*!< SYS_VIRTUAL table *\/$/;"	m	struct:dict_sys_t
sz_of_offsets	include/dict0mem.h	/^  uint32_t sz_of_offsets;$/;"	m	class:rec_cache_t
tab_def	include/dict0crea.h	/^  ins_node_t *tab_def;   \/*!< child node which does the insert of$/;"	m	struct:tab_node_t
tab_lock	include/lock0priv.h	/^    lock_table_t tab_lock;$/;"	m	union:lock_t::__anon9
tab_node_t	include/dict0crea.h	/^struct tab_node_t {$/;"	s
table	api/api0api.cc	/^  dict_table_t *table; \/* Table read from or NULL *\/$/;"	m	struct:ib_table_def_t	file:
table	api/api0api.cc	/^  dict_table_t *table; \/*!< Parent InnoDB table *\/$/;"	m	struct:ib_index_def_t	file:
table	dict/dict0stats.cc	/^  dict_table_t *table;      \/*!< table whose indexes are to be modified *\/$/;"	m	struct:index_fetch_t	file:
table	fts/fts0opt.cc	/^  dict_table_t *table; \/*!< Table that has to be queried *\/$/;"	m	struct:fts_optimize_t	file:
table	include/dict0crea.h	/^  dict_table_t *table;           \/*!< table which owns the index *\/$/;"	m	struct:ind_node_t
table	include/dict0crea.h	/^  dict_table_t *table;   \/*!< table to create, built as a$/;"	m	struct:tab_node_t
table	include/dict0mem.h	/^  dict_table_t *table;    \/*!< back pointer to table *\/$/;"	m	struct:dict_index_t
table	include/fts0fts.h	/^  const dict_table_t *table; \/*!< Parent table *\/$/;"	m	struct:fts_table_t
table	include/fts0fts.h	/^  dict_table_t *table; \/*!< table *\/$/;"	m	struct:fts_trx_table_t
table	include/fts0types.h	/^  dict_table_t *table;  \/*!< Table with FTS index(es) *\/$/;"	m	struct:fts_sync_t
table	include/lob0lob.h	/^  dict_table_t *table() const {$/;"	f	class:lob::BtrContext
table	include/lock0lock.h	/^  dict_table_t *table; \/*!< table to be locked *\/$/;"	m	struct:lock_op_t
table	include/lock0priv.h	/^  dict_table_t *table; \/*!< database table in dictionary$/;"	m	struct:lock_table_t
table	include/pars0sym.h	/^  dict_table_t *table;           \/*!< table definition$/;"	m	struct:sym_node_t
table	include/row0ins.h	/^  dict_table_t *table;     \/*!< table where to insert *\/$/;"	m	struct:ins_node_t
table	include/row0merge.h	/^  struct TABLE *table;  \/*!< MySQL table object *\/$/;"	m	struct:row_merge_dup_t	typeref:struct:row_merge_dup_t::TABLE
table	include/row0mysql.h	/^  dict_table_t *table;         \/*!< Innobase table handle *\/$/;"	m	struct:row_prebuilt_t
table	include/row0purge.h	/^  dict_table_t *table;$/;"	m	struct:purge_node_t
table	include/row0sel.h	/^  dict_table_t *table; \/*!< table struct in the dictionary$/;"	m	struct:plan_t
table	include/row0undo.h	/^  dict_table_t *table;      \/*!< table where undo is done *\/$/;"	m	struct:undo_node_t
table	include/row0upd.h	/^  dict_table_t *table; \/*!< table where updated *\/$/;"	m	struct:upd_node_t
table	include/row0upd.h	/^  dict_table_t *table; \/*!< the table object *\/$/;"	m	struct:upd_t
table	row/row0log.cc	/^  dict_table_t *table; \/*!< table that is being rebuilt,$/;"	m	struct:row_log_t	file:
table_LRU	include/dict0dict.h	/^  table_LRU; \/*!< List of tables that can be evicted$/;"	m	struct:dict_sys_t
table_LRU	include/dict0mem.h	/^  UT_LIST_NODE_T(dict_table_t) table_LRU;$/;"	m	struct:dict_table_t
table_buffer	include/dict0dict.h	/^  DDTableBuffer *table_buffer;$/;"	m	struct:dict_persist_t
table_cache_create_empty_row	trx/trx0i_s.cc	/^static void *table_cache_create_empty_row($/;"	f	file:
table_cache_free	trx/trx0i_s.cc	/^static void table_cache_free($/;"	f	file:
table_cache_init	trx/trx0i_s.cc	/^static void table_cache_init($/;"	f	file:
table_cache_t	include/sess0sess.h	/^    table_cache_t;$/;"	t
table_cached	include/trx0trx.h	/^  ulint table_cached;$/;"	m	struct:trx_lock_t
table_dirty_status	include/dict0mem.h	/^enum table_dirty_status {$/;"	g
table_flags	handler/ha_innodb.cc	/^handler::Table_flags ha_innobase::table_flags() const {$/;"	f	class:ha_innobase
table_hash	include/dict0dict.h	/^  hash_table_t *table_hash;    \/*!< hash table of the tables, based$/;"	m	struct:dict_sys_t
table_id	fts/fts0opt.cc	/^  table_id_t table_id; \/*!< Table id *\/$/;"	m	struct:fts_slot_t	file:
table_id	fts/fts0opt.cc	/^  table_id_t table_id; \/*!< The table to remove *\/$/;"	m	struct:fts_msg_id_t	file:
table_id	include/fts0fts.h	/^  table_id_t table_id; \/*!< The table id *\/$/;"	m	struct:fts_table_t
table_id_hash	include/dict0dict.h	/^  hash_table_t *table_id_hash; \/*!< hash table of the tables, based$/;"	m	struct:dict_sys_t
table_id_set	trx/trx0trx.cc	/^    table_id_set;$/;"	t	file:
table_id_t	include/dict0types.h	/^typedef ib_id_t table_id_t;$/;"	t
table_list	include/row0sel.h	/^  sym_node_t *table_list;    \/*!< table list *\/$/;"	m	struct:sel_node_t
table_list	pars/pars0grm.y	/^table_list:$/;"	l
table_lock_list_t	include/dict0mem.h	/^    table_lock_list_t;$/;"	t
table_locks	include/trx0trx.h	/^  lock_pool_t table_locks;$/;"	m	struct:trx_lock_t
table_name	handler/ha_innodb.h	/^  const char *table_name() const { return (m_table_name); }$/;"	f	class:create_table_info_t
table_name	handler/ha_innodb.h	/^  const char *table_name; \/*!< InnoDB table name *\/$/;"	m	struct:INNOBASE_SHARE
table_name	include/dict0mem.h	/^  const char *table_name; \/*!< table name *\/$/;"	m	struct:dict_index_t
table_name	pars/pars0grm.y	/^table_name:$/;"	l
table_name	row/row0mysql.cc	/^  char *table_name; \/*!< table name *\/$/;"	m	struct:row_mysql_drop_t	file:
table_name_hash	handler/ha_innodb.h	/^  void *table_name_hash;$/;"	m	struct:INNOBASE_SHARE
table_name_t	include/dict0mem.h	/^struct table_name_t {$/;"	s
table_non_LRU	include/dict0dict.h	/^  table_non_LRU; \/*!< List of tables that can't be$/;"	m	struct:dict_sys_t
table_pool	include/trx0trx.h	/^  lock_pool_t table_pool;$/;"	m	struct:trx_lock_t
table_shards	include/lock0latches.h	/^  Table_shards table_shards;$/;"	m	class:locksys::Latches
table_stats	include/dict0dict.h	/^  dict_table_t *table_stats;$/;"	m	struct:dict_sys_t
table_sym	include/row0upd.h	/^  sym_node_t *table_sym; \/* table node in symbol table *\/$/;"	m	struct:upd_node_t
table_to_file	dict/dict0dd.cc	/^void table_to_file(std::string &name) {$/;"	f	namespace:dict_name
table_type	handler/ha_innodb.cc	/^const char *ha_innobase::table_type() const { return (innobase_hton_name); }$/;"	f	class:ha_innobase
tables	handler/ha_innodb.cc	/^                                   THD *thd, TABLE_LIST *tables,$/;"	v	file:
tables	include/fts0fts.h	/^  ib_rbt_t *tables; \/*!< Modified FTS tables *\/$/;"	m	struct:fts_savepoint_t
tables_with_fts	dict/dict0upgrade.cc	/^static std::vector<std::string> tables_with_fts;$/;"	v	file:
tablespace	include/dict0mem.h	/^  id_name_t tablespace;$/;"	m	struct:dict_table_t
tablespace_is_file_per_table	handler/ha_innodb.h	/^bool tablespace_is_file_per_table(const HA_CREATE_INFO *create_info) {$/;"	f
tablespace_is_general_space	handler/ha_innodb.h	/^bool tablespace_is_general_space(const HA_CREATE_INFO *create_info) {$/;"	f
tablespace_is_shared_space	handler/ha_innodb.h	/^bool tablespace_is_shared_space(const HA_CREATE_INFO *create_info) {$/;"	f
tail	include/fts0ast.h	/^  fts_ast_node_t *tail; \/*!< Children list tail *\/$/;"	m	struct:fts_ast_list_t
tail	include/ut0link_buf.h	/^inline Position Link_buf<Position>::tail() const {$/;"	f	class:Link_buf
tail	row/row0log.cc	/^  row_log_buf_t tail;   \/*!< writer context;$/;"	m	struct:row_log_t	file:
take	include/buf0buf.h	/^    void take() {$/;"	f	class:Cache_hint::buf_page_t::io_responsibility_t
take_io_responsibility	include/buf0buf.h	/^  void take_io_responsibility() {$/;"	f	class:Cache_hint::buf_page_t
take_snapshot	include/buf0buf.h	/^  snapshot_t take_snapshot() {$/;"	f	struct:Cache_hint::buf_buddy_stat_t
tasks	srv/srv0srv.cc	/^  tasks; \/*!< task queue *\/$/;"	m	struct:srv_sys_t	file:
tasks_mutex	srv/srv0srv.cc	/^  ib_mutex_t tasks_mutex; \/*!< variable protecting the$/;"	m	struct:srv_sys_t	file:
tb_name	include/dict0mem.h	/^  std::string tb_name;$/;"	m	struct:dict_vcol_templ_t
tbsp_extend_and_initialize	srv/srv0srv.cc	/^bool tbsp_extend_and_initialize = true;$/;"	v
tbsp_pool	srv/srv0tmp.cc	/^Tablespace_pool *tbsp_pool = nullptr;$/;"	m	namespace:ibt	file:
tbsp_purpose	include/srv0tmp.h	/^enum tbsp_purpose {$/;"	g	namespace:ibt
temp_pool_manager_mutex_key	sync/sync0sync.cc	/^mysql_pfs_key_t temp_pool_manager_mutex_key;$/;"	v
temp_prebuilt	include/dict0mem.h	/^  temp_prebuilt_vec *temp_prebuilt;$/;"	m	struct:dict_table_t
temp_prebuilt_vec	include/dict0mem.h	/^typedef std::vector<row_prebuilt_t *> temp_prebuilt_vec;$/;"	t
temp_space_page_handler	buf/buf0buf.cc	/^void Buf_fetch<T>::temp_space_page_handler(buf_block_t *block) {$/;"	f	class:Buf_fetch
temp_space_rseg_mutex_key	sync/sync0sync.cc	/^mysql_pfs_key_t temp_space_rseg_mutex_key;$/;"	v
temp_tbsp_dir	srv/srv0tmp.cc	/^static std::string temp_tbsp_dir;$/;"	m	namespace:ibt	file:
templ_contains_blob	include/row0mysql.h	/^  unsigned templ_contains_blob : 1;        \/*!< TRUE if the template contains$/;"	m	struct:row_prebuilt_t
templ_contains_fixed_point	include/row0mysql.h	/^  unsigned templ_contains_fixed_point : 1; \/*!< TRUE if the$/;"	m	struct:row_prebuilt_t
template_type	include/row0mysql.h	/^  unsigned template_type : 2;              \/*!< ROW_MYSQL_WHOLE_ROW,$/;"	m	struct:row_prebuilt_t
term	fts/fts0pars.y	/^term	: FTS_TERM	{$/;"	l
term	include/fts0ast.h	/^  fts_ast_term_t term;        \/*!< Term node *\/$/;"	m	struct:fts_ast_node_t
terminate_consumer	log/log0meb.cc	/^static bool terminate_consumer(bool rapid) {$/;"	f	namespace:meb
test	include/ut0bitset.h	/^  bool test(size_t pos) const {$/;"	f	class:Bitset
test_cmp_data_data	rem/rem0cmp.cc	/^void test_cmp_data_data(ulint len) {$/;"	f
test_dict_stats_all	dict/dict0stats.cc	/^void test_dict_stats_all() {$/;"	f
test_dict_stats_fetch_from_ps	dict/dict0stats.cc	/^void test_dict_stats_fetch_from_ps() {$/;"	f
test_dict_stats_save	dict/dict0stats.cc	/^void test_dict_stats_save() {$/;"	f
test_ha_storage	ha/ha0storage.cc	/^void test_ha_storage() {$/;"	f
test_make_filepath	fil/fil0fil.cc	/^void test_make_filepath() {$/;"	f
test_normalize_table_name	handler/ha_innodb.cc	/^static void test_normalize_table_name() {$/;"	f	file:
test_os_file_get_parent_dir	os/os0file.cc	/^void test_os_file_get_parent_dir(const char *child_dir,$/;"	f
test_page_cur_lcg_prng	page/page0cur.cc	/^void test_page_cur_lcg_prng(int n) \/*!< in: print first n numbers *\/$/;"	f
test_row_raw_format_int	row/row0row.cc	/^void test_row_raw_format_int() {$/;"	f
test_ut_format_name	handler/ha_innodb.cc	/^static void test_ut_format_name() {$/;"	f	file:
text	fts/fts0pars.y	/^text	: FTS_TEXT	{$/;"	l
text	include/fts0ast.h	/^  fts_ast_text_t text;        \/*!< Text node *\/$/;"	m	struct:fts_ast_node_t
text	include/fts0types.h	/^  fts_string_t text;  \/*!< Word value in UTF-8 *\/$/;"	m	struct:fts_word_t
text	include/fts0types.h	/^  fts_string_t text; \/*!< Token text. *\/$/;"	m	struct:fts_tokenizer_word_t
text	include/fts0types.h	/^  fts_string_t text; \/*!< document text *\/$/;"	m	struct:fts_doc_t
text	include/fts0types.h	/^  fts_string_t text; \/*!< token text *\/$/;"	m	struct:fts_token_t
text	include/row0ftsort.h	/^  fts_string_t *text; \/*!< token *\/$/;"	m	struct:row_fts_token_t
thd	handler/ha_innodb.cc	/^                                   THD *thd, TABLE_LIST *tables,$/;"	v	file:
thd	handler/ha_innodb.h	/^  THD *thd() const { return (m_thd); }$/;"	f	class:create_table_info_t
thd_has_edited_nontrans_tables	handler/ha_innodb.cc	/^ibool thd_has_edited_nontrans_tables(THD *thd) \/*!< in: thread handle *\/$/;"	f
thd_innodb_interpreter	handler/ha_innodb.cc	/^char **thd_innodb_interpreter(THD *thd) {$/;"	f
thd_innodb_interpreter_output	handler/ha_innodb.cc	/^char **thd_innodb_interpreter_output(THD *thd) {$/;"	f
thd_innodb_tmpdir	handler/ha_innodb.cc	/^const char *thd_innodb_tmpdir(THD *thd) {$/;"	f
thd_is_ins_sel_stmt	handler/ha_innodb.cc	/^static inline bool thd_is_ins_sel_stmt(THD *user_thd) {$/;"	f	file:
thd_is_query_block	handler/ha_innodb.cc	/^ibool thd_is_query_block(const THD *thd) \/*!< in: thread handle *\/$/;"	f
thd_is_replication_slave_thread	handler/ha_innodb.cc	/^ibool thd_is_replication_slave_thread(THD *thd) \/*!< in: thread handle *\/$/;"	f
thd_lock_wait_timeout	handler/ha_innodb.cc	/^ulong thd_lock_wait_timeout(THD *thd) \/*!< in: thread handle, or NULL to query$/;"	f
thd_parallel_read_threads	handler/ha_innodb.cc	/^ulong thd_parallel_read_threads(THD *thd) {$/;"	f
thd_requested_durability	handler/ha_innodb.cc	/^enum durability_properties thd_requested_durability($/;"	f
thd_set_lock_wait_time	handler/ha_innodb.cc	/^void thd_set_lock_wait_time(THD *thd,    \/*!< in\/out: thread handle *\/$/;"	f
thd_start_time_in_secs	handler/ha_innodb.cc	/^ulint thd_start_time_in_secs(THD *thd) \/*!< in: thread handle, or NULL *\/$/;"	f
thd_to_innodb_session	handler/ha_innodb.cc	/^innodb_session_t *&thd_to_innodb_session(THD *thd) {$/;"	f
thd_to_trx	handler/ha_innodb.cc	/^trx_t *&thd_to_trx(THD *thd) {$/;"	f
thd_trx_arbitrate	handler/ha_innodb.cc	/^THD *thd_trx_arbitrate(THD *requestor, THD *holder) {$/;"	f
thd_trx_is_auto_commit	handler/ha_innodb.cc	/^ibool thd_trx_is_auto_commit(THD *thd) \/*!< in: thread handle, can be NULL *\/$/;"	f
thd_trx_is_read_only	handler/ha_innodb.cc	/^bool thd_trx_is_read_only(THD *thd) \/*!< in: thread handle *\/$/;"	f
thd_trx_priority	handler/ha_innodb.cc	/^int thd_trx_priority(THD *thd) {$/;"	f
thds	include/trx0purge.h	/^  ut::unordered_set<THD *> thds;$/;"	m	struct:trx_purge_t
thr	handler/handler0alter.cc	/^  que_thr_t *thr;$/;"	m	struct:ha_innobase_inplace_ctx	file:
thr	include/gis0type.h	/^  que_thr_t *thr;      \/*!< the search thread *\/$/;"	m	struct:rtr_info
thr	include/srv0srv.h	/^  que_thr_t *thr;$/;"	m	struct:srv_slot_t
thread	include/os0thread-create.h	/^  IB_thread thread() const { return (m_thread); }$/;"	f	class:Runnable
thread_id	include/srv0tmp.h	/^  my_thread_id thread_id() const { return (m_thread_id); }$/;"	f	class:ibt::Tablespace
thread_id	include/sync0rw.h	/^  std::thread::id thread_id; \/*!< The thread id of the thread which$/;"	m	struct:rw_lock_debug_t
thread_is_active	include/os0thread-create.h	/^inline bool thread_is_active(const IB_thread &thread) {$/;"	f
thread_is_stopped	include/os0thread-create.h	/^inline bool thread_is_stopped(const IB_thread &thread) {$/;"	f
thread_local_ddl_log_replay	log/log0ddl.cc	/^thread_local bool thread_local_ddl_log_replay = false;$/;"	v
thrs	include/que0que.h	/^  thrs; \/*!< list of query threads *\/$/;"	m	struct:que_fork_t
thrs	include/que0que.h	/^  thrs; \/*!< list of thread nodes of the fork$/;"	m	struct:que_thr_t
timed_wait	os/os0event.cc	/^bool os_event::timed_wait($/;"	f	class:os_event
timeout_event	include/lock0lock.h	/^  os_event_t timeout_event;$/;"	m	struct:lock_sys_t
timersub	include/ut0dbg.h	144;"	d
timeval_diff_us	srv/srv0srv.cc	/^static int64_t timeval_diff_us(timeval a, timeval b) {$/;"	f	file:
tl_interpreter	ut/ut0test.cc	/^thread_local Tester tl_interpreter;$/;"	m	namespace:ib	file:
tmp_name	handler/handler0alter.cc	/^  const char *tmp_name;$/;"	m	struct:ha_innobase_inplace_ctx	file:
tmp_rsegs	include/trx0sys.h	/^  Rsegs tmp_rsegs; \/*!< Vector of pointers to rollback$/;"	m	struct:trx_sys_t
tmp_tuples	include/row0merge.h	/^  mtuple_t *tmp_tuples; \/*!< temporary copy of tuples,$/;"	m	struct:row_merge_buf_t
to_be_dropped	include/dict0mem.h	/^  unsigned to_be_dropped : 1;$/;"	m	struct:dict_index_t
to_be_dropped	include/dict0mem.h	/^  unsigned to_be_dropped : 1;$/;"	m	struct:dict_table_t
to_delete	fts/fts0opt.cc	/^  fts_doc_ids_t *to_delete; \/*!< doc ids to delete, we check against$/;"	m	struct:fts_optimize_t	file:
to_file	os/os0file.cc	/^void AIO::to_file(FILE *file) const {$/;"	f	class:AIO
to_lower	dict/dict0dd.cc	/^static void to_lower(std::string &name) {$/;"	f	namespace:dict_name
to_lower	include/fil0fil.h	/^  static void to_lower(std::string &path) {$/;"	f	class:Fil_path
to_stream	fsp/fsp0fsp.cc	/^std::ostream &fseg_header::to_stream(std::ostream &out) const {$/;"	f	class:fseg_header
to_string	include/os0file.h	/^  std::string to_string() const {$/;"	f	class:IORequest
to_string	include/sync0policy.h	/^  std::string to_string() const { return (""); }$/;"	f	struct:NoPolicy
to_string	os/file.cc	/^const char *Compression::to_string(Type type) {$/;"	f	class:Compression
to_string	os/file.cc	/^std::string Compression::to_string(const Compression::meta_t &meta) {$/;"	f	class:Compression
to_string	os/os0thread.cc	/^std::string to_string(std::thread::id thread_id, bool hex_value) {$/;"	f
to_string	row/row0pread.cc	/^std::string Parallel_reader::Scan_range::to_string() const {$/;"	f	class:Parallel_reader::Scan_range
to_string	sync/sync0rw.cc	/^std::string rw_lock_t::to_string() const {$/;"	f	class:rw_lock_t
token	fts/fts0pars.cc	/^	fts_ast_string_t*	token;$/;"	m	union:YYSTYPE	file:
token	include/fts0pars.h	/^	fts_ast_string_t*	token;$/;"	m	union:YYSTYPE
token_index	fts/fts0que.cc	/^  ulint token_index;    \/*!< Index of token to match next *\/$/;"	m	struct:fts_phrase_param_t	file:
token_list	include/row0ftsort.h	/^  token_list; \/*!< next token link *\/$/;"	m	struct:row_fts_token_t
token_type	include/pars0sym.h	/^  enum sym_tab_entry token_type; \/*!< type of the$/;"	m	struct:sym_node_t	typeref:enum:sym_node_t::sym_tab_entry
tokens	fts/fts0que.cc	/^  const ib_vector_t *tokens;$/;"	m	struct:fts_phrase_t	file:
tokens	include/fts0types.h	/^  ib_rbt_t *tokens; \/*!< This is filled when the document$/;"	m	struct:fts_doc_t
top_offset	include/trx0undo.h	/^  ulint top_offset;         \/*!< offset of the latest undo record,$/;"	m	struct:trx_undo_t
top_page_no	include/trx0undo.h	/^  page_no_t top_page_no;    \/*!< page number where the latest undo$/;"	m	struct:trx_undo_t
top_statement	pars/pars0grm.y	/^top_statement:$/;"	l
top_undo_no	include/trx0undo.h	/^  undo_no_t top_undo_no;    \/*!< undo number of the latest record *\/$/;"	m	struct:trx_undo_t
total	include/ut0vec.h	/^  ulint total;           \/* number of elements allocated *\/$/;"	m	struct:ib_vector_t
total	row/row0log.cc	/^  ulonglong total;        \/*!< logical position, in bytes from$/;"	m	struct:row_log_buf_t	file:
total_docs	fts/fts0que.cc	/^  ib_uint64_t total_docs; \/*!< The total number of documents *\/$/;"	m	struct:fts_query_t	file:
total_memory	include/fts0types.h	/^  ulint total_memory;           \/*!< Total memory used *\/$/;"	m	struct:fts_fetch_t
total_pending_io_count	os/os0file.cc	/^ulint AIO::total_pending_io_count() {$/;"	f	class:AIO
total_size	fts/fts0que.cc	/^  ulint total_size; \/*!< total memory size used by query *\/$/;"	m	struct:fts_query_t	file:
total_size	include/fts0types.h	/^  ulint total_size;      \/*!< total size consumed by the ilist$/;"	m	struct:fts_cache_t
total_size	include/mem0mem.h	/^  ulint total_size; \/*!< physical length in bytes of all blocks$/;"	m	struct:mem_block_info_t
total_size	include/row0merge.h	/^  ulint total_size;     \/*!< total amount of data bytes *\/$/;"	m	struct:row_merge_buf_t
total_words	fts/fts0que.cc	/^  ulint total_words; \/*!< The total number of words *\/$/;"	m	struct:fts_query_t	file:
trace_1	include/ut0ut.h	/^  explicit trace_1(int err, Args &&... args)$/;"	f	class:ib::trace_1
trace_1	include/ut0ut.h	/^  trace_1() : logger(INFORMATION_LEVEL) { m_trace_level = 1; }$/;"	f	class:ib::trace_1
trace_1	include/ut0ut.h	/^class trace_1 : public logger {$/;"	c	namespace:ib
trace_2	include/ut0ut.h	/^  explicit trace_2(int err, Args &&... args)$/;"	f	class:ib::trace_2
trace_2	include/ut0ut.h	/^  trace_2() : logger(INFORMATION_LEVEL) { m_trace_level = 2; }$/;"	f	class:ib::trace_2
trace_2	include/ut0ut.h	/^class trace_2 : public logger {$/;"	c	namespace:ib
trace_3	include/ut0ut.h	/^  explicit trace_3(int err, Args &&... args)$/;"	f	class:ib::trace_3
trace_3	include/ut0ut.h	/^  trace_3() : logger(INFORMATION_LEVEL) { m_trace_level = 3; }$/;"	f	class:ib::trace_3
trace_3	include/ut0ut.h	/^class trace_3 : public logger {$/;"	c	namespace:ib
track_initial_pages	arch/arch0page.cc	/^void Arch_Page_Sys::track_initial_pages() {$/;"	f	class:Arch_Page_Sys
track_page	arch/arch0page.cc	/^void Arch_Page_Sys::track_page(buf_page_t *bpage, lsn_t track_lsn,$/;"	f	class:Arch_Page_Sys
track_page_lsn	include/buf0buf.h	/^  lsn_t track_page_lsn;$/;"	m	struct:Cache_hint::buf_pool_t
track_redo_files	clone/clone0api.cc	/^static void track_redo_files() {$/;"	f	file:
traverse	row/row0pread.cc	/^dberr_t Parallel_reader::Ctx::traverse() {$/;"	f	class:Parallel_reader::Ctx
traverse_recs	row/row0pread.cc	/^dberr_t Parallel_reader::Ctx::traverse_recs(PCursor *pcursor, mtr_t *mtr) {$/;"	f	class:Parallel_reader::Ctx
tree_blocks	include/gis0type.h	/^  buf_block_t *tree_blocks[RTR_MAX_LEVELS + RTR_LEAF_LATCH_NUM];$/;"	m	struct:rtr_info
tree_savepoints	include/gis0type.h	/^  ulint tree_savepoints[RTR_MAX_LEVELS + RTR_LEAF_LATCH_NUM];$/;"	m	struct:rtr_info
trigger_corruption	row/row0import.cc	857;"	d	file:
trim_path_name	log/log0meb.cc	/^static std::string trim_path_name(const std::string &path_name) {$/;"	f	namespace:meb
trim_separator	include/fil0fil.h	/^  static void trim_separator(std::string &path) {$/;"	f	class:Fil_path
true_word_char	handler/ha_innodb.cc	7525;"	d	file:
true_word_char	include/fts0tokenize.h	39;"	d
trunc_name	include/dict0mem.h	/^  table_name_t trunc_name;$/;"	m	struct:dict_table_t
truncate	dict/dict0dict.cc	/^void DDTableBuffer::truncate() {$/;"	f	class:DDTableBuffer
truncate	handler/ha_innodb.cc	/^int innobase_truncate<Table>::truncate() {$/;"	f	class:innobase_truncate
truncate	srv/srv0tmp.cc	/^bool Tablespace::truncate() {$/;"	f	class:ibt::Tablespace
truncate_impl	handler/ha_innodb.cc	/^int ha_innobase::truncate_impl(const char *name, TABLE *form,$/;"	f	class:ha_innobase
truncate_impl	handler/ha_innopart.cc	/^int ha_innopart::truncate_impl(const char *name, TABLE *form,$/;"	f	class:ha_innopart
truncate_partition_low	handler/ha_innopart.cc	/^int ha_innopart::truncate_partition_low(dd::Table *dd_table) {$/;"	f	class:ha_innopart
truncate_suffix	include/fil0fil.h	/^  static bool truncate_suffix(ib_file_suffix sfx, std::string &path) {$/;"	f	class:Fil_path
trx	fts/fts0opt.cc	/^  trx_t *trx; \/*!< The transaction used for all SQL *\/$/;"	m	struct:fts_optimize_t	file:
trx	fts/fts0que.cc	/^  trx_t *trx; \/*!< The query transaction *\/$/;"	m	struct:fts_query_t	file:
trx	handler/handler0alter.cc	/^  trx_t *trx;$/;"	m	struct:ha_innobase_inplace_ctx	file:
trx	include/fts0ast.h	/^  trx_t *trx;$/;"	m	struct:fts_ast_node_t
trx	include/fts0fts.h	/^  trx_t *trx; \/*!< InnoDB transaction *\/$/;"	m	struct:fts_trx_t
trx	include/fts0types.h	/^  trx_t *trx;           \/*!< The transaction used for SYNCing$/;"	m	struct:fts_sync_t
trx	include/lock0priv.h	/^  trx_t *trx;$/;"	m	struct:lock_t
trx	include/que0que.h	/^  trx_t *trx;          \/*!< transaction: this is set only in$/;"	m	struct:que_fork_t
trx	include/row0ftsort.h	/^  trx_t *trx;              \/*!< transaction *\/$/;"	m	struct:fts_psort_common_t
trx	include/row0mysql.h	/^  trx_t *trx;                  \/*!< current transaction handle *\/$/;"	m	struct:row_prebuilt_t
trx	include/row0undo.h	/^  trx_t *trx;               \/*!< trx for which undo is done *\/$/;"	m	struct:undo_node_t
trx	include/trx0purge.h	/^  trx_t *trx;$/;"	m	struct:trx_purge_t
trx	include/usr0sess.h	/^  trx_t *trx;  \/*!< transaction object permanently$/;"	m	struct:sess_t
trx	lock/lock0wait.cc	/^  trx_t *trx;$/;"	m	struct:waiting_trx_info_t	file:
trx0i_s_h	include/trx0i_s.h	36;"	d
trx0purge_h	include/trx0purge.h	34;"	d
trx0rec_h	include/trx0rec.h	34;"	d
trx0roll_h	include/trx0roll.h	34;"	d
trx0rseg_h	include/trx0rseg.h	34;"	d
trx0sys_h	include/trx0sys.h	34;"	d
trx0trx_h	include/trx0trx.h	34;"	d
trx0types_h	include/trx0types.h	34;"	d
trx0undo_h	include/trx0undo.h	34;"	d
trx_allocate_for_background	trx/trx0trx.cc	/^trx_t *trx_allocate_for_background(void) {$/;"	f
trx_allocate_for_mysql	trx/trx0trx.cc	/^trx_t *trx_allocate_for_mysql(void) {$/;"	f
trx_allowed_two_latches	trx/trx0trx.cc	/^static thread_local bool trx_allowed_two_latches = false;$/;"	v	file:
trx_assert_started	trx/trx0trx.cc	/^ibool trx_assert_started(const trx_t *trx) \/*!< in: transaction *\/$/;"	f
trx_assign_read_view	trx/trx0trx.cc	/^ReadView *trx_assign_read_view(trx_t *trx) \/*!< in\/out: active transaction *\/$/;"	f
trx_assign_rseg_durable	trx/trx0trx.cc	/^void trx_assign_rseg_durable(trx_t *trx) {$/;"	f
trx_assign_rseg_temp	trx/trx0trx.cc	/^void trx_assign_rseg_temp(trx_t *trx) {$/;"	f
trx_before_mutex_enter	trx/trx0trx.cc	/^void trx_before_mutex_enter(const trx_t *trx, bool first_of_two) {$/;"	f
trx_before_mutex_exit	trx/trx0trx.cc	/^void trx_before_mutex_exit(const trx_t *trx) {$/;"	f
trx_can_be_handled_by_current_thread	trx/trx0trx.cc	/^bool trx_can_be_handled_by_current_thread(const trx_t *trx) {$/;"	f
trx_check_set	clone/clone0repl.cc	/^bool Clone_persist_gtid::trx_check_set(trx_t *trx, bool prepare, bool rollback,$/;"	f	class:Clone_persist_gtid
trx_cleanup_at_db_startup	trx/trx0trx.cc	/^void trx_cleanup_at_db_startup(trx_t *trx) \/*!< in: transaction *\/$/;"	f
trx_commit	trx/trx0trx.cc	/^void trx_commit(trx_t *trx) \/*!< in\/out: transaction *\/$/;"	f
trx_commit_complete_for_mysql	trx/trx0trx.cc	/^void trx_commit_complete_for_mysql(trx_t *trx) \/*!< in\/out: transaction *\/$/;"	f
trx_commit_for_mysql	trx/trx0trx.cc	/^dberr_t trx_commit_for_mysql(trx_t *trx) \/*!< in\/out: transaction *\/$/;"	f
trx_commit_in_memory	trx/trx0trx.cc	/^static void trx_commit_in_memory($/;"	f	file:
trx_commit_low	trx/trx0trx.cc	/^void trx_commit_low(trx_t *trx, mtr_t *mtr) {$/;"	f
trx_commit_node_create	trx/trx0trx.cc	/^commit_node_t *trx_commit_node_create($/;"	f
trx_commit_or_rollback_prepare	trx/trx0trx.cc	/^void trx_commit_or_rollback_prepare(trx_t *trx) \/*!< in\/out: transaction *\/$/;"	f
trx_commit_step	trx/trx0trx.cc	/^que_thr_t *trx_commit_step(que_thr_t *thr) \/*!< in: query thread *\/$/;"	f
trx_concurrency_tickets	include/trx0i_s.h	/^  ulint trx_concurrency_tickets;$/;"	m	struct:i_s_trx_row_t
trx_create_low	trx/trx0trx.cc	/^static trx_t *trx_create_low() {$/;"	f	file:
trx_deregister_from_2pc	handler/ha_innodb.cc	/^static inline void trx_deregister_from_2pc(trx_t *trx) \/* in: transaction *\/$/;"	f	file:
trx_dict_op_t	include/trx0types.h	/^enum trx_dict_op_t {$/;"	g
trx_disconnect_from_mysql	trx/trx0trx.cc	/^inline void trx_disconnect_from_mysql(trx_t *trx, bool prepared) {$/;"	f
trx_disconnect_plain	trx/trx0trx.cc	/^inline void trx_disconnect_plain(trx_t *trx) {$/;"	f
trx_disconnect_prepared	trx/trx0trx.cc	/^void trx_disconnect_prepared(trx_t *trx) {$/;"	f
trx_dummy_sess	trx/trx0trx.cc	/^sess_t *trx_dummy_sess = nullptr;$/;"	v
trx_erase_lists	trx/trx0trx.cc	/^static void trx_erase_lists(trx_t *trx, bool serialised, Gtid_desc &gtid_desc) {$/;"	f	file:
trx_finalize_for_fts	trx/trx0trx.cc	/^static void trx_finalize_for_fts($/;"	f	file:
trx_finalize_for_fts_table	trx/trx0trx.cc	/^static void trx_finalize_for_fts_table($/;"	f	file:
trx_first_latched_trx	trx/trx0trx.cc	/^static thread_local const trx_t *trx_first_latched_trx = nullptr;$/;"	v	file:
trx_flush_log_if_needed	trx/trx0trx.cc	/^static void trx_flush_log_if_needed(lsn_t lsn, \/*!< in: lsn up to which logs are$/;"	f	file:
trx_flush_log_if_needed_low	trx/trx0trx.cc	/^static void trx_flush_log_if_needed_low(lsn_t lsn) \/*!< in: lsn up to which logs$/;"	f	file:
trx_foreign_key_checks	include/trx0i_s.h	/^  ibool trx_foreign_key_checks;$/;"	m	struct:i_s_trx_row_t
trx_foreign_key_error	include/trx0i_s.h	/^  const char *trx_foreign_key_error;$/;"	m	struct:i_s_trx_row_t
trx_free	trx/trx0trx.cc	/^static void trx_free(trx_t *&trx) {$/;"	f	file:
trx_free_for_background	trx/trx0trx.cc	/^void trx_free_for_background(trx_t *trx) {$/;"	f
trx_free_for_mysql	trx/trx0trx.cc	/^void trx_free_for_mysql(trx_t *trx) {$/;"	f
trx_free_prepared_or_active_recovered	trx/trx0trx.cc	/^void trx_free_prepared_or_active_recovered(trx_t *trx) {$/;"	f
trx_free_resurrected	trx/trx0trx.cc	/^void trx_free_resurrected(trx_t *trx) {$/;"	f
trx_get_trx_by_xid	trx/trx0trx.cc	/^trx_t *trx_get_trx_by_xid(const XID *xid) {$/;"	f
trx_get_trx_by_xid_low	trx/trx0trx.cc	/^static MY_ATTRIBUTE((warn_unused_result)) trx_t *trx_get_trx_by_xid_low($/;"	f
trx_has_search_latch	include/trx0i_s.h	/^  ibool trx_has_search_latch;$/;"	m	struct:i_s_trx_row_t
trx_i_s_cache	trx/trx0i_s.cc	/^trx_i_s_cache_t *trx_i_s_cache = &trx_i_s_cache_static;$/;"	v
trx_i_s_cache_clear	trx/trx0i_s.cc	/^static void trx_i_s_cache_clear($/;"	f	file:
trx_i_s_cache_end_read	trx/trx0i_s.cc	/^void trx_i_s_cache_end_read(trx_i_s_cache_t *cache) \/*!< in: cache *\/$/;"	f
trx_i_s_cache_end_write	trx/trx0i_s.cc	/^void trx_i_s_cache_end_write(trx_i_s_cache_t *cache) \/*!< in: cache *\/$/;"	f
trx_i_s_cache_free	trx/trx0i_s.cc	/^void trx_i_s_cache_free(trx_i_s_cache_t *cache) \/*!< in, own: cache to free *\/$/;"	f
trx_i_s_cache_get_nth_row	trx/trx0i_s.cc	/^void *trx_i_s_cache_get_nth_row(trx_i_s_cache_t *cache, \/*!< in: cache *\/$/;"	f
trx_i_s_cache_get_rows_used	trx/trx0i_s.cc	/^ulint trx_i_s_cache_get_rows_used(trx_i_s_cache_t *cache, \/*!< in: cache *\/$/;"	f
trx_i_s_cache_init	trx/trx0i_s.cc	/^void trx_i_s_cache_init(trx_i_s_cache_t *cache) \/*!< out: cache to init *\/$/;"	f
trx_i_s_cache_is_truncated	trx/trx0i_s.cc	/^bool trx_i_s_cache_is_truncated(trx_i_s_cache_t *cache) {$/;"	f
trx_i_s_cache_lock_key	sync/sync0sync.cc	/^mysql_pfs_key_t trx_i_s_cache_lock_key;$/;"	v
trx_i_s_cache_start_read	trx/trx0i_s.cc	/^void trx_i_s_cache_start_read(trx_i_s_cache_t *cache) \/*!< in: cache *\/$/;"	f
trx_i_s_cache_start_write	trx/trx0i_s.cc	/^void trx_i_s_cache_start_write(trx_i_s_cache_t *cache) \/*!< in: cache *\/$/;"	f
trx_i_s_cache_static	trx/trx0i_s.cc	/^static trx_i_s_cache_t trx_i_s_cache_static;$/;"	v	file:
trx_i_s_cache_t	trx/trx0i_s.cc	/^struct trx_i_s_cache_t {$/;"	s	file:
trx_i_s_create_lock_id	trx/trx0i_s.cc	/^char *trx_i_s_create_lock_id($/;"	f
trx_i_s_parse_lock_id	trx/trx0i_s.cc	/^int trx_i_s_parse_lock_id(const char *lock_id, i_s_locks_row_t *row) {$/;"	f
trx_i_s_possibly_fetch_data_into_cache	trx/trx0i_s.cc	/^int trx_i_s_possibly_fetch_data_into_cache($/;"	f
trx_id	include/dict0mem.h	/^  trx_id_t trx_id;             \/*!< id of the transaction that created this$/;"	m	struct:dict_index_t
trx_id	include/row0ins.h	/^  trx_id_t trx_id;  \/*!< trx id or the last trx which executed the$/;"	m	struct:ins_node_t
trx_id	include/row0mysql.h	/^  trx_id_t trx_id;        \/*!< The table->def_trx_id when$/;"	m	struct:row_prebuilt_t
trx_id	include/row0purge.h	/^  trx_id_t trx_id;$/;"	m	struct:purge_node_t
trx_id	include/trx0i_s.h	/^  trx_id_t trx_id;       \/*!< transaction identifier *\/$/;"	m	struct:i_s_trx_row_t
trx_id	include/trx0undo.h	/^  trx_id_t trx_id; \/*!< id of the trx assigned to the undo$/;"	m	struct:trx_undo_t
trx_id_buf	include/row0ins.h	/^  byte *trx_id_buf; \/* buffer for the trx id sys field in row *\/$/;"	m	struct:ins_node_t
trx_id_in_range	handler/p_s.cc	/^  bool trx_id_in_range(trx_id_t trx_id) {$/;"	f	class:Innodb_trx_scan_state
trx_id_offset	include/dict0mem.h	/^  unsigned trx_id_offset : MAX_KEY_LENGTH_BITS;$/;"	m	struct:dict_index_t
trx_id_t	include/trx0types.h	/^typedef ib_id_t trx_id_t;$/;"	t
trx_ids_t	include/trx0types.h	/^typedef std::vector<trx_id_t, ut_allocator<trx_id_t>> trx_ids_t;$/;"	t
trx_immutable_id	include/trx0trx.h	/^uint64_t trx_immutable_id(const trx_t *trx) {$/;"	f
trx_init	trx/trx0trx.cc	/^static void trx_init(trx_t *trx) {$/;"	f	file:
trx_is_ac_nl_ro	include/trx0trx.h	458;"	d
trx_is_autocommit_non_locking	include/trx0i_s.h	/^  ulint trx_is_autocommit_non_locking;$/;"	m	struct:i_s_trx_row_t
trx_is_autocommit_non_locking	include/trx0trx.h	450;"	d
trx_is_interrupted	handler/ha_innodb.cc	/^ibool trx_is_interrupted(const trx_t *trx) \/*!< in: transaction *\/$/;"	f
trx_is_mysql_xa	trx/trx0trx.cc	/^bool trx_is_mysql_xa(const trx_t *trx) {$/;"	f
trx_is_read_only	include/trx0i_s.h	/^  ulint trx_is_read_only;$/;"	m	struct:i_s_trx_row_t
trx_is_recv	trx/trx0roll.cc	/^ibool trx_is_recv(const trx_t *trx) \/*!< in: transaction *\/$/;"	f
trx_is_referenced	include/trx0trx.h	398;"	d
trx_is_registered_for_2pc	handler/ha_innodb.h	/^inline bool trx_is_registered_for_2pc(const trx_t *trx) {$/;"	f
trx_is_started	include/trx0trx.h	/^inline bool trx_is_started(const trx_t *trx) {$/;"	f
trx_is_strict	handler/ha_innodb.cc	/^ibool trx_is_strict(trx_t *trx) \/*!< in: transaction *\/$/;"	f
trx_isolation_level	include/trx0i_s.h	/^  const char *trx_isolation_level;$/;"	m	struct:i_s_trx_row_t
trx_kill_blocking	trx/trx0trx.cc	/^void trx_kill_blocking(trx_t *trx) {$/;"	f
trx_latched_count	trx/trx0trx.cc	/^static thread_local int32_t trx_latched_count = 0;$/;"	v	file:
trx_list	include/trx0trx.h	/^  trx_list; \/*!< list of transactions;$/;"	m	struct:trx_t
trx_lists_init_at_db_start	trx/trx0trx.cc	/^void trx_lists_init_at_db_start(void) {$/;"	f
trx_lock_list_t	include/lock0types.h	/^typedef UT_LIST_BASE_NODE_T(lock_t) trx_lock_list_t;$/;"	t
trx_lock_memory_bytes	include/trx0i_s.h	/^  ulint trx_lock_memory_bytes;$/;"	m	struct:i_s_trx_row_t
trx_lock_structs	include/trx0i_s.h	/^  ulint trx_lock_structs; \/*!< list len of trx_locks in$/;"	m	struct:i_s_trx_row_t
trx_lock_t	include/trx0trx.h	/^struct trx_lock_t {$/;"	s
trx_lock_wait_timeout_get	include/trx0trx.h	443;"	d
trx_locks	include/lock0priv.h	/^  UT_LIST_NODE_T(lock_t) trx_locks;$/;"	m	struct:lock_t
trx_locks	include/trx0trx.h	/^  trx_lock_list_t trx_locks;$/;"	m	struct:trx_lock_t
trx_locks_version	include/trx0trx.h	/^  uint64_t trx_locks_version;$/;"	m	struct:trx_lock_t
trx_mark_sql_stat_end	trx/trx0trx.cc	/^void trx_mark_sql_stat_end(trx_t *trx) \/*!< in: trx handle *\/$/;"	f
trx_mod_tables_t	include/trx0trx.h	/^    trx_mod_tables_t;$/;"	t
trx_mutex_enter	include/trx0trx.h	1340;"	d
trx_mutex_enter_first_of_two	include/trx0trx.h	1343;"	d
trx_mutex_enter_low	include/trx0trx.h	1332;"	d
trx_mutex_exit	include/trx0trx.h	1346;"	d
trx_mutex_key	sync/sync0sync.cc	/^mysql_pfs_key_t trx_mutex_key;$/;"	v
trx_mutex_own	include/trx0trx.h	1302;"	d
trx_mysql_thread_id	include/trx0i_s.h	/^  ulint trx_mysql_thread_id;        \/*!< thd_get_thread_id() *\/$/;"	m	struct:i_s_trx_row_t
trx_named_savept_t	include/trx0roll.h	/^struct trx_named_savept_t {$/;"	s
trx_no	include/trx0purge.h	/^  trx_id_t trx_no;$/;"	m	struct:purge_iter_t
trx_operation_state	include/trx0i_s.h	/^  const char *trx_operation_state;  \/*!< trx_t::op_info *\/$/;"	m	struct:i_s_trx_row_t
trx_pool_close	trx/trx0trx.cc	/^void trx_pool_close() {$/;"	f
trx_pool_init	trx/trx0trx.cc	/^void trx_pool_init() {$/;"	f
trx_pool_manager_mutex_key	sync/sync0sync.cc	/^mysql_pfs_key_t trx_pool_manager_mutex_key;$/;"	v
trx_pool_mutex_key	sync/sync0sync.cc	/^mysql_pfs_key_t trx_pool_mutex_key;$/;"	v
trx_pool_t	trx/trx0trx.cc	/^typedef Pool<trx_t, TrxFactory, TrxPoolLock> trx_pool_t;$/;"	t	file:
trx_pools	trx/trx0trx.cc	/^static trx_pools_t *trx_pools;$/;"	v	file:
trx_pools_t	trx/trx0trx.cc	/^typedef PoolManager<trx_pool_t, TrxPoolManagerLock> trx_pools_t;$/;"	t	file:
trx_prepare	trx/trx0trx.cc	/^static void trx_prepare(trx_t *trx) \/*!< in\/out: transaction *\/$/;"	f	file:
trx_prepare_for_mysql	trx/trx0trx.cc	/^dberr_t trx_prepare_for_mysql(trx_t *trx) {$/;"	f
trx_prepare_low	trx/trx0trx.cc	/^static lsn_t trx_prepare_low($/;"	f	file:
trx_print	trx/trx0trx.cc	/^void trx_print(FILE *f, const trx_t *trx, ulint max_query_len) {$/;"	f
trx_print_latched	trx/trx0trx.cc	/^void trx_print_latched(FILE *f, const trx_t *trx, ulint max_query_len) {$/;"	f
trx_print_low	trx/trx0trx.cc	/^void trx_print_low(FILE *f,$/;"	f
trx_purge	trx/trx0purge.cc	/^ulint trx_purge(ulint n_purge_threads, \/*!< in: number of purge tasks$/;"	f
trx_purge_add_update_undo_to_history	trx/trx0purge.cc	/^void trx_purge_add_update_undo_to_history($/;"	f
trx_purge_attach_undo_recs	trx/trx0purge.cc	/^static ulint trx_purge_attach_undo_recs(const ulint n_purge_threads,$/;"	f	file:
trx_purge_check_if_marked_undo_is_empty	trx/trx0purge.cc	/^static bool trx_purge_check_if_marked_undo_is_empty() {$/;"	f	file:
trx_purge_choose_next_log	trx/trx0purge.cc	/^static void trx_purge_choose_next_log(void) {$/;"	f	file:
trx_purge_dml_delay	trx/trx0purge.cc	/^static ulint trx_purge_dml_delay(void) {$/;"	f	file:
trx_purge_fetch_next_rec	trx/trx0purge.cc	/^    trx_undo_rec_t *trx_purge_fetch_next_rec($/;"	f
trx_purge_free_segment	trx/trx0purge.cc	/^static void trx_purge_free_segment(trx_rseg_t *rseg, fil_addr_t hdr_addr,$/;"	f	file:
trx_purge_get_next_rec	trx/trx0purge.cc	/^static trx_undo_rec_t *trx_purge_get_next_rec($/;"	f	file:
trx_purge_graph_build	trx/trx0purge.cc	/^static que_t *trx_purge_graph_build(trx_t *trx, ulint n_purge_threads) {$/;"	f	file:
trx_purge_ignore_rec	trx/trx0purge.cc	/^static trx_undo_rec_t trx_purge_ignore_rec;$/;"	v	file:
trx_purge_latch_key	sync/sync0sync.cc	/^mysql_pfs_key_t trx_purge_latch_key;$/;"	v
trx_purge_mark_undo_for_truncate	trx/trx0purge.cc	/^static bool trx_purge_mark_undo_for_truncate(size_t truncate_count) {$/;"	f	file:
trx_purge_read_undo_rec	trx/trx0purge.cc	/^static void trx_purge_read_undo_rec(trx_purge_t *purge_sys,$/;"	f	file:
trx_purge_remove_log_hdr	trx/trx0purge.cc	/^static void trx_purge_remove_log_hdr(trx_rsegf_t *rseg_hdr,$/;"	f	file:
trx_purge_rseg_get_next_history_log	trx/trx0purge.cc	/^static void trx_purge_rseg_get_next_history_log($/;"	f	file:
trx_purge_run	trx/trx0purge.cc	/^void trx_purge_run(void) {$/;"	f
trx_purge_state	trx/trx0purge.cc	/^purge_state_t trx_purge_state(void) {$/;"	f
trx_purge_stop	trx/trx0purge.cc	/^void trx_purge_stop(void) {$/;"	f
trx_purge_sys_close	trx/trx0purge.cc	/^void trx_purge_sys_close() {$/;"	f
trx_purge_sys_create	trx/trx0purge.cc	/^void trx_purge_sys_create(ulint n_purge_threads, purge_pq_t *purge_queue) {$/;"	f
trx_purge_t	include/trx0purge.h	/^struct trx_purge_t {$/;"	s
trx_purge_truncate	trx/trx0purge.cc	/^static void trx_purge_truncate(void) {$/;"	f	file:
trx_purge_truncate_history	trx/trx0purge.cc	/^static void trx_purge_truncate_history(purge_iter_t *limit,$/;"	f	file:
trx_purge_truncate_marked_undo	trx/trx0purge.cc	/^static bool trx_purge_truncate_marked_undo() {$/;"	f	file:
trx_purge_truncate_marked_undo_low	trx/trx0purge.cc	/^static bool trx_purge_truncate_marked_undo_low(space_id_t space_num,$/;"	f	file:
trx_purge_truncate_rseg_history	trx/trx0purge.cc	/^static void trx_purge_truncate_rseg_history($/;"	f	file:
trx_purge_truncate_undo_spaces	trx/trx0purge.cc	/^static void trx_purge_truncate_undo_spaces() {$/;"	f	file:
trx_purge_wait_for_workers_to_complete	trx/trx0purge.cc	/^static void trx_purge_wait_for_workers_to_complete() {$/;"	f	file:
trx_que_state	include/lock0priv.h	/^  trx_que_t trx_que_state() const { return (trx->lock.que_state); }$/;"	f	struct:lock_t
trx_que_t	include/trx0types.h	/^enum trx_que_t {$/;"	g
trx_query	include/trx0i_s.h	/^  const char *trx_query;            \/*!< MySQL statement being$/;"	m	struct:i_s_trx_row_t
trx_query_cs	include/trx0i_s.h	/^  const CHARSET_INFO *trx_query_cs; \/*!< the charset of trx_query *\/$/;"	m	struct:i_s_trx_row_t
trx_recover_for_mysql	trx/trx0trx.cc	/^int trx_recover_for_mysql($/;"	f
trx_recovery_rollback_thread	trx/trx0roll.cc	/^void trx_recovery_rollback_thread() {$/;"	f
trx_recovery_rollback_thread_key	srv/srv0start.cc	/^mysql_pfs_key_t trx_recovery_rollback_thread_key;$/;"	v
trx_register_for_2pc	handler/ha_innodb.cc	/^static inline void trx_register_for_2pc(trx_t *trx) \/* in: transaction *\/$/;"	f	file:
trx_release_impl_and_expl_locks	trx/trx0trx.cc	/^static void trx_release_impl_and_expl_locks(trx_t *trx, bool serialized) {$/;"	f	file:
trx_release_savepoint_for_mysql	trx/trx0roll.cc	/^dberr_t trx_release_savepoint_for_mysql($/;"	f
trx_resurrect	trx/trx0trx.cc	/^static void trx_resurrect(trx_rseg_t *rseg) {$/;"	f	file:
trx_resurrect_insert	trx/trx0trx.cc	/^static trx_t *trx_resurrect_insert($/;"	f	file:
trx_resurrect_locks	trx/trx0trx.cc	/^void trx_resurrect_locks() {$/;"	f
trx_resurrect_table_ids	trx/trx0trx.cc	/^static void trx_resurrect_table_ids(trx_t *trx, const trx_undo_ptr_t *undo_ptr,$/;"	f	file:
trx_resurrect_update	trx/trx0trx.cc	/^static void trx_resurrect_update($/;"	f	file:
trx_resurrect_update_in_prepared_state	trx/trx0trx.cc	/^static void trx_resurrect_update_in_prepared_state($/;"	f	file:
trx_roll_crash_recv_trx	trx/trx0roll.cc	/^static const trx_t *trx_roll_crash_recv_trx = nullptr;$/;"	v	file:
trx_roll_graph_build	trx/trx0roll.cc	/^static que_t *trx_roll_graph_build(trx_t *trx, bool partial_rollback) {$/;"	f	file:
trx_roll_max_undo_no	trx/trx0roll.cc	/^static undo_no_t trx_roll_max_undo_no;$/;"	v	file:
trx_roll_pop_top_rec	trx/trx0roll.cc	/^static const page_t *trx_roll_pop_top_rec(trx_t *trx, trx_undo_t *undo,$/;"	f	file:
trx_roll_pop_top_rec_of_trx	trx/trx0roll.cc	/^trx_undo_rec_t *trx_roll_pop_top_rec_of_trx($/;"	f
trx_roll_pop_top_rec_of_trx_low	trx/trx0roll.cc	/^static trx_undo_rec_t *trx_roll_pop_top_rec_of_trx_low($/;"	f	file:
trx_roll_progress_printed_pct	trx/trx0roll.cc	/^static ulint trx_roll_progress_printed_pct;$/;"	v	file:
trx_roll_savepoint_free	trx/trx0roll.cc	/^static void trx_roll_savepoint_free($/;"	f	file:
trx_roll_savepoints_free	trx/trx0roll.cc	/^void trx_roll_savepoints_free(trx_t *trx, trx_named_savept_t *savep) {$/;"	f
trx_roll_try_truncate	trx/trx0roll.cc	/^static void trx_roll_try_truncate($/;"	f	file:
trx_rollback_active	trx/trx0roll.cc	/^static void trx_rollback_active(trx_t *trx) \/*!< in\/out: transaction *\/$/;"	f	file:
trx_rollback_finish	trx/trx0roll.cc	/^static void trx_rollback_finish(trx_t *trx) \/*!< in: transaction *\/$/;"	f	file:
trx_rollback_for_mysql	trx/trx0roll.cc	/^dberr_t trx_rollback_for_mysql(trx_t *trx) \/*!< in\/out: transaction *\/$/;"	f
trx_rollback_for_mysql_low	trx/trx0roll.cc	/^static dberr_t trx_rollback_for_mysql_low($/;"	f	file:
trx_rollback_last_sql_stat_for_mysql	trx/trx0roll.cc	/^dberr_t trx_rollback_last_sql_stat_for_mysql($/;"	f
trx_rollback_low	trx/trx0roll.cc	/^static dberr_t trx_rollback_low(trx_t *trx) {$/;"	f	file:
trx_rollback_or_clean_recovered	trx/trx0roll.cc	/^void trx_rollback_or_clean_recovered($/;"	f
trx_rollback_or_clean_resurrected	trx/trx0roll.cc	/^static ibool trx_rollback_or_clean_resurrected($/;"	f	file:
trx_rollback_start	trx/trx0roll.cc	/^static que_thr_t *trx_rollback_start(trx_t *trx, ib_id_t roll_limit,$/;"	f	file:
trx_rollback_step	trx/trx0roll.cc	/^que_thr_t *trx_rollback_step(que_thr_t *thr) \/*!< in: query thread *\/$/;"	f
trx_rollback_to_savepoint	trx/trx0roll.cc	/^dberr_t trx_rollback_to_savepoint($/;"	f
trx_rollback_to_savepoint_for_mysql	trx/trx0roll.cc	/^dberr_t trx_rollback_to_savepoint_for_mysql($/;"	f
trx_rollback_to_savepoint_for_mysql_low	trx/trx0roll.cc	/^    trx_rollback_to_savepoint_for_mysql_low($/;"	f
trx_rollback_to_savepoint_low	trx/trx0roll.cc	/^static void trx_rollback_to_savepoint_low($/;"	f	file:
trx_rows_locked	include/trx0i_s.h	/^  ulint trx_rows_locked;       \/*!< lock_number_of_rows_locked() *\/$/;"	m	struct:i_s_trx_row_t
trx_rows_modified	include/trx0i_s.h	/^  uintmax_t trx_rows_modified; \/*!< trx_t::undo_no *\/$/;"	m	struct:i_s_trx_row_t
trx_rseg_add_rollback_segments	trx/trx0rseg.cc	/^bool trx_rseg_add_rollback_segments(space_id_t space_id, ulong target_rsegs,$/;"	f
trx_rseg_adjust_rollback_segments	trx/trx0rseg.cc	/^bool trx_rseg_adjust_rollback_segments(ulong target_rollback_segments) {$/;"	f
trx_rseg_array_create	trx/trx0rseg.cc	/^void trx_rseg_array_create(space_id_t space_id, mtr_t *mtr) {$/;"	f
trx_rseg_create	trx/trx0rseg.cc	/^page_no_t trx_rseg_create(space_id_t space_id, ulint rseg_id) {$/;"	f
trx_rseg_get_n_undo_tablespaces	trx/trx0rseg.cc	/^void trx_rseg_get_n_undo_tablespaces(Space_Ids *spaces_to_open) {$/;"	f
trx_rseg_get_page_no	trx/trx0rseg.cc	/^page_no_t trx_rseg_get_page_no(space_id_t space_id, ulint rseg_id) {$/;"	f
trx_rseg_header_create	trx/trx0rseg.cc	/^page_no_t trx_rseg_header_create(space_id_t space_id,$/;"	f
trx_rseg_init_rollback_segments	trx/trx0rseg.cc	/^bool trx_rseg_init_rollback_segments(space_id_t space_id,$/;"	f
trx_rseg_mem_create	trx/trx0rseg.cc	/^trx_rseg_t *trx_rseg_mem_create(ulint id, space_id_t space_id,$/;"	f
trx_rseg_mem_free	trx/trx0rseg.cc	/^void trx_rseg_mem_free(trx_rseg_t *rseg) {$/;"	f
trx_rseg_n_slots_debug	trx/trx0sys.cc	/^uint trx_rseg_n_slots_debug = 0;$/;"	v
trx_rseg_persist_gtid	trx/trx0rseg.cc	/^static void trx_rseg_persist_gtid(trx_rseg_t *rseg, trx_id_t gtid_trx_no) {$/;"	f	file:
trx_rseg_t	include/trx0types.h	/^struct trx_rseg_t {$/;"	s
trx_rseg_type_t	include/trx0trx.h	/^enum trx_rseg_type_t {$/;"	g
trx_rseg_upgrade_undo_tablespaces	trx/trx0rseg.cc	/^void trx_rseg_upgrade_undo_tablespaces() {$/;"	f
trx_rsegf_t	include/trx0types.h	/^typedef byte trx_rsegf_t;$/;"	t
trx_rsegs_init	trx/trx0rseg.cc	/^void trx_rsegs_init(purge_pq_t *purge_queue) {$/;"	f
trx_rsegs_t	include/trx0trx.h	/^struct trx_rsegs_t {$/;"	s
trx_rsegsf_t	include/trx0types.h	/^typedef byte trx_rsegsf_t;$/;"	t
trx_savepoint_find	trx/trx0roll.cc	/^static trx_named_savept_t *trx_savepoint_find($/;"	f	file:
trx_savepoint_for_mysql	trx/trx0roll.cc	/^dberr_t trx_savepoint_for_mysql($/;"	f
trx_savepoints	include/trx0roll.h	/^  trx_savepoints; \/*!< the list of savepoints of a$/;"	m	struct:trx_named_savept_t
trx_savepoints	include/trx0trx.h	/^  trx_savepoints; \/*!< savepoints set with SAVEPOINT ...,$/;"	m	struct:trx_t
trx_savept_t	include/trx0types.h	/^struct trx_savept_t {$/;"	s
trx_savept_take	trx/trx0roll.cc	/^trx_savept_t trx_savept_take(trx_t *trx) \/*!< in: transaction *\/$/;"	f
trx_schedule_weight	include/trx0i_s.h	/^  std::pair<bool, trx_schedule_weight_t> trx_schedule_weight;$/;"	m	struct:i_s_trx_row_t
trx_schedule_weight_t	include/lock0types.h	/^typedef uint32_t trx_schedule_weight_t;$/;"	t
trx_serialisation_number_get	trx/trx0trx.cc	/^static bool trx_serialisation_number_get($/;"	f	file:
trx_set_detailed_error	trx/trx0trx.cc	/^void trx_set_detailed_error(trx_t *trx, const char *msg) {$/;"	f
trx_set_detailed_error_from_file	trx/trx0trx.cc	/^void trx_set_detailed_error_from_file($/;"	f
trx_set_flush_observer	trx/trx0trx.cc	/^void trx_set_flush_observer(trx_t *trx, FlushObserver *observer) {$/;"	f
trx_set_rw_mode	trx/trx0trx.cc	/^void trx_set_rw_mode(trx_t *trx) \/*!< in\/out: transaction that is RW *\/$/;"	f
trx_start_if_not_started	include/trx0trx.h	158;"	d
trx_start_if_not_started	include/trx0trx.h	179;"	d
trx_start_if_not_started_low	trx/trx0trx.cc	/^void trx_start_if_not_started_low(trx_t *trx, bool read_write) {$/;"	f
trx_start_if_not_started_xa	include/trx0trx.h	151;"	d
trx_start_if_not_started_xa	include/trx0trx.h	185;"	d
trx_start_if_not_started_xa_low	trx/trx0trx.cc	/^void trx_start_if_not_started_xa_low(trx_t *trx, bool read_write) {$/;"	f
trx_start_internal	include/trx0trx.h	165;"	d
trx_start_internal	include/trx0trx.h	181;"	d
trx_start_internal_low	trx/trx0trx.cc	/^void trx_start_internal_low(trx_t *trx) \/*!< in\/out: transaction *\/$/;"	f
trx_start_internal_read_only	include/trx0trx.h	172;"	d
trx_start_internal_read_only	include/trx0trx.h	183;"	d
trx_start_internal_read_only_low	trx/trx0trx.cc	/^void trx_start_internal_read_only_low(trx_t *trx) {$/;"	f
trx_start_low	trx/trx0trx.cc	/^static void trx_start_low($/;"	f	file:
trx_started	include/trx0i_s.h	/^  ib_time_t trx_started; \/*!< trx_t::start_time *\/$/;"	m	struct:i_s_trx_row_t
trx_state	include/trx0i_s.h	/^  const char *trx_state; \/*!< transaction state from$/;"	m	struct:i_s_trx_row_t
trx_state_t	include/trx0types.h	/^enum trx_state_t {$/;"	g
trx_sys	trx/trx0sys.cc	/^trx_sys_t *trx_sys = nullptr;$/;"	v
trx_sys_after_background_threads_shutdown_validate	trx/trx0sys.cc	/^void trx_sys_after_background_threads_shutdown_validate() {$/;"	f
trx_sys_after_pre_dd_shutdown_validate	trx/trx0sys.cc	/^void trx_sys_after_pre_dd_shutdown_validate() {$/;"	f
trx_sys_before_pre_dd_shutdown_validate	trx/trx0sys.cc	/^void trx_sys_before_pre_dd_shutdown_validate() {$/;"	f
trx_sys_close	trx/trx0sys.cc	/^void trx_sys_close(void) {$/;"	f
trx_sys_create	trx/trx0sys.cc	/^void trx_sys_create(void) {$/;"	f
trx_sys_create_sys_pages	trx/trx0sys.cc	/^void trx_sys_create_sys_pages(void) {$/;"	f
trx_sys_flush_max_trx_id	trx/trx0sys.cc	/^void trx_sys_flush_max_trx_id(void) {$/;"	f
trx_sys_get_binlog_prepared	trx/trx0sys.cc	/^void trx_sys_get_binlog_prepared(std::vector<trx_id_t> &trx_ids) {$/;"	f
trx_sys_init_at_db_start	trx/trx0sys.cc	/^purge_pq_t *trx_sys_init_at_db_start(void) {$/;"	f
trx_sys_mutex_enter	include/trx0sys.h	539;"	d
trx_sys_mutex_exit	include/trx0sys.h	545;"	d
trx_sys_mutex_key	sync/sync0sync.cc	/^mysql_pfs_key_t trx_sys_mutex_key;$/;"	v
trx_sys_mutex_own	include/trx0sys.h	536;"	d
trx_sys_oldest_trx_no	trx/trx0sys.cc	/^trx_id_t trx_sys_oldest_trx_no() {$/;"	f
trx_sys_persist_gtid_num	trx/trx0sys.cc	/^void trx_sys_persist_gtid_num(trx_id_t gtid_trx_no) {$/;"	f
trx_sys_read_binlog_position	trx/trx0sys.cc	/^void trx_sys_read_binlog_position(char *file, uint64_t &offset) {$/;"	f
trx_sys_recovered_active_trxs_count	trx/trx0sys.cc	/^size_t trx_sys_recovered_active_trxs_count() {$/;"	f
trx_sys_rseg_mutex_key	sync/sync0sync.cc	/^mysql_pfs_key_t trx_sys_rseg_mutex_key;$/;"	v
trx_sys_t	include/trx0sys.h	/^struct trx_sys_t {$/;"	s
trx_sys_undo_spaces	trx/trx0sys.cc	/^Space_Ids *trx_sys_undo_spaces;$/;"	v
trx_sys_undo_spaces_deinit	trx/trx0sys.cc	/^void trx_sys_undo_spaces_deinit() {$/;"	f
trx_sys_undo_spaces_init	trx/trx0sys.cc	/^void trx_sys_undo_spaces_init() {$/;"	f
trx_sys_update_binlog_position	trx/trx0trx.cc	/^void trx_sys_update_binlog_position(trx_t *trx) {$/;"	f
trx_sys_update_mysql_binlog_offset	trx/trx0sys.cc	/^void trx_sys_update_mysql_binlog_offset(trx_t *trx, mtr_t *mtr) {$/;"	f
trx_sys_validate_trx_list	trx/trx0sys.cc	/^bool trx_sys_validate_trx_list() {$/;"	f
trx_sys_validate_trx_list_low	trx/trx0sys.cc	/^static bool trx_sys_validate_trx_list_low($/;"	f	file:
trx_sys_write_binlog_position	trx/trx0sys.cc	/^bool trx_sys_write_binlog_position(const char *last_file, uint64_t last_offset,$/;"	f
trx_sysf_create	trx/trx0sys.cc	/^static void trx_sysf_create(mtr_t *mtr) \/*!< in: mtr *\/$/;"	f	file:
trx_sysf_rseg_find_free	trx/trx0sys.cc	/^ulint trx_sysf_rseg_find_free(mtr_t *mtr) {$/;"	f
trx_sysf_rseg_find_page_no	trx/trx0sys.cc	/^page_no_t trx_sysf_rseg_find_page_no(ulint rseg_id) {$/;"	f
trx_sysf_t	include/trx0types.h	/^typedef byte trx_sysf_t;$/;"	t
trx_t	include/trx0trx.h	/^struct trx_t {$/;"	s
trx_table_map	trx/trx0trx.cc	/^    trx_table_map;$/;"	t	file:
trx_tables_in_use	include/trx0i_s.h	/^  ulint trx_tables_in_use;          \/*!< n_mysql_tables_in_use in$/;"	m	struct:i_s_trx_row_t
trx_tables_locked	include/trx0i_s.h	/^  ulint trx_tables_locked;$/;"	m	struct:i_s_trx_row_t
trx_thrs	include/que0que.h	/^  trx_thrs; \/*!< lists of threads in wait list of$/;"	m	struct:que_thr_t
trx_ulogf_t	include/trx0types.h	/^typedef byte trx_ulogf_t;$/;"	t
trx_undo_add_page	trx/trx0undo.cc	/^buf_block_t *trx_undo_add_page($/;"	f
trx_undo_assign_undo	trx/trx0undo.cc	/^dberr_t trx_undo_assign_undo($/;"	f
trx_undo_create	trx/trx0undo.cc	/^    trx_undo_create(trx_t *trx, trx_rseg_t *rseg, ulint type, trx_id_t trx_id,$/;"	f
trx_undo_empty_header_page	trx/trx0undo.cc	/^static void trx_undo_empty_header_page(space_id_t space_id,$/;"	f	file:
trx_undo_erase_page_end	trx/trx0rec.cc	/^static ibool trx_undo_erase_page_end($/;"	f	file:
trx_undo_free_last_page	include/trx0undo.h	186;"	d
trx_undo_free_last_page	include/trx0undo.h	189;"	d
trx_undo_free_last_page_func	trx/trx0undo.cc	/^void trx_undo_free_last_page_func($/;"	f
trx_undo_free_page	trx/trx0undo.cc	/^static page_no_t trx_undo_free_page($/;"	f	file:
trx_undo_free_trx_with_prepared_or_active_logs	trx/trx0undo.cc	/^void trx_undo_free_trx_with_prepared_or_active_logs(trx_t *trx,$/;"	f
trx_undo_get_first_rec	trx/trx0undo.cc	/^trx_undo_rec_t *trx_undo_get_first_rec(trx_id_t *modifier_trx_id,$/;"	f
trx_undo_get_mbr_from_ext	trx/trx0rec.cc	/^static void trx_undo_get_mbr_from_ext(trx_t *trx, dict_index_t *index,$/;"	f	file:
trx_undo_get_next_rec	trx/trx0undo.cc	/^trx_undo_rec_t *trx_undo_get_next_rec($/;"	f
trx_undo_get_next_rec_from_next_page	trx/trx0undo.cc	/^static trx_undo_rec_t *trx_undo_get_next_rec_from_next_page($/;"	f	file:
trx_undo_get_prev_rec	trx/trx0undo.cc	/^trx_undo_rec_t *trx_undo_get_prev_rec($/;"	f
trx_undo_get_prev_rec_from_prev_page	trx/trx0undo.cc	/^static trx_undo_rec_t *trx_undo_get_prev_rec_from_prev_page($/;"	f	file:
trx_undo_get_undo_rec	trx/trx0rec.cc	/^static MY_ATTRIBUTE((warn_unused_result)) bool trx_undo_get_undo_rec($/;"	f
trx_undo_get_undo_rec_low	trx/trx0rec.cc	/^    trx_undo_rec_t *trx_undo_get_undo_rec_low($/;"	f
trx_undo_gtid_add_update_undo	trx/trx0undo.cc	/^dberr_t trx_undo_gtid_add_update_undo(trx_t *trx, bool prepare, bool rollback) {$/;"	f
trx_undo_gtid_read_and_persist	trx/trx0undo.cc	/^void trx_undo_gtid_read_and_persist(trx_ulogf_t *undo_header) {$/;"	f
trx_undo_gtid_set	trx/trx0undo.cc	/^void trx_undo_gtid_set(trx_t *trx, trx_undo_t *undo, bool is_xa_prepare) {$/;"	f
trx_undo_gtid_write	trx/trx0undo.cc	/^void trx_undo_gtid_write(trx_t *trx, trx_ulogf_t *undo_header, trx_undo_t *undo,$/;"	f
trx_undo_header_add_space_for_xid	trx/trx0undo.cc	/^static void trx_undo_header_add_space_for_xid($/;"	f	file:
trx_undo_header_create	trx/trx0undo.cc	/^static ulint trx_undo_header_create($/;"	f	file:
trx_undo_header_create_log	trx/trx0undo.cc	/^void trx_undo_header_create_log($/;"	f
trx_undo_header_create_log	trx/trx0undo.cc	486;"	d	file:
trx_undo_insert_cleanup	trx/trx0undo.cc	/^void trx_undo_insert_cleanup(trx_undo_ptr_t *undo_ptr, bool noredo) {$/;"	f
trx_undo_insert_header_reuse	trx/trx0undo.cc	/^static ulint trx_undo_insert_header_reuse($/;"	f	file:
trx_undo_insert_header_reuse_log	trx/trx0undo.cc	/^void trx_undo_insert_header_reuse_log($/;"	f
trx_undo_insert_header_reuse_log	trx/trx0undo.cc	828;"	d	file:
trx_undo_left	trx/trx0rec.cc	/^ulint trx_undo_left(const page_t *page, \/*!< in: undo log page *\/$/;"	f
trx_undo_lists_init	trx/trx0undo.cc	/^ulint trx_undo_lists_init($/;"	f
trx_undo_log_v_idx	trx/trx0rec.cc	/^static byte *trx_undo_log_v_idx(page_t *undo_page, const dict_table_t *table,$/;"	f	file:
trx_undo_mark_as_dict_operation	trx/trx0undo.cc	/^static void trx_undo_mark_as_dict_operation($/;"	f	file:
trx_undo_max_free_space	trx/trx0rec.cc	/^size_t trx_undo_max_free_space() {$/;"	f
trx_undo_mem_create	trx/trx0undo.cc	/^static trx_undo_t *trx_undo_mem_create(trx_rseg_t *rseg, ulint id, ulint type,$/;"	f	file:
trx_undo_mem_free	trx/trx0undo.cc	/^void trx_undo_mem_free(trx_undo_t *undo) \/*!< in: the undo object to be freed *\/$/;"	f
trx_undo_mem_init	trx/trx0undo.cc	/^static trx_undo_t *trx_undo_mem_init($/;"	f	file:
trx_undo_mem_init_for_reuse	trx/trx0undo.cc	/^static void trx_undo_mem_init_for_reuse($/;"	f	file:
trx_undo_mutex_key	sync/sync0sync.cc	/^mysql_pfs_key_t trx_undo_mutex_key;$/;"	v
trx_undo_page_fetch_ext	trx/trx0rec.cc	746;"	d	file:
trx_undo_page_fetch_ext	trx/trx0rec.cc	758;"	d	file:
trx_undo_page_fetch_ext_func	trx/trx0rec.cc	/^static byte *trx_undo_page_fetch_ext_func(trx_t *trx, dict_index_t *index,$/;"	f	file:
trx_undo_page_init	trx/trx0undo.cc	/^static void trx_undo_page_init($/;"	f	file:
trx_undo_page_init_log	trx/trx0undo.cc	/^void trx_undo_page_init_log(page_t *undo_page, \/*!< in: undo log page *\/$/;"	f
trx_undo_page_init_log	trx/trx0undo.cc	336;"	d	file:
trx_undo_page_report_insert	trx/trx0rec.cc	/^static ulint trx_undo_page_report_insert($/;"	f	file:
trx_undo_page_report_modify	trx/trx0rec.cc	/^static ulint trx_undo_page_report_modify($/;"	f	file:
trx_undo_page_report_modify_ext	trx/trx0rec.cc	751;"	d	file:
trx_undo_page_report_modify_ext	trx/trx0rec.cc	763;"	d	file:
trx_undo_page_report_modify_ext_func	trx/trx0rec.cc	/^static byte *trx_undo_page_report_modify_ext_func($/;"	f	file:
trx_undo_page_set_next_prev_and_add	trx/trx0rec.cc	/^static ulint trx_undo_page_set_next_prev_and_add($/;"	f	file:
trx_undo_page_truncate_offset	trx/trx0undo.cc	/^int trx_undo_page_truncate_offset(trx_undo_t *undo, page_t *undo_page,$/;"	f
trx_undo_parse_add_undo_rec	trx/trx0rec.cc	/^byte *trx_undo_parse_add_undo_rec(byte *ptr,     \/*!< in: buffer *\/$/;"	f
trx_undo_parse_erase_page_end	trx/trx0rec.cc	/^byte *trx_undo_parse_erase_page_end($/;"	f
trx_undo_parse_page_header	trx/trx0undo.cc	/^byte *trx_undo_parse_page_header(mlog_id_t type, const byte *ptr,$/;"	f
trx_undo_parse_page_init	trx/trx0undo.cc	/^byte *trx_undo_parse_page_init(const byte *ptr,     \/*!< in: buffer *\/$/;"	f
trx_undo_prev_version_build	trx/trx0rec.cc	/^bool trx_undo_prev_version_build($/;"	f
trx_undo_ptr_t	include/trx0trx.h	/^struct trx_undo_ptr_t {$/;"	s
trx_undo_read_blob_update	trx/trx0rec.cc	/^static const byte *trx_undo_read_blob_update(const byte *undo_ptr,$/;"	f	file:
trx_undo_read_v_cols	trx/trx0rec.cc	/^void trx_undo_read_v_cols(const dict_table_t *table, const byte *ptr,$/;"	f
trx_undo_read_v_idx	trx/trx0rec.cc	/^const byte *trx_undo_read_v_idx(const dict_table_t *table, const byte *ptr,$/;"	f
trx_undo_read_v_idx_low	trx/trx0rec.cc	/^static const byte *trx_undo_read_v_idx_low(const dict_table_t *table,$/;"	f	file:
trx_undo_read_xid	trx/trx0undo.cc	/^static void trx_undo_read_xid($/;"	f	file:
trx_undo_rec_get_col_val	trx/trx0rec.cc	/^byte *trx_undo_rec_get_col_val(const byte *ptr, const byte **field, ulint *len,$/;"	f
trx_undo_rec_get_multi_value	trx/trx0rec.cc	/^const byte *trx_undo_rec_get_multi_value(const byte *ptr, dfield_t *field,$/;"	f
trx_undo_rec_get_pars	trx/trx0rec.cc	/^byte *trx_undo_rec_get_pars($/;"	f
trx_undo_rec_get_partial_row	trx/trx0rec.cc	/^byte *trx_undo_rec_get_partial_row($/;"	f
trx_undo_rec_get_ptr	include/trx0rec.h	82;"	d
trx_undo_rec_get_row_ref	trx/trx0rec.cc	/^byte *trx_undo_rec_get_row_ref($/;"	f
trx_undo_rec_get_table_id	trx/trx0rec.cc	/^table_id_t trx_undo_rec_get_table_id(const trx_undo_rec_t *undo_rec) {$/;"	f
trx_undo_rec_is_multi_value	trx/trx0rec.cc	/^bool trx_undo_rec_is_multi_value(const byte *undo_rec) {$/;"	f
trx_undo_rec_skip_row_ref	trx/trx0rec.cc	/^static byte *trx_undo_rec_skip_row_ref($/;"	f	file:
trx_undo_rec_t	include/trx0types.h	/^typedef byte trx_undo_rec_t;$/;"	t
trx_undo_report_blob_update	trx/trx0rec.cc	/^static byte *trx_undo_report_blob_update(page_t *undo_page, dict_index_t *index,$/;"	f	file:
trx_undo_report_insert_virtual	trx/trx0rec.cc	/^static bool trx_undo_report_insert_virtual(page_t *undo_page,$/;"	f	file:
trx_undo_report_row_operation	trx/trx0rec.cc	/^dberr_t trx_undo_report_row_operation($/;"	f
trx_undo_reuse_cached	trx/trx0undo.cc	/^static trx_undo_t *trx_undo_reuse_cached(trx_t *trx, trx_rseg_t *rseg,$/;"	f	file:
trx_undo_seg_free	trx/trx0undo.cc	/^static void trx_undo_seg_free(const trx_undo_t *undo, bool noredo) {$/;"	f	file:
trx_undo_set_state_at_finish	trx/trx0undo.cc	/^page_t *trx_undo_set_state_at_finish($/;"	f
trx_undo_set_state_at_prepare	trx/trx0undo.cc	/^page_t *trx_undo_set_state_at_prepare(trx_t *trx, trx_undo_t *undo,$/;"	f
trx_undo_store_multi_value	trx/trx0rec.cc	/^static bool trx_undo_store_multi_value(page_t *undo_page,$/;"	f	file:
trx_undo_t	include/trx0undo.h	/^struct trx_undo_t {$/;"	s
trx_undo_truncate_end	include/trx0undo.h	210;"	d
trx_undo_truncate_end	include/trx0undo.h	213;"	d
trx_undo_truncate_end_func	trx/trx0undo.cc	/^void trx_undo_truncate_end_func($/;"	f
trx_undo_truncate_start	trx/trx0undo.cc	/^void trx_undo_truncate_start(trx_rseg_t *rseg, page_no_t hdr_page_no,$/;"	f
trx_undo_truncate_tablespace	trx/trx0undo.cc	/^bool trx_undo_truncate_tablespace(undo::Tablespace *marked_space) {$/;"	f
trx_undo_update_cleanup	trx/trx0undo.cc	/^void trx_undo_update_cleanup(trx_t *trx, trx_undo_ptr_t *undo_ptr,$/;"	f
trx_undo_update_rec_get_sys_cols	trx/trx0rec.cc	/^byte *trx_undo_update_rec_get_sys_cols($/;"	f
trx_undo_update_rec_get_update	trx/trx0rec.cc	/^byte *trx_undo_update_rec_get_update($/;"	f
trx_undo_write_xid	trx/trx0undo.cc	/^static void trx_undo_write_xid($/;"	f	file:
trx_undof_page_add_undo_rec_log	trx/trx0rec.cc	/^void trx_undof_page_add_undo_rec_log($/;"	f
trx_unique_checks	include/trx0i_s.h	/^  ibool trx_unique_checks;$/;"	m	struct:i_s_trx_row_t
trx_upagef_t	include/trx0types.h	/^typedef byte trx_upagef_t;$/;"	t
trx_update_mod_tables_timestamp	trx/trx0trx.cc	/^static void trx_update_mod_tables_timestamp(trx_t *trx) \/*!< in: transaction *\/$/;"	f	file:
trx_usegf_t	include/trx0types.h	/^typedef byte trx_usegf_t;$/;"	t
trx_ut_list_t	include/trx0sys.h	/^typedef UT_LIST_BASE_NODE_T(trx_t) trx_ut_list_t;$/;"	t
trx_validate_state_before_free	trx/trx0trx.cc	/^static void trx_validate_state_before_free(trx_t *trx) {$/;"	f	file:
trx_wait_started	include/trx0i_s.h	/^  ib_time_t trx_wait_started;$/;"	m	struct:i_s_trx_row_t
trx_weight	include/trx0i_s.h	/^  uintmax_t trx_weight;$/;"	m	struct:i_s_trx_row_t
trx_weight_ge	trx/trx0trx.cc	/^bool trx_weight_ge(const trx_t *a, \/*!< in: transaction to be compared *\/$/;"	f
trx_write_serialisation_history	trx/trx0trx.cc	/^static bool trx_write_serialisation_history($/;"	f	file:
try_LRU_scan	include/buf0buf.h	/^  bool try_LRU_scan;$/;"	m	struct:Cache_hint::buf_pool_t
try_commit	handler/handler0alter.cc	/^  virtual int try_commit(const TABLE *table, TABLE *altered_table,$/;"	f	class:alter_part
try_commit	handler/handler0alter.cc	/^int alter_part_change::try_commit(const TABLE *table, TABLE *altered_table,$/;"	f	class:alter_part_change
try_commit	handler/handler0alter.cc	/^int alter_parts::try_commit(const dd::Table &old_dd_tab, dd::Table &new_dd_tab,$/;"	f	class:alter_parts
try_relatch_trx_and_shard_and_do	lock/lock0lock.cc	/^static bool try_relatch_trx_and_shard_and_do(const lock_t *lock, F &&f) {$/;"	f	namespace:locksys
try_relatch_trx_and_shard_and_do	lock/lock0lock.cc	/^static bool try_relatch_trx_and_shard_and_do(const trx_t *const trx,$/;"	f	namespace:locksys
try_release_read_locks_in_s_mode	lock/lock0lock.cc	/^static bool try_release_read_locks_in_s_mode(trx_t *trx, bool only_gap) {$/;"	f	namespace:locksys
try_semi_consistent_read	handler/ha_innodb.cc	/^void ha_innobase::try_semi_consistent_read(bool yes) {$/;"	f	class:ha_innobase
try_semi_consistent_read	handler/ha_innopart.cc	/^void ha_innopart::try_semi_consistent_read(bool yes) {$/;"	f	class:ha_innopart
try_x_lock	include/lock0latches.h	/^    bool try_x_lock(ut::Location location) {$/;"	f	class:locksys::Latches::Unique_sharded_rw_lock
try_x_lock	include/sync0sharded_rw.h	/^  bool try_x_lock(ut::Location location) {$/;"	f	class:Sharded_rw_lock
ts_encrypt_ddl_records	fsp/fsp0fsp.cc	/^std::vector<DDL_Record *> ts_encrypt_ddl_records;$/;"	v
tuple	include/row0ftsort.h	/^  dtuple_t *tuple;       \/*!< Tuple to insert *\/$/;"	m	struct:fts_psort_insert
tuple	include/row0sel.h	/^  dtuple_t *tuple;         \/*!< search tuple *\/$/;"	m	struct:plan_t
tuple_exps	include/row0sel.h	/^  que_node_t **tuple_exps; \/*!< array of expressions$/;"	m	struct:plan_t
tuple_list	include/data0data.h	/^  UT_LIST_NODE_T(dtuple_t) tuple_list;$/;"	m	struct:dtuple_t
tuples	include/row0merge.h	/^  mtuple_t *tuples;     \/*!< array of data tuples *\/$/;"	m	struct:row_merge_buf_t
type	api/api0api.cc	/^  ib_tuple_type_t type; \/*!< Tuple discriminitor. *\/$/;"	m	struct:ib_tuple_t	file:
type	fts/fts0opt.cc	/^  fts_msg_type_t type; \/*!< Message type *\/$/;"	m	struct:fts_msg_t	file:
type	include/api0api.h	/^  ib_col_type_t type; \/*!< Type of the column *\/$/;"	m	struct:__anon26
type	include/data0data.h	/^  dtype_t type; \/*!< type of data *\/$/;"	m	struct:dfield_t
type	include/dict0mem.h	/^  unsigned type : 6;        \/*!< 0 or DICT_FOREIGN_ON_DELETE_CASCADE$/;"	m	struct:dict_foreign_t
type	include/dict0mem.h	/^  unsigned type : DICT_IT_BITS;$/;"	m	struct:dict_index_t
type	include/fts0ast.h	/^  fts_ast_type_t type;        \/*!< The type of node *\/$/;"	m	struct:fts_ast_node_t
type	include/fts0fts.h	/^  fts_table_type_t type; \/*!< The auxiliary table type *\/$/;"	m	struct:fts_table_t
type	include/fts0fts.h	/^  fts_table_type_t type;$/;"	m	struct:fts_aux_table_t
type	include/hash0hash.h	/^  enum hash_table_sync_t type; \/*!< type of hash_table. *\/$/;"	m	struct:hash_table_t	typeref:enum:hash_table_t::hash_table_sync_t
type	include/lock0priv.h	/^  uint32_t type() const { return (type_mode & LOCK_TYPE_MASK); }$/;"	f	struct:lock_t
type	include/log0recv.h	/^    mlog_id_t type;$/;"	m	struct:recv_sys_t::Mlog_record
type	include/mem0mem.h	/^  ulint type;       \/*!< type of heap: MEM_HEAP_DYNAMIC, or$/;"	m	struct:mem_block_info_t
type	include/mtr0mtr.h	/^  ulint type;$/;"	m	struct:mtr_memo_slot_t
type	include/os0file.h	/^  os_file_type_t type;         \/*!< file type *\/$/;"	m	struct:AIO_mode::os_file_stat_t
type	include/pars0pars.h	/^  ulint type;          \/*!< type, e.g. DATA_FIXBINARY *\/$/;"	m	struct:pars_bound_lit_t
type	include/que0types.h	/^  ulint type;          \/*!< query node type *\/$/;"	m	struct:que_common_t
type	include/row0mysql.h	/^  ulint type;                   \/*!< column type in Innobase mtype$/;"	m	struct:mysql_row_templ_t
type	include/srv0srv.h	/^  srv_thread_type type;$/;"	m	struct:srv_slot_t
type	include/trx0undo.h	/^  ulint type;      \/*!< TRX_UNDO_INSERT or$/;"	m	struct:trx_undo_t
type	trx/trx0undo.cc	/^    ulint type,            \/*!< in: type of the segment: TRX_UNDO_INSERT or$/;"	v
type_cmpl_t	include/trx0rec.h	/^  type_cmpl_t() : m_flag(0) {}$/;"	f	struct:type_cmpl_t
type_cmpl_t	include/trx0rec.h	/^struct type_cmpl_t {$/;"	s
type_info	include/trx0rec.h	/^  ulint type_info() {$/;"	f	struct:type_cmpl_t
type_len	include/api0api.h	/^  ib_u32_t type_len; \/*!< Length of type *\/$/;"	m	struct:__anon26
type_mode	include/lock0priv.h	/^  uint32_t type_mode;$/;"	m	struct:lock_t
type_mode_string	include/lock0priv.h	/^inline std::string lock_t::type_mode_string() const {$/;"	f	class:lock_t
type_name	pars/pars0grm.y	/^type_name:$/;"	l
type_str	handler/i_s.cc	/^  const char *type_str; \/*!< String explain the page$/;"	m	struct:buf_page_desc_t	file:
type_string	include/lock0priv.h	/^  const char *type_string() const {$/;"	f	struct:lock_t
type_value	handler/i_s.cc	/^  size_t type_value;    \/*!< Page type or page state *\/$/;"	m	struct:buf_page_desc_t	file:
udf_data_t	log/log0meb.cc	/^  udf_data_t(const std::string &name, const Item_result return_type,$/;"	f	struct:meb::udf_data_t
udf_data_t	log/log0meb.cc	/^struct udf_data_t {$/;"	s	namespace:meb	file:
uint32	include/api0api.h	/^typedef unsigned int uint32;$/;"	t
uint32	include/api0api.h	/^typedef unsigned long uint32;$/;"	t
uint8_t	include/buf0types.h	/^enum buf_flush_t : uint8_t {$/;"	g
uint8_t	include/buf0types.h	/^enum buf_io_fix : uint8_t {$/;"	g
uint8_t	include/fil0fil.h	/^enum fil_type_t : uint8_t {$/;"	g
ulint	include/ut0rbt.h	46;"	d
ulint_ctr_1_t	include/srv0srv.h	/^  typedef ib_counter_t<ulint, 1, single_indexer_t> ulint_ctr_1_t;$/;"	t	struct:srv_stats_t
ulint_ctr_64_t	include/srv0srv.h	/^  typedef ib_counter_t<ulint, 64> ulint_ctr_64_t;$/;"	t	struct:srv_stats_t
uncommitted	include/dict0mem.h	/^  unsigned uncommitted : 1;$/;"	m	struct:dict_index_t
undo	include/trx0purge.h	/^namespace undo {$/;"	n
undo	include/trx0undo.h	/^namespace undo {$/;"	n
undo	trx/trx0purge.cc	/^namespace undo {$/;"	n	file:
undo_data_t	include/lob0undo.h	/^struct undo_data_t {$/;"	s	namespace:lob
undo_exec	include/row0undo.h	/^enum undo_exec {$/;"	g
undo_ext	include/row0undo.h	/^  row_ext_t *undo_ext;      \/*!< NULL, or prefixes of the externally$/;"	m	struct:undo_node_t
undo_list	include/trx0undo.h	/^  UT_LIST_NODE_T(trx_undo_t) undo_list;$/;"	m	struct:trx_undo_t
undo_mutex	include/trx0trx.h	/^  UndoMutex undo_mutex; \/*!< mutex protecting the fields in this$/;"	m	struct:trx_t
undo_no	include/row0purge.h	/^  undo_no_t undo_no;$/;"	m	struct:purge_node_t
undo_no	include/row0undo.h	/^  undo_no_t undo_no;        \/*!< undo number of the record *\/$/;"	m	struct:undo_node_t
undo_no	include/trx0purge.h	/^  undo_no_t undo_no;$/;"	m	struct:purge_iter_t
undo_no	include/trx0trx.h	/^  undo_no_t undo_no;    \/*!< next undo log record number to$/;"	m	struct:trx_t
undo_no_t	include/trx0types.h	/^typedef ib_id_t undo_no_t;$/;"	t
undo_node_t	include/row0undo.h	/^struct undo_node_t {$/;"	s
undo_page	trx/trx0undo.cc	/^    page_t **undo_page,$/;"	v
undo_rec	include/row0purge.h	/^    trx_undo_rec_t *undo_rec;$/;"	m	struct:purge_node_t::rec_t
undo_rec	include/row0undo.h	/^  trx_undo_rec_t *undo_rec; \/*!< undo log record *\/$/;"	m	struct:undo_node_t
undo_rotate_default_master_key	srv/srv0srv.cc	/^void undo_rotate_default_master_key() {$/;"	f
undo_row	include/row0undo.h	/^  dtuple_t *undo_row;       \/*!< NULL, or the row after undo *\/$/;"	m	struct:undo_node_t
undo_rseg_space	include/trx0purge.h	/^  space_id_t undo_rseg_space;$/;"	m	struct:purge_iter_t
undo_rseg_space	include/trx0trx.h	/^  space_id_t undo_rseg_space;$/;"	m	struct:trx_t
undo_seq_t	include/lob0undo.h	/^  undo_seq_t(ulint field_no) : m_field_no(field_no), m_undo_list(nullptr) {}$/;"	f	struct:lob::undo_seq_t
undo_seq_t	include/lob0undo.h	/^struct undo_seq_t {$/;"	s	namespace:lob
undo_space_name	include/fil0fil.h	/^static constexpr char undo_space_name[] = "innodb_undo";$/;"	v
undo_space_rseg_mutex_key	sync/sync0sync.cc	/^mysql_pfs_key_t undo_space_rseg_mutex_key;$/;"	v
undo_space_states	include/trx0types.h	/^  enum undo_space_states {$/;"	g	class:Rsegs
undo_spaces_deinit	srv/srv0start.cc	/^void undo_spaces_deinit() {$/;"	f
undo_spaces_init	srv/srv0start.cc	/^void undo_spaces_init() {$/;"	f
undo_spaces_lock_key	sync/sync0sync.cc	/^mysql_pfs_key_t undo_spaces_lock_key;$/;"	v
undo_thr	include/trx0roll.h	/^  que_thr_t *undo_thr;        \/*!< undo query graph *\/$/;"	m	struct:roll_node_t
undo_trunc	include/trx0purge.h	/^  undo::Truncate undo_trunc;$/;"	m	struct:trx_purge_t
undo_vers_t	include/lob0undo.h	/^struct undo_vers_t {$/;"	s	namespace:lob
unflushed_spaces	include/fil0fil.h	/^  List_node unflushed_spaces;$/;"	m	struct:fil_space_t
unique	api/api0api.cc	/^  ibool unique; \/*!< True if unique index *\/$/;"	m	struct:ib_index_def_t	file:
unique_def	pars/pars0grm.y	/^unique_def:$/;"	l
unique_search	include/row0sel.h	/^  ibool unique_search;     \/*!< TRUE if we are searching an$/;"	m	struct:plan_t
unit_test_os_file_get_parent_dir	os/os0file.cc	/^void unit_test_os_file_get_parent_dir() {$/;"	f
unlatch	include/trx0types.h	/^  void unlatch() {$/;"	f	struct:trx_rseg_t
unlock_cache	include/fts0types.h	/^  bool unlock_cache; \/*!< flag whether unlock cache when$/;"	m	struct:fts_sync_t
unlock_gap_lock	include/lock0priv.h	/^  void unlock_gap_lock() {$/;"	f	struct:lock_t
unlock_row	handler/ha_innodb.cc	/^void ha_innobase::unlock_row(void) {$/;"	f	class:ha_innobase
unlock_row	handler/ha_innopart.cc	/^void ha_innopart::unlock_row() {$/;"	f	class:ha_innopart
unmark_extern_fields	include/lob0lob.h	/^  void unmark_extern_fields() {$/;"	f	class:lob::BtrContext
unmark_mtr	include/mtr0mtr.h	/^    void unmark_mtr(size_t index) {$/;"	f	class:mtr_t::Logging
unput	fts/fts0blex.cc	247;"	d	file:
unput	fts/fts0tlex.cc	246;"	d	file:
unput	pars/lexyy.cc	197;"	d	file:
unregister_table_handler	include/sess0sess.h	/^  void unregister_table_handler(const char *table_name) {$/;"	f	class:innodb_session_t
unregister_udfs	log/log0meb.cc	/^static void unregister_udfs() {$/;"	f	namespace:meb
unuse_space_id	trx/trx0purge.cc	/^void unuse_space_id(space_id_t space_id) {$/;"	f	namespace:undo
unzip	include/buf0lru.h	/^  ulint unzip; \/**< Counter of page_zip_decompress operations. *\/$/;"	m	struct:buf_LRU_stat_t
unzip_LRU	include/buf0buf.h	/^  UT_LIST_BASE_NODE_T(buf_block_t) unzip_LRU;$/;"	m	struct:Cache_hint::buf_pool_t
unzip_LRU	include/buf0buf.h	/^  UT_LIST_NODE_T(buf_block_t) unzip_LRU;$/;"	m	struct:Cache_hint::buf_block_t
unzip_LRU_bytes	include/buf0buf.h	/^  ulint unzip_LRU_bytes;  \/*!< unzip_LRU size in bytes *\/$/;"	m	struct:Cache_hint::buf_pools_list_size_t
unzip_cur	include/buf0buf.h	/^  ulint unzip_cur; \/*!< buf_LRU_stat_cur.unzip, num$/;"	m	struct:Cache_hint::buf_pool_info_t
unzip_lru_len	include/buf0buf.h	/^  ulint unzip_lru_len; \/*!< length of buf_pool->unzip_LRU$/;"	m	struct:Cache_hint::buf_pool_info_t
unzip_sum	include/buf0buf.h	/^  ulint unzip_sum; \/*!< buf_LRU_stat_sum.unzip *\/$/;"	m	struct:Cache_hint::buf_pool_info_t
up_node	include/fts0ast.h	/^  fts_ast_node_t *up_node; \/*!< Direct up node *\/$/;"	m	struct:fts_ast_node_t
upd	api/api0api.cc	/^  que_fork_t *upd; \/*!< Innobase SQL query graph used$/;"	m	struct:ib_qry_grph_t	file:
upd	api/api0api.cc	/^  upd_node_t *upd; \/*!< Innobase SQL update node$/;"	m	struct:ib_qry_node_t	file:
upd_ext	include/row0upd.h	/^  row_ext_t *upd_ext;  \/* NULL, or prefixes of the externally$/;"	m	struct:upd_node_t
upd_field_t	include/row0upd.h	/^  upd_field_t()$/;"	f	struct:upd_field_t
upd_field_t	include/row0upd.h	/^struct upd_field_t {$/;"	s
upd_fld_is_multi_value_col	include/row0upd.h	572;"	d
upd_fld_is_virtual_col	include/row0upd.h	568;"	d
upd_fld_set_virtual_col	include/row0upd.h	576;"	d
upd_get_nth_field	include/row0upd.h	73;"	d
upd_graph	include/row0mysql.h	/^  que_fork_t *upd_graph;  \/*!< Innobase SQL query graph used$/;"	m	struct:row_prebuilt_t
upd_multi_val_pos	include/row0upd.h	/^  uint32_t upd_multi_val_pos;$/;"	m	struct:upd_node_t
upd_node	include/row0mysql.h	/^  upd_node_t *upd_node;   \/*!< Innobase SQL update node used$/;"	m	struct:row_prebuilt_t
upd_node_create	row/row0upd.cc	/^upd_node_t *upd_node_create(mem_heap_t *heap) \/*!< in: mem heap where created *\/$/;"	f
upd_node_t	include/row0upd.h	/^struct upd_node_t {$/;"	s
upd_row	include/row0upd.h	/^  dtuple_t *upd_row;   \/* NULL, or a copy of the updated row *\/$/;"	m	struct:upd_node_t
upd_t	include/row0upd.h	/^struct upd_t {$/;"	s
update	handler/handler0alter.cc	/^  void update(const dict_table_t *old_table, bool rebuild) {$/;"	f	struct:alter_table_old_info_t
update	include/lob0lob.h	/^  void update(space_id_t space_id, ulint page_no, ulint offset, mtr_t *mtr) {$/;"	f	struct:lob::ref_t
update	include/row0purge.h	/^  upd_t *update;$/;"	m	struct:purge_node_t
update	include/row0undo.h	/^  upd_t *update;            \/*!< update vector for a clustered index$/;"	m	struct:undo_node_t
update	include/row0upd.h	/^  upd_t *update;       \/*!< update vector for the row *\/$/;"	m	struct:upd_node_t
update	lob/lob0impl.cc	/^void z_frag_entry_t::update(const z_frag_page_t &frag_page) {$/;"	f	class:lob::z_frag_entry_t
update	lob/lob0update.cc	/^dberr_t update(InsertContext &ctx, trx_t *trx, dict_index_t *index,$/;"	f	namespace:lob
update	log/log0write.cc	/^  void update() {$/;"	f	struct:Log_write_to_file_requests_monitor
update_binlog_position	clone/clone0copy.cc	/^int Clone_Snapshot::update_binlog_position() {$/;"	f	class:Clone_Snapshot
update_block_header	arch/arch0page.cc	/^void Arch_Block::update_block_header(lsn_t stop_lsn, lsn_t reset_lsn) {$/;"	f	class:Arch_Block
update_block_size	clone/clone0snapshot.cc	/^void Clone_Snapshot::update_block_size(uint buff_size) {$/;"	f	class:Clone_Snapshot
update_create_info	handler/ha_innodb.cc	/^void ha_innobase::update_create_info($/;"	f	class:ha_innobase
update_create_info	handler/ha_innopart.cc	/^void ha_innopart::update_create_info(HA_CREATE_INFO *create_info) {$/;"	f	class:ha_innopart
update_current_write_ahead	log/log0write.cc	/^static inline void update_current_write_ahead(log_t &log, uint64_t real_offset,$/;"	f	namespace:Log_files_write_impl
update_file_name	clone/clone0apply.cc	/^int Clone_Snapshot::update_file_name(const char *data_dir,$/;"	f	class:Clone_Snapshot
update_file_size	clone/clone0apply.cc	/^void Clone_Snapshot::update_file_size(uint32_t file_index, uint64_t file_size) {$/;"	f	class:Clone_Snapshot
update_frag_entry	include/lob0impl.h	/^  void update_frag_entry() {$/;"	f	struct:lob::z_frag_page_t
update_gtid_trx_no	clone/clone0repl.cc	/^void Clone_persist_gtid::update_gtid_trx_no(trx_id_t new_gtid_trx_no) {$/;"	f	class:Clone_persist_gtid
update_header	arch/arch0log.cc	/^void Arch_Log_Sys::update_header(byte *header, lsn_t checkpoint_lsn) {$/;"	f	class:Arch_Log_Sys
update_length_in_blobref	lob/zlob0ins.cc	/^void zInserter::update_length_in_blobref(big_rec_field_t &field) {$/;"	f	class:lob::zInserter
update_maximum_space_id	fil/fil0fil.cc	/^  void update_maximum_space_id(space_id_t space_id) {$/;"	f	class:Fil_system
update_n_fields	include/row0upd.h	/^  ulint update_n_fields;$/;"	m	struct:upd_node_t
update_part_elem	handler/ha_innopart.cc	/^void ha_innopart::update_part_elem(partition_element *part_elem,$/;"	f	class:ha_innopart
update_partition	handler/ha_innopart.cc	/^void ha_innopart::update_partition(uint part_id) {$/;"	f	class:ha_innopart
update_row	handler/ha_innodb.cc	/^int ha_innobase::update_row(const uchar *old_row, uchar *new_row) {$/;"	f	class:ha_innobase
update_row_in_part	handler/ha_innopart.cc	/^int ha_innopart::update_row_in_part(uint part_id, const uchar *old_row,$/;"	f	class:ha_innopart
update_set_metadata	dict/dict0dict.cc	/^upd_t *DDTableBuffer::update_set_metadata(const dtuple_t *entry,$/;"	f	class:DDTableBuffer
update_space_name_map	fil/fil0fil.cc	/^void Fil_shard::update_space_name_map(fil_space_t *space,$/;"	f	class:Fil_shard
update_statement_positioned	pars/pars0grm.y	/^update_statement_positioned:$/;"	l
update_statement_searched	pars/pars0grm.y	/^update_statement_searched:$/;"	l
update_statement_start	pars/pars0grm.y	/^update_statement_start:$/;"	l
update_stop_info	arch/arch0page.cc	/^void Arch_Page_Sys::update_stop_info(Arch_Block *cur_blk) {$/;"	f	class:Arch_Page_Sys
update_stop_point	arch/arch0page.cc	/^void Arch_File_Ctx::update_stop_point(uint file_index, lsn_t stop_lsn) {$/;"	f	class:Arch_File_Ctx
update_stop_point	include/arch0arch.h	/^  void update_stop_point(Arch_Page_Pos pos, lsn_t stop_lsn) {$/;"	f	class:Arch_Group
update_table_stats	handler/ha_innopart.cc	/^static int update_table_stats(dict_table_t *table, bool is_analyze) {$/;"	f	file:
update_thd	handler/ha_innodb.cc	/^void ha_innobase::update_thd() {$/;"	f	class:ha_innobase
update_thd	handler/ha_innodb.cc	/^void ha_innobase::update_thd(THD *thd) \/*!< in: thd to use the handle *\/$/;"	f	class:ha_innobase
update_time	include/dict0mem.h	/^  time_t update_time;$/;"	m	struct:dict_table_t
update_tuple	include/ut0lock_free_hash.h	/^  bool update_tuple(key_val_t *t, int64_t val_to_set, bool is_delta) {$/;"	f	class:ut_lock_free_hash_t
update_undo	include/trx0trx.h	/^  trx_undo_t *update_undo; \/*!< pointer to the update undo log, or$/;"	m	struct:trx_undo_ptr_t
update_undo_cached	include/trx0types.h	/^  UT_LIST_BASE_NODE_T(trx_undo_t) update_undo_cached;$/;"	m	struct:trx_rseg_t
update_undo_list	include/trx0types.h	/^  UT_LIST_BASE_NODE_T(trx_undo_t) update_undo_list;$/;"	m	struct:trx_rseg_t
update_work	include/clone0monitor.h	/^  void update_work(uint size) {$/;"	f	class:Clone_Monitor
update_work	include/ut0stage.h	/^  void update_work(uint units) {}$/;"	f	class:ut_stage_alter_ts
update_work	include/ut0stage.h	/^  void update_work(ulint units) {$/;"	f	class:ut_stage_alter_ts
upgrade_space_t	dict/dict0upgrade.cc	/^} upgrade_space_t;$/;"	t	typeref:struct:__anon1	file:
upgrade_space_version	dict/dict0upgrade.cc	/^bool upgrade_space_version(const uint32 space_id, bool server_version_only) {$/;"	f
upgrade_space_version	dict/dict0upgrade.cc	/^bool upgrade_space_version(dd::Tablespace *tablespace) {$/;"	f
upgrade_table	handler/ha_innodb.cc	/^bool ha_innobase::upgrade_table(THD *thd, const char *db_name,$/;"	f	class:ha_innobase
upper_doc_id	fts/fts0que.cc	/^  doc_id_t upper_doc_id; \/*!< Highest doc id in doc_ids *\/$/;"	m	struct:fts_query_t	file:
upper_index	include/fts0types.h	/^  ulint upper_index;    \/*!< max index of the doc id vector to$/;"	m	struct:fts_sync_t
use_count	handler/ha_innodb.h	/^  uint use_count;         \/*!< reference count,$/;"	m	struct:INNOBASE_SHARE
use_next_space_id	trx/trx0purge.cc	/^space_id_t use_next_space_id(space_id_t space_num) {$/;"	f	namespace:undo
use_single_z_stream	include/lob0lob.h	/^  bool use_single_z_stream() const { return (length() <= Z_CHUNK_SIZE); }$/;"	f	struct:lob::ref_t
use_single_z_stream	include/lob0lob.h	/^  static bool use_single_z_stream(ulint len) { return (len <= Z_CHUNK_SIZE); }$/;"	f	struct:lob::ref_t
use_space_id	trx/trx0purge.cc	/^void use_space_id(space_id_t space_id) {$/;"	f	namespace:undo
used	include/buf0buf.h	/^    ulint used;$/;"	m	struct:Cache_hint::buf_buddy_stat_t::snapshot_t
used	include/buf0buf.h	/^  std::atomic<ulint> used;$/;"	m	struct:Cache_hint::buf_buddy_stat_t
used	include/gis0type.h	/^  ulint used;                   \/*!< memory used *\/$/;"	m	struct:matched_rec
used	include/ut0vec.h	/^  ulint used;            \/* number of elements currently used *\/$/;"	m	struct:ib_vector_t
used_in_HANDLER	include/row0mysql.h	/^  unsigned used_in_HANDLER : 1;            \/*!< TRUE if we have been using this$/;"	m	struct:row_prebuilt_t
user_function_call	pars/pars0grm.y	/^user_function_call:$/;"	l
usr0sess_h	include/usr0sess.h	34;"	d
usr0types_h	include/usr0types.h	34;"	d
usr_trx	api/api0api.cc	/^  trx_t *usr_trx; \/*!< User transacton covering the$/;"	m	struct:ib_index_def_t	file:
ut	include/detail/ut0new.h	/^namespace ut {$/;"	n
ut	include/ut0bool_scope_guard.h	/^namespace ut {$/;"	n
ut	include/ut0class_life_cycle.h	/^namespace ut {$/;"	n
ut	include/ut0cpu_cache.h	/^namespace ut {$/;"	n
ut	include/ut0new.h	/^namespace ut {$/;"	n
ut	include/ut0stateful_latching_rules.h	/^namespace ut {$/;"	n
ut	include/ut0ut.h	/^namespace ut {$/;"	n
ut	ut/ut0ut.cc	/^namespace ut {$/;"	n	file:
ut0bitset_h	include/ut0bitset.h	34;"	d
ut0bool_scope_guard_h	include/ut0bool_scope_guard.h	32;"	d
ut0byte_h	include/ut0byte.h	34;"	d
ut0class_life_cycle_h	include/ut0class_life_cycle.h	31;"	d
ut0counter_h	include/ut0counter.h	35;"	d
ut0cpu_cache_h	include/ut0cpu_cache.h	31;"	d
ut0crc32_h	include/ut0crc32.h	34;"	d
ut0dbg_h	include/ut0dbg.h	34;"	d
ut0link_buf_h	include/ut0link_buf.h	45;"	d
ut0lock_free_hash_h	include/ut0lock_free_hash.h	34;"	d
ut0lst_h	include/ut0lst.h	35;"	d
ut0mem_h	include/ut0mem.h	34;"	d
ut0mpmcbq_h	include/ut0mpmcbq.h	27;"	d
ut0mutex_h	include/ut0mutex.h	34;"	d
ut0new_h	include/ut0new.h	127;"	d
ut0pool_h	include/ut0pool.h	34;"	d
ut0rnd_h	include/ut0rnd.h	34;"	d
ut0sort_h	include/ut0sort.h	34;"	d
ut0stage_h	include/ut0stage.h	34;"	d
ut0stateful_latching_rules	include/ut0stateful_latching_rules.h	35;"	d
ut0test_h	include/ut0test.h	119;"	d
ut0tuple_h	include/ut0tuple.h	31;"	d
ut0ut_h	include/ut0ut.h	43;"	d
ut_2_power_up	ut/ut0ut.cc	/^ulint ut_2_power_up(ulint n) \/*!< in: number != 0 *\/$/;"	f
ut_2pow_remainder	include/ut0ut.h	205;"	d
ut_2pow_round	include/ut0ut.h	211;"	d
ut_a	include/ut0dbg.h	54;"	d
ut_a	include/ut0rbt.h	47;"	d
ut_ad	include/ut0dbg.h	66;"	d
ut_ad	include/ut0dbg.h	73;"	d
ut_allocator	include/ut0new.h	/^  explicit ut_allocator(PSI_memory_key key = PSI_NOT_INSTRUMENTED)$/;"	f	class:ut_allocator
ut_allocator	include/ut0new.h	/^  ut_allocator(const ut_allocator<U> &other)$/;"	f	class:ut_allocator
ut_allocator	include/ut0new.h	/^class ut_allocator {$/;"	c
ut_calc_align	include/ut0ut.h	222;"	d
ut_calc_align_down	include/ut0ut.h	216;"	d
ut_chrono_t	include/ut0dbg.h	/^  ut_chrono_t(const char *name) : m_name(name), m_show_from_destructor(true) {$/;"	f	class:ut_chrono_t
ut_chrono_t	include/ut0dbg.h	/^class ut_chrono_t {$/;"	c
ut_copy_file	ut/ut0ut.cc	/^void ut_copy_file(FILE *dest, FILE *src) {$/;"	f
ut_crc32	ut/crc32.cc	/^ut_crc32_func_t ut_crc32;$/;"	v
ut_crc32_64_hw	ut/crc32.cc	/^inline void ut_crc32_64_hw(uint64_t *crc, const byte **data, ulint *len) {$/;"	f
ut_crc32_64_legacy_big_endian_hw	ut/crc32.cc	/^inline void ut_crc32_64_legacy_big_endian_hw(uint64_t *crc, const byte **data,$/;"	f
ut_crc32_64_legacy_big_endian_sw	ut/crc32.cc	/^inline void ut_crc32_64_legacy_big_endian_sw(uint32_t *crc, const byte **data,$/;"	f
ut_crc32_64_low_hw	ut/crc32.cc	/^inline uint64_t ut_crc32_64_low_hw(uint64_t crc, uint64_t data) {$/;"	f
ut_crc32_64_low_sw	ut/crc32.cc	/^inline uint32_t ut_crc32_64_low_sw(uint32_t crc, uint64_t data) {$/;"	f
ut_crc32_64_sw	ut/crc32.cc	/^inline void ut_crc32_64_sw(uint32_t *crc, const byte **data, ulint *len) {$/;"	f
ut_crc32_8_hw	ut/crc32.cc	/^inline void ut_crc32_8_hw(uint64_t *crc, const byte **data, ulint *len) {$/;"	f
ut_crc32_8_sw	ut/crc32.cc	/^inline void ut_crc32_8_sw(uint32_t *crc, const byte **data, ulint *len) {$/;"	f
ut_crc32_byte_by_byte	ut/crc32.cc	/^ut_crc32_func_t ut_crc32_byte_by_byte;$/;"	v
ut_crc32_byte_by_byte_hw	ut/crc32.cc	/^static uint32_t ut_crc32_byte_by_byte_hw(const byte *buf, ulint len) {$/;"	f	file:
ut_crc32_byte_by_byte_sw	ut/crc32.cc	/^static uint32_t ut_crc32_byte_by_byte_sw(const byte *buf, ulint len) {$/;"	f	file:
ut_crc32_check_cpu	ut/crc32.cc	/^static bool ut_crc32_check_cpu() {$/;"	f	file:
ut_crc32_cpu_enabled	ut/crc32.cc	/^bool ut_crc32_cpu_enabled = false;$/;"	v
ut_crc32_func_t	include/ut0crc32.h	/^typedef uint32_t (*ut_crc32_func_t)(const byte *ptr, ulint len);$/;"	t
ut_crc32_hw	ut/crc32.cc	/^static uint32_t ut_crc32_hw(const byte *buf, ulint len) {$/;"	f	file:
ut_crc32_init	ut/crc32.cc	/^void ut_crc32_init() {$/;"	f
ut_crc32_legacy_big_endian	ut/crc32.cc	/^ut_crc32_func_t ut_crc32_legacy_big_endian;$/;"	v
ut_crc32_legacy_big_endian_hw	ut/crc32.cc	/^static uint32_t ut_crc32_legacy_big_endian_hw(const byte *buf, ulint len) {$/;"	f	file:
ut_crc32_legacy_big_endian_sw	ut/crc32.cc	/^static uint32_t ut_crc32_legacy_big_endian_sw(const byte *buf, ulint len) {$/;"	f	file:
ut_crc32_slice8_table	ut/crc32.cc	/^static uint32_t ut_crc32_slice8_table[8][256];$/;"	v	file:
ut_crc32_slice8_table_init	ut/crc32.cc	/^static void ut_crc32_slice8_table_init() {$/;"	f	file:
ut_crc32_slice8_table_initialized	ut/crc32.cc	/^static bool ut_crc32_slice8_table_initialized = false;$/;"	v	file:
ut_crc32_sw	ut/crc32.cc	/^static uint32_t ut_crc32_sw(const byte *buf, ulint len) {$/;"	f	file:
ut_crc32_swap_byteorder	ut/crc32.cc	/^inline uint64_t ut_crc32_swap_byteorder(uint64_t i) {$/;"	f
ut_d	include/ut0dbg.h	68;"	d
ut_d	include/ut0dbg.h	75;"	d
ut_dbg_assertion_failed	ut/ut0dbg.cc	/^[[noreturn]] void ut_dbg_assertion_failed(const char *expr, const char *file,$/;"	f
ut_delay	ut/ut0ut.cc	/^ulint ut_delay(ulint delay) {$/;"	f
ut_delete	include/ut0new.h	/^inline void ut_delete(T *ptr) {$/;"	f
ut_delete_array	include/ut0new.h	/^inline void ut_delete_array(T *ptr) {$/;"	f
ut_difftime	ut/ut0ut.cc	/^double ut_difftime(ib_time_t time2, \/*!< in: time *\/$/;"	f
ut_error	include/ut0dbg.h	62;"	d
ut_error	include/ut0rbt.h	48;"	d
ut_find_prime	ut/ut0rnd.cc	/^ulint ut_find_prime(ulint n) \/*!< in: positive number > 100 *\/$/;"	f
ut_format_byte_value	ut/ut0ut.cc	/^void ut_format_byte_value(uint64_t data_bytes, std::string &data_str) {$/;"	f
ut_format_name	ut/ut0ut.cc	/^char *ut_format_name(const char *name, char *formatted, ulint formatted_size) {$/;"	f
ut_free	include/ut0new.h	1125;"	d
ut_free	include/ut0new.h	1157;"	d
ut_free	include/ut0rbt.h	45;"	d
ut_get_name	ut/ut0ut.cc	/^std::string ut_get_name(const trx_t *trx, const char *name) {$/;"	f
ut_hash_interface_t	include/ut0lock_free_hash.h	/^class ut_hash_interface_t {$/;"	c
ut_is_2pow	include/ut0ut.h	271;"	d
ut_len_without_extension	include/ut0new.h	/^constexpr size_t ut_len_without_extension(const char *file) {$/;"	f
ut_len_without_extension	include/ut0new.h	/^constexpr size_t ut_len_without_extension(const char *file, size_t index = 0) {$/;"	f
ut_list_append	include/ut0lst.h	/^void ut_list_append(List &list, typename List::elem_type *elem) {$/;"	f
ut_list_append	include/ut0lst.h	/^void ut_list_append(List &list, typename List::elem_type *elem,$/;"	f
ut_list_base	include/ut0lst.h	/^struct ut_list_base {$/;"	s
ut_list_exists	include/ut0lst.h	/^bool ut_list_exists(List &list, typename List::elem_type *elem) {$/;"	f
ut_list_insert	include/ut0lst.h	/^void ut_list_insert(List &list, typename List::elem_type *elem1,$/;"	f
ut_list_map	include/ut0lst.h	/^void ut_list_map(const List &list, Functor &functor) {$/;"	f
ut_list_move_to_front	include/ut0lst.h	/^void ut_list_move_to_front(List &list, typename List::elem_type *elem) {$/;"	f
ut_list_node	include/ut0lst.h	/^struct ut_list_node {$/;"	s
ut_list_prepend	include/ut0lst.h	/^void ut_list_prepend(List &list, typename List::elem_type *elem) {$/;"	f
ut_list_remove	include/ut0lst.h	/^void ut_list_remove(List &list, typename List::elem_type *elem) {$/;"	f
ut_list_remove	include/ut0lst.h	/^void ut_list_remove(List &list, typename List::elem_type *elem,$/;"	f
ut_list_remove	include/ut0lst.h	/^void ut_list_remove(List &list, typename List::node_type &node,$/;"	f
ut_list_reverse	include/ut0lst.h	/^void ut_list_reverse(List &list) {$/;"	f
ut_list_validate	include/ut0lst.h	/^void ut_list_validate(const List &list, Functor &functor) {$/;"	f
ut_lock_free_cnt_t	include/ut0lock_free_hash.h	/^  ut_lock_free_cnt_t() {$/;"	f	class:ut_lock_free_cnt_t
ut_lock_free_cnt_t	include/ut0lock_free_hash.h	/^class ut_lock_free_cnt_t {$/;"	c
ut_lock_free_hash_t	include/ut0lock_free_hash.h	/^  explicit ut_lock_free_hash_t(size_t initial_size, bool del_when_zero)$/;"	f	class:ut_lock_free_hash_t
ut_lock_free_hash_t	include/ut0lock_free_hash.h	/^class ut_lock_free_hash_t : public ut_hash_interface_t {$/;"	c
ut_lock_free_list_node_t	include/ut0lock_free_hash.h	/^  explicit ut_lock_free_list_node_t(size_t n_elements)$/;"	f	class:ut_lock_free_list_node_t
ut_lock_free_list_node_t	include/ut0lock_free_hash.h	/^class ut_lock_free_list_node_t {$/;"	c
ut_malloc	include/ut0new.h	1097;"	d
ut_malloc	include/ut0new.h	1145;"	d
ut_malloc	include/ut0rbt.h	44;"	d
ut_malloc_nokey	include/ut0new.h	1105;"	d
ut_malloc_nokey	include/ut0new.h	1149;"	d
ut_max	include/ut0ut.h	167;"	d
ut_min	include/ut0ut.h	168;"	d
ut_new_boot	ut/ut0new.cc	/^void ut_new_boot() {$/;"	f
ut_new_boot_safe	ut/ut0new.cc	/^void ut_new_boot_safe() {$/;"	f
ut_new_get_key_by_base_file	include/ut0new.h	/^constexpr PSI_memory_key ut_new_get_key_by_base_file(const char *file,$/;"	f
ut_new_get_key_by_base_file	include/ut0new.h	/^constexpr int ut_new_get_key_by_base_file(const char *file, size_t len) {$/;"	f
ut_new_get_key_by_file	include/ut0new.h	/^constexpr PSI_memory_key ut_new_get_key_by_file(const char *file) {$/;"	f
ut_new_get_key_by_file	include/ut0new.h	/^constexpr int ut_new_get_key_by_file(const char *file) {$/;"	f
ut_o	include/ut0dbg.h	70;"	d
ut_o	include/ut0dbg.h	77;"	d
ut_print_buf	ut/ut.cc	/^void ut_print_buf(FILE *file,      \/*!< in: file where to print *\/$/;"	f
ut_print_buf	ut/ut.cc	/^void ut_print_buf(std::ostream &o, const void *buf, ulint len) {$/;"	f
ut_print_buf_hex	ut/ut.cc	/^void ut_print_buf_hex(std::ostream &o, const void *buf, ulint len) {$/;"	f
ut_print_name	ut/ut0ut.cc	/^void ut_print_name(FILE *f,          \/*!< in: output stream *\/$/;"	f
ut_print_timestamp	ut/ut.cc	/^void ut_print_timestamp(FILE *file) \/*!< in: file where to print *\/$/;"	f
ut_realloc	include/ut0new.h	1121;"	d
ut_realloc	include/ut0new.h	1155;"	d
ut_rnd_gen_ibool	gis/gis0geo.cc	/^static ibool ut_rnd_gen_ibool(void) {$/;"	f	file:
ut_rnd_ulint_counter	ut/ut0rnd.cc	/^thread_local ulint ut_rnd_ulint_counter = 0;$/;"	v
ut_set_assert_callback	ut/ut0dbg.cc	/^void ut_set_assert_callback(std::function<void()> &callback) {$/;"	f
ut_sprintf_timestamp	ut/ut.cc	/^void ut_sprintf_timestamp(char *buf) \/*!< in: buffer where to sprintf *\/$/;"	f
ut_stage_alter_t	include/ut0stage.h	/^  explicit ut_stage_alter_t(const dict_index_t *pk) {}$/;"	f	class:ut_stage_alter_t
ut_stage_alter_t	include/ut0stage.h	/^  explicit ut_stage_alter_t(const dict_index_t *pk)$/;"	f	class:ut_stage_alter_t
ut_stage_alter_t	include/ut0stage.h	/^class ut_stage_alter_t {$/;"	c
ut_stage_alter_ts	include/ut0stage.h	/^  ut_stage_alter_ts() {}$/;"	f	class:ut_stage_alter_ts
ut_stage_alter_ts	include/ut0stage.h	/^  ut_stage_alter_ts()$/;"	f	class:ut_stage_alter_ts
ut_stage_alter_ts	include/ut0stage.h	/^class ut_stage_alter_ts {$/;"	c
ut_str3cat	ut/ut0mem.cc	/^char *ut_str3cat($/;"	f
ut_strcmp_functor	include/ut0ut.h	/^struct ut_strcmp_functor {$/;"	s
ut_strerr	ut/ut0ut.cc	/^const char *ut_strerr(dberr_t num) {$/;"	f
ut_string_begins_with	include/ut0new.h	/^constexpr bool ut_string_begins_with(const char *a, const char *b, size_t b_len,$/;"	f
ut_string_begins_with	include/ut0new.h	/^constexpr bool ut_string_begins_with(const char *a, const char *b,$/;"	f
ut_strlcpy	ut/ut0mem.cc	/^ulint ut_strlcpy(char *dst,       \/*!< in: destination buffer *\/$/;"	f
ut_strlcpy_rev	ut/ut.cc	/^ulint ut_strlcpy_rev(char *dst,       \/*!< in: destination buffer *\/$/;"	f
ut_time	ut/ut0ut.cc	/^ib_time_t ut_time(void) { return (time(nullptr)); }$/;"	f
ut_time_monotonic	ut/ut0ut.cc	/^ib_time_monotonic_t ut_time_monotonic(void) {$/;"	f
ut_time_monotonic_ms	ut/ut0ut.cc	/^ib_time_monotonic_ms_t ut_time_monotonic_ms(void) {$/;"	f
ut_time_monotonic_us	ut/ut0ut.cc	/^ib_time_monotonic_us_t ut_time_monotonic_us(void) {$/;"	f
ut_ut_h	ut/ut.h	38;"	d
ut_vsnprintf	include/ut0ut.h	361;"	d
ut_vsnprintf	ut/ut0ut.cc	/^void ut_vsnprintf(char *str,       \/*!< out: string *\/$/;"	f
ut_zalloc	include/ut0new.h	1101;"	d
ut_zalloc	include/ut0new.h	1147;"	d
ut_zalloc_nokey	include/ut0new.h	1110;"	d
ut_zalloc_nokey	include/ut0new.h	1151;"	d
ut_zalloc_nokey_nofatal	include/ut0new.h	1115;"	d
ut_zalloc_nokey_nofatal	include/ut0new.h	1153;"	d
utime_abs	include/srv0srv.h	/^  double utime_abs;$/;"	m	struct:Srv_cpu_usage
utime_pct	include/srv0srv.h	/^  double utime_pct;$/;"	m	struct:Srv_cpu_usage
v_col	include/dict0mem.h	/^  const dict_v_col_t *v_col;$/;"	m	struct:dict_add_v_col_t
v_col_def	include/dict0crea.h	/^  ins_node_t *v_col_def; \/*!< child node which does the inserts$/;"	m	struct:tab_node_t
v_col_name	include/dict0mem.h	/^  const char **v_col_name;$/;"	m	struct:dict_add_v_col_t
v_col_names	include/dict0mem.h	/^  const char *v_col_names;$/;"	m	struct:dict_table_t
v_cols	include/dict0mem.h	/^  dict_v_col_t *v_cols;$/;"	m	struct:dict_table_t
v_cols	include/dict0mem.h	/^  dict_vcol_set *v_cols; \/*!< set of virtual columns affected$/;"	m	struct:dict_foreign_t
v_fields	include/data0data.h	/^  dfield_t *v_fields;$/;"	m	struct:dtuple_t
v_indexes	include/dict0mem.h	/^  dict_v_idx_list *v_indexes;$/;"	m	struct:dict_v_col_t
v_pos	include/dict0mem.h	/^  ulint v_pos;$/;"	m	struct:dict_v_col_t
val	include/pars0pars.h	/^  que_node_t *val;     \/*!< value to assign *\/$/;"	m	struct:assign_node_t
val	include/pars0pars.h	/^  que_node_t *val;     \/*!< value to assign *\/$/;"	m	struct:col_assign_node_t
val	include/que0types.h	/^  dfield_t val;        \/*!< evaluated value for an expression *\/$/;"	m	struct:que_common_t
val_buf_size	include/que0types.h	/^  ulint val_buf_size;$/;"	m	struct:que_common_t
val_buf_size	include/row0sel.h	/^  ulint val_buf_size;$/;"	m	struct:sel_buf_t
valid	include/gis0type.h	/^  bool valid;                   \/*!< whether result in matched_recs$/;"	m	struct:matched_rec
valid_trx	api/api0api.cc	/^  bool valid_trx; \/*!< Valid transaction attached *\/$/;"	m	struct:ib_cursor_t	file:
validate	arch/arch0page.cc	/^bool Arch_Block::validate(byte *block) {$/;"	f	class:Arch_Block
validate	arch/arch0page.cc	/^bool Arch_File_Ctx::validate(Arch_Group *group, uint file_index,$/;"	f	class:Arch_File_Ctx
validate	fil/fil0fil.cc	/^bool Fil_system::validate() const {$/;"	f	class:Fil_system
validate	fil/fil0fil.cc	/^void Fil_shard::validate() const {$/;"	f	class:Fil_shard
validate	handler/ha_innodb.cc	/^bool Compression::validate(const Compression::Type type) {$/;"	f	class:Compression
validate	handler/ha_innodb.cc	/^dberr_t Compression::validate(const char *algorithm) {$/;"	f	class:Compression
validate	handler/ha_innodb.cc	/^dberr_t Validate_files::validate(const DD_tablespaces &tablespaces) {$/;"	f	class:Validate_files
validate	include/buf0buf.h	/^  static void validate(const buf_pool_t *buf_pool) {$/;"	f	struct:Cache_hint::CheckInFreeList
validate	include/buf0buf.h	/^  static void validate(const buf_pool_t *buf_pool) {$/;"	f	struct:Cache_hint::CheckInLRUList
validate	include/buf0buf.h	/^  static void validate(const buf_pool_t *buf_pool) {$/;"	f	struct:Cache_hint::CheckUnzipLRUAndLRUList
validate	include/lob0lob.h	/^  bool validate() const {$/;"	f	class:lob::BtrContext
validate	include/lob0lob.h	/^  bool validate(mtr_t *mtr) {$/;"	f	struct:lob::ref_t
validate	include/row0upd.h	/^  bool validate() const {$/;"	f	struct:upd_t
validate	include/zlob0first.h	/^  bool validate() {$/;"	f	struct:lob::z_first_page_t
validate	lob/lob0first.cc	/^bool first_page_t::validate() const {$/;"	f	class:lob::first_page_t
validate	lob/lob0impl.cc	/^bool plist_base_node_t::validate() const {$/;"	f	class:lob::plist_base_node_t
validate	read/read0read.cc	/^bool MVCC::validate() const {$/;"	f	class:MVCC
validate_autoextend_size_value	handler/ha_innodb.h	/^int validate_autoextend_size_value(uint64_t ext_size) {$/;"	f
validate_blob_page_type	include/lob0del.h	/^  bool validate_blob_page_type(const page_t *page) const {$/;"	f	class:lob::Deleter
validate_blobref	include/lob0lob.h	/^  bool validate_blobref() const {$/;"	f	struct:lob::DeleteContext
validate_blobrefs	include/lob0zip.h	/^  bool validate_blobrefs() const {$/;"	f	class:lob::zInserter
validate_buffer	log/log0write.cc	/^static inline void validate_buffer(const log_t &log, const byte *buffer,$/;"	f	namespace:Log_files_write_impl
validate_create_tablespace_info	handler/ha_innodb.cc	/^static int validate_create_tablespace_info(ib_file_suffix type, THD *thd,$/;"	f	file:
validate_curr_size	trx/trx0rseg.cc	/^bool trx_rseg_t::validate_curr_size(bool take_mutex) {$/;"	f	class:trx_rseg_t
validate_first_page	fsp/fsp0file.cc	/^dberr_t Datafile::validate_first_page(space_id_t space_id, lsn_t *flush_lsn,$/;"	f	class:Datafile
validate_for_recovery	fsp/fsp0file.cc	/^dberr_t Datafile::validate_for_recovery(space_id_t space_id) {$/;"	f	class:Datafile
validate_info_in_files	arch/arch0page.cc	/^bool Arch_Group::validate_info_in_files() {$/;"	f	class:Arch_Group
validate_innodb_redo_log_encrypt	handler/ha_innodb.cc	/^static int validate_innodb_redo_log_encrypt(THD *thd, SYS_VAR *var, void *save,$/;"	f	file:
validate_innodb_undo_log_encrypt	handler/ha_innodb.cc	/^static int validate_innodb_undo_log_encrypt(THD *thd, SYS_VAR *var, void *save,$/;"	f	file:
validate_lists	include/lob0impl.h	/^  bool validate_lists() const {$/;"	f	struct:lob::z_frag_page_t
validate_low	lob/zlob0first.cc	/^bool z_first_page_t::validate_low() {$/;"	f	class:lob::z_first_page_t
validate_no_links	include/ut0link_buf.h	/^void Link_buf<Position>::validate_no_links() {$/;"	f	class:Link_buf
validate_no_links	include/ut0link_buf.h	/^void Link_buf<Position>::validate_no_links(Position begin, Position end) {$/;"	f	class:Link_buf
validate_page_type	include/lob0del.h	/^  bool validate_page_type(const page_t *page) const {$/;"	f	class:lob::Deleter
validate_pcur	row/row0purge.cc	/^bool purge_node_t::validate_pcur() {$/;"	f	class:purge_node_t
validate_reset_block_in_file	arch/arch0page.cc	/^bool Arch_File_Ctx::validate_reset_block_in_file(pfs_os_file_t file,$/;"	f	class:Arch_File_Ctx
validate_size	lob/lob0update.cc	/^bool validate_size(const ulint lob_size, dict_index_t *index,$/;"	f	namespace:lob
validate_space_reference_count	fil/fil0fil.cc	/^void Fil_shard::validate_space_reference_count($/;"	f	class:Fil_shard
validate_start_lsn	log/log0write.cc	/^static inline void validate_start_lsn(const log_t &log, lsn_t start_lsn,$/;"	f	namespace:Log_files_write_impl
validate_stop_point_in_file	arch/arch0page.cc	/^bool Arch_File_Ctx::validate_stop_point_in_file(Arch_Group *group,$/;"	f	class:Arch_File_Ctx
validate_tablespace_encryption	fsp/fsp0fsp.cc	/^static void validate_tablespace_encryption(fil_space_t *space) {$/;"	f	file:
validate_tablespace_name	handler/ha_innodb.cc	/^static int validate_tablespace_name(ts_command_type ts_command,$/;"	f	file:
validate_to_dd	fsp/fsp0file.cc	/^dberr_t Datafile::validate_to_dd(space_id_t space_id, uint32_t flags,$/;"	f	class:Datafile
validate_zblob_page_type	include/lob0del.h	/^  bool validate_zblob_page_type(const page_t *page) const {$/;"	f	class:lob::Deleter
value	include/dict0mem.h	/^  byte *value;$/;"	m	struct:dict_col_default_t
value	include/fts0types.h	/^  ulint value; \/*!< Character value at which$/;"	m	struct:fts_index_selector_t
value	include/log0meb.h	/^                                   void *save, st_mysql_value *value);$/;"	m	namespace:meb
value	include/log0test.h	/^    Value value;$/;"	m	struct:Log_test::Page
value	include/ut0new.h	/^  static constexpr int value = Value;$/;"	m	struct:force_constexpr
value	include/ut0rbt.h	/^  char value[1]; \/* Data value *\/$/;"	m	struct:ib_rbt_node_t
value	log/log0meb.cc	/^                                   void *save, struct st_mysql_value *value) {$/;"	s	namespace:meb	file:
value_type	include/mem0mem.h	/^  typedef T value_type;$/;"	t	class:mem_heap_allocator
value_type	include/read0types.h	/^    typedef trx_ids_t::value_type value_type;$/;"	t	class:ReadView::ids_t
value_type	include/ut0new.h	/^  typedef T value_type;$/;"	t	class:ut_allocator
value_type	include/ut0pool.h	/^  typedef Type value_type;$/;"	t	struct:Pool
value_type	include/ut0pool.h	/^  typedef typename PoolType::value_type value_type;$/;"	t	struct:PoolManager
values_list	include/row0ins.h	/^  que_node_t *values_list; \/* list of expressions to evaluate and$/;"	m	struct:ins_node_t
var	include/pars0pars.h	/^  sym_node_t *var;     \/*!< variable to set *\/$/;"	m	struct:assign_node_t
variable_declaration	pars/pars0grm.y	/^variable_declaration:$/;"	l
variable_declaration_list	pars/pars0grm.y	/^variable_declaration_list:$/;"	l
variable_list	pars/pars0grm.y	/^variable_list:$/;"	l
vc_templ	include/dict0mem.h	/^  dict_vcol_templ_t *vc_templ;$/;"	m	struct:dict_table_t
verbosity	log/log0test.cc	/^int Log_test::verbosity() const { return (m_verbosity); }$/;"	f	class:Log_test
verify_fmt_match	include/ut0ut.h	/^static bool verify_fmt_match(const char *fmt, Head &&head, Tail &&... tail) {$/;"	f	namespace:ib
verify_fmt_match	include/ut0ut.h	/^static inline bool verify_fmt_match(const char *fmt) {$/;"	f	namespace:ib
verify_frag_page_no	lob/zlob0first.cc	/^bool z_first_page_t::verify_frag_page_no() {$/;"	f	class:lob::z_first_page_t
verify_no_server_directory	log/log0meb.cc	/^static bool verify_no_server_directory(const Fil_path &path) {$/;"	f	namespace:meb
verify_no_world_permissions	log/log0meb.cc	/^static bool verify_no_world_permissions(const Fil_path &path) {$/;"	f	namespace:meb
verify_not_full_n_used	fsp/fsp0fsp.cc	/^bool File_segment_inode::verify_not_full_n_used() {$/;"	f	class:File_segment_inode
verify_redo_log_archive_privilege	log/log0meb.cc	/^static bool verify_redo_log_archive_privilege(THD *thd) {$/;"	f	namespace:meb
verify_zip_checksum	buf/checksum.cc	/^bool BlockReporter::verify_zip_checksum() const {$/;"	f	class:BlockReporter
version	include/dict0mem.h	/^  uint64_t version;$/;"	m	struct:dict_table_t
version	include/lob0lob.h	/^  uint32_t version() const {$/;"	f	struct:lob::ref_t
version	include/trx0trx.h	/^  ulint version;$/;"	m	struct:trx_t
view	include/trx0purge.h	/^  ReadView view;$/;"	m	struct:trx_purge_t
view_active	include/trx0purge.h	/^  bool view_active;$/;"	m	struct:trx_purge_t
view_close	read/read0read.cc	/^void MVCC::view_close(ReadView *&view, bool own_mutex) {$/;"	f	class:MVCC
view_list_t	include/read0read.h	/^  typedef UT_LIST_BASE_NODE_T(ReadView) view_list_t;$/;"	t	class:MVCC
view_low_limit_no	include/read0types.h	/^  trx_id_t view_low_limit_no() const { return (m_view_low_limit_no); }$/;"	f	class:ReadView
view_open	read/read0read.cc	/^void MVCC::view_open(ReadView *&view, trx_t *trx) {$/;"	f	class:MVCC
view_release	read/read0read.cc	/^void MVCC::view_release(ReadView *&view) {$/;"	f	class:MVCC
visited	include/fts0ast.h	/^  bool visited;               \/*!< whether this node is$/;"	m	struct:fts_ast_node_t
vtempl	include/dict0mem.h	/^  mysql_row_templ_t **vtempl;$/;"	m	struct:dict_vcol_templ_t
wait	include/clone0clone.h	/^  static int wait(Clone_Msec sleep_time, Clone_Sec timeout,$/;"	f	class:Clone_Sys
wait	include/trx0trx.h	/^  static void wait(const trx_t *trx) {$/;"	f	class:TrxInInnoDB
wait	log/log0write.cc	/^  inline Wait_stats wait(Stop_condition stop_condition) {$/;"	f	struct:Log_thread_waiting
wait	os/os0thread.cc	/^void IB_thread::wait(State state_to_wait_for) {$/;"	f	class:IB_thread
wait_ack	clone/clone0clone.cc	/^int Clone_Task_Manager::wait_ack(Clone_Handle *clone, Clone_Task *task,$/;"	f	class:Clone_Task_Manager
wait_archive_complete	arch/arch0log.cc	/^int Arch_Log_Sys::wait_archive_complete(lsn_t target_lsn) {$/;"	f	class:Arch_Log_Sys
wait_before_add	clone/clone0clone.cc	/^bool Clone_Task_Manager::wait_before_add(const byte *ref_loc, uint loc_len) {$/;"	f	class:Clone_Task_Manager
wait_default	include/clone0clone.h	/^  static int wait_default(Wait_Cond_Cbk_Func &&func, ib_mutex_t *mutex,$/;"	f	class:Clone_Sys
wait_ex_event	include/sync0rw.h	/^  os_event_t wait_ex_event;$/;"	m	struct:rw_lock_t
wait_flush	clone/clone0repl.cc	/^void Clone_persist_gtid::wait_flush(bool compress_gtid, bool early_timeout,$/;"	f	class:Clone_persist_gtid
wait_flush_archiver	arch/arch0page.cc	/^bool wait_flush_archiver(Page_Wait_Flush_Archiver_Cbk cbk_func) {$/;"	f
wait_for_binlog_prepared_trx	clone/clone0copy.cc	/^int Clone_Snapshot::wait_for_binlog_prepared_trx() {$/;"	f	class:Clone_Snapshot
wait_for_end_of_buffering	row/row0pread-histogram.cc	/^void Histogram_sampler::wait_for_end_of_buffering() {$/;"	f	class:Histogram_sampler
wait_for_flush	mtr/mtr0mtr.cc	/^void mtr_t::wait_for_flush() {$/;"	f	class:mtr_t
wait_for_free	clone/clone0clone.cc	/^int Clone_Sys::wait_for_free(THD *thd) {$/;"	f	class:Clone_Sys
wait_for_io_to_stop	fil/fil0fil.cc	/^void Fil_shard::wait_for_io_to_stop(const fil_space_t *space) {$/;"	f	class:Fil_shard
wait_for_pending_operations	fil/fil0fil.cc	/^dberr_t Fil_shard::wait_for_pending_operations(space_id_t space_id,$/;"	f	class:Fil_shard
wait_for_reset_info_flush	arch/arch0page.cc	/^bool Arch_Page_Sys::wait_for_reset_info_flush(uint64_t request_blk) {$/;"	f	class:Arch_Page_Sys
wait_for_start_of_buffering	row/row0pread-histogram.cc	/^void Histogram_sampler::wait_for_start_of_buffering() {$/;"	f	class:Histogram_sampler
wait_idle	arch/arch0log.cc	/^bool Arch_Log_Sys::wait_idle() {$/;"	f	class:Arch_Log_Sys
wait_idle	arch/arch0page.cc	/^bool Arch_Page_Sys::wait_idle() {$/;"	f	class:Arch_Page_Sys
wait_lock	include/trx0trx.h	/^  std::atomic<lock_t *> wait_lock;$/;"	m	struct:trx_lock_t
wait_lock_get_heap_no	trx/trx0i_s.cc	/^static ulint wait_lock_get_heap_no(const lock_t *lock) \/*!< in: lock *\/$/;"	f	file:
wait_lock_type	include/trx0trx.h	/^  uint32_t wait_lock_type;$/;"	m	struct:trx_lock_t
wait_loops	include/ut0ut.h	/^  uint64_t wait_loops;$/;"	m	struct:Wait_stats
wait_mutex	include/lock0lock.h	/^  Lock_mutex wait_mutex;$/;"	m	struct:lock_sys_t
wait_no_log_mtr	mtr/mtr0mtr.cc	/^int mtr_t::Logging::wait_no_log_mtr(THD *thd) {$/;"	f	class:mtr_t::Logging
wait_started	include/trx0trx.h	/^  time_t wait_started;$/;"	m	struct:trx_lock_t
wait_thr	include/trx0trx.h	/^  que_thr_t *wait_thr;$/;"	m	struct:trx_lock_t
wait_thread	clone/clone0repl.cc	/^bool Clone_persist_gtid::wait_thread(bool start, bool wait_flush,$/;"	f	class:Clone_persist_gtid
wait_timeout	include/srv0srv.h	/^  ulong wait_timeout;$/;"	m	struct:srv_slot_t
wait_trx_end	clone/clone0copy.cc	/^int Clone_Snapshot::wait_trx_end(THD *thd, trx_id_t trx_id) {$/;"	f	class:Clone_Snapshot
wait_until_no_pending_writes	os/os0file.cc	/^  static void wait_until_no_pending_writes() {$/;"	f	class:AIO
waiters	include/sync0rw.h	/^  std::atomic<bool> waiters;$/;"	m	struct:rw_lock_t
waiting	include/sync0arr_impl.h	/^  bool waiting = false;        \/*!< TRUE if the thread has already$/;"	m	struct:sync_cell_t
waiting_threads	include/lock0lock.h	/^  srv_slot_t *waiting_threads;$/;"	m	struct:lock_sys_t
waiting_trx_info_t	lock/lock0wait.cc	/^struct waiting_trx_info_t {$/;"	s	file:
waits_for	lock/lock0wait.cc	/^  trx_t *waits_for;$/;"	m	struct:waiting_trx_info_t	file:
wake_at_shutdown	os/os0file.cc	/^  static void wake_at_shutdown() {$/;"	f	class:AIO
wake_simulated_handler_thread	os/os0file.cc	/^void AIO::wake_simulated_handler_thread(ulint global_segment) {$/;"	f	class:AIO
wake_simulated_handler_thread	os/os0file.cc	/^void AIO::wake_simulated_handler_thread(ulint global_segment, ulint segment) {$/;"	f	class:AIO
walk	include/os0file.h	/^  static void walk(const Path &basedir, bool recursive, F &&f) {$/;"	f	class:AIO_mode::Dir_Walker
walk_posix	os/os0file.cc	/^void Dir_Walker::walk_posix(const Path &basedir, bool recursive, Function &&f) {$/;"	f	class:Dir_Walker
walk_win32	os/os0file.cc	/^void Dir_Walker::walk_win32(const Path &basedir, bool recursive, Function &&f) {$/;"	f	class:Dir_Walker
warn	include/ut0ut.h	/^  explicit warn(int err, Args &&... args)$/;"	f	class:ib::warn
warn	include/ut0ut.h	/^  warn() : logger(WARNING_LEVEL) {}$/;"	f	class:ib::warn
warn	include/ut0ut.h	/^class warn : public logger {$/;"	c	namespace:ib
warn_ignore	fil/fil0fil.cc	/^void Tablespace_dirs::warn_ignore(std::string ignore_path, const char *reason) {$/;"	f	class:Tablespace_dirs
was_chosen_as_deadlock_victim	include/trx0trx.h	/^  bool was_chosen_as_deadlock_victim;$/;"	m	struct:trx_lock_t
was_io_fix_none	include/buf0buf.h	/^  bool was_io_fix_none() const { return get_io_fix_snapshot() == BUF_IO_NONE; }$/;"	f	class:Cache_hint::buf_page_t
was_io_fix_read	include/buf0buf.h	/^  bool was_io_fix_read() const { return get_io_fix_snapshot() == BUF_IO_READ; }$/;"	f	class:Cache_hint::buf_page_t
was_io_fixed	include/buf0buf.h	/^  bool was_io_fixed() const { return get_io_fix_snapshot() != BUF_IO_NONE; }$/;"	f	class:Cache_hint::buf_page_t
was_not_deleted	fil/fil0fil.cc	/^bool fil_space_t::was_not_deleted() const {$/;"	f	class:fil_space_t
was_semi_consistent_read	handler/ha_innodb.cc	/^bool ha_innobase::was_semi_consistent_read(void) {$/;"	f	class:ha_innobase
was_semi_consistent_read	handler/ha_innopart.cc	/^bool ha_innopart::was_semi_consistent_read() {$/;"	f	class:ha_innopart
was_stale	include/buf0buf.h	/^  inline bool was_stale() const {$/;"	f	class:Cache_hint::buf_page_t
watch	include/buf0buf.h	/^  buf_page_t *watch;$/;"	m	struct:Cache_hint::buf_pool_t
weight	include/fts0tokenize.h	/^  double weight; \/*!< word weight, unused in innodb *\/$/;"	m	struct:FT_WORD
while_node_t	include/pars0pars.h	/^struct while_node_t {$/;"	s
while_statement	pars/pars0grm.y	/^while_statement:$/;"	l
while_step	eval/eval0proc.cc	/^que_thr_t *while_step(que_thr_t *thr) \/*!< in: query thread *\/$/;"	f
wildcard	include/fts0ast.h	/^  ibool wildcard;        \/*!< TRUE if wild card set.*\/$/;"	m	struct:fts_ast_term_t
wildcard_words	fts/fts0que.cc	/^  ib_rbt_t *wildcard_words; \/*!< words with wildcard *\/$/;"	m	struct:fts_query_t	file:
will_lock	include/trx0trx.h	/^  ib_uint32_t will_lock; \/*!< Will acquire some locks. Increment$/;"	m	struct:trx_t
withdraw	include/buf0buf.h	/^  UT_LIST_BASE_NODE_T(buf_page_t) withdraw;$/;"	m	struct:Cache_hint::buf_pool_t
withdraw_target	include/buf0buf.h	/^  ulint withdraw_target;$/;"	m	struct:Cache_hint::buf_pool_t
word	fts/fts0opt.cc	/^  fts_string_t word; \/*!< UTF-8 string *\/$/;"	m	struct:fts_zip_t	file:
word	fts/fts0que.cc	/^  fts_string_t word; \/*!< Word for which we need the freq,$/;"	m	struct:fts_word_freq_t	file:
word_count	include/fts0types.h	/^  ulint word_count; \/*!< Total words in the document *\/$/;"	m	struct:fts_doc_stats_t
word_freq	fts/fts0que.cc	/^  fts_word_freq_t *word_freq; \/*!< Word frequency instance of the$/;"	m	struct:fts_select_t	file:
word_freqs	fts/fts0que.cc	/^  ib_rbt_t *word_freqs; \/*!< RB tree of word frequencies per$/;"	m	struct:fts_query_t	file:
word_map	fts/fts0que.cc	/^  ib_rbt_t *word_map; \/*!< Matched word map for$/;"	m	struct:fts_query_t	file:
word_vector	fts/fts0que.cc	/^  word_vector_t *word_vector; \/*!< Matched word vector for$/;"	m	struct:fts_query_t	file:
word_vector_t	fts/fts0que.cc	/^typedef std::vector<fts_string_t, ut_allocator<fts_string_t>> word_vector_t;$/;"	t	file:
words	fts/fts0opt.cc	/^  ib_vector_t *words; \/*!< Word + Nodes read from FTS_INDEX,$/;"	m	struct:fts_optimize_t	file:
words	include/fts0fts.h	/^  byte *words;     \/*!< this contains the words$/;"	m	struct:fts_ranking_t
words	include/fts0types.h	/^  ib_rbt_t *words; \/*!< Nodes; indexed by fts_string_t*,$/;"	m	struct:fts_index_cache_t
words_len	include/fts0fts.h	/^  ulint words_len; \/*!< words len *\/$/;"	m	struct:fts_ranking_t
worker	row/row0pread.cc	/^void Parallel_reader::worker(Parallel_reader::Thread_ctx *thread_ctx) {$/;"	f	class:Parallel_reader
write	arch/arch0arch.cc	/^dberr_t Arch_File_Ctx::write(Arch_File_Ctx *from_file, byte *from_buffer,$/;"	f	class:Arch_File_Ctx
write	arch/arch0page.cc	/^dberr_t Arch_File_Ctx::write(Arch_File_Ctx *from_file, byte *from_buffer,$/;"	f	class:Arch_File_Ctx
write	dict/dict0dict.cc	/^size_t Persisters::write(PersistentTableMetadata &metadata, byte *buffer) {$/;"	f	class:Persisters
write	dict/dict0dict.cc	/^ulint AutoIncPersister::write(const PersistentTableMetadata &metadata,$/;"	f	class:AutoIncPersister
write	dict/dict0dict.cc	/^ulint CorruptedIndexPersister::write(const PersistentTableMetadata &metadata,$/;"	f	class:CorruptedIndexPersister
write	include/ut0ut.h	/^  std::ostream &write(const byte *buf, std::streamsize count) {$/;"	f	class:ib::logger
write	include/ut0ut.h	/^  std::ostream &write(const char *buf, std::streamsize count) {$/;"	f	class:ib::logger
write	lob/lob0first.cc	/^ulint first_page_t::write(trx_id_t trxid, const byte *&data, ulint &len) {$/;"	f	class:lob::first_page_t
write	lob/lob0ins.cc	/^dberr_t Inserter::write() {$/;"	f	class:lob::Inserter
write	lob/lob0pages.cc	/^ulint data_page_t::write(trx_id_t trxid, const byte *&data, ulint &len) {$/;"	f	class:lob::data_page_t
write	lob/zlob0ins.cc	/^dberr_t zInserter::write() {$/;"	f	class:lob::zInserter
write	os/os0file.cc	/^  void write(Slot *slot) {$/;"	f	class:SimulatedAIOHandler	file:
write_ahead_enough	log/log0write.cc	/^static inline bool write_ahead_enough(uint64_t write_ahead_end, uint64_t offset,$/;"	f	namespace:Log_files_write_impl
write_alter_encrypt_space_log	log/log0ddl.cc	/^dberr_t Log_DDL::write_alter_encrypt_space_log(space_id_t space_id,$/;"	f	class:Log_DDL
write_binlog_position	trx/trx0sys.cc	/^static void write_binlog_position(const char *file_name, uint64_t offset,$/;"	f	file:
write_blocks	log/log0write.cc	/^static inline void write_blocks(log_t &log, byte *write_buf, size_t write_size,$/;"	f	namespace:Log_files_write_impl
write_completed	fil/fil0fil.cc	/^void Fil_shard::write_completed(fil_node_t *file) {$/;"	f	class:Fil_shard
write_delete_space_log	log/log0ddl.cc	/^dberr_t Log_DDL::write_delete_space_log(trx_t *trx, const dict_table_t *table,$/;"	f	class:Log_DDL
write_drop_log	log/log0ddl.cc	/^dberr_t Log_DDL::write_drop_log(trx_t *trx, const table_id_t table_id) {$/;"	f	class:Log_DDL
write_file_header	arch/arch0page.cc	/^dberr_t Arch_Group::write_file_header(byte *from_buffer, uint length) {$/;"	f	class:Arch_Group
write_first_page	lob/lob0ins.cc	/^dberr_t Inserter::write_first_page(size_t blob_j, big_rec_field_t &field) {$/;"	f	class:lob::Inserter
write_first_page	lob/zlob0ins.cc	/^int zInserter::write_first_page(size_t blob_j, big_rec_field_t &field) {$/;"	f	class:lob::zInserter
write_free_tree_log	log/log0ddl.cc	/^dberr_t Log_DDL::write_free_tree_log(trx_t *trx, const dict_index_t *index,$/;"	f	class:Log_DDL
write_into_single_page	lob/lob0ins.cc	/^void Inserter::write_into_single_page(big_rec_field_t &field) {$/;"	f	class:lob::Inserter
write_into_single_page	lob/zlob0ins.cc	/^int zInserter::write_into_single_page() {$/;"	f	class:lob::zInserter
write_log	dict/dict0dict.cc	/^void Persister::write_log(table_id_t id,$/;"	f	class:Persister
write_nodes_graph	fts/fts0opt.cc	/^  que_t *write_nodes_graph;$/;"	m	struct:fts_optimize_graph_t	file:
write_not_full_n_used	fsp/fsp0fsp.cc	/^void File_segment_inode::write_not_full_n_used(uint32_t n_used) {$/;"	f	class:File_segment_inode
write_one_blob	lob/lob0ins.cc	/^dberr_t Inserter::write_one_blob(size_t blob_j) {$/;"	f	class:lob::Inserter
write_one_blob	lob/zlob0ins.cc	/^dberr_t zInserter::write_one_blob(size_t blob_j) {$/;"	f	class:lob::zInserter
write_one_small_blob	lob/lob0ins.cc	/^dberr_t Inserter::write_one_small_blob(size_t blob_j) {$/;"	f	class:lob::Inserter
write_one_small_blob	lob/zlob0ins.cc	/^dberr_t zInserter::write_one_small_blob(size_t blob_j) {$/;"	f	class:lob::zInserter
write_other_gtids	clone/clone0repl.cc	/^int Clone_persist_gtid::write_other_gtids() {$/;"	f	class:Clone_persist_gtid
write_remove_cache_log	log/log0ddl.cc	/^dberr_t Log_DDL::write_remove_cache_log(trx_t *trx, dict_table_t *table) {$/;"	f	class:Log_DDL
write_rename_space_log	log/log0ddl.cc	/^dberr_t Log_DDL::write_rename_space_log(space_id_t space_id,$/;"	f	class:Log_DDL
write_rename_table_log	log/log0ddl.cc	/^dberr_t Log_DDL::write_rename_table_log(dict_table_t *table,$/;"	f	class:Log_DDL
write_row	handler/ha_innodb.cc	/^int ha_innobase::write_row(uchar *record) \/*!< in: a row in MySQL format *\/$/;"	f	class:ha_innobase
write_row_in_new_part	handler/handler0alter.cc	/^int ha_innopart::write_row_in_new_part(uint new_part) {$/;"	f	class:ha_innopart
write_row_in_part	handler/ha_innopart.cc	/^int ha_innopart::write_row_in_part(uint part_id, uchar *record) {$/;"	f	class:ha_innopart
write_single_blob_page	lob/lob0ins.cc	/^dberr_t Inserter::write_single_blob_page(size_t blob_j, big_rec_field_t &field,$/;"	f	class:lob::Inserter
write_single_blob_page	lob/zlob0ins.cc	/^int zInserter::write_single_blob_page(size_t blob_j, big_rec_field_t &field,$/;"	f	class:lob::zInserter
write_to_doublewrite_file	arch/arch0page.cc	/^dberr_t Arch_Group::write_to_doublewrite_file(Arch_File_Ctx *from_file,$/;"	f	class:Arch_Group
write_to_file	arch/arch0arch.cc	/^dberr_t Arch_Group::write_to_file(Arch_File_Ctx *from_file, byte *from_buffer,$/;"	f	class:Arch_Group
write_to_table	clone/clone0repl.cc	/^int Clone_persist_gtid::write_to_table(uint64_t flush_list_number,$/;"	f	class:Clone_persist_gtid
writer_is_wait_ex	include/sync0rw.h	/^  bool writer_is_wait_ex;$/;"	m	struct:rw_lock_t
writer_mutex	include/log0recv.h	/^  ib_mutex_t writer_mutex;$/;"	m	struct:recv_sys_t
writer_thread	include/sync0rw.h	/^  std::atomic<std::thread::id> writer_thread;$/;"	m	struct:rw_lock_t
x_latch_rec_page	lob/lob0del.cc	/^void Deleter::x_latch_rec_page() {$/;"	f	class:lob::Deleter
x_latch_rec_page	lob/lob0lob.cc	/^void DeleteContext::x_latch_rec_page(mtr_t *mtr) {$/;"	f	class:lob::DeleteContext
x_lock	include/lock0latches.h	/^    void x_lock(ut::Location location) { rw_lock.x_lock(location); }$/;"	f	class:locksys::Latches::Unique_sharded_rw_lock
x_lock	include/sync0sharded_rw.h	/^  void x_lock() {}$/;"	f	class:Sharded_rw_lock
x_lock	include/sync0sharded_rw.h	/^  void x_lock(ut::Location location) {$/;"	f	class:Sharded_rw_lock
x_lock	include/trx0purge.h	/^  void x_lock() { rw_lock_x_lock(m_latch); }$/;"	f	class:undo::Tablespaces
x_lock	include/trx0types.h	/^  void x_lock() { rw_lock_x_lock(m_latch); }$/;"	f	class:Rsegs
x_lock_space	mtr/mtr0mtr.cc	/^void mtr_t::x_lock_space(fil_space_t *space, const char *file, ulint line) {$/;"	f	class:mtr_t
x_own	include/lock0latches.h	/^    bool x_own() const { return rw_lock.x_own(); }$/;"	f	class:locksys::Latches::Unique_sharded_rw_lock
x_own	include/sync0sharded_rw.h	/^  bool x_own() const { return rw_lock_own(&m_shards[0], RW_LOCK_X); }$/;"	f	class:Sharded_rw_lock
x_unlock	include/lock0latches.h	/^    void x_unlock() { rw_lock.x_unlock(); }$/;"	f	class:locksys::Latches::Unique_sharded_rw_lock
x_unlock	include/sync0sharded_rw.h	/^  void x_unlock() {$/;"	f	class:Sharded_rw_lock
x_unlock	include/sync0sharded_rw.h	/^  void x_unlock() {}$/;"	f	class:Sharded_rw_lock
x_unlock	include/trx0purge.h	/^  void x_unlock() { rw_lock_x_unlock(m_latch); }$/;"	f	class:undo::Tablespaces
x_unlock	include/trx0types.h	/^  void x_unlock() { rw_lock_x_unlock(m_latch); }$/;"	f	class:Rsegs
xdes_find_bit	fsp/fsp0fsp.cc	/^page_no_t xdes_find_bit(xdes_t *descr, \/*!< in: descriptor *\/$/;"	f
xdes_get_descriptor	fsp/fsp0fsp.cc	/^static MY_ATTRIBUTE((warn_unused_result)) xdes_t *xdes_get_descriptor($/;"	f
xdes_get_descriptor_with_space_hdr	fsp/fsp0fsp.cc	/^    *xdes_get_descriptor_with_space_hdr(fsp_header_t *sp_header,$/;"	f
xdes_get_n_used	fsp/fsp0fsp.cc	/^page_no_t xdes_get_n_used(const xdes_t *descr, \/*!< in: descriptor *\/$/;"	f
xdes_get_offset	fsp/fsp0fsp.cc	/^page_no_t xdes_get_offset(const xdes_t *descr) \/*!< in: extent descriptor *\/$/;"	f
xdes_get_segment_id	fsp/fsp0fsp.cc	/^inline ib_id_t xdes_get_segment_id(const xdes_t *descr) {$/;"	f
xdes_get_segment_id	fsp/fsp0fsp.cc	/^inline ib_id_t xdes_get_segment_id(const xdes_t *descr, mtr_t *mtr) {$/;"	f
xdes_get_state	include/fsp0fsp.h	/^inline xdes_state_t xdes_get_state(const xdes_t *descr, mtr_t *mtr) {$/;"	f
xdes_in_segment	fsp/fsp0fsp.cc	/^static bool xdes_in_segment(const xdes_t *descr, ib_id_t seg_id, mtr_t *mtr) {$/;"	f	file:
xdes_init	fsp/fsp0fsp.cc	/^void xdes_init(xdes_t *descr, \/*!< in: descriptor *\/$/;"	f
xdes_is_free	fsp/fsp0fsp.cc	/^ibool xdes_is_free(const xdes_t *descr, \/*!< in: descriptor *\/$/;"	f
xdes_is_full	fsp/fsp0fsp.cc	/^ibool xdes_is_full(const xdes_t *descr, \/*!< in: descriptor *\/$/;"	f
xdes_is_leasable	fsp/fsp0fsp.cc	/^bool xdes_is_leasable(const xdes_t *descr, const page_size_t &page_size,$/;"	f
xdes_lst_get_descriptor	fsp/fsp0fsp.cc	/^xdes_t *xdes_lst_get_descriptor(space_id_t space, const page_size_t &page_size,$/;"	f
xdes_mem_t	include/fsp0fsp.h	/^  xdes_mem_t(const xdes_t *xdes) : m_xdes(xdes) {}$/;"	f	struct:xdes_mem_t
xdes_mem_t	include/fsp0fsp.h	/^struct xdes_mem_t {$/;"	s
xdes_mtr_get_bit	fsp/fsp0fsp.cc	/^ibool xdes_mtr_get_bit(const xdes_t *descr, \/*!< in: descriptor *\/$/;"	f
xdes_page_print	fsp/fsp0fsp.cc	/^std::ostream &xdes_page_print(std::ostream &out, const page_t *xdes,$/;"	f
xdes_set_bit	fsp/fsp0fsp.cc	/^void xdes_set_bit(xdes_t *descr,    \/*!< in: descriptor *\/$/;"	f
xdes_set_segment_id	fsp/fsp0fsp.cc	/^inline void xdes_set_segment_id(xdes_t *descr, const ib_id_t seg_id,$/;"	f
xdes_set_state	fsp/fsp0fsp.cc	/^void xdes_set_state(xdes_t *descr,      \/*!< in\/out: descriptor *\/$/;"	f
xdes_state_is_valid	fsp/fsp0fsp.cc	/^bool xdes_state_is_valid(ulint state) {$/;"	f
xdes_state_t	include/fsp0fsp.h	/^enum xdes_state_t {$/;"	g
xdes_t	include/fsp0fsp.h	/^typedef byte xdes_t;$/;"	t
xid	include/trx0trx.h	/^  XID *xid;                    \/*!< X\/Open XA transaction$/;"	m	struct:trx_t
xid	include/trx0undo.h	/^  XID xid;         \/*!< X\/Open XA transaction$/;"	m	struct:trx_undo_t
xor_thing	include/os0thread.h	/^  void xor_thing(T_thing id) {$/;"	f	class:Atomic_xor_of_things
yield	row/row0pread.cc	/^void PCursor::yield() {$/;"	f	class:PCursor
young_making_delta	include/buf0buf.h	/^  ulint young_making_delta;        \/*!< num of pages made young since$/;"	m	struct:Cache_hint::buf_pool_info_t
yy_accept	fts/fts0blex.cc	/^static yyconst flex_int16_t yy_accept[19] =$/;"	v	file:
yy_accept	fts/fts0tlex.cc	/^static yyconst flex_int16_t yy_accept[17] =$/;"	v	file:
yy_accept	pars/lexyy.cc	/^static yyconst flex_int16_t yy_accept[372] =$/;"	v	file:
yy_at_bol	fts/fts0blex.cc	/^	int yy_at_bol;$/;"	m	struct:yy_buffer_state	file:
yy_at_bol	fts/fts0tlex.cc	/^	int yy_at_bol;$/;"	m	struct:yy_buffer_state	file:
yy_at_bol	include/fts0blex.h	/^	int yy_at_bol;$/;"	m	struct:yy_buffer_state
yy_at_bol	include/fts0tlex.h	/^	int yy_at_bol;$/;"	m	struct:yy_buffer_state
yy_at_bol	pars/lexyy.cc	/^	int yy_at_bol;$/;"	m	struct:yy_buffer_state	file:
yy_base	fts/fts0blex.cc	/^static yyconst flex_int16_t yy_base[22] =$/;"	v	file:
yy_base	fts/fts0tlex.cc	/^static yyconst flex_int16_t yy_base[20] =$/;"	v	file:
yy_base	pars/lexyy.cc	/^static yyconst flex_int16_t yy_base[385] =$/;"	v	file:
yy_bs_column	fts/fts0blex.cc	/^    int yy_bs_column; \/**< The column count. *\/$/;"	m	struct:yy_buffer_state	file:
yy_bs_column	fts/fts0tlex.cc	/^    int yy_bs_column; \/**< The column count. *\/$/;"	m	struct:yy_buffer_state	file:
yy_bs_column	include/fts0blex.h	/^    int yy_bs_column; \/**< The column count. *\/$/;"	m	struct:yy_buffer_state
yy_bs_column	include/fts0tlex.h	/^    int yy_bs_column; \/**< The column count. *\/$/;"	m	struct:yy_buffer_state
yy_bs_column	pars/lexyy.cc	/^    int yy_bs_column; \/**< The column count. *\/$/;"	m	struct:yy_buffer_state	file:
yy_bs_lineno	fts/fts0blex.cc	/^    int yy_bs_lineno; \/**< The line count. *\/$/;"	m	struct:yy_buffer_state	file:
yy_bs_lineno	fts/fts0tlex.cc	/^    int yy_bs_lineno; \/**< The line count. *\/$/;"	m	struct:yy_buffer_state	file:
yy_bs_lineno	include/fts0blex.h	/^    int yy_bs_lineno; \/**< The line count. *\/$/;"	m	struct:yy_buffer_state
yy_bs_lineno	include/fts0tlex.h	/^    int yy_bs_lineno; \/**< The line count. *\/$/;"	m	struct:yy_buffer_state
yy_bs_lineno	pars/lexyy.cc	/^    int yy_bs_lineno; \/**< The line count. *\/$/;"	m	struct:yy_buffer_state	file:
yy_buf_pos	fts/fts0blex.cc	/^	char *yy_buf_pos;		\/* current position in input buffer *\/$/;"	m	struct:yy_buffer_state	file:
yy_buf_pos	fts/fts0tlex.cc	/^	char *yy_buf_pos;		\/* current position in input buffer *\/$/;"	m	struct:yy_buffer_state	file:
yy_buf_pos	include/fts0blex.h	/^	char *yy_buf_pos;		\/* current position in input buffer *\/$/;"	m	struct:yy_buffer_state
yy_buf_pos	include/fts0tlex.h	/^	char *yy_buf_pos;		\/* current position in input buffer *\/$/;"	m	struct:yy_buffer_state
yy_buf_pos	pars/lexyy.cc	/^	char *yy_buf_pos;		\/* current position in input buffer *\/$/;"	m	struct:yy_buffer_state	file:
yy_buf_size	fts/fts0blex.cc	/^	yy_size_t yy_buf_size;$/;"	m	struct:yy_buffer_state	file:
yy_buf_size	fts/fts0tlex.cc	/^	yy_size_t yy_buf_size;$/;"	m	struct:yy_buffer_state	file:
yy_buf_size	include/fts0blex.h	/^	yy_size_t yy_buf_size;$/;"	m	struct:yy_buffer_state
yy_buf_size	include/fts0tlex.h	/^	yy_size_t yy_buf_size;$/;"	m	struct:yy_buffer_state
yy_buf_size	pars/lexyy.cc	/^	yy_size_t yy_buf_size;$/;"	m	struct:yy_buffer_state	file:
yy_buffer_stack	fts/fts0blex.cc	/^    YY_BUFFER_STATE * yy_buffer_stack; \/**< Stack as an array. *\/$/;"	m	struct:yyguts_t	file:
yy_buffer_stack	fts/fts0tlex.cc	/^    YY_BUFFER_STATE * yy_buffer_stack; \/**< Stack as an array. *\/$/;"	m	struct:yyguts_t	file:
yy_buffer_stack	pars/lexyy.cc	/^static YY_BUFFER_STATE *yy_buffer_stack = nullptr; \/**< Stack as an array. *\/$/;"	v	file:
yy_buffer_stack_max	fts/fts0blex.cc	/^    size_t yy_buffer_stack_max; \/**< capacity of stack. *\/$/;"	m	struct:yyguts_t	file:
yy_buffer_stack_max	fts/fts0tlex.cc	/^    size_t yy_buffer_stack_max; \/**< capacity of stack. *\/$/;"	m	struct:yyguts_t	file:
yy_buffer_stack_max	pars/lexyy.cc	/^static size_t yy_buffer_stack_max = 0; \/**< capacity of stack. *\/$/;"	v	file:
yy_buffer_stack_top	fts/fts0blex.cc	/^    size_t yy_buffer_stack_top; \/**< index of top of stack. *\/$/;"	m	struct:yyguts_t	file:
yy_buffer_stack_top	fts/fts0tlex.cc	/^    size_t yy_buffer_stack_top; \/**< index of top of stack. *\/$/;"	m	struct:yyguts_t	file:
yy_buffer_stack_top	pars/lexyy.cc	/^static size_t yy_buffer_stack_top = 0; \/**< index of top of stack. *\/$/;"	v	file:
yy_buffer_state	fts/fts0blex.cc	/^struct yy_buffer_state$/;"	s	file:
yy_buffer_state	fts/fts0tlex.cc	/^struct yy_buffer_state$/;"	s	file:
yy_buffer_state	include/fts0blex.h	/^struct yy_buffer_state$/;"	s
yy_buffer_state	include/fts0tlex.h	/^struct yy_buffer_state$/;"	s
yy_buffer_state	pars/lexyy.cc	/^struct yy_buffer_state$/;"	s	file:
yy_buffer_status	fts/fts0blex.cc	/^	int yy_buffer_status;$/;"	m	struct:yy_buffer_state	file:
yy_buffer_status	fts/fts0tlex.cc	/^	int yy_buffer_status;$/;"	m	struct:yy_buffer_state	file:
yy_buffer_status	include/fts0blex.h	/^	int yy_buffer_status;$/;"	m	struct:yy_buffer_state
yy_buffer_status	include/fts0tlex.h	/^	int yy_buffer_status;$/;"	m	struct:yy_buffer_state
yy_buffer_status	pars/lexyy.cc	/^	int yy_buffer_status;$/;"	m	struct:yy_buffer_state	file:
yy_c_buf_p	fts/fts0blex.cc	/^    char *yy_c_buf_p;$/;"	m	struct:yyguts_t	file:
yy_c_buf_p	fts/fts0tlex.cc	/^    char *yy_c_buf_p;$/;"	m	struct:yyguts_t	file:
yy_c_buf_p	pars/lexyy.cc	/^static char *yy_c_buf_p = (char *)nullptr;$/;"	v	file:
yy_ch_buf	fts/fts0blex.cc	/^	char *yy_ch_buf;		\/* input buffer *\/$/;"	m	struct:yy_buffer_state	file:
yy_ch_buf	fts/fts0tlex.cc	/^	char *yy_ch_buf;		\/* input buffer *\/$/;"	m	struct:yy_buffer_state	file:
yy_ch_buf	include/fts0blex.h	/^	char *yy_ch_buf;		\/* input buffer *\/$/;"	m	struct:yy_buffer_state
yy_ch_buf	include/fts0tlex.h	/^	char *yy_ch_buf;		\/* input buffer *\/$/;"	m	struct:yy_buffer_state
yy_ch_buf	pars/lexyy.cc	/^	char *yy_ch_buf;		\/* input buffer *\/$/;"	m	struct:yy_buffer_state	file:
yy_chk	fts/fts0blex.cc	/^static yyconst flex_int16_t yy_chk[32] =$/;"	v	file:
yy_chk	fts/fts0tlex.cc	/^static yyconst flex_int16_t yy_chk[29] =$/;"	v	file:
yy_chk	pars/lexyy.cc	/^static yyconst flex_int16_t yy_chk[1231] =$/;"	v	file:
yy_create_buffer	pars/lexyy.cc	/^    static YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )$/;"	f	file:
yy_def	fts/fts0blex.cc	/^static yyconst flex_int16_t yy_def[22] =$/;"	v	file:
yy_def	fts/fts0tlex.cc	/^static yyconst flex_int16_t yy_def[20] =$/;"	v	file:
yy_def	pars/lexyy.cc	/^static yyconst flex_int16_t yy_def[385] =$/;"	v	file:
yy_delete_buffer	pars/lexyy.cc	/^    static void yy_delete_buffer (YY_BUFFER_STATE  b )$/;"	f	file:
yy_did_buffer_switch_on_eof	fts/fts0blex.cc	/^    int yy_did_buffer_switch_on_eof;$/;"	m	struct:yyguts_t	file:
yy_did_buffer_switch_on_eof	fts/fts0tlex.cc	/^    int yy_did_buffer_switch_on_eof;$/;"	m	struct:yyguts_t	file:
yy_did_buffer_switch_on_eof	pars/lexyy.cc	/^static int yy_did_buffer_switch_on_eof;$/;"	v	file:
yy_ec	fts/fts0blex.cc	/^static yyconst flex_int32_t yy_ec[256] =$/;"	v	file:
yy_ec	fts/fts0tlex.cc	/^static yyconst flex_int32_t yy_ec[256] =$/;"	v	file:
yy_ec	pars/lexyy.cc	/^static yyconst flex_int32_t yy_ec[256] =$/;"	v	file:
yy_fatal_error	fts/fts0blex.cc	/^static void yy_fatal_error (yyconst char* msg ,  yyscan_t yyscanner MY_ATTRIBUTE((unused)))$/;"	f	file:
yy_fatal_error	fts/fts0tlex.cc	/^static void yy_fatal_error (yyconst char* msg ,  yyscan_t yyscanner MY_ATTRIBUTE((unused)))$/;"	f	file:
yy_fatal_error	pars/lexyy.cc	/^static void yy_fatal_error (yyconst char* msg )$/;"	f	file:
yy_fill_buffer	fts/fts0blex.cc	/^	int yy_fill_buffer;$/;"	m	struct:yy_buffer_state	file:
yy_fill_buffer	fts/fts0tlex.cc	/^	int yy_fill_buffer;$/;"	m	struct:yy_buffer_state	file:
yy_fill_buffer	include/fts0blex.h	/^	int yy_fill_buffer;$/;"	m	struct:yy_buffer_state
yy_fill_buffer	include/fts0tlex.h	/^	int yy_fill_buffer;$/;"	m	struct:yy_buffer_state
yy_fill_buffer	pars/lexyy.cc	/^	int yy_fill_buffer;$/;"	m	struct:yy_buffer_state	file:
yy_flex_debug	fts/fts0blex.cc	176;"	d	file:
yy_flex_debug	fts/fts0tlex.cc	175;"	d	file:
yy_flex_debug	include/fts0blex.h	168;"	d
yy_flex_debug	include/fts0tlex.h	167;"	d
yy_flex_debug	pars/lexyy.cc	/^static int yy_flex_debug = 0;$/;"	v	file:
yy_flex_debug_r	fts/fts0blex.cc	/^    int yy_flex_debug_r;$/;"	m	struct:yyguts_t	file:
yy_flex_debug_r	fts/fts0tlex.cc	/^    int yy_flex_debug_r;$/;"	m	struct:yyguts_t	file:
yy_flex_strlen	fts/fts0blex.cc	/^static int yy_flex_strlen (yyconst char * s ,  yyscan_t yyscanner MY_ATTRIBUTE((unused)))$/;"	f	file:
yy_flex_strlen	fts/fts0tlex.cc	/^static int yy_flex_strlen (yyconst char * s ,  yyscan_t yyscanner MY_ATTRIBUTE((unused)))$/;"	f	file:
yy_flex_strlen	pars/lexyy.cc	/^static int yy_flex_strlen (yyconst char * s )$/;"	f	file:
yy_flex_strncpy	fts/fts0blex.cc	/^static void yy_flex_strncpy (char* s1, yyconst char * s2, int n ,  yyscan_t yyscanner MY_ATTRIBUTE((unused)))$/;"	f	file:
yy_flex_strncpy	fts/fts0tlex.cc	/^static void yy_flex_strncpy (char* s1, yyconst char * s2, int n ,  yyscan_t yyscanner MY_ATTRIBUTE((unused)))$/;"	f	file:
yy_flex_strncpy	pars/lexyy.cc	/^static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )$/;"	f	file:
yy_flush_buffer	pars/lexyy.cc	/^    static void yy_flush_buffer (YY_BUFFER_STATE  b )$/;"	f	file:
yy_get_next_buffer	fts/fts0blex.cc	/^static int yy_get_next_buffer (yyscan_t yyscanner)$/;"	f	file:
yy_get_next_buffer	fts/fts0tlex.cc	/^static int yy_get_next_buffer (yyscan_t yyscanner)$/;"	f	file:
yy_get_next_buffer	pars/lexyy.cc	/^static int yy_get_next_buffer (void)$/;"	f	file:
yy_get_previous_state	fts/fts0blex.cc	/^    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)$/;"	f	file:
yy_get_previous_state	fts/fts0tlex.cc	/^    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)$/;"	f	file:
yy_get_previous_state	pars/lexyy.cc	/^    static yy_state_type yy_get_previous_state (void)$/;"	f	file:
yy_hold_char	fts/fts0blex.cc	/^    char yy_hold_char;$/;"	m	struct:yyguts_t	file:
yy_hold_char	fts/fts0tlex.cc	/^    char yy_hold_char;$/;"	m	struct:yyguts_t	file:
yy_hold_char	pars/lexyy.cc	/^static char yy_hold_char;$/;"	v	file:
yy_init	fts/fts0blex.cc	/^    int yy_init;$/;"	m	struct:yyguts_t	file:
yy_init	fts/fts0tlex.cc	/^    int yy_init;$/;"	m	struct:yyguts_t	file:
yy_init	pars/lexyy.cc	/^static int yy_init = 0;		\/* whether we need to initialize *\/$/;"	v	file:
yy_init_buffer	pars/lexyy.cc	/^    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )$/;"	f	file:
yy_init_globals	fts/fts0blex.cc	/^static int yy_init_globals (yyscan_t yyscanner)$/;"	f	file:
yy_init_globals	fts/fts0tlex.cc	/^static int yy_init_globals (yyscan_t yyscanner)$/;"	f	file:
yy_init_globals	pars/lexyy.cc	/^static int yy_init_globals (void)$/;"	f	file:
yy_input_file	fts/fts0blex.cc	/^	FILE *yy_input_file;$/;"	m	struct:yy_buffer_state	file:
yy_input_file	fts/fts0tlex.cc	/^	FILE *yy_input_file;$/;"	m	struct:yy_buffer_state	file:
yy_input_file	include/fts0blex.h	/^	FILE *yy_input_file;$/;"	m	struct:yy_buffer_state
yy_input_file	include/fts0tlex.h	/^	FILE *yy_input_file;$/;"	m	struct:yy_buffer_state
yy_input_file	pars/lexyy.cc	/^	FILE *yy_input_file;$/;"	m	struct:yy_buffer_state	file:
yy_is_interactive	fts/fts0blex.cc	/^	int yy_is_interactive;$/;"	m	struct:yy_buffer_state	file:
yy_is_interactive	fts/fts0tlex.cc	/^	int yy_is_interactive;$/;"	m	struct:yy_buffer_state	file:
yy_is_interactive	include/fts0blex.h	/^	int yy_is_interactive;$/;"	m	struct:yy_buffer_state
yy_is_interactive	include/fts0tlex.h	/^	int yy_is_interactive;$/;"	m	struct:yy_buffer_state
yy_is_interactive	pars/lexyy.cc	/^	int yy_is_interactive;$/;"	m	struct:yy_buffer_state	file:
yy_is_our_buffer	fts/fts0blex.cc	/^	int yy_is_our_buffer;$/;"	m	struct:yy_buffer_state	file:
yy_is_our_buffer	fts/fts0tlex.cc	/^	int yy_is_our_buffer;$/;"	m	struct:yy_buffer_state	file:
yy_is_our_buffer	include/fts0blex.h	/^	int yy_is_our_buffer;$/;"	m	struct:yy_buffer_state
yy_is_our_buffer	include/fts0tlex.h	/^	int yy_is_our_buffer;$/;"	m	struct:yy_buffer_state
yy_is_our_buffer	pars/lexyy.cc	/^	int yy_is_our_buffer;$/;"	m	struct:yy_buffer_state	file:
yy_last_accepting_cpos	fts/fts0blex.cc	/^    char* yy_last_accepting_cpos;$/;"	m	struct:yyguts_t	file:
yy_last_accepting_cpos	fts/fts0tlex.cc	/^    char* yy_last_accepting_cpos;$/;"	m	struct:yyguts_t	file:
yy_last_accepting_cpos	pars/lexyy.cc	/^static char *yy_last_accepting_cpos;$/;"	v	file:
yy_last_accepting_state	fts/fts0blex.cc	/^    yy_state_type yy_last_accepting_state;$/;"	m	struct:yyguts_t	file:
yy_last_accepting_state	fts/fts0tlex.cc	/^    yy_state_type yy_last_accepting_state;$/;"	m	struct:yyguts_t	file:
yy_last_accepting_state	pars/lexyy.cc	/^static yy_state_type yy_last_accepting_state;$/;"	v	file:
yy_load_buffer_state	pars/lexyy.cc	/^static void yy_load_buffer_state  (void)$/;"	f	file:
yy_meta	fts/fts0blex.cc	/^static yyconst flex_int32_t yy_meta[9] =$/;"	v	file:
yy_meta	fts/fts0tlex.cc	/^static yyconst flex_int32_t yy_meta[8] =$/;"	v	file:
yy_meta	pars/lexyy.cc	/^static yyconst flex_int32_t yy_meta[57] =$/;"	v	file:
yy_more_flag	fts/fts0blex.cc	/^    int yy_more_flag;$/;"	m	struct:yyguts_t	file:
yy_more_flag	fts/fts0tlex.cc	/^    int yy_more_flag;$/;"	m	struct:yyguts_t	file:
yy_more_len	fts/fts0blex.cc	/^    int yy_more_len;$/;"	m	struct:yyguts_t	file:
yy_more_len	fts/fts0tlex.cc	/^    int yy_more_len;$/;"	m	struct:yyguts_t	file:
yy_n_chars	fts/fts0blex.cc	/^	yy_size_t yy_n_chars;$/;"	m	struct:yy_buffer_state	file:
yy_n_chars	fts/fts0blex.cc	/^    yy_size_t yy_n_chars;$/;"	m	struct:yyguts_t	file:
yy_n_chars	fts/fts0tlex.cc	/^	yy_size_t yy_n_chars;$/;"	m	struct:yy_buffer_state	file:
yy_n_chars	fts/fts0tlex.cc	/^    yy_size_t yy_n_chars;$/;"	m	struct:yyguts_t	file:
yy_n_chars	include/fts0blex.h	/^	yy_size_t yy_n_chars;$/;"	m	struct:yy_buffer_state
yy_n_chars	include/fts0tlex.h	/^	yy_size_t yy_n_chars;$/;"	m	struct:yy_buffer_state
yy_n_chars	pars/lexyy.cc	/^	yy_size_t yy_n_chars;$/;"	m	struct:yy_buffer_state	file:
yy_n_chars	pars/lexyy.cc	/^static yy_size_t yy_n_chars;		\/* number of characters read into yy_ch_buf *\/$/;"	v	file:
yy_new_buffer	fts/fts0blex.cc	351;"	d	file:
yy_new_buffer	fts/fts0tlex.cc	350;"	d	file:
yy_new_buffer	include/fts0blex.h	376;"	d
yy_new_buffer	include/fts0tlex.h	375;"	d
yy_new_buffer	pars/lexyy.cc	321;"	d	file:
yy_nxt	fts/fts0blex.cc	/^	flex_int32_t yy_nxt;$/;"	m	struct:yy_trans_info	file:
yy_nxt	fts/fts0blex.cc	/^static yyconst flex_int16_t yy_nxt[32] =$/;"	v	file:
yy_nxt	fts/fts0tlex.cc	/^	flex_int32_t yy_nxt;$/;"	m	struct:yy_trans_info	file:
yy_nxt	fts/fts0tlex.cc	/^static yyconst flex_int16_t yy_nxt[29] =$/;"	v	file:
yy_nxt	pars/lexyy.cc	/^	flex_int32_t yy_nxt;$/;"	m	struct:yy_trans_info	file:
yy_nxt	pars/lexyy.cc	/^static yyconst flex_int16_t yy_nxt[1231] =$/;"	v	file:
yy_reduce_print	fts/fts0pars.cc	/^yy_reduce_print (YYSTYPE *yyvsp, int yyrule)$/;"	f	file:
yy_reduce_print	pars/pars0grm.cc	/^yy_reduce_print (yytype_int16 *yyssp, YYSTYPE *yyvsp, int yyrule)$/;"	f	file:
yy_set_bol	fts/fts0blex.cc	363;"	d	file:
yy_set_bol	fts/fts0tlex.cc	362;"	d	file:
yy_set_bol	include/fts0blex.h	375;"	d
yy_set_bol	include/fts0tlex.h	374;"	d
yy_set_bol	pars/lexyy.cc	333;"	d	file:
yy_set_interactive	fts/fts0blex.cc	353;"	d	file:
yy_set_interactive	fts/fts0tlex.cc	352;"	d	file:
yy_set_interactive	include/fts0blex.h	377;"	d
yy_set_interactive	include/fts0tlex.h	376;"	d
yy_set_interactive	pars/lexyy.cc	323;"	d	file:
yy_size_t	fts/fts0blex.cc	/^typedef size_t yy_size_t;$/;"	t	file:
yy_size_t	fts/fts0tlex.cc	/^typedef size_t yy_size_t;$/;"	t	file:
yy_size_t	include/fts0blex.h	/^typedef size_t yy_size_t;$/;"	t
yy_size_t	include/fts0tlex.h	/^typedef size_t yy_size_t;$/;"	t
yy_size_t	pars/lexyy.cc	/^typedef size_t yy_size_t;$/;"	t	file:
yy_stack_print	fts/fts0pars.cc	/^yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)$/;"	f	file:
yy_stack_print	pars/pars0grm.cc	/^yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)$/;"	f	file:
yy_start	fts/fts0blex.cc	/^    int yy_start;$/;"	m	struct:yyguts_t	file:
yy_start	fts/fts0tlex.cc	/^    int yy_start;$/;"	m	struct:yyguts_t	file:
yy_start	pars/lexyy.cc	/^static int yy_start = 0;	\/* start state number *\/$/;"	v	file:
yy_start_stack	fts/fts0blex.cc	/^    int *yy_start_stack;$/;"	m	struct:yyguts_t	file:
yy_start_stack	fts/fts0tlex.cc	/^    int *yy_start_stack;$/;"	m	struct:yyguts_t	file:
yy_start_stack_depth	fts/fts0blex.cc	/^    int yy_start_stack_depth;$/;"	m	struct:yyguts_t	file:
yy_start_stack_depth	fts/fts0tlex.cc	/^    int yy_start_stack_depth;$/;"	m	struct:yyguts_t	file:
yy_start_stack_ptr	fts/fts0blex.cc	/^    int yy_start_stack_ptr;$/;"	m	struct:yyguts_t	file:
yy_start_stack_ptr	fts/fts0tlex.cc	/^    int yy_start_stack_ptr;$/;"	m	struct:yyguts_t	file:
yy_state_type	fts/fts0blex.cc	/^typedef int yy_state_type;$/;"	t	file:
yy_state_type	fts/fts0tlex.cc	/^typedef int yy_state_type;$/;"	t	file:
yy_state_type	pars/lexyy.cc	/^typedef int yy_state_type;$/;"	t	file:
yy_switch_to_buffer	pars/lexyy.cc	/^    MY_ATTRIBUTE((unused)) static void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )$/;"	f	file:
yy_symbol_print	fts/fts0pars.cc	/^yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)$/;"	f	file:
yy_symbol_print	pars/pars0grm.cc	/^yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)$/;"	f	file:
yy_symbol_value_print	fts/fts0pars.cc	/^yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)$/;"	f	file:
yy_symbol_value_print	pars/pars0grm.cc	/^yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)$/;"	f	file:
yy_trans_info	fts/fts0blex.cc	/^struct yy_trans_info$/;"	s	file:
yy_trans_info	fts/fts0tlex.cc	/^struct yy_trans_info$/;"	s	file:
yy_trans_info	pars/lexyy.cc	/^struct yy_trans_info$/;"	s	file:
yy_try_NUL_trans	fts/fts0blex.cc	/^    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)$/;"	f	file:
yy_try_NUL_trans	fts/fts0tlex.cc	/^    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)$/;"	f	file:
yy_try_NUL_trans	pars/lexyy.cc	/^    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )$/;"	f	file:
yy_verify	fts/fts0blex.cc	/^	flex_int32_t yy_verify;$/;"	m	struct:yy_trans_info	file:
yy_verify	fts/fts0tlex.cc	/^	flex_int32_t yy_verify;$/;"	m	struct:yy_trans_info	file:
yy_verify	pars/lexyy.cc	/^	flex_int32_t yy_verify;$/;"	m	struct:yy_trans_info	file:
yyalloc	fts/fts0pars.cc	/^union yyalloc$/;"	u	file:
yyalloc	pars/lexyy.cc	/^static void *yyalloc (yy_size_t  size )$/;"	f	file:
yyalloc	pars/pars0grm.cc	/^union yyalloc$/;"	u	file:
yychar	fts/fts0pars.cc	69;"	d	file:
yychar	pars/pars0grm.cc	/^static int yychar;$/;"	v	file:
yycheck	fts/fts0pars.cc	/^static const yytype_int8 yycheck[] =$/;"	v	file:
yycheck	pars/pars0grm.cc	/^static const yytype_int16 yycheck[] =$/;"	v	file:
yyclearin	fts/fts0pars.cc	589;"	d	file:
yyclearin	pars/pars0grm.cc	972;"	d	file:
yycolumn	fts/fts0blex.cc	175;"	d	file:
yycolumn	fts/fts0tlex.cc	174;"	d	file:
yycolumn	include/fts0blex.h	167;"	d
yycolumn	include/fts0tlex.h	166;"	d
yyconst	fts/fts0blex.cc	146;"	d	file:
yyconst	fts/fts0blex.cc	148;"	d	file:
yyconst	fts/fts0tlex.cc	145;"	d	file:
yyconst	fts/fts0tlex.cc	147;"	d	file:
yyconst	include/fts0blex.h	148;"	d
yyconst	include/fts0blex.h	150;"	d
yyconst	include/fts0tlex.h	147;"	d
yyconst	include/fts0tlex.h	149;"	d
yyconst	pars/lexyy.cc	109;"	d	file:
yyconst	pars/lexyy.cc	111;"	d	file:
yydebug	fts/fts0pars.cc	/^int yydebug;$/;"	v
yydebug	fts/fts0pars.cc	70;"	d	file:
yydebug	pars/pars0grm.cc	/^int yydebug;$/;"	v
yydefact	fts/fts0pars.cc	/^static const yytype_uint8 yydefact[] =$/;"	v	file:
yydefact	pars/pars0grm.cc	/^static const yytype_uint8 yydefact[] =$/;"	v	file:
yydefgoto	fts/fts0pars.cc	/^static const yytype_int8 yydefgoto[] =$/;"	v	file:
yydefgoto	pars/pars0grm.cc	/^static const yytype_int16 yydefgoto[] =$/;"	v	file:
yydestruct	fts/fts0pars.cc	/^yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep)$/;"	f	file:
yydestruct	pars/pars0grm.cc	/^yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep)$/;"	f	file:
yyensure_buffer_stack	pars/lexyy.cc	/^static void yyensure_buffer_stack (void)$/;"	f	file:
yyerrok	fts/fts0pars.cc	588;"	d	file:
yyerrok	pars/pars0grm.cc	971;"	d	file:
yyerror	fts/fts0pars.cc	67;"	d	file:
yyerror	pars/pars0pars.cc	/^void yyerror(const char *s MY_ATTRIBUTE((unused)))$/;"	f
yyextra	fts/fts0blex.cc	171;"	d	file:
yyextra	fts/fts0tlex.cc	170;"	d	file:
yyextra	include/fts0blex.h	163;"	d
yyextra	include/fts0tlex.h	162;"	d
yyextra_r	fts/fts0blex.cc	/^    YY_EXTRA_TYPE yyextra_r;$/;"	m	struct:yyguts_t	file:
yyextra_r	fts/fts0tlex.cc	/^    YY_EXTRA_TYPE yyextra_r;$/;"	m	struct:yyguts_t	file:
yyfree	pars/lexyy.cc	/^static void yyfree (void * ptr )$/;"	f	file:
yyget_debug	pars/lexyy.cc	/^MY_ATTRIBUTE((unused)) static int yyget_debug  (void)$/;"	f	file:
yyget_in	pars/lexyy.cc	/^MY_ATTRIBUTE((unused)) static FILE *yyget_in  (void)$/;"	f	file:
yyget_leng	pars/lexyy.cc	/^yy_size_t yyget_leng  (void)$/;"	f
yyget_lineno	pars/lexyy.cc	/^MY_ATTRIBUTE((unused)) static int yyget_lineno  (void)$/;"	f	file:
yyget_out	pars/lexyy.cc	/^MY_ATTRIBUTE((unused)) static FILE *yyget_out  (void)$/;"	f	file:
yyget_text	pars/lexyy.cc	/^MY_ATTRIBUTE((unused)) static char *yyget_text  (void)$/;"	f	file:
yyguts_t	fts/fts0blex.cc	/^struct yyguts_t$/;"	s	file:
yyguts_t	fts/fts0tlex.cc	/^struct yyguts_t$/;"	s	file:
yyin	fts/fts0blex.cc	169;"	d	file:
yyin	fts/fts0tlex.cc	168;"	d	file:
yyin	include/fts0blex.h	161;"	d
yyin	include/fts0tlex.h	160;"	d
yyin	pars/lexyy.cc	/^static FILE *yyin, *yyout;$/;"	v	file:
yyin_r	fts/fts0blex.cc	/^    FILE *yyin_r, *yyout_r;$/;"	m	struct:yyguts_t	file:
yyin_r	fts/fts0tlex.cc	/^    FILE *yyin_r, *yyout_r;$/;"	m	struct:yyguts_t	file:
yyinput	fts/fts0blex.cc	/^    static int yyinput (yyscan_t yyscanner)$/;"	f	file:
yyinput	fts/fts0tlex.cc	/^    static int yyinput (yyscan_t yyscanner)$/;"	f	file:
yyinput	pars/lexyy.cc	/^    static int yyinput (void)$/;"	f	file:
yyleng	fts/fts0blex.cc	172;"	d	file:
yyleng	fts/fts0tlex.cc	171;"	d	file:
yyleng	include/fts0blex.h	164;"	d
yyleng	include/fts0tlex.h	163;"	d
yyleng	pars/lexyy.cc	/^yy_size_t yyleng;$/;"	v
yyleng_r	fts/fts0blex.cc	/^    yy_size_t yyleng_r;$/;"	m	struct:yyguts_t	file:
yyleng_r	fts/fts0tlex.cc	/^    yy_size_t yyleng_r;$/;"	m	struct:yyguts_t	file:
yyless	fts/fts0blex.cc	1642;"	d	file:
yyless	fts/fts0blex.cc	1643;"	d	file:
yyless	fts/fts0blex.cc	234;"	d	file:
yyless	fts/fts0tlex.cc	1634;"	d	file:
yyless	fts/fts0tlex.cc	1635;"	d	file:
yyless	fts/fts0tlex.cc	233;"	d	file:
yyless	pars/lexyy.cc	184;"	d	file:
yyless	pars/lexyy.cc	2799;"	d	file:
yyless	pars/lexyy.cc	2800;"	d	file:
yylex	fts/fts0pars.cc	66;"	d	file:
yylex_destroy	pars/lexyy.cc	/^MY_ATTRIBUTE((unused)) static int yylex_destroy  (void)$/;"	f	file:
yylineno	fts/fts0blex.cc	174;"	d	file:
yylineno	fts/fts0tlex.cc	173;"	d	file:
yylineno	include/fts0blex.h	166;"	d
yylineno	include/fts0tlex.h	165;"	d
yylineno	pars/lexyy.cc	/^static int yylineno = 1;$/;"	v	file:
yylineno_r	fts/fts0blex.cc	/^    int yylineno_r;$/;"	m	struct:yyguts_t	file:
yylineno_r	fts/fts0tlex.cc	/^    int yylineno_r;$/;"	m	struct:yyguts_t	file:
yylval	fts/fts0pars.cc	68;"	d	file:
yylval	pars/pars0grm.cc	/^YYSTYPE yylval;$/;"	v
yymore	fts/fts0blex.cc	487;"	d	file:
yymore	fts/fts0tlex.cc	482;"	d	file:
yymore	pars/lexyy.cc	854;"	d	file:
yynerrs	fts/fts0pars.cc	71;"	d	file:
yynerrs	pars/pars0grm.cc	/^static int yynerrs;$/;"	v	file:
yyout	fts/fts0blex.cc	170;"	d	file:
yyout	fts/fts0tlex.cc	169;"	d	file:
yyout	include/fts0blex.h	162;"	d
yyout	include/fts0tlex.h	161;"	d
yyout	pars/lexyy.cc	/^static FILE *yyin, *yyout;$/;"	v	file:
yyout_r	fts/fts0blex.cc	/^    FILE *yyin_r, *yyout_r;$/;"	m	struct:yyguts_t	file:
yyout_r	fts/fts0tlex.cc	/^    FILE *yyin_r, *yyout_r;$/;"	m	struct:yyguts_t	file:
yypact	fts/fts0pars.cc	/^static const yytype_int8 yypact[] =$/;"	v	file:
yypact	pars/pars0grm.cc	/^static const yytype_int16 yypact[] =$/;"	v	file:
yypact_value_is_default	fts/fts0pars.cc	562;"	d	file:
yypact_value_is_default	pars/pars0grm.cc	639;"	d	file:
yyparse	fts/fts0pars.cc	/^yyparse (void *YYPARSE_PARAM)$/;"	f
yyparse	fts/fts0pars.cc	65;"	d	file:
yyparse	pars/pars0grm.cc	/^yyparse (void)$/;"	f
yypgoto	fts/fts0pars.cc	/^static const yytype_int8 yypgoto[] =$/;"	v	file:
yypgoto	pars/pars0grm.cc	/^static const yytype_int16 yypgoto[] =$/;"	v	file:
yypop_buffer_state	pars/lexyy.cc	/^MY_ATTRIBUTE((unused)) static void yypop_buffer_state (void)$/;"	f	file:
yyprhs	fts/fts0pars.cc	/^static const yytype_uint8 yyprhs[] =$/;"	v	file:
yypush_buffer_state	pars/lexyy.cc	/^MY_ATTRIBUTE((unused)) static void yypush_buffer_state (YY_BUFFER_STATE new_buffer )$/;"	f	file:
yyr1	fts/fts0pars.cc	/^static const yytype_uint8 yyr1[] =$/;"	v	file:
yyr1	pars/pars0grm.cc	/^static const yytype_uint8 yyr1[] =$/;"	v	file:
yyr2	fts/fts0pars.cc	/^static const yytype_uint8 yyr2[] =$/;"	v	file:
yyr2	pars/pars0grm.cc	/^static const yytype_uint8 yyr2[] =$/;"	v	file:
yyrealloc	pars/lexyy.cc	/^static void *yyrealloc  (void * ptr, yy_size_t  size )$/;"	f	file:
yyrestart	pars/lexyy.cc	/^    static void yyrestart  (FILE * input_file )$/;"	f	file:
yyrhs	fts/fts0pars.cc	/^static const yytype_int8 yyrhs[] =$/;"	v	file:
yyrline	fts/fts0pars.cc	/^static const yytype_uint8 yyrline[] =$/;"	v	file:
yyrline	pars/pars0grm.cc	/^static const yytype_uint16 yyrline[] =$/;"	v	file:
yyscan_t	fts/fts0blex.cc	/^typedef void* yyscan_t;$/;"	t	file:
yyscan_t	fts/fts0tlex.cc	/^typedef void* yyscan_t;$/;"	t	file:
yyscan_t	include/fts0blex.h	/^typedef void* yyscan_t;$/;"	t
yyscan_t	include/fts0tlex.h	/^typedef void* yyscan_t;$/;"	t
yyscanner	fts/fts0pars.cc	/^	void*		yyscanner;$/;"	m	struct:fts_lexer_t	file:
yyset_debug	pars/lexyy.cc	/^MY_ATTRIBUTE((unused)) static void yyset_debug (int  bdebug )$/;"	f	file:
yyset_in	pars/lexyy.cc	/^MY_ATTRIBUTE((unused)) static void yyset_in (FILE *  in_str )$/;"	f	file:
yyset_lineno	pars/lexyy.cc	/^MY_ATTRIBUTE((unused)) static void yyset_lineno (int  line_number )$/;"	f	file:
yyset_out	pars/lexyy.cc	/^MY_ATTRIBUTE((unused)) static void yyset_out (FILE *  out_str )$/;"	f	file:
yyss_alloc	fts/fts0pars.cc	/^  yytype_int16 yyss_alloc;$/;"	m	union:yyalloc	file:
yyss_alloc	pars/pars0grm.cc	/^  yytype_int16 yyss_alloc;$/;"	m	union:yyalloc	file:
yystos	fts/fts0pars.cc	/^static const yytype_uint8 yystos[] =$/;"	v	file:
yystos	pars/pars0grm.cc	/^static const yytype_uint8 yystos[] =$/;"	v	file:
yystpcpy	fts/fts0pars.cc	/^yystpcpy (char *yydest, const char *yysrc)$/;"	f	file:
yystpcpy	fts/fts0pars.cc	898;"	d	file:
yystpcpy	pars/pars0grm.cc	/^yystpcpy (char *yydest, const char *yysrc)$/;"	f	file:
yystpcpy	pars/pars0grm.cc	1173;"	d	file:
yystrlen	fts/fts0pars.cc	/^yystrlen (const char *yystr)$/;"	f	file:
yystrlen	fts/fts0pars.cc	875;"	d	file:
yystrlen	pars/pars0grm.cc	/^yystrlen (const char *yystr)$/;"	f	file:
yystrlen	pars/pars0grm.cc	1157;"	d	file:
yystype	fts/fts0pars.cc	170;"	d	file:
yystype	include/fts0pars.h	66;"	d
yysyntax_error	fts/fts0pars.cc	/^yysyntax_error (YYSIZE_T *yymsg_alloc, char **yymsg,$/;"	f	file:
yysyntax_error	pars/pars0grm.cc	/^yysyntax_error (YYSIZE_T *yymsg_alloc, char **yymsg,$/;"	f	file:
yytable	fts/fts0pars.cc	/^static const yytype_uint8 yytable[] =$/;"	v	file:
yytable	pars/pars0grm.cc	/^static const yytype_uint16 yytable[] =$/;"	v	file:
yytable_value_is_error	fts/fts0pars.cc	565;"	d	file:
yytable_value_is_error	pars/pars0grm.cc	644;"	d	file:
yyterminate	fts/fts0blex.cc	679;"	d	file:
yyterminate	fts/fts0tlex.cc	675;"	d	file:
yyterminate	pars/lexyy.cc	1095;"	d	file:
yytext	fts/fts0blex.cc	173;"	d	file:
yytext	fts/fts0tlex.cc	172;"	d	file:
yytext	include/fts0blex.h	165;"	d
yytext	include/fts0tlex.h	164;"	d
yytext	pars/lexyy.cc	/^static char *yytext;$/;"	v	file:
yytext_ptr	fts/fts0blex.cc	384;"	d	file:
yytext_ptr	fts/fts0tlex.cc	383;"	d	file:
yytext_ptr	include/fts0blex.h	265;"	d
yytext_ptr	include/fts0tlex.h	264;"	d
yytext_ptr	pars/lexyy.cc	361;"	d	file:
yytext_r	fts/fts0blex.cc	/^    char *yytext_r;$/;"	m	struct:yyguts_t	file:
yytext_r	fts/fts0tlex.cc	/^    char *yytext_r;$/;"	m	struct:yyguts_t	file:
yytname	fts/fts0pars.cc	/^static const char *const yytname[] = {$/;"	v	file:
yytname	pars/pars0grm.cc	/^static const char *const yytname[] =$/;"	v	file:
yytnamerr	fts/fts0pars.cc	/^yytnamerr (char *yyres, const char *yystr)$/;"	f	file:
yytnamerr	pars/pars0grm.cc	/^yytnamerr (char *yyres, const char *yystr)$/;"	f	file:
yytokentype	fts/fts0pars.cc	/^   enum yytokentype {$/;"	g	file:
yytokentype	include/fts0pars.h	/^   enum yytokentype {$/;"	g
yytokentype	include/pars0grm.h	/^enum yytokentype {$/;"	g
yytokentype	pars/pars0grm.cc	/^  enum yytokentype$/;"	g	file:
yytoknum	fts/fts0pars.cc	/^static const yytype_uint16 yytoknum[] =$/;"	v	file:
yytoknum	pars/pars0grm.cc	/^static const yytype_uint16 yytoknum[] =$/;"	v	file:
yytranslate	fts/fts0pars.cc	/^static const yytype_uint8 yytranslate[] =$/;"	v	file:
yytranslate	pars/pars0grm.cc	/^static const yytype_uint8 yytranslate[] =$/;"	v	file:
yytype_int16	fts/fts0pars.cc	/^typedef YYTYPE_INT16 yytype_int16;$/;"	t	file:
yytype_int16	fts/fts0pars.cc	/^typedef short int yytype_int16;$/;"	t	file:
yytype_int16	pars/pars0grm.cc	/^typedef YYTYPE_INT16 yytype_int16;$/;"	t	file:
yytype_int16	pars/pars0grm.cc	/^typedef short int yytype_int16;$/;"	t	file:
yytype_int8	fts/fts0pars.cc	/^typedef YYTYPE_INT8 yytype_int8;$/;"	t	file:
yytype_int8	fts/fts0pars.cc	/^typedef short int yytype_int8;$/;"	t	file:
yytype_int8	fts/fts0pars.cc	/^typedef signed char yytype_int8;$/;"	t	file:
yytype_int8	pars/pars0grm.cc	/^typedef YYTYPE_INT8 yytype_int8;$/;"	t	file:
yytype_int8	pars/pars0grm.cc	/^typedef signed char yytype_int8;$/;"	t	file:
yytype_uint16	fts/fts0pars.cc	/^typedef YYTYPE_UINT16 yytype_uint16;$/;"	t	file:
yytype_uint16	fts/fts0pars.cc	/^typedef unsigned short int yytype_uint16;$/;"	t	file:
yytype_uint16	pars/pars0grm.cc	/^typedef YYTYPE_UINT16 yytype_uint16;$/;"	t	file:
yytype_uint16	pars/pars0grm.cc	/^typedef unsigned short int yytype_uint16;$/;"	t	file:
yytype_uint8	fts/fts0pars.cc	/^typedef YYTYPE_UINT8 yytype_uint8;$/;"	t	file:
yytype_uint8	fts/fts0pars.cc	/^typedef unsigned char yytype_uint8;$/;"	t	file:
yytype_uint8	pars/pars0grm.cc	/^typedef YYTYPE_UINT8 yytype_uint8;$/;"	t	file:
yytype_uint8	pars/pars0grm.cc	/^typedef unsigned char yytype_uint8;$/;"	t	file:
yyvs_alloc	fts/fts0pars.cc	/^  YYSTYPE yyvs_alloc;$/;"	m	union:yyalloc	file:
yyvs_alloc	pars/pars0grm.cc	/^  YYSTYPE yyvs_alloc;$/;"	m	union:yyalloc	file:
yywrap	pars/lexyy.cc	347;"	d	file:
zInserter	include/lob0zip.h	/^  zInserter(InsertContext *ctx) : BaseInserter(ctx), m_heap(nullptr) {}$/;"	f	class:lob::zInserter
zInserter	include/lob0zip.h	/^class zInserter : private BaseInserter {$/;"	c	namespace:lob
zReader	include/lob0lob.h	/^  explicit zReader(const ReadContext &ctx) : m_rctx(ctx) {}$/;"	f	struct:lob::zReader
zReader	include/lob0lob.h	/^struct zReader {$/;"	s	namespace:lob
z_data_page_t	include/lob0impl.h	/^  z_data_page_t(buf_block_t *block)$/;"	f	struct:lob::z_data_page_t
z_data_page_t	include/lob0impl.h	/^  z_data_page_t(buf_block_t *block, mtr_t *mtr, dict_index_t *index)$/;"	f	struct:lob::z_data_page_t
z_data_page_t	include/lob0impl.h	/^  z_data_page_t(mtr_t *mtr, dict_index_t *index)$/;"	f	struct:lob::z_data_page_t
z_data_page_t	include/lob0impl.h	/^struct z_data_page_t {$/;"	s	namespace:lob
z_find_offset	lob/zlob0update.cc	/^fil_addr_t z_find_offset(trx_t *trx, dict_index_t *index, fil_addr_t node_loc,$/;"	f	namespace:lob
z_first_page_t	include/zlob0first.h	/^  z_first_page_t() : m_block(nullptr), m_mtr(nullptr), m_index(nullptr) {}$/;"	f	struct:lob::z_first_page_t
z_first_page_t	include/zlob0first.h	/^  z_first_page_t(buf_block_t *block) : m_block(block) {}$/;"	f	struct:lob::z_first_page_t
z_first_page_t	include/zlob0first.h	/^  z_first_page_t(buf_block_t *block, mtr_t *mtr, dict_index_t *index)$/;"	f	struct:lob::z_first_page_t
z_first_page_t	include/zlob0first.h	/^  z_first_page_t(mtr_t *mtr, dict_index_t *index)$/;"	f	struct:lob::z_first_page_t
z_first_page_t	include/zlob0first.h	/^struct z_first_page_t {$/;"	s	namespace:lob
z_frag_entry_t	include/lob0impl.h	/^  z_frag_entry_t() : m_node(nullptr), m_mtr(nullptr) {}$/;"	f	struct:lob::z_frag_entry_t
z_frag_entry_t	include/lob0impl.h	/^  z_frag_entry_t(flst_node_t *node, mtr_t *mtr) : m_node(node), m_mtr(mtr) {}$/;"	f	struct:lob::z_frag_entry_t
z_frag_entry_t	include/lob0impl.h	/^  z_frag_entry_t(mtr_t *mtr) : m_node(nullptr), m_mtr(mtr) {}$/;"	f	struct:lob::z_frag_entry_t
z_frag_entry_t	include/lob0impl.h	/^struct z_frag_entry_t {$/;"	s	namespace:lob
z_frag_node_page_t	include/lob0impl.h	/^  explicit z_frag_node_page_t(buf_block_t *block)$/;"	f	struct:lob::z_frag_node_page_t
z_frag_node_page_t	include/lob0impl.h	/^  z_frag_node_page_t(mtr_t *mtr, dict_index_t *index)$/;"	f	struct:lob::z_frag_node_page_t
z_frag_node_page_t	include/lob0impl.h	/^struct z_frag_node_page_t {$/;"	s	namespace:lob
z_frag_page_t	include/lob0impl.h	/^  explicit z_frag_page_t(buf_block_t *block)$/;"	f	struct:lob::z_frag_page_t
z_frag_page_t	include/lob0impl.h	/^  z_frag_page_t(buf_block_t *block, mtr_t *mtr, dict_index_t *index)$/;"	f	struct:lob::z_frag_page_t
z_frag_page_t	include/lob0impl.h	/^  z_frag_page_t(mtr_t *mtr, dict_index_t *index)$/;"	f	struct:lob::z_frag_page_t
z_frag_page_t	include/lob0impl.h	/^struct z_frag_page_t {$/;"	s	namespace:lob
z_index_entry_mem_t	include/zlob0index.h	/^  z_index_entry_mem_t()$/;"	f	struct:lob::z_index_entry_mem_t
z_index_entry_mem_t	include/zlob0index.h	/^struct z_index_entry_mem_t {$/;"	s	namespace:lob
z_index_entry_t	include/zlob0index.h	/^  z_index_entry_t()$/;"	f	struct:lob::z_index_entry_t
z_index_entry_t	include/zlob0index.h	/^  z_index_entry_t(flst_node_t *node)$/;"	f	struct:lob::z_index_entry_t
z_index_entry_t	include/zlob0index.h	/^  z_index_entry_t(flst_node_t *node, mtr_t *mtr) : m_node(node), m_mtr(mtr) {}$/;"	f	struct:lob::z_index_entry_t
z_index_entry_t	include/zlob0index.h	/^  z_index_entry_t(flst_node_t *node, mtr_t *mtr, dict_index_t *index)$/;"	f	struct:lob::z_index_entry_t
z_index_entry_t	include/zlob0index.h	/^  z_index_entry_t(mtr_t *mtr, dict_index_t *index)$/;"	f	struct:lob::z_index_entry_t
z_index_entry_t	include/zlob0index.h	/^struct z_index_entry_t {$/;"	s	namespace:lob
z_index_page_t	include/lob0impl.h	/^  explicit z_index_page_t(buf_block_t *block)$/;"	f	struct:lob::z_index_page_t
z_index_page_t	include/lob0impl.h	/^  explicit z_index_page_t(mtr_t *mtr) : m_block(nullptr), m_mtr(mtr) {}$/;"	f	struct:lob::z_index_page_t
z_index_page_t	include/lob0impl.h	/^  z_index_page_t(buf_block_t *block, dict_index_t *index)$/;"	f	struct:lob::z_index_page_t
z_index_page_t	include/lob0impl.h	/^  z_index_page_t(buf_block_t *block, mtr_t *mtr, dict_index_t *index)$/;"	f	struct:lob::z_index_page_t
z_index_page_t	include/lob0impl.h	/^  z_index_page_t(mtr_t *mtr, dict_index_t *index)$/;"	f	struct:lob::z_index_page_t
z_index_page_t	include/lob0impl.h	/^struct z_index_page_t {$/;"	s	namespace:lob
z_insert	lob/lob0impl.cc	/^dberr_t z_insert(InsertContext *ctx, trx_t *trx, ref_t &ref,$/;"	f	namespace:lob
z_insert_chunk	lob/lob0impl.cc	/^dberr_t z_insert_chunk(dict_index_t *index, z_first_page_t &first, trx_t *trx,$/;"	f	namespace:lob
z_insert_strm	lob/lob0impl.cc	/^dberr_t z_insert_strm(dict_index_t *index, z_first_page_t &first,$/;"	f	namespace:lob
z_print_info	lob/lob0impl.cc	/^dberr_t z_print_info(const dict_index_t *index, const lob::ref_t &ref,$/;"	f	namespace:lob
z_print_partial_update_hit	lob/zlob0update.cc	/^static void z_print_partial_update_hit(upd_field_t *uf, dict_index_t *index) {$/;"	f	namespace:lob
z_purge	lob/lob0purge.cc	/^static void z_purge(DeleteContext *ctx, dict_index_t *index, trx_id_t trxid,$/;"	f	namespace:lob
z_read	lob/zlob0read.cc	/^ulint z_read(ReadContext *ctx, lob::ref_t ref, ulint offset, ulint len,$/;"	f	namespace:lob
z_read_chunk	lob/zlob0read.cc	/^ulint z_read_chunk(dict_index_t *index, z_index_entry_t &entry, ulint offset,$/;"	f	namespace:lob
z_read_strm	lob/zlob0read.cc	/^ulint z_read_strm(dict_index_t *index, z_index_entry_t &entry, byte *zbuf,$/;"	f	namespace:lob
z_replace	lob/zlob0update.cc	/^static dberr_t z_replace(InsertContext &ctx, trx_t *trx, dict_index_t *index,$/;"	f	namespace:lob
z_rollback	lob/lob0purge.cc	/^static void z_rollback(DeleteContext *ctx, dict_index_t *index, trx_id_t trxid,$/;"	f	namespace:lob
z_update	lob/zlob0update.cc	/^dberr_t z_update(InsertContext &ctx, trx_t *trx, dict_index_t *index,$/;"	f	namespace:lob
z_validate_strm	lob/zlob0read.cc	/^bool z_validate_strm(dict_index_t *index, z_index_entry_t &entry, mtr_t *mtr) {$/;"	f	namespace:lob
z_validate_strm_low	lob/zlob0read.cc	/^static bool z_validate_strm_low(dict_index_t *index, z_index_entry_t &entry,$/;"	f	namespace:lob
zblob_write_blobref	include/lob0lob.h	/^  void zblob_write_blobref(ulint field_no, mtr_t *mtr) {$/;"	f	class:lob::BtrContext
zip	fts/fts0opt.cc	/^  fts_zip_t *zip; \/*!< Words read from the FTS_INDEX *\/$/;"	m	struct:fts_optimize_t	file:
zip	include/buf0buf.h	/^  page_zip_des_t zip;$/;"	m	class:Cache_hint::buf_page_t
zip_clean	include/buf0buf.h	/^  UT_LIST_BASE_NODE_T(buf_page_t) zip_clean;$/;"	m	struct:Cache_hint::buf_pool_t
zip_decompress_h	page/zipdecompress.h	39;"	d
zip_failure_threshold_pct	dict/dict0dict.cc	/^ulong zip_failure_threshold_pct = 5;$/;"	v
zip_free	include/buf0buf.h	/^  UT_LIST_BASE_NODE_T(buf_buddy_free_t) zip_free[BUF_BUDDY_SIZES_MAX];$/;"	m	struct:Cache_hint::buf_pool_t
zip_free_mutex	include/buf0buf.h	/^  BufListMutex zip_free_mutex;$/;"	m	struct:Cache_hint::buf_pool_t
zip_hash	include/buf0buf.h	/^  hash_table_t *zip_hash;$/;"	m	struct:Cache_hint::buf_pool_t
zip_hash_mutex	include/buf0buf.h	/^  BufListMutex zip_hash_mutex;$/;"	m	struct:Cache_hint::buf_pool_t
zip_mutex	include/buf0buf.h	/^  BufPoolZipMutex zip_mutex;$/;"	m	struct:Cache_hint::buf_pool_t
zip_pad	include/dict0mem.h	/^  zip_pad_info_t zip_pad;      \/*!< Information about state of$/;"	m	struct:dict_index_t
zip_pad_info_t	include/dict0mem.h	/^struct zip_pad_info_t {$/;"	s
zip_pad_max	dict/dict0dict.cc	/^ulong zip_pad_max = 50;$/;"	v
zip_pad_mutex_key	sync/sync0sync.cc	/^mysql_pfs_key_t zip_pad_mutex_key;$/;"	v
zip_page_handler	buf/buf0buf.cc	/^dberr_t Buf_fetch<T>::zip_page_handler(buf_block_t *&fix_block) {$/;"	f	class:Buf_fetch
zlob0first_h	include/zlob0first.h	27;"	d
zlob0index_h	include/zlob0index.h	27;"	d
zlob0read_h	include/zlob0read.h	27;"	d
zp	fts/fts0opt.cc	/^  z_streamp zp; \/*!< ZLib state *\/$/;"	m	struct:fts_zip_t	file:
~AIO	os/os0file.cc	/^AIO::~AIO() {$/;"	f	class:AIO
~Altered_partitions	handler/handler0alter.cc	/^Altered_partitions::~Altered_partitions() {$/;"	f	class:Altered_partitions
~Arch_Dblwr_Ctx	include/arch0recv.h	/^  ~Arch_Dblwr_Ctx() {$/;"	f	class:Arch_Dblwr_Ctx
~Arch_File_Ctx	include/arch0arch.h	/^  ~Arch_File_Ctx() {$/;"	f	class:Arch_File_Ctx
~Arch_Group	arch/arch0page.cc	/^Arch_Group::~Arch_Group() {$/;"	f	class:Arch_Group
~Arch_Log_Sys	include/arch0arch.h	/^  ~Arch_Log_Sys() {$/;"	f	class:Arch_Log_Sys
~Arch_Page_Sys	arch/arch0page.cc	/^Arch_Page_Sys::~Arch_Page_Sys() {$/;"	f	class:Arch_Page_Sys
~Being_modified	lob/lob0lob.cc	/^  ~Being_modified() {$/;"	f	struct:lob::Being_modified
~Bitset	include/ut0bitset.h	/^  ~Bitset() {}$/;"	f	class:Bitset
~Block	log/log0meb.cc	/^  ~Block() { reset(); }$/;"	f	class:meb::Block
~BlockMutexPolicy	include/sync0policy.h	/^  ~BlockMutexPolicy() {}$/;"	f	class:BlockMutexPolicy
~BlockReporter	include/buf0checksum.h	/^  virtual ~BlockReporter() {}$/;"	f	class:BlockReporter
~BtrBulk	btr/btr0bulk.cc	/^BtrBulk::~BtrBulk() {$/;"	f	class:BtrBulk
~Clone_Handle	clone/clone0clone.cc	/^Clone_Handle::~Clone_Handle() {$/;"	f	class:Clone_Handle
~Clone_Monitor	include/clone0monitor.h	/^  ~Clone_Monitor() {$/;"	f	class:Clone_Monitor
~Clone_Snapshot	clone/clone0snapshot.cc	/^Clone_Snapshot::~Clone_Snapshot() {$/;"	f	class:Clone_Snapshot
~Clone_Sys	clone/clone0clone.cc	/^Clone_Sys::~Clone_Sys() {$/;"	f	class:Clone_Sys
~Clone_persist_gtid	include/clone0repl.h	/^  ~Clone_persist_gtid() {$/;"	f	class:Clone_persist_gtid
~Command	mtr/mtr0mtr.cc	/^  ~Command() { ut_ad(m_impl == nullptr); }$/;"	f	class:mtr_t::Command
~Ctx	row/row0pread.cc	/^Parallel_reader::Ctx::~Ctx() {}$/;"	f	class:Parallel_reader::Ctx
~DDL_Log_Table	log/log0ddl.cc	/^DDL_Log_Table::~DDL_Log_Table() {$/;"	f	class:DDL_Log_Table
~DDL_Record	log/log0ddl.cc	/^DDL_Record::~DDL_Record() {$/;"	f	class:DDL_Record
~DDTableBuffer	dict/dict0dict.cc	/^DDTableBuffer::~DDTableBuffer() { close(); }$/;"	f	class:DDTableBuffer
~DD_instant_col_val_coder	include/dict0dd.h	/^  ~DD_instant_col_val_coder() { cleanup(); }$/;"	f	class:DD_instant_col_val_coder
~Datafile	include/fsp0file.h	/^  ~Datafile() { shutdown(); }$/;"	f	class:Datafile
~Fil_shard	fil/fil0fil.cc	/^  ~Fil_shard() {$/;"	f	class:Fil_shard
~Fil_system	fil/fil0fil.cc	/^Fil_system::~Fil_system() {$/;"	f	class:Fil_system
~GenericPolicy	include/sync0policy.h	/^  ~GenericPolicy() {}$/;"	f	struct:GenericPolicy
~Global_exclusive_latch_guard	lock/lock0guards.cc	/^Global_exclusive_latch_guard::~Global_exclusive_latch_guard() {$/;"	f	class:locksys::Global_exclusive_latch_guard
~Global_exclusive_try_latch	lock/lock0guards.cc	/^Global_exclusive_try_latch::~Global_exclusive_try_latch() {$/;"	f	class:locksys::Global_exclusive_try_latch
~Global_shared_latch_guard	lock/lock0guards.cc	/^Global_shared_latch_guard::~Global_shared_latch_guard() {$/;"	f	class:locksys::Global_shared_latch_guard
~Guardian	log/log0meb.cc	/^  ~Guardian() {$/;"	f	class:meb::Guardian
~Ha_innopart_share	handler/ha_innopart.cc	/^Ha_innopart_share::~Ha_innopart_share() {$/;"	f	class:Ha_innopart_share
~HazardPointer	include/buf0buf.h	/^  virtual ~HazardPointer() {}$/;"	f	class:Cache_hint::HazardPointer
~Histogram_sampler	row/row0pread-histogram.cc	/^Histogram_sampler::~Histogram_sampler() {$/;"	f	class:Histogram_sampler
~IB_mutex_guard	include/ut0mutex.h	/^  ~IB_mutex_guard() { mutex_exit(m_mutex); }$/;"	f	struct:IB_mutex_guard
~Innodb_data_lock_inspector	handler/p_s.cc	/^Innodb_data_lock_inspector::~Innodb_data_lock_inspector() {}$/;"	f	class:Innodb_data_lock_inspector
~Innodb_data_lock_iterator	handler/p_s.cc	/^Innodb_data_lock_iterator::~Innodb_data_lock_iterator() {}$/;"	f	class:Innodb_data_lock_iterator
~Innodb_data_lock_wait_iterator	handler/p_s.cc	/^Innodb_data_lock_wait_iterator::~Innodb_data_lock_wait_iterator() {}$/;"	f	class:Innodb_data_lock_wait_iterator
~Innodb_trx_scan_state	handler/p_s.cc	/^  ~Innodb_trx_scan_state() {}$/;"	f	class:Innodb_trx_scan_state
~Inserter	include/lob0ins.h	/^  ~Inserter() {}$/;"	f	class:lob::Inserter
~Iter	row/row0pread.cc	/^Parallel_reader::Scan_ctx::Iter::~Iter() {$/;"	f	class:Parallel_reader::Scan_ctx::Iter
~LatchMeta	include/sync0types.h	/^  ~LatchMeta() {}$/;"	f	class:LatchMeta
~Latches	include/lock0latches.h	/^  ~Latches() {}$/;"	f	class:locksys::Latches
~Link_buf	include/ut0link_buf.h	/^Link_buf<Position>::~Link_buf() {$/;"	f	class:Link_buf
~LinuxAIOHandler	os/os0file.cc	/^  ~LinuxAIOHandler() {$/;"	f	class:LinuxAIOHandler
~Log_DDL	include/log0ddl.h	/^  ~Log_DDL() {}$/;"	f	class:Log_Type::Log_DDL
~MVCC	read/read0read.cc	/^MVCC::~MVCC() {$/;"	f	class:MVCC
~MetadataRecover	log/log0recv.cc	/^MetadataRecover::~MetadataRecover() {$/;"	f	class:MetadataRecover
~Multi_value_entry_builder	include/row0row.h	/^  virtual ~Multi_value_entry_builder() {}$/;"	f	class:Multi_value_entry_builder
~MutexDebug	include/sync0policy.h	/^  virtual ~MutexDebug() {}$/;"	f	class:MutexDebug
~MutexMonitor	include/ut0mutex.h	/^  ~MutexMonitor() {}$/;"	f	class:MutexMonitor
~OSMutex	include/sync0types.h	/^  ~OSMutex() {}$/;"	f	struct:OSMutex
~PageBulk	include/btr0bulk.h	/^  ~PageBulk() {$/;"	f	class:PageBulk
~Page_Arch_Client_Ctx	include/arch0page.h	/^  ~Page_Arch_Client_Ctx() { mutex_free(&m_mutex); }$/;"	f	class:Page_Arch_Client_Ctx
~Page_shards	lock/lock0latches.cc	/^Latches::Page_shards::~Page_shards() {$/;"	f	class:locksys::Latches::Page_shards
~Parallel_reader	row/row0pread.cc	/^Parallel_reader::~Parallel_reader() {$/;"	f	class:Parallel_reader
~Persister	include/dict0mem.h	/^  virtual ~Persister() {}$/;"	f	class:Persister
~Persisters	dict/dict0dict.cc	/^Persisters::~Persisters() {$/;"	f	class:Persisters
~Pool	include/ut0pool.h	/^  ~Pool() {$/;"	f	struct:Pool
~PoolManager	include/ut0pool.h	/^  ~PoolManager() {$/;"	f	struct:PoolManager
~ReadView	read/read0read.cc	/^ReadView::~ReadView() {$/;"	f	class:ReadView
~Rec_offsets	include/rem0rec.h	/^  ~Rec_offsets() {$/;"	f	class:Rec_offsets
~Recv	include/arch0recv.h	/^  ~Recv() {}$/;"	f	class:Arch_Page_Sys::Recv
~Rsegs	include/trx0types.h	/^  ~Rsegs() {$/;"	f	class:Rsegs
~Scan_ctx	row/row0pread.cc	/^Parallel_reader::Scan_ctx::~Scan_ctx() {}$/;"	f	class:Parallel_reader::Scan_ctx
~Sdi_Compressor	include/dict0sdi.h	/^  ~Sdi_Compressor() { ut_free(m_comp_sdi); }$/;"	f	class:Sdi_Compressor
~Sdi_Decompressor	include/dict0sdi-decompress.h	/^  ~Sdi_Decompressor() {}$/;"	f	class:Sdi_Decompressor
~Segment	buf/buf0dblwr.cc	/^  virtual ~Segment() {}$/;"	f	class:Segment
~Shard_naked_latch_guard	lock/lock0guards.cc	/^Shard_naked_latch_guard::~Shard_naked_latch_guard() {$/;"	f	class:locksys::Shard_naked_latch_guard
~Shard_naked_latches_guard	lock/lock0guards.cc	/^Shard_naked_latches_guard::~Shard_naked_latches_guard() {$/;"	f	class:locksys::Shard_naked_latches_guard
~SimulatedAIOHandler	os/os0file.cc	/^  ~SimulatedAIOHandler() {$/;"	f	class:SimulatedAIOHandler
~SyncFileIO	os/os0file.cc	/^  ~SyncFileIO() { \/* No op *\/$/;"	f	class:SyncFileIO
~Sync_point	include/log0test.h	/^    virtual ~Sync_point() {}$/;"	f	class:Log_test::Sync_point
~SysIndexCallback	include/row0mysql.h	/^  virtual ~SysIndexCallback() {}$/;"	f	struct:SysIndexCallback
~TTASFutexMutex	include/ib0mutex.h	/^  ~TTASFutexMutex() { ut_a(m_lock_word == MUTEX_STATE_UNLOCKED); }$/;"	f
~TableStatsRecord	dict/dict0stats.cc	/^TableStatsRecord::~TableStatsRecord() {$/;"	f	class:TableStatsRecord
~Table_shards	lock/lock0latches.cc	/^Latches::Table_shards::~Table_shards() {$/;"	f	class:locksys::Latches::Table_shards
~Tablespace	include/fsp0space.h	/^  virtual ~Tablespace() {$/;"	f	class:Tablespace
~Tablespace	include/trx0purge.h	/^  ~Tablespace() {$/;"	f	struct:undo::Tablespace
~Tablespace	srv/srv0tmp.cc	/^Tablespace::~Tablespace() {$/;"	f	class:ibt::Tablespace
~Tablespace_pool	srv/srv0tmp.cc	/^Tablespace_pool::~Tablespace_pool() {$/;"	f	class:ibt::Tablespace_pool
~Tablespaces	include/trx0purge.h	/^  ~Tablespaces() { deinit(); }$/;"	f	class:undo::Tablespaces
~TrxInInnoDB	include/trx0trx.h	/^  ~TrxInInnoDB() { exit(m_trx); }$/;"	f	class:TrxInInnoDB
~Unique_sharded_rw_lock	lock/lock0latches.cc	/^Latches::Unique_sharded_rw_lock::~Unique_sharded_rw_lock() { rw_lock.free(); }$/;"	f	class:locksys::Latches::Unique_sharded_rw_lock
~aligned_array_pointer	include/ut0new.h	/^  ~aligned_array_pointer() {$/;"	f	class:ut::aligned_array_pointer
~aligned_memory	include/ut0new.h	/^  virtual ~aligned_memory() {$/;"	f	class:aligned_memory
~aligned_pointer	include/ut0new.h	/^  ~aligned_pointer() {$/;"	f	class:ut::aligned_pointer
~alter_part	handler/handler0alter.cc	/^  virtual ~alter_part() {}$/;"	f	class:alter_part
~alter_part_factory	handler/handler0alter.cc	/^  ~alter_part_factory() {}$/;"	f	class:alter_part_factory
~alter_parts	handler/handler0alter.cc	/^alter_parts::~alter_parts() {$/;"	f	class:alter_parts
~block_t	include/dyn0buf.h	/^    ~block_t() {}$/;"	f	class:dyn_buf_t::block_t
~bool_scope_guard_t	include/ut0bool_scope_guard.h	/^  ~bool_scope_guard_t() {$/;"	f	class:ut::bool_scope_guard_t
~buf_stat_per_index_t	include/buf0stats.h	/^  ~buf_stat_per_index_t() { UT_DELETE(m_store); }$/;"	f	class:buf_stat_per_index_t
~dict_foreign_set_free	include/dict0mem.h	/^  ~dict_foreign_set_free() {$/;"	f	struct:dict_foreign_set_free
~dict_intrinsic_table_t	include/sess0sess.h	/^  ~dict_intrinsic_table_t() { m_handler = nullptr; }$/;"	f	class:dict_intrinsic_table_t
~dyn_buf_t	include/dyn0buf.h	/^  ~dyn_buf_t() { erase(); }$/;"	f	class:dyn_buf_t
~fatal	ut/ut0ut.cc	/^fatal::~fatal() {$/;"	f	class:ib::fatal
~fatal_or_error	ut/ut0ut.cc	/^fatal_or_error::~fatal_or_error() {$/;"	f	class:ib::fatal_or_error
~fts_t	fts/fts0fts.cc	/^fts_t::~fts_t() {$/;"	f	class:fts_t
~ha_innobase	handler/ha_innodb.cc	/^ha_innobase::~ha_innobase() {}$/;"	f	class:ha_innobase
~ha_innopart	handler/ha_innopart.cc	/^ha_innopart::~ha_innopart() {}$/;"	f	class:ha_innopart
~ib_counter_t	include/ut0counter.h	/^  ~ib_counter_t() { ut_ad(validate()); }$/;"	f	class:ib_counter_t
~ib_dec_in_dtor	row/row0ins.cc	/^  ~ib_dec_in_dtor() { counter.fetch_sub(1); }$/;"	f	class:ib_dec_in_dtor
~ids_t	include/read0types.h	/^    ~ids_t() { UT_DELETE_ARRAY(m_ptr); }$/;"	f	class:ReadView::ids_t
~index_tuple_info_t	row/row0merge.cc	/^  ~index_tuple_info_t() { UT_DELETE(m_dtuple_vec); }$/;"	f	class:index_tuple_info_t
~innobase_truncate	handler/ha_innodb.cc	/^innobase_truncate<Table>::~innobase_truncate() {$/;"	f	class:innobase_truncate
~innodb_session_t	include/sess0sess.h	/^  ~innodb_session_t() {$/;"	f	class:innodb_session_t
~logger	ut/ut0ut.cc	/^logger::~logger() { log_event(m_oss.str()); }$/;"	f	class:ib::logger
~mem_heap_allocator	include/mem0mem.h	/^  ~mem_heap_allocator() { m_heap = nullptr; }$/;"	f	class:mem_heap_allocator
~mpmc_bq	include/ut0mpmcbq.h	/^  ~mpmc_bq() { UT_DELETE_ARRAY(m_ring); }$/;"	f	class:mpmc_bq
~mtr_t	include/mtr0mtr.h	/^  ~mtr_t() {$/;"	f	struct:mtr_t
~rec_printer	include/rem0rec.h	/^  virtual ~rec_printer() {}$/;"	f	class:rec_printer
~set_numa_interleave_t	buf/buf0buf.cc	/^  ~set_numa_interleave_t() {$/;"	f	struct:set_numa_interleave_t
~sync_check_functor_t	include/sync0types.h	/^  virtual ~sync_check_functor_t() {}$/;"	f	struct:sync_check_functor_t
~undo_vers_t	include/lob0undo.h	/^  ~undo_vers_t() { destroy(); }$/;"	f	struct:lob::undo_vers_t
~ut_chrono_t	include/ut0dbg.h	/^  ~ut_chrono_t() {$/;"	f	class:ut_chrono_t
~ut_hash_interface_t	include/ut0lock_free_hash.h	/^  virtual ~ut_hash_interface_t() {}$/;"	f	class:ut_hash_interface_t
~ut_lock_free_cnt_t	include/ut0lock_free_hash.h	/^  ~ut_lock_free_cnt_t() {$/;"	f	class:ut_lock_free_cnt_t
~ut_lock_free_list_node_t	include/ut0lock_free_hash.h	/^  ~ut_lock_free_list_node_t() { UT_DELETE_ARRAY(m_base); }$/;"	f	class:ut_lock_free_list_node_t
~ut_stage_alter_t	include/ut0stage.h	/^inline ut_stage_alter_t::~ut_stage_alter_t() {$/;"	f	class:ut_stage_alter_t
~ut_stage_alter_ts	include/ut0stage.h	/^  inline ~ut_stage_alter_ts() {$/;"	f	class:ut_stage_alter_ts
~ut_stage_alter_ts	include/ut0stage.h	/^  inline ~ut_stage_alter_ts() {}$/;"	f	class:ut_stage_alter_ts
~zInserter	include/lob0zip.h	/^inline zInserter::~zInserter() {$/;"	f	class:lob::zInserter
